
STM32F103C8T6-Clock-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aebc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cf8  0800afd0  0800afd0  0000bfd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dcc8  0800dcc8  0000f1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800dcc8  0800dcc8  0000ecc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dcd0  0800dcd0  0000f1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dcd0  0800dcd0  0000ecd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dcd4  0800dcd4  0000ecd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800dcd8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ec  200001dc  0800deb4  0000f1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008c8  0800deb4  0000f8c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f957  00000000  00000000  0000f205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a9c  00000000  00000000  0001eb5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  000215f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d2c  00000000  00000000  00022700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019996  00000000  00000000  0002342c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016192  00000000  00000000  0003cdc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fdfb  00000000  00000000  00052f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2d4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d2c  00000000  00000000  000e2d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000e8ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800afb4 	.word	0x0800afb4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800afb4 	.word	0x0800afb4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_d2lz>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	2200      	movs	r2, #0
 8001074:	2300      	movs	r3, #0
 8001076:	4604      	mov	r4, r0
 8001078:	460d      	mov	r5, r1
 800107a:	f7ff fc9f 	bl	80009bc <__aeabi_dcmplt>
 800107e:	b928      	cbnz	r0, 800108c <__aeabi_d2lz+0x1c>
 8001080:	4620      	mov	r0, r4
 8001082:	4629      	mov	r1, r5
 8001084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001088:	f000 b80a 	b.w	80010a0 <__aeabi_d2ulz>
 800108c:	4620      	mov	r0, r4
 800108e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001092:	f000 f805 	bl	80010a0 <__aeabi_d2ulz>
 8001096:	4240      	negs	r0, r0
 8001098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800109c:	bd38      	pop	{r3, r4, r5, pc}
 800109e:	bf00      	nop

080010a0 <__aeabi_d2ulz>:
 80010a0:	b5d0      	push	{r4, r6, r7, lr}
 80010a2:	2200      	movs	r2, #0
 80010a4:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <__aeabi_d2ulz+0x34>)
 80010a6:	4606      	mov	r6, r0
 80010a8:	460f      	mov	r7, r1
 80010aa:	f7ff fa15 	bl	80004d8 <__aeabi_dmul>
 80010ae:	f7ff fceb 	bl	8000a88 <__aeabi_d2uiz>
 80010b2:	4604      	mov	r4, r0
 80010b4:	f7ff f996 	bl	80003e4 <__aeabi_ui2d>
 80010b8:	2200      	movs	r2, #0
 80010ba:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <__aeabi_d2ulz+0x38>)
 80010bc:	f7ff fa0c 	bl	80004d8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4630      	mov	r0, r6
 80010c6:	4639      	mov	r1, r7
 80010c8:	f7ff f84e 	bl	8000168 <__aeabi_dsub>
 80010cc:	f7ff fcdc 	bl	8000a88 <__aeabi_d2uiz>
 80010d0:	4621      	mov	r1, r4
 80010d2:	bdd0      	pop	{r4, r6, r7, pc}
 80010d4:	3df00000 	.word	0x3df00000
 80010d8:	41f00000 	.word	0x41f00000

080010dc <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	@ 0x30
 80010e0:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	9302      	str	r3, [sp, #8]
 80010e8:	2319      	movs	r3, #25
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	463b      	mov	r3, r7
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	2288      	movs	r2, #136	@ 0x88
 80010f4:	21ec      	movs	r1, #236	@ 0xec
 80010f6:	4857      	ldr	r0, [pc, #348]	@ (8001254 <TrimRead+0x178>)
 80010f8:	f002 ff54 	bl	8003fa4 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80010fc:	463b      	mov	r3, r7
 80010fe:	3319      	adds	r3, #25
 8001100:	f04f 32ff 	mov.w	r2, #4294967295
 8001104:	9202      	str	r2, [sp, #8]
 8001106:	2207      	movs	r2, #7
 8001108:	9201      	str	r2, [sp, #4]
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2301      	movs	r3, #1
 800110e:	22e1      	movs	r2, #225	@ 0xe1
 8001110:	21ec      	movs	r1, #236	@ 0xec
 8001112:	4850      	ldr	r0, [pc, #320]	@ (8001254 <TrimRead+0x178>)
 8001114:	f002 ff46 	bl	8003fa4 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8001118:	787b      	ldrb	r3, [r7, #1]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	b21a      	sxth	r2, r3
 800111e:	783b      	ldrb	r3, [r7, #0]
 8001120:	b21b      	sxth	r3, r3
 8001122:	4313      	orrs	r3, r2
 8001124:	b21b      	sxth	r3, r3
 8001126:	b29a      	uxth	r2, r3
 8001128:	4b4b      	ldr	r3, [pc, #300]	@ (8001258 <TrimRead+0x17c>)
 800112a:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 800112c:	78fb      	ldrb	r3, [r7, #3]
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	b21a      	sxth	r2, r3
 8001132:	78bb      	ldrb	r3, [r7, #2]
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	b21a      	sxth	r2, r3
 800113a:	4b48      	ldr	r3, [pc, #288]	@ (800125c <TrimRead+0x180>)
 800113c:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 800113e:	797b      	ldrb	r3, [r7, #5]
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	b21a      	sxth	r2, r3
 8001144:	793b      	ldrb	r3, [r7, #4]
 8001146:	b21b      	sxth	r3, r3
 8001148:	4313      	orrs	r3, r2
 800114a:	b21a      	sxth	r2, r3
 800114c:	4b44      	ldr	r3, [pc, #272]	@ (8001260 <TrimRead+0x184>)
 800114e:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	b21a      	sxth	r2, r3
 8001156:	797b      	ldrb	r3, [r7, #5]
 8001158:	b21b      	sxth	r3, r3
 800115a:	4313      	orrs	r3, r2
 800115c:	b21b      	sxth	r3, r3
 800115e:	b29a      	uxth	r2, r3
 8001160:	4b40      	ldr	r3, [pc, #256]	@ (8001264 <TrimRead+0x188>)
 8001162:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001164:	7a7b      	ldrb	r3, [r7, #9]
 8001166:	021b      	lsls	r3, r3, #8
 8001168:	b21a      	sxth	r2, r3
 800116a:	79bb      	ldrb	r3, [r7, #6]
 800116c:	b21b      	sxth	r3, r3
 800116e:	4313      	orrs	r3, r2
 8001170:	b21a      	sxth	r2, r3
 8001172:	4b3d      	ldr	r3, [pc, #244]	@ (8001268 <TrimRead+0x18c>)
 8001174:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001176:	7afb      	ldrb	r3, [r7, #11]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	b21a      	sxth	r2, r3
 800117c:	7abb      	ldrb	r3, [r7, #10]
 800117e:	b21b      	sxth	r3, r3
 8001180:	4313      	orrs	r3, r2
 8001182:	b21a      	sxth	r2, r3
 8001184:	4b39      	ldr	r3, [pc, #228]	@ (800126c <TrimRead+0x190>)
 8001186:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001188:	7b7b      	ldrb	r3, [r7, #13]
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	b21a      	sxth	r2, r3
 800118e:	7b3b      	ldrb	r3, [r7, #12]
 8001190:	b21b      	sxth	r3, r3
 8001192:	4313      	orrs	r3, r2
 8001194:	b21a      	sxth	r2, r3
 8001196:	4b36      	ldr	r3, [pc, #216]	@ (8001270 <TrimRead+0x194>)
 8001198:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	b21a      	sxth	r2, r3
 80011a0:	7bbb      	ldrb	r3, [r7, #14]
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b21a      	sxth	r2, r3
 80011a8:	4b32      	ldr	r3, [pc, #200]	@ (8001274 <TrimRead+0x198>)
 80011aa:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80011ac:	7c7b      	ldrb	r3, [r7, #17]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	7c3b      	ldrb	r3, [r7, #16]
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	4313      	orrs	r3, r2
 80011b8:	b21a      	sxth	r2, r3
 80011ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001278 <TrimRead+0x19c>)
 80011bc:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80011be:	7cfb      	ldrb	r3, [r7, #19]
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	b21a      	sxth	r2, r3
 80011c4:	7cbb      	ldrb	r3, [r7, #18]
 80011c6:	b21b      	sxth	r3, r3
 80011c8:	4313      	orrs	r3, r2
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	4b2b      	ldr	r3, [pc, #172]	@ (800127c <TrimRead+0x1a0>)
 80011ce:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80011d0:	7d7b      	ldrb	r3, [r7, #21]
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	7d3b      	ldrb	r3, [r7, #20]
 80011d8:	b21b      	sxth	r3, r3
 80011da:	4313      	orrs	r3, r2
 80011dc:	b21a      	sxth	r2, r3
 80011de:	4b28      	ldr	r3, [pc, #160]	@ (8001280 <TrimRead+0x1a4>)
 80011e0:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80011e2:	7dfb      	ldrb	r3, [r7, #23]
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	b21a      	sxth	r2, r3
 80011e8:	7dbb      	ldrb	r3, [r7, #22]
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b21a      	sxth	r2, r3
 80011f0:	4b24      	ldr	r3, [pc, #144]	@ (8001284 <TrimRead+0x1a8>)
 80011f2:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80011f4:	7e3b      	ldrb	r3, [r7, #24]
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b23      	ldr	r3, [pc, #140]	@ (8001288 <TrimRead+0x1ac>)
 80011fa:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80011fc:	7ebb      	ldrb	r3, [r7, #26]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	b21a      	sxth	r2, r3
 8001202:	7e7b      	ldrb	r3, [r7, #25]
 8001204:	b21b      	sxth	r3, r3
 8001206:	4313      	orrs	r3, r2
 8001208:	b21a      	sxth	r2, r3
 800120a:	4b20      	ldr	r3, [pc, #128]	@ (800128c <TrimRead+0x1b0>)
 800120c:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 800120e:	7efb      	ldrb	r3, [r7, #27]
 8001210:	461a      	mov	r2, r3
 8001212:	4b1f      	ldr	r3, [pc, #124]	@ (8001290 <TrimRead+0x1b4>)
 8001214:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8001216:	7f3b      	ldrb	r3, [r7, #28]
 8001218:	011b      	lsls	r3, r3, #4
 800121a:	b21a      	sxth	r2, r3
 800121c:	7f7b      	ldrb	r3, [r7, #29]
 800121e:	b21b      	sxth	r3, r3
 8001220:	f003 030f 	and.w	r3, r3, #15
 8001224:	b21b      	sxth	r3, r3
 8001226:	4313      	orrs	r3, r2
 8001228:	b21a      	sxth	r2, r3
 800122a:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <TrimRead+0x1b8>)
 800122c:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 800122e:	7fbb      	ldrb	r3, [r7, #30]
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	b21a      	sxth	r2, r3
 8001234:	7f7b      	ldrb	r3, [r7, #29]
 8001236:	091b      	lsrs	r3, r3, #4
 8001238:	b2db      	uxtb	r3, r3
 800123a:	b21b      	sxth	r3, r3
 800123c:	4313      	orrs	r3, r2
 800123e:	b21a      	sxth	r2, r3
 8001240:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <TrimRead+0x1bc>)
 8001242:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001244:	7ffb      	ldrb	r3, [r7, #31]
 8001246:	b21a      	sxth	r2, r3
 8001248:	4b14      	ldr	r3, [pc, #80]	@ (800129c <TrimRead+0x1c0>)
 800124a:	801a      	strh	r2, [r3, #0]
}
 800124c:	bf00      	nop
 800124e:	3720      	adds	r7, #32
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000284 	.word	0x20000284
 8001258:	20000208 	.word	0x20000208
 800125c:	20000210 	.word	0x20000210
 8001260:	20000212 	.word	0x20000212
 8001264:	2000020a 	.word	0x2000020a
 8001268:	20000214 	.word	0x20000214
 800126c:	20000216 	.word	0x20000216
 8001270:	20000218 	.word	0x20000218
 8001274:	2000021a 	.word	0x2000021a
 8001278:	2000021c 	.word	0x2000021c
 800127c:	2000021e 	.word	0x2000021e
 8001280:	20000220 	.word	0x20000220
 8001284:	20000222 	.word	0x20000222
 8001288:	2000020c 	.word	0x2000020c
 800128c:	20000224 	.word	0x20000224
 8001290:	2000020e 	.word	0x2000020e
 8001294:	20000226 	.word	0x20000226
 8001298:	20000228 	.word	0x20000228
 800129c:	2000022a 	.word	0x2000022a

080012a0 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b089      	sub	sp, #36	@ 0x24
 80012a4:	af04      	add	r7, sp, #16
 80012a6:	4604      	mov	r4, r0
 80012a8:	4608      	mov	r0, r1
 80012aa:	4611      	mov	r1, r2
 80012ac:	461a      	mov	r2, r3
 80012ae:	4623      	mov	r3, r4
 80012b0:	71fb      	strb	r3, [r7, #7]
 80012b2:	4603      	mov	r3, r0
 80012b4:	71bb      	strb	r3, [r7, #6]
 80012b6:	460b      	mov	r3, r1
 80012b8:	717b      	strb	r3, [r7, #5]
 80012ba:	4613      	mov	r3, r2
 80012bc:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80012be:	f7ff ff0d 	bl	80010dc <TrimRead>


	uint8_t datatowrite = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80012ca:	23b6      	movs	r3, #182	@ 0xb6
 80012cc:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012d2:	9302      	str	r3, [sp, #8]
 80012d4:	2301      	movs	r3, #1
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	f107 030f 	add.w	r3, r7, #15
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	2301      	movs	r3, #1
 80012e0:	22e0      	movs	r2, #224	@ 0xe0
 80012e2:	21ec      	movs	r1, #236	@ 0xec
 80012e4:	4858      	ldr	r0, [pc, #352]	@ (8001448 <BME280_Config+0x1a8>)
 80012e6:	f002 fd63 	bl	8003db0 <HAL_I2C_Mem_Write>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <BME280_Config+0x56>
	{
		return -1;
 80012f0:	f04f 33ff 	mov.w	r3, #4294967295
 80012f4:	e0a3      	b.n	800143e <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 80012f6:	2064      	movs	r0, #100	@ 0x64
 80012f8:	f002 f916 	bl	8003528 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 80012fc:	797b      	ldrb	r3, [r7, #5]
 80012fe:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001300:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001304:	9302      	str	r3, [sp, #8]
 8001306:	2301      	movs	r3, #1
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	f107 030f 	add.w	r3, r7, #15
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2301      	movs	r3, #1
 8001312:	22f2      	movs	r2, #242	@ 0xf2
 8001314:	21ec      	movs	r1, #236	@ 0xec
 8001316:	484c      	ldr	r0, [pc, #304]	@ (8001448 <BME280_Config+0x1a8>)
 8001318:	f002 fd4a 	bl	8003db0 <HAL_I2C_Mem_Write>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d002      	beq.n	8001328 <BME280_Config+0x88>
	{
		return -1;
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	e08a      	b.n	800143e <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001328:	2064      	movs	r0, #100	@ 0x64
 800132a:	f002 f8fd 	bl	8003528 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 800132e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001332:	9302      	str	r3, [sp, #8]
 8001334:	2301      	movs	r3, #1
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	f107 030e 	add.w	r3, r7, #14
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2301      	movs	r3, #1
 8001340:	22f2      	movs	r2, #242	@ 0xf2
 8001342:	21ec      	movs	r1, #236	@ 0xec
 8001344:	4840      	ldr	r0, [pc, #256]	@ (8001448 <BME280_Config+0x1a8>)
 8001346:	f002 fe2d 	bl	8003fa4 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800134a:	7bba      	ldrb	r2, [r7, #14]
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	429a      	cmp	r2, r3
 8001350:	d002      	beq.n	8001358 <BME280_Config+0xb8>
	{
		return -1;
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
 8001356:	e072      	b.n	800143e <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001358:	f897 3020 	ldrb.w	r3, [r7, #32]
 800135c:	015b      	lsls	r3, r3, #5
 800135e:	b25a      	sxtb	r2, r3
 8001360:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	b25b      	sxtb	r3, r3
 8001368:	4313      	orrs	r3, r2
 800136a:	b25b      	sxtb	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001370:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001374:	9302      	str	r3, [sp, #8]
 8001376:	2301      	movs	r3, #1
 8001378:	9301      	str	r3, [sp, #4]
 800137a:	f107 030f 	add.w	r3, r7, #15
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	2301      	movs	r3, #1
 8001382:	22f5      	movs	r2, #245	@ 0xf5
 8001384:	21ec      	movs	r1, #236	@ 0xec
 8001386:	4830      	ldr	r0, [pc, #192]	@ (8001448 <BME280_Config+0x1a8>)
 8001388:	f002 fd12 	bl	8003db0 <HAL_I2C_Mem_Write>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d002      	beq.n	8001398 <BME280_Config+0xf8>
	{
		return -1;
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	e052      	b.n	800143e <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001398:	2064      	movs	r0, #100	@ 0x64
 800139a:	f002 f8c5 	bl	8003528 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 800139e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013a2:	9302      	str	r3, [sp, #8]
 80013a4:	2301      	movs	r3, #1
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	f107 030e 	add.w	r3, r7, #14
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	2301      	movs	r3, #1
 80013b0:	22f5      	movs	r2, #245	@ 0xf5
 80013b2:	21ec      	movs	r1, #236	@ 0xec
 80013b4:	4824      	ldr	r0, [pc, #144]	@ (8001448 <BME280_Config+0x1a8>)
 80013b6:	f002 fdf5 	bl	8003fa4 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80013ba:	7bba      	ldrb	r2, [r7, #14]
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d002      	beq.n	80013c8 <BME280_Config+0x128>
	{
		return -1;
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
 80013c6:	e03a      	b.n	800143e <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	015b      	lsls	r3, r3, #5
 80013cc:	b25a      	sxtb	r2, r3
 80013ce:	79bb      	ldrb	r3, [r7, #6]
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	4313      	orrs	r3, r2
 80013d6:	b25a      	sxtb	r2, r3
 80013d8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80013dc:	4313      	orrs	r3, r2
 80013de:	b25b      	sxtb	r3, r3
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80013e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013e8:	9302      	str	r3, [sp, #8]
 80013ea:	2301      	movs	r3, #1
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	f107 030f 	add.w	r3, r7, #15
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2301      	movs	r3, #1
 80013f6:	22f4      	movs	r2, #244	@ 0xf4
 80013f8:	21ec      	movs	r1, #236	@ 0xec
 80013fa:	4813      	ldr	r0, [pc, #76]	@ (8001448 <BME280_Config+0x1a8>)
 80013fc:	f002 fcd8 	bl	8003db0 <HAL_I2C_Mem_Write>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d002      	beq.n	800140c <BME280_Config+0x16c>
	{
		return -1;
 8001406:	f04f 33ff 	mov.w	r3, #4294967295
 800140a:	e018      	b.n	800143e <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 800140c:	2064      	movs	r0, #100	@ 0x64
 800140e:	f002 f88b 	bl	8003528 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8001412:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001416:	9302      	str	r3, [sp, #8]
 8001418:	2301      	movs	r3, #1
 800141a:	9301      	str	r3, [sp, #4]
 800141c:	f107 030e 	add.w	r3, r7, #14
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2301      	movs	r3, #1
 8001424:	22f4      	movs	r2, #244	@ 0xf4
 8001426:	21ec      	movs	r1, #236	@ 0xec
 8001428:	4807      	ldr	r0, [pc, #28]	@ (8001448 <BME280_Config+0x1a8>)
 800142a:	f002 fdbb 	bl	8003fa4 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800142e:	7bba      	ldrb	r2, [r7, #14]
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	429a      	cmp	r2, r3
 8001434:	d002      	beq.n	800143c <BME280_Config+0x19c>
	{
		return -1;
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	e000      	b.n	800143e <BME280_Config+0x19e>
	}

	return 0;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	bd90      	pop	{r4, r7, pc}
 8001446:	bf00      	nop
 8001448:	20000284 	.word	0x20000284

0800144c <BMEReadRaw>:


int BMEReadRaw(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c2, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 8001452:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001456:	9302      	str	r3, [sp, #8]
 8001458:	2301      	movs	r3, #1
 800145a:	9301      	str	r3, [sp, #4]
 800145c:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <BMEReadRaw+0x8c>)
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	2301      	movs	r3, #1
 8001462:	22d0      	movs	r2, #208	@ 0xd0
 8001464:	21ec      	movs	r1, #236	@ 0xec
 8001466:	481d      	ldr	r0, [pc, #116]	@ (80014dc <BMEReadRaw+0x90>)
 8001468:	f002 fd9c 	bl	8003fa4 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 800146c:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <BMEReadRaw+0x8c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b60      	cmp	r3, #96	@ 0x60
 8001472:	d12a      	bne.n	80014ca <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001474:	f04f 33ff 	mov.w	r3, #4294967295
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	2308      	movs	r3, #8
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	463b      	mov	r3, r7
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2301      	movs	r3, #1
 8001484:	22f7      	movs	r2, #247	@ 0xf7
 8001486:	21ec      	movs	r1, #236	@ 0xec
 8001488:	4814      	ldr	r0, [pc, #80]	@ (80014dc <BMEReadRaw+0x90>)
 800148a:	f002 fd8b 	bl	8003fa4 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800148e:	783b      	ldrb	r3, [r7, #0]
 8001490:	031a      	lsls	r2, r3, #12
 8001492:	787b      	ldrb	r3, [r7, #1]
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	4313      	orrs	r3, r2
 8001498:	78ba      	ldrb	r2, [r7, #2]
 800149a:	0912      	lsrs	r2, r2, #4
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	4313      	orrs	r3, r2
 80014a0:	4a0f      	ldr	r2, [pc, #60]	@ (80014e0 <BMEReadRaw+0x94>)
 80014a2:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80014a4:	78fb      	ldrb	r3, [r7, #3]
 80014a6:	031a      	lsls	r2, r3, #12
 80014a8:	793b      	ldrb	r3, [r7, #4]
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	4313      	orrs	r3, r2
 80014ae:	797a      	ldrb	r2, [r7, #5]
 80014b0:	0912      	lsrs	r2, r2, #4
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	4313      	orrs	r3, r2
 80014b6:	4a0b      	ldr	r2, [pc, #44]	@ (80014e4 <BMEReadRaw+0x98>)
 80014b8:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 80014ba:	79bb      	ldrb	r3, [r7, #6]
 80014bc:	021b      	lsls	r3, r3, #8
 80014be:	79fa      	ldrb	r2, [r7, #7]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	4a09      	ldr	r2, [pc, #36]	@ (80014e8 <BMEReadRaw+0x9c>)
 80014c4:	6013      	str	r3, [r2, #0]

		return 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	e001      	b.n	80014ce <BMEReadRaw+0x82>
	}

	else return -1;
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200001f8 	.word	0x200001f8
 80014dc:	20000284 	.word	0x20000284
 80014e0:	20000200 	.word	0x20000200
 80014e4:	200001fc 	.word	0x200001fc
 80014e8:	20000204 	.word	0x20000204

080014ec <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b087      	sub	sp, #28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	10da      	asrs	r2, r3, #3
 80014f8:	4b18      	ldr	r3, [pc, #96]	@ (800155c <BME280_compensate_T_int32+0x70>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	4a17      	ldr	r2, [pc, #92]	@ (8001560 <BME280_compensate_T_int32+0x74>)
 8001502:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001506:	fb02 f303 	mul.w	r3, r2, r3
 800150a:	12db      	asrs	r3, r3, #11
 800150c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	111b      	asrs	r3, r3, #4
 8001512:	4a12      	ldr	r2, [pc, #72]	@ (800155c <BME280_compensate_T_int32+0x70>)
 8001514:	8812      	ldrh	r2, [r2, #0]
 8001516:	1a9b      	subs	r3, r3, r2
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	1112      	asrs	r2, r2, #4
 800151c:	490f      	ldr	r1, [pc, #60]	@ (800155c <BME280_compensate_T_int32+0x70>)
 800151e:	8809      	ldrh	r1, [r1, #0]
 8001520:	1a52      	subs	r2, r2, r1
 8001522:	fb02 f303 	mul.w	r3, r2, r3
 8001526:	131b      	asrs	r3, r3, #12
 8001528:	4a0e      	ldr	r2, [pc, #56]	@ (8001564 <BME280_compensate_T_int32+0x78>)
 800152a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800152e:	fb02 f303 	mul.w	r3, r2, r3
 8001532:	139b      	asrs	r3, r3, #14
 8001534:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4413      	add	r3, r2
 800153c:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <BME280_compensate_T_int32+0x7c>)
 800153e:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001540:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <BME280_compensate_T_int32+0x7c>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	3380      	adds	r3, #128	@ 0x80
 800154c:	121b      	asrs	r3, r3, #8
 800154e:	60fb      	str	r3, [r7, #12]
	return T;
 8001550:	68fb      	ldr	r3, [r7, #12]
}
 8001552:	4618      	mov	r0, r3
 8001554:	371c      	adds	r7, #28
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	20000208 	.word	0x20000208
 8001560:	20000210 	.word	0x20000210
 8001564:	20000212 	.word	0x20000212
 8001568:	2000022c 	.word	0x2000022c

0800156c <BME280_compensate_P_int32>:
}

#elif SUPPORT_32BIT
// Returns pressure in Pa as unsigned 32 bit integer. Output value of “96386” equals 96386 Pa = 963.86 hPa
uint32_t BME280_compensate_P_int32(int32_t adc_P)
{
 800156c:	b480      	push	{r7}
 800156e:	b087      	sub	sp, #28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	int32_t var1, var2;
	uint32_t p;
	var1 = (((int32_t)t_fine)>>1) - (int32_t)64000;
 8001574:	4b49      	ldr	r3, [pc, #292]	@ (800169c <BME280_compensate_P_int32+0x130>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	105b      	asrs	r3, r3, #1
 800157a:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 800157e:	613b      	str	r3, [r7, #16]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)dig_P6);
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	109b      	asrs	r3, r3, #2
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	1092      	asrs	r2, r2, #2
 8001588:	fb02 f303 	mul.w	r3, r2, r3
 800158c:	12db      	asrs	r3, r3, #11
 800158e:	4a44      	ldr	r2, [pc, #272]	@ (80016a0 <BME280_compensate_P_int32+0x134>)
 8001590:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001594:	fb02 f303 	mul.w	r3, r2, r3
 8001598:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1*((int32_t)dig_P5))<<1);
 800159a:	4b42      	ldr	r3, [pc, #264]	@ (80016a4 <BME280_compensate_P_int32+0x138>)
 800159c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a0:	461a      	mov	r2, r3
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	fb02 f303 	mul.w	r3, r2, r3
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	4413      	add	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]
	var2 = (var2>>2)+(((int32_t)dig_P4)<<16);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	109a      	asrs	r2, r3, #2
 80015b4:	4b3c      	ldr	r3, [pc, #240]	@ (80016a8 <BME280_compensate_P_int32+0x13c>)
 80015b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ba:	041b      	lsls	r3, r3, #16
 80015bc:	4413      	add	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]
	var1 = (((dig_P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)dig_P2) *var1)>>1))>>18;
 80015c0:	4b3a      	ldr	r3, [pc, #232]	@ (80016ac <BME280_compensate_P_int32+0x140>)
 80015c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c6:	4619      	mov	r1, r3
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	109b      	asrs	r3, r3, #2
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	1092      	asrs	r2, r2, #2
 80015d0:	fb02 f303 	mul.w	r3, r2, r3
 80015d4:	135b      	asrs	r3, r3, #13
 80015d6:	fb01 f303 	mul.w	r3, r1, r3
 80015da:	10da      	asrs	r2, r3, #3
 80015dc:	4b34      	ldr	r3, [pc, #208]	@ (80016b0 <BME280_compensate_P_int32+0x144>)
 80015de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e2:	4619      	mov	r1, r3
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	fb01 f303 	mul.w	r3, r1, r3
 80015ea:	105b      	asrs	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	149b      	asrs	r3, r3, #18
 80015f0:	613b      	str	r3, [r7, #16]
	var1 =((((32768+var1))*((int32_t)dig_P1))>>15);
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80015f8:	4a2e      	ldr	r2, [pc, #184]	@ (80016b4 <BME280_compensate_P_int32+0x148>)
 80015fa:	8812      	ldrh	r2, [r2, #0]
 80015fc:	fb02 f303 	mul.w	r3, r2, r3
 8001600:	13db      	asrs	r3, r3, #15
 8001602:	613b      	str	r3, [r7, #16]
	if (var1 == 0)
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <BME280_compensate_P_int32+0xa2>
	{
		return 0; // avoid exception caused by division by zero
 800160a:	2300      	movs	r3, #0
 800160c:	e041      	b.n	8001692 <BME280_compensate_P_int32+0x126>
	}
	p = (((uint32_t)(((int32_t)1048576)-adc_P)-(var2>>12)))*3125;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	131b      	asrs	r3, r3, #12
 8001612:	461a      	mov	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4413      	add	r3, r2
 8001618:	4a27      	ldr	r2, [pc, #156]	@ (80016b8 <BME280_compensate_P_int32+0x14c>)
 800161a:	fb02 f303 	mul.w	r3, r2, r3
 800161e:	f103 4343 	add.w	r3, r3, #3271557120	@ 0xc3000000
 8001622:	f503 03a0 	add.w	r3, r3, #5242880	@ 0x500000
 8001626:	617b      	str	r3, [r7, #20]
	if (p < 0x80000000)
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	2b00      	cmp	r3, #0
 800162c:	db06      	blt.n	800163c <BME280_compensate_P_int32+0xd0>
	{
		p = (p << 1) / ((uint32_t)var1);
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	005a      	lsls	r2, r3, #1
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	fbb2 f3f3 	udiv	r3, r2, r3
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e005      	b.n	8001648 <BME280_compensate_P_int32+0xdc>
	}
	else
	{
		p = (p / (uint32_t)var1) * 2;
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	fbb2 f3f3 	udiv	r3, r2, r3
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	617b      	str	r3, [r7, #20]
	}
	var1 = (((int32_t)dig_P9) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 8001648:	4b1c      	ldr	r3, [pc, #112]	@ (80016bc <BME280_compensate_P_int32+0x150>)
 800164a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164e:	4619      	mov	r1, r3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	08db      	lsrs	r3, r3, #3
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	08d2      	lsrs	r2, r2, #3
 8001658:	fb02 f303 	mul.w	r3, r2, r3
 800165c:	0b5b      	lsrs	r3, r3, #13
 800165e:	fb01 f303 	mul.w	r3, r1, r3
 8001662:	131b      	asrs	r3, r3, #12
 8001664:	613b      	str	r3, [r7, #16]
	var2 = (((int32_t)(p>>2)) * ((int32_t)dig_P8))>>13;
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	089b      	lsrs	r3, r3, #2
 800166a:	461a      	mov	r2, r3
 800166c:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <BME280_compensate_P_int32+0x154>)
 800166e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001672:	fb02 f303 	mul.w	r3, r2, r3
 8001676:	135b      	asrs	r3, r3, #13
 8001678:	60fb      	str	r3, [r7, #12]
	p = (uint32_t)((int32_t)p + ((var1 + var2 + dig_P7) >> 4));
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4413      	add	r3, r2
 8001680:	4a10      	ldr	r2, [pc, #64]	@ (80016c4 <BME280_compensate_P_int32+0x158>)
 8001682:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001686:	4413      	add	r3, r2
 8001688:	111a      	asrs	r2, r3, #4
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	4413      	add	r3, r2
 800168e:	617b      	str	r3, [r7, #20]
	return p;
 8001690:	697b      	ldr	r3, [r7, #20]
}
 8001692:	4618      	mov	r0, r3
 8001694:	371c      	adds	r7, #28
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	2000022c 	.word	0x2000022c
 80016a0:	2000021c 	.word	0x2000021c
 80016a4:	2000021a 	.word	0x2000021a
 80016a8:	20000218 	.word	0x20000218
 80016ac:	20000216 	.word	0x20000216
 80016b0:	20000214 	.word	0x20000214
 80016b4:	2000020a 	.word	0x2000020a
 80016b8:	fffff3cb 	.word	0xfffff3cb
 80016bc:	20000222 	.word	0x20000222
 80016c0:	20000220 	.word	0x20000220
 80016c4:	2000021e 	.word	0x2000021e

080016c8 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 80016d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001784 <bme280_compensate_H_int32+0xbc>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 80016d8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	039a      	lsls	r2, r3, #14
 80016de:	4b2a      	ldr	r3, [pc, #168]	@ (8001788 <bme280_compensate_H_int32+0xc0>)
 80016e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e4:	051b      	lsls	r3, r3, #20
 80016e6:	1ad2      	subs	r2, r2, r3
 80016e8:	4b28      	ldr	r3, [pc, #160]	@ (800178c <bme280_compensate_H_int32+0xc4>)
 80016ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ee:	4619      	mov	r1, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	fb01 f303 	mul.w	r3, r1, r3
 80016f6:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 80016f8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80016fc:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 80016fe:	4a24      	ldr	r2, [pc, #144]	@ (8001790 <bme280_compensate_H_int32+0xc8>)
 8001700:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001704:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 800170c:	1292      	asrs	r2, r2, #10
 800170e:	4921      	ldr	r1, [pc, #132]	@ (8001794 <bme280_compensate_H_int32+0xcc>)
 8001710:	8809      	ldrh	r1, [r1, #0]
 8001712:	4608      	mov	r0, r1
 8001714:	68f9      	ldr	r1, [r7, #12]
 8001716:	fb00 f101 	mul.w	r1, r0, r1
 800171a:	12c9      	asrs	r1, r1, #11
 800171c:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001720:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001724:	1292      	asrs	r2, r2, #10
 8001726:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800172a:	491b      	ldr	r1, [pc, #108]	@ (8001798 <bme280_compensate_H_int32+0xd0>)
 800172c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001730:	fb01 f202 	mul.w	r2, r1, r2
 8001734:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
					8192) >> 14));
 8001738:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 800173a:	fb02 f303 	mul.w	r3, r2, r3
 800173e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	13db      	asrs	r3, r3, #15
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	13d2      	asrs	r2, r2, #15
 8001748:	fb02 f303 	mul.w	r3, r2, r3
 800174c:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 800174e:	4a13      	ldr	r2, [pc, #76]	@ (800179c <bme280_compensate_H_int32+0xd4>)
 8001750:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001752:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001756:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001764:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 800176c:	bfa8      	it	ge
 800176e:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001772:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	131b      	asrs	r3, r3, #12
}
 8001778:	4618      	mov	r0, r3
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	2000022c 	.word	0x2000022c
 8001788:	20000226 	.word	0x20000226
 800178c:	20000228 	.word	0x20000228
 8001790:	2000022a 	.word	0x2000022a
 8001794:	2000020e 	.word	0x2000020e
 8001798:	20000224 	.word	0x20000224
 800179c:	2000020c 	.word	0x2000020c

080017a0 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 80017a4:	f7ff fe52 	bl	800144c <BMEReadRaw>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d158      	bne.n	8001860 <BME280_Measure+0xc0>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 80017ae:	4b33      	ldr	r3, [pc, #204]	@ (800187c <BME280_Measure+0xdc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80017b6:	d104      	bne.n	80017c2 <BME280_Measure+0x22>
 80017b8:	4b31      	ldr	r3, [pc, #196]	@ (8001880 <BME280_Measure+0xe0>)
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	e016      	b.n	80017f0 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 80017c2:	4b2e      	ldr	r3, [pc, #184]	@ (800187c <BME280_Measure+0xdc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fe90 	bl	80014ec <BME280_compensate_T_int32>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fe18 	bl	8000404 <__aeabi_i2d>
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001884 <BME280_Measure+0xe4>)
 80017da:	f7fe ffa7 	bl	800072c <__aeabi_ddiv>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	f7ff f96f 	bl	8000ac8 <__aeabi_d2f>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4a24      	ldr	r2, [pc, #144]	@ (8001880 <BME280_Measure+0xe0>)
 80017ee:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 80017f0:	4b25      	ldr	r3, [pc, #148]	@ (8001888 <BME280_Measure+0xe8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80017f8:	d104      	bne.n	8001804 <BME280_Measure+0x64>
 80017fa:	4b24      	ldr	r3, [pc, #144]	@ (800188c <BME280_Measure+0xec>)
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	e00b      	b.n	800181c <BME280_Measure+0x7c>
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256

#elif SUPPORT_32BIT
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa
 8001804:	4b20      	ldr	r3, [pc, #128]	@ (8001888 <BME280_Measure+0xe8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff feaf 	bl	800156c <BME280_compensate_P_int32>
 800180e:	4603      	mov	r3, r0
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fa5f 	bl	8000cd4 <__aeabi_ui2f>
 8001816:	4603      	mov	r3, r0
 8001818:	4a1c      	ldr	r2, [pc, #112]	@ (800188c <BME280_Measure+0xec>)
 800181a:	6013      	str	r3, [r2, #0]

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 800181c:	4b1c      	ldr	r3, [pc, #112]	@ (8001890 <BME280_Measure+0xf0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001824:	d104      	bne.n	8001830 <BME280_Measure+0x90>
 8001826:	4b1b      	ldr	r3, [pc, #108]	@ (8001894 <BME280_Measure+0xf4>)
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 800182e:	e023      	b.n	8001878 <BME280_Measure+0xd8>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001830:	4b17      	ldr	r3, [pc, #92]	@ (8001890 <BME280_Measure+0xf0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff47 	bl	80016c8 <bme280_compensate_H_int32>
 800183a:	4603      	mov	r3, r0
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fdd1 	bl	80003e4 <__aeabi_ui2d>
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <BME280_Measure+0xf8>)
 8001848:	f7fe ff70 	bl	800072c <__aeabi_ddiv>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	f7ff f938 	bl	8000ac8 <__aeabi_d2f>
 8001858:	4603      	mov	r3, r0
 800185a:	4a0e      	ldr	r2, [pc, #56]	@ (8001894 <BME280_Measure+0xf4>)
 800185c:	6013      	str	r3, [r2, #0]
}
 800185e:	e00b      	b.n	8001878 <BME280_Measure+0xd8>
		Temperature = Pressure = Humidity = 0;
 8001860:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <BME280_Measure+0xf4>)
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <BME280_Measure+0xf4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a07      	ldr	r2, [pc, #28]	@ (800188c <BME280_Measure+0xec>)
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b06      	ldr	r3, [pc, #24]	@ (800188c <BME280_Measure+0xec>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a02      	ldr	r2, [pc, #8]	@ (8001880 <BME280_Measure+0xe0>)
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	200001fc 	.word	0x200001fc
 8001880:	20000334 	.word	0x20000334
 8001884:	40590000 	.word	0x40590000
 8001888:	20000200 	.word	0x20000200
 800188c:	20000338 	.word	0x20000338
 8001890:	20000204 	.word	0x20000204
 8001894:	2000033c 	.word	0x2000033c
 8001898:	40900000 	.word	0x40900000

0800189c <Decimal_To_BCD>:
RTC_TimeTypeDef sTime = {0};
RTC_DateTypeDef DateToUpdate = {0};
RTC_AlarmTypeDef sAlarm = {0};
RTC_DateTypeDef sDate = {0};

uint8_t Decimal_To_BCD(uint8_t val) {
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
    return ((val / 10) << 4) | (val % 10);
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	4a0d      	ldr	r2, [pc, #52]	@ (80018e0 <Decimal_To_BCD+0x44>)
 80018aa:	fba2 2303 	umull	r2, r3, r2, r3
 80018ae:	08db      	lsrs	r3, r3, #3
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	011b      	lsls	r3, r3, #4
 80018b4:	b258      	sxtb	r0, r3
 80018b6:	79fa      	ldrb	r2, [r7, #7]
 80018b8:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <Decimal_To_BCD+0x44>)
 80018ba:	fba3 1302 	umull	r1, r3, r3, r2
 80018be:	08d9      	lsrs	r1, r3, #3
 80018c0:	460b      	mov	r3, r1
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	b25b      	sxtb	r3, r3
 80018ce:	4303      	orrs	r3, r0
 80018d0:	b25b      	sxtb	r3, r3
 80018d2:	b2db      	uxtb	r3, r3
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	cccccccd 	.word	0xcccccccd

080018e4 <BCD_To_Decimal>:

uint8_t BCD_To_Decimal(uint8_t bcd) {
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
   return ((bcd >> 4) * 10) + (bcd & 0x0F);
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	461a      	mov	r2, r3
 80018f6:	0092      	lsls	r2, r2, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	f003 030f 	and.w	r3, r3, #15
 8001904:	b2db      	uxtb	r3, r3
 8001906:	4413      	add	r3, r2
 8001908:	b2db      	uxtb	r3, r3
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <checkShouldGoToTimer.1>:
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
  ssd1306_Init();
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);

  void checkShouldGoToTimer()
  {
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	f8c7 c004 	str.w	ip, [r7, #4]
    uint8_t rawCounter = __HAL_TIM_GET_COUNTER(&htim2);
 800191e:	4b0a      	ldr	r3, [pc, #40]	@ (8001948 <checkShouldGoToTimer.1+0x34>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001924:	73fb      	strb	r3, [r7, #15]

    if (rawCounter != prevCounter)
 8001926:	4b09      	ldr	r3, [pc, #36]	@ (800194c <checkShouldGoToTimer.1+0x38>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	7bfa      	ldrb	r2, [r7, #15]
 800192c:	429a      	cmp	r2, r3
 800192e:	d006      	beq.n	800193e <checkShouldGoToTimer.1+0x2a>
    {
      activeScreen = screenTimer;
 8001930:	4b07      	ldr	r3, [pc, #28]	@ (8001950 <checkShouldGoToTimer.1+0x3c>)
 8001932:	781a      	ldrb	r2, [r3, #0]
 8001934:	4b07      	ldr	r3, [pc, #28]	@ (8001954 <checkShouldGoToTimer.1+0x40>)
 8001936:	701a      	strb	r2, [r3, #0]
      prevCounter = rawCounter;
 8001938:	4a04      	ldr	r2, [pc, #16]	@ (800194c <checkShouldGoToTimer.1+0x38>)
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	7013      	strb	r3, [r2, #0]
    }
  }
 800193e:	bf00      	nop
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	200002ec 	.word	0x200002ec
 800194c:	2000034d 	.word	0x2000034d
 8001950:	20000001 	.word	0x20000001
 8001954:	20000343 	.word	0x20000343

08001958 <main>:
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af02      	add	r7, sp, #8
int main(void)
 800195e:	f107 0310 	add.w	r3, r7, #16
 8001962:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8001964:	f001 fd7e 	bl	8003464 <HAL_Init>
  SystemClock_Config();
 8001968:	f000 fbe2 	bl	8002130 <SystemClock_Config>
  MX_GPIO_Init();
 800196c:	f000 fd60 	bl	8002430 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001970:	f000 fc3c 	bl	80021ec <MX_I2C1_Init>
  MX_RTC_Init();
 8001974:	f000 fc96 	bl	80022a4 <MX_RTC_Init>
  MX_TIM2_Init();
 8001978:	f000 fd08 	bl	800238c <MX_TIM2_Init>
  MX_I2C2_Init();
 800197c:	f000 fc64 	bl	8002248 <MX_I2C2_Init>
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001980:	2304      	movs	r3, #4
 8001982:	9301      	str	r3, [sp, #4]
 8001984:	2300      	movs	r3, #0
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2303      	movs	r3, #3
 800198a:	2201      	movs	r2, #1
 800198c:	2105      	movs	r1, #5
 800198e:	2002      	movs	r0, #2
 8001990:	f7ff fc86 	bl	80012a0 <BME280_Config>
  ssd1306_Init();
 8001994:	f000 ffdc 	bl	8002950 <ssd1306_Init>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001998:	213c      	movs	r1, #60	@ 0x3c
 800199a:	4821      	ldr	r0, [pc, #132]	@ (8001a20 <main+0xc8>)
 800199c:	f004 fe08 	bl	80065b0 <HAL_TIM_Encoder_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  ssd1306_Fill(Black);
 80019a0:	2000      	movs	r0, #0
 80019a2:	f001 f83f 	bl	8002a24 <ssd1306_Fill>

	  if (activeScreen == screenTime)
 80019a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a24 <main+0xcc>)
 80019a8:	781a      	ldrb	r2, [r3, #0]
 80019aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001a28 <main+0xd0>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d104      	bne.n	80019bc <main+0x64>
	  {
		  printTimeScreen();
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	469c      	mov	ip, r3
 80019b6:	f000 f841 	bl	8001a3c <printTimeScreen.0>
 80019ba:	e02a      	b.n	8001a12 <main+0xba>
	  } else if (activeScreen == screenWeather)
 80019bc:	4b19      	ldr	r3, [pc, #100]	@ (8001a24 <main+0xcc>)
 80019be:	781a      	ldrb	r2, [r3, #0]
 80019c0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a2c <main+0xd4>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d104      	bne.n	80019d2 <main+0x7a>
	  {
		  printWeatherScreen();
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	469c      	mov	ip, r3
 80019cc:	f000 f8c0 	bl	8001b50 <printWeatherScreen.2>
 80019d0:	e01f      	b.n	8001a12 <main+0xba>
	  } else if (activeScreen == screenTimer)
 80019d2:	4b14      	ldr	r3, [pc, #80]	@ (8001a24 <main+0xcc>)
 80019d4:	781a      	ldrb	r2, [r3, #0]
 80019d6:	4b16      	ldr	r3, [pc, #88]	@ (8001a30 <main+0xd8>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d104      	bne.n	80019e8 <main+0x90>
	  {
		  printTimerScreen();
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	469c      	mov	ip, r3
 80019e2:	f000 f933 	bl	8001c4c <printTimerScreen.3>
 80019e6:	e014      	b.n	8001a12 <main+0xba>
	  } else if (activeScreen == screenMenu)
 80019e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a24 <main+0xcc>)
 80019ea:	781a      	ldrb	r2, [r3, #0]
 80019ec:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <main+0xdc>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d104      	bne.n	80019fe <main+0xa6>
	  {
		  printMenuScreen();
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	469c      	mov	ip, r3
 80019f8:	f000 fa68 	bl	8001ecc <printMenuScreen.4>
 80019fc:	e009      	b.n	8001a12 <main+0xba>
	  } else if (activeScreen == screenSetTime)
 80019fe:	4b09      	ldr	r3, [pc, #36]	@ (8001a24 <main+0xcc>)
 8001a00:	781a      	ldrb	r2, [r3, #0]
 8001a02:	4b0d      	ldr	r3, [pc, #52]	@ (8001a38 <main+0xe0>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d103      	bne.n	8001a12 <main+0xba>
	  {
		  printSetTimeScreen();
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	469c      	mov	ip, r3
 8001a0e:	f000 fad9 	bl	8001fc4 <printSetTimeScreen.5>
	  }

	  ssd1306_UpdateScreen();
 8001a12:	f001 f81f 	bl	8002a54 <ssd1306_UpdateScreen>

	  checkAlarm();
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	469c      	mov	ip, r3
 8001a1a:	f000 fb5f 	bl	80020dc <checkAlarm.6>
	  ssd1306_Fill(Black);
 8001a1e:	e7bf      	b.n	80019a0 <main+0x48>
 8001a20:	200002ec 	.word	0x200002ec
 8001a24:	20000343 	.word	0x20000343
 8001a28:	20000344 	.word	0x20000344
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	20000001 	.word	0x20000001
 8001a34:	20000002 	.word	0x20000002
 8001a38:	20000003 	.word	0x20000003

08001a3c <printTimeScreen.0>:
  {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	@ 0x28
 8001a40:	af04      	add	r7, sp, #16
 8001a42:	4663      	mov	r3, ip
 8001a44:	f8c7 c004 	str.w	ip, [r7, #4]
	  checkShouldGoToTimer();
 8001a48:	469c      	mov	ip, r3
 8001a4a:	f7ff ff63 	bl	8001914 <checkShouldGoToTimer.1>
	  HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BCD);
 8001a4e:	2201      	movs	r2, #1
 8001a50:	4937      	ldr	r1, [pc, #220]	@ (8001b30 <printTimeScreen.0+0xf4>)
 8001a52:	4838      	ldr	r0, [pc, #224]	@ (8001b34 <printTimeScreen.0+0xf8>)
 8001a54:	f003 ff6e 	bl	8005934 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &DateToUpdate, FORMAT_BCD);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	4937      	ldr	r1, [pc, #220]	@ (8001b38 <printTimeScreen.0+0xfc>)
 8001a5c:	4835      	ldr	r0, [pc, #212]	@ (8001b34 <printTimeScreen.0+0xf8>)
 8001a5e:	f004 f8f7 	bl	8005c50 <HAL_RTC_GetDate>
	  uint8_t timeHours = BCD_To_Decimal(sTime.Hours);
 8001a62:	4b33      	ldr	r3, [pc, #204]	@ (8001b30 <printTimeScreen.0+0xf4>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ff3c 	bl	80018e4 <BCD_To_Decimal>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	75fb      	strb	r3, [r7, #23]
	  uint8_t timeMinutes = BCD_To_Decimal(sTime.Minutes);
 8001a70:	4b2f      	ldr	r3, [pc, #188]	@ (8001b30 <printTimeScreen.0+0xf4>)
 8001a72:	785b      	ldrb	r3, [r3, #1]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff35 	bl	80018e4 <BCD_To_Decimal>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	75bb      	strb	r3, [r7, #22]
	  uint8_t timeSeconds = BCD_To_Decimal(sTime.Seconds);
 8001a7e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b30 <printTimeScreen.0+0xf4>)
 8001a80:	789b      	ldrb	r3, [r3, #2]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff ff2e 	bl	80018e4 <BCD_To_Decimal>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	757b      	strb	r3, [r7, #21]
	  sprintf(bufferHours, "%02d", timeHours);
 8001a8c:	7dfa      	ldrb	r2, [r7, #23]
 8001a8e:	f107 0310 	add.w	r3, r7, #16
 8001a92:	492a      	ldr	r1, [pc, #168]	@ (8001b3c <printTimeScreen.0+0x100>)
 8001a94:	4618      	mov	r0, r3
 8001a96:	f005 fe5f 	bl	8007758 <siprintf>
	  sprintf(bufferMin, "%02d", timeMinutes);
 8001a9a:	7dba      	ldrb	r2, [r7, #22]
 8001a9c:	f107 030c 	add.w	r3, r7, #12
 8001aa0:	4926      	ldr	r1, [pc, #152]	@ (8001b3c <printTimeScreen.0+0x100>)
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f005 fe58 	bl	8007758 <siprintf>
	  sprintf(bufferSec, "%02d", timeSeconds);
 8001aa8:	7d7a      	ldrb	r2, [r7, #21]
 8001aaa:	f107 0308 	add.w	r3, r7, #8
 8001aae:	4923      	ldr	r1, [pc, #140]	@ (8001b3c <printTimeScreen.0+0x100>)
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f005 fe51 	bl	8007758 <siprintf>
	  ssd1306_SetCursor(0, 0);
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f001 f9d3 	bl	8002e64 <ssd1306_SetCursor>
	  ssd1306_WriteScaledString(bufferHours, Font_16x26, White, 1.6, 1.6);
 8001abe:	4b20      	ldr	r3, [pc, #128]	@ (8001b40 <printTimeScreen.0+0x104>)
 8001ac0:	f107 0010 	add.w	r0, r7, #16
 8001ac4:	4a1f      	ldr	r2, [pc, #124]	@ (8001b44 <printTimeScreen.0+0x108>)
 8001ac6:	9202      	str	r2, [sp, #8]
 8001ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8001b44 <printTimeScreen.0+0x108>)
 8001aca:	9201      	str	r2, [sp, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	9200      	str	r2, [sp, #0]
 8001ad0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ad2:	f001 f99d 	bl	8002e10 <ssd1306_WriteScaledString>
	  ssd1306_SetCursor(47, 0);
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	202f      	movs	r0, #47	@ 0x2f
 8001ada:	f001 f9c3 	bl	8002e64 <ssd1306_SetCursor>
	  ssd1306_WriteScaledString(":", Font_16x26, White, 1.6, 1.6);
 8001ade:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <printTimeScreen.0+0x104>)
 8001ae0:	4a18      	ldr	r2, [pc, #96]	@ (8001b44 <printTimeScreen.0+0x108>)
 8001ae2:	9202      	str	r2, [sp, #8]
 8001ae4:	4a17      	ldr	r2, [pc, #92]	@ (8001b44 <printTimeScreen.0+0x108>)
 8001ae6:	9201      	str	r2, [sp, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	9200      	str	r2, [sp, #0]
 8001aec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aee:	4816      	ldr	r0, [pc, #88]	@ (8001b48 <printTimeScreen.0+0x10c>)
 8001af0:	f001 f98e 	bl	8002e10 <ssd1306_WriteScaledString>
	  ssd1306_SetCursor(72, 0);
 8001af4:	2100      	movs	r1, #0
 8001af6:	2048      	movs	r0, #72	@ 0x48
 8001af8:	f001 f9b4 	bl	8002e64 <ssd1306_SetCursor>
	  ssd1306_WriteScaledString(bufferMin, Font_16x26, White, 1.6, 1.6);
 8001afc:	4b10      	ldr	r3, [pc, #64]	@ (8001b40 <printTimeScreen.0+0x104>)
 8001afe:	f107 000c 	add.w	r0, r7, #12
 8001b02:	4a10      	ldr	r2, [pc, #64]	@ (8001b44 <printTimeScreen.0+0x108>)
 8001b04:	9202      	str	r2, [sp, #8]
 8001b06:	4a0f      	ldr	r2, [pc, #60]	@ (8001b44 <printTimeScreen.0+0x108>)
 8001b08:	9201      	str	r2, [sp, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	9200      	str	r2, [sp, #0]
 8001b0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b10:	f001 f97e 	bl	8002e10 <ssd1306_WriteScaledString>
	  ssd1306_FillRectangle(0, 51, timeSeconds * 2, 55, White);
 8001b14:	7d7b      	ldrb	r3, [r7, #21]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	2337      	movs	r3, #55	@ 0x37
 8001b20:	2133      	movs	r1, #51	@ 0x33
 8001b22:	2000      	movs	r0, #0
 8001b24:	f001 f9b6 	bl	8002e94 <ssd1306_FillRectangle>
  }
 8001b28:	bf00      	nop
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000350 	.word	0x20000350
 8001b34:	200002d8 	.word	0x200002d8
 8001b38:	20000354 	.word	0x20000354
 8001b3c:	0800afd0 	.word	0x0800afd0
 8001b40:	0800d850 	.word	0x0800d850
 8001b44:	3fcccccd 	.word	0x3fcccccd
 8001b48:	0800afd8 	.word	0x0800afd8
 8001b4c:	00000000 	.word	0x00000000

08001b50 <printWeatherScreen.2>:
  {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08e      	sub	sp, #56	@ 0x38
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	f8c7 c004 	str.w	ip, [r7, #4]
	  BME280_Measure();
 8001b5a:	f7ff fe21 	bl	80017a0 <BME280_Measure>
	  HAL_Delay(100);
 8001b5e:	2064      	movs	r0, #100	@ 0x64
 8001b60:	f001 fce2 	bl	8003528 <HAL_Delay>
	  snprintf(bufferTemp, sizeof(bufferTemp), "%04.1f C", Temperature - 1);
 8001b64:	4b32      	ldr	r3, [pc, #200]	@ (8001c30 <printWeatherScreen.2+0xe0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe ffff 	bl	8000b70 <__aeabi_fsub>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fc57 	bl	8000428 <__aeabi_f2d>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001b82:	e9cd 2300 	strd	r2, r3, [sp]
 8001b86:	4a2b      	ldr	r2, [pc, #172]	@ (8001c34 <printWeatherScreen.2+0xe4>)
 8001b88:	210a      	movs	r1, #10
 8001b8a:	f005 fdb1 	bl	80076f0 <sniprintf>
	  snprintf(bufferPres, sizeof(bufferPres), "%05.1f mmpc", Pressure / 133.322);
 8001b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c38 <printWeatherScreen.2+0xe8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fc48 	bl	8000428 <__aeabi_f2d>
 8001b98:	a323      	add	r3, pc, #140	@ (adr r3, 8001c28 <printWeatherScreen.2+0xd8>)
 8001b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9e:	f7fe fdc5 	bl	800072c <__aeabi_ddiv>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	f107 0014 	add.w	r0, r7, #20
 8001baa:	e9cd 2300 	strd	r2, r3, [sp]
 8001bae:	4a23      	ldr	r2, [pc, #140]	@ (8001c3c <printWeatherScreen.2+0xec>)
 8001bb0:	210f      	movs	r1, #15
 8001bb2:	f005 fd9d 	bl	80076f0 <sniprintf>
	  snprintf(bufferHum, sizeof(bufferHum), "%04.1f %%", Humidity);
 8001bb6:	4b22      	ldr	r3, [pc, #136]	@ (8001c40 <printWeatherScreen.2+0xf0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fc34 	bl	8000428 <__aeabi_f2d>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	f107 0008 	add.w	r0, r7, #8
 8001bc8:	e9cd 2300 	strd	r2, r3, [sp]
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c44 <printWeatherScreen.2+0xf4>)
 8001bce:	210a      	movs	r1, #10
 8001bd0:	f005 fd8e 	bl	80076f0 <sniprintf>
	  ssd1306_SetCursor(0, 0);
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f001 f944 	bl	8002e64 <ssd1306_SetCursor>
	  ssd1306_WriteString(bufferTemp, Font_11x18, White);
 8001bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c48 <printWeatherScreen.2+0xf8>)
 8001bde:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001be2:	2201      	movs	r2, #1
 8001be4:	9200      	str	r2, [sp, #0]
 8001be6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001be8:	f001 f8ec 	bl	8002dc4 <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 20);
 8001bec:	2114      	movs	r1, #20
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f001 f938 	bl	8002e64 <ssd1306_SetCursor>
	  ssd1306_WriteString(bufferHum, Font_11x18, White);
 8001bf4:	4b14      	ldr	r3, [pc, #80]	@ (8001c48 <printWeatherScreen.2+0xf8>)
 8001bf6:	f107 0008 	add.w	r0, r7, #8
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	9200      	str	r2, [sp, #0]
 8001bfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c00:	f001 f8e0 	bl	8002dc4 <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 40);
 8001c04:	2128      	movs	r1, #40	@ 0x28
 8001c06:	2000      	movs	r0, #0
 8001c08:	f001 f92c 	bl	8002e64 <ssd1306_SetCursor>
	  ssd1306_WriteString(bufferPres, Font_11x18, White);
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c48 <printWeatherScreen.2+0xf8>)
 8001c0e:	f107 0014 	add.w	r0, r7, #20
 8001c12:	2201      	movs	r2, #1
 8001c14:	9200      	str	r2, [sp, #0]
 8001c16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c18:	f001 f8d4 	bl	8002dc4 <ssd1306_WriteString>
  }
 8001c1c:	bf00      	nop
 8001c1e:	3730      	adds	r7, #48	@ 0x30
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	f3af 8000 	nop.w
 8001c28:	d2f1a9fc 	.word	0xd2f1a9fc
 8001c2c:	4060aa4d 	.word	0x4060aa4d
 8001c30:	20000334 	.word	0x20000334
 8001c34:	0800afdc 	.word	0x0800afdc
 8001c38:	20000338 	.word	0x20000338
 8001c3c:	0800afe8 	.word	0x0800afe8
 8001c40:	2000033c 	.word	0x2000033c
 8001c44:	0800aff4 	.word	0x0800aff4
 8001c48:	0800d844 	.word	0x0800d844

08001c4c <printTimerScreen.3>:
  {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b090      	sub	sp, #64	@ 0x40
 8001c50:	af04      	add	r7, sp, #16
 8001c52:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BCD);
 8001c56:	2201      	movs	r2, #1
 8001c58:	498b      	ldr	r1, [pc, #556]	@ (8001e88 <printTimerScreen.3+0x23c>)
 8001c5a:	488c      	ldr	r0, [pc, #560]	@ (8001e8c <printTimerScreen.3+0x240>)
 8001c5c:	f003 fe6a 	bl	8005934 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &DateToUpdate, FORMAT_BCD);
 8001c60:	2201      	movs	r2, #1
 8001c62:	498b      	ldr	r1, [pc, #556]	@ (8001e90 <printTimerScreen.3+0x244>)
 8001c64:	4889      	ldr	r0, [pc, #548]	@ (8001e8c <printTimerScreen.3+0x240>)
 8001c66:	f003 fff3 	bl	8005c50 <HAL_RTC_GetDate>
	  uint32_t rawCounter = __HAL_TIM_GET_COUNTER(&htim2);
 8001c6a:	4b8a      	ldr	r3, [pc, #552]	@ (8001e94 <printTimerScreen.3+0x248>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if (counterMode == 0) {
 8001c72:	4b89      	ldr	r3, [pc, #548]	@ (8001e98 <printTimerScreen.3+0x24c>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d104      	bne.n	8001c84 <printTimerScreen.3+0x38>
		  counter = rawCounter;
 8001c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4b87      	ldr	r3, [pc, #540]	@ (8001e9c <printTimerScreen.3+0x250>)
 8001c80:	701a      	strb	r2, [r3, #0]
 8001c82:	e01f      	b.n	8001cc4 <printTimerScreen.3+0x78>
      if (rawCounter == 13) {
 8001c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c86:	2b0d      	cmp	r3, #13
 8001c88:	d107      	bne.n	8001c9a <printTimerScreen.3+0x4e>
        __HAL_TIM_SET_COUNTER(&htim2, 1); // 12 * 5 = 60
 8001c8a:	4b82      	ldr	r3, [pc, #520]	@ (8001e94 <printTimerScreen.3+0x248>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	625a      	str	r2, [r3, #36]	@ 0x24
        counter = 0;
 8001c92:	4b82      	ldr	r3, [pc, #520]	@ (8001e9c <printTimerScreen.3+0x250>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
 8001c98:	e014      	b.n	8001cc4 <printTimerScreen.3+0x78>
      } else if (rawCounter == 0) {
 8001c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d107      	bne.n	8001cb0 <printTimerScreen.3+0x64>
        __HAL_TIM_SET_COUNTER(&htim2, 12); // 11 * 5 = 55
 8001ca0:	4b7c      	ldr	r3, [pc, #496]	@ (8001e94 <printTimerScreen.3+0x248>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	220c      	movs	r2, #12
 8001ca6:	625a      	str	r2, [r3, #36]	@ 0x24
        counter = 55;
 8001ca8:	4b7c      	ldr	r3, [pc, #496]	@ (8001e9c <printTimerScreen.3+0x250>)
 8001caa:	2237      	movs	r2, #55	@ 0x37
 8001cac:	701a      	strb	r2, [r3, #0]
 8001cae:	e009      	b.n	8001cc4 <printTimerScreen.3+0x78>
        counter = (rawCounter - 1) * 5;
 8001cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	0092      	lsls	r2, r2, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	3b05      	subs	r3, #5
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	4b76      	ldr	r3, [pc, #472]	@ (8001e9c <printTimerScreen.3+0x250>)
 8001cc2:	701a      	strb	r2, [r3, #0]
	  uint8_t timerSeconds = BCD_To_Decimal(sAlarm.AlarmTime.Seconds);
 8001cc4:	4b76      	ldr	r3, [pc, #472]	@ (8001ea0 <printTimerScreen.3+0x254>)
 8001cc6:	789b      	ldrb	r3, [r3, #2]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fe0b 	bl	80018e4 <BCD_To_Decimal>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	  uint8_t timeSeconds = BCD_To_Decimal(sTime.Seconds);
 8001cd4:	4b6c      	ldr	r3, [pc, #432]	@ (8001e88 <printTimerScreen.3+0x23c>)
 8001cd6:	789b      	ldrb	r3, [r3, #2]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fe03 	bl	80018e4 <BCD_To_Decimal>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	  uint8_t timerMinutes = BCD_To_Decimal(sAlarm.AlarmTime.Minutes);
 8001ce4:	4b6e      	ldr	r3, [pc, #440]	@ (8001ea0 <printTimerScreen.3+0x254>)
 8001ce6:	785b      	ldrb	r3, [r3, #1]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fdfb 	bl	80018e4 <BCD_To_Decimal>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	  uint8_t timeMinutes = BCD_To_Decimal(sTime.Minutes);
 8001cf4:	4b64      	ldr	r3, [pc, #400]	@ (8001e88 <printTimerScreen.3+0x23c>)
 8001cf6:	785b      	ldrb	r3, [r3, #1]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fdf3 	bl	80018e4 <BCD_To_Decimal>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	  uint8_t timerHours = BCD_To_Decimal(sAlarm.AlarmTime.Hours);
 8001d04:	4b66      	ldr	r3, [pc, #408]	@ (8001ea0 <printTimerScreen.3+0x254>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fdeb 	bl	80018e4 <BCD_To_Decimal>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  uint8_t timeHours = BCD_To_Decimal(sTime.Hours);
 8001d14:	4b5c      	ldr	r3, [pc, #368]	@ (8001e88 <printTimerScreen.3+0x23c>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fde3 	bl	80018e4 <BCD_To_Decimal>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint32_t totalSecondsAlarm = timerHours * 3600 + timerMinutes * 60 + timerSeconds;
 8001d24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d28:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8001d2c:	fb02 f103 	mul.w	r1, r2, r3
 8001d30:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8001d34:	4613      	mov	r3, r2
 8001d36:	011b      	lsls	r3, r3, #4
 8001d38:	1a9b      	subs	r3, r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	18ca      	adds	r2, r1, r3
 8001d3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001d42:	4413      	add	r3, r2
 8001d44:	623b      	str	r3, [r7, #32]
    uint32_t totalSecondsCurrent = timeHours * 3600 + timeMinutes * 60 + timeSeconds;
 8001d46:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001d4a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8001d4e:	fb02 f103 	mul.w	r1, r2, r3
 8001d52:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001d56:	4613      	mov	r3, r2
 8001d58:	011b      	lsls	r3, r3, #4
 8001d5a:	1a9b      	subs	r3, r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	18ca      	adds	r2, r1, r3
 8001d60:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001d64:	4413      	add	r3, r2
 8001d66:	61fb      	str	r3, [r7, #28]
    uint32_t totalSecondsLeft = totalSecondsAlarm - totalSecondsCurrent;
 8001d68:	6a3a      	ldr	r2, [r7, #32]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	61bb      	str	r3, [r7, #24]
    uint8_t fullMinutesLeft = (totalSecondsLeft / 60) % 60;
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	4a4c      	ldr	r2, [pc, #304]	@ (8001ea4 <printTimerScreen.3+0x258>)
 8001d74:	fba2 2303 	umull	r2, r3, r2, r3
 8001d78:	0959      	lsrs	r1, r3, #5
 8001d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8001ea4 <printTimerScreen.3+0x258>)
 8001d7c:	fba3 2301 	umull	r2, r3, r3, r1
 8001d80:	095a      	lsrs	r2, r3, #5
 8001d82:	4613      	mov	r3, r2
 8001d84:	011b      	lsls	r3, r3, #4
 8001d86:	1a9b      	subs	r3, r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	1aca      	subs	r2, r1, r3
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	75fb      	strb	r3, [r7, #23]
    uint8_t secondsLeft = totalSecondsLeft % 60;
 8001d90:	69b9      	ldr	r1, [r7, #24]
 8001d92:	4b44      	ldr	r3, [pc, #272]	@ (8001ea4 <printTimerScreen.3+0x258>)
 8001d94:	fba3 2301 	umull	r2, r3, r3, r1
 8001d98:	095a      	lsrs	r2, r3, #5
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	1a9b      	subs	r3, r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	1aca      	subs	r2, r1, r3
 8001da4:	4613      	mov	r3, r2
 8001da6:	75bb      	strb	r3, [r7, #22]
	  sprintf(bufferEncoderOrTimer, "%02d", alarmIsSet ? fullMinutesLeft : counter);
 8001da8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ea8 <printTimerScreen.3+0x25c>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <printTimerScreen.3+0x168>
 8001db0:	7dfb      	ldrb	r3, [r7, #23]
 8001db2:	e001      	b.n	8001db8 <printTimerScreen.3+0x16c>
 8001db4:	4b39      	ldr	r3, [pc, #228]	@ (8001e9c <printTimerScreen.3+0x250>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	f107 000c 	add.w	r0, r7, #12
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	493b      	ldr	r1, [pc, #236]	@ (8001eac <printTimerScreen.3+0x260>)
 8001dc0:	f005 fcca 	bl	8007758 <siprintf>
	  sprintf(bufferSecondsLeft, "%02d", secondsLeft);
 8001dc4:	7dba      	ldrb	r2, [r7, #22]
 8001dc6:	f107 0308 	add.w	r3, r7, #8
 8001dca:	4938      	ldr	r1, [pc, #224]	@ (8001eac <printTimerScreen.3+0x260>)
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f005 fcc3 	bl	8007758 <siprintf>
	  ssd1306_SetCursor(00, 0);
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f001 f845 	bl	8002e64 <ssd1306_SetCursor>
	  ssd1306_WriteScaledString(bufferEncoderOrTimer, Font_16x26, White, 1.6, 1.6);
 8001dda:	4b35      	ldr	r3, [pc, #212]	@ (8001eb0 <printTimerScreen.3+0x264>)
 8001ddc:	f107 000c 	add.w	r0, r7, #12
 8001de0:	4a34      	ldr	r2, [pc, #208]	@ (8001eb4 <printTimerScreen.3+0x268>)
 8001de2:	9202      	str	r2, [sp, #8]
 8001de4:	4a33      	ldr	r2, [pc, #204]	@ (8001eb4 <printTimerScreen.3+0x268>)
 8001de6:	9201      	str	r2, [sp, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	9200      	str	r2, [sp, #0]
 8001dec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dee:	f001 f80f 	bl	8002e10 <ssd1306_WriteScaledString>
	  ssd1306_SetCursor(47, 0);
 8001df2:	2100      	movs	r1, #0
 8001df4:	202f      	movs	r0, #47	@ 0x2f
 8001df6:	f001 f835 	bl	8002e64 <ssd1306_SetCursor>
	  ssd1306_WriteScaledString(alarmIsSet ? ":" : "", Font_16x26, White, 1.6, 1.6);
 8001dfa:	4b2b      	ldr	r3, [pc, #172]	@ (8001ea8 <printTimerScreen.3+0x25c>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <printTimerScreen.3+0x1ba>
 8001e02:	482d      	ldr	r0, [pc, #180]	@ (8001eb8 <printTimerScreen.3+0x26c>)
 8001e04:	e000      	b.n	8001e08 <printTimerScreen.3+0x1bc>
 8001e06:	482d      	ldr	r0, [pc, #180]	@ (8001ebc <printTimerScreen.3+0x270>)
 8001e08:	4b29      	ldr	r3, [pc, #164]	@ (8001eb0 <printTimerScreen.3+0x264>)
 8001e0a:	4a2a      	ldr	r2, [pc, #168]	@ (8001eb4 <printTimerScreen.3+0x268>)
 8001e0c:	9202      	str	r2, [sp, #8]
 8001e0e:	4a29      	ldr	r2, [pc, #164]	@ (8001eb4 <printTimerScreen.3+0x268>)
 8001e10:	9201      	str	r2, [sp, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	9200      	str	r2, [sp, #0]
 8001e16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e18:	f000 fffa 	bl	8002e10 <ssd1306_WriteScaledString>
	  ssd1306_SetCursor(72, 0);
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2048      	movs	r0, #72	@ 0x48
 8001e20:	f001 f820 	bl	8002e64 <ssd1306_SetCursor>
	  ssd1306_WriteScaledString(alarmIsSet ? bufferSecondsLeft : "", Font_16x26, White, 1.6, 1.6);
 8001e24:	4b20      	ldr	r3, [pc, #128]	@ (8001ea8 <printTimerScreen.3+0x25c>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <printTimerScreen.3+0x1e6>
 8001e2c:	f107 0008 	add.w	r0, r7, #8
 8001e30:	e000      	b.n	8001e34 <printTimerScreen.3+0x1e8>
 8001e32:	4822      	ldr	r0, [pc, #136]	@ (8001ebc <printTimerScreen.3+0x270>)
 8001e34:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb0 <printTimerScreen.3+0x264>)
 8001e36:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb4 <printTimerScreen.3+0x268>)
 8001e38:	9202      	str	r2, [sp, #8]
 8001e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8001eb4 <printTimerScreen.3+0x268>)
 8001e3c:	9201      	str	r2, [sp, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	9200      	str	r2, [sp, #0]
 8001e42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e44:	f000 ffe4 	bl	8002e10 <ssd1306_WriteScaledString>
	  ssd1306_SetCursor(3, 45);
 8001e48:	212d      	movs	r1, #45	@ 0x2d
 8001e4a:	2003      	movs	r0, #3
 8001e4c:	f001 f80a 	bl	8002e64 <ssd1306_SetCursor>
	  ssd1306_WriteString("min", Font_11x18, White);
 8001e50:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec0 <printTimerScreen.3+0x274>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	9200      	str	r2, [sp, #0]
 8001e56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e58:	481a      	ldr	r0, [pc, #104]	@ (8001ec4 <printTimerScreen.3+0x278>)
 8001e5a:	f000 ffb3 	bl	8002dc4 <ssd1306_WriteString>
	  ssd1306_SetCursor(75, 45);
 8001e5e:	212d      	movs	r1, #45	@ 0x2d
 8001e60:	204b      	movs	r0, #75	@ 0x4b
 8001e62:	f000 ffff 	bl	8002e64 <ssd1306_SetCursor>
	  ssd1306_WriteString(alarmIsSet ? "sec" : "", Font_11x18, White);
 8001e66:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <printTimerScreen.3+0x25c>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <printTimerScreen.3+0x226>
 8001e6e:	4816      	ldr	r0, [pc, #88]	@ (8001ec8 <printTimerScreen.3+0x27c>)
 8001e70:	e000      	b.n	8001e74 <printTimerScreen.3+0x228>
 8001e72:	4812      	ldr	r0, [pc, #72]	@ (8001ebc <printTimerScreen.3+0x270>)
 8001e74:	4b12      	ldr	r3, [pc, #72]	@ (8001ec0 <printTimerScreen.3+0x274>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	9200      	str	r2, [sp, #0]
 8001e7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e7c:	f000 ffa2 	bl	8002dc4 <ssd1306_WriteString>
  }
 8001e80:	bf00      	nop
 8001e82:	3730      	adds	r7, #48	@ 0x30
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000350 	.word	0x20000350
 8001e8c:	200002d8 	.word	0x200002d8
 8001e90:	20000354 	.word	0x20000354
 8001e94:	200002ec 	.word	0x200002ec
 8001e98:	20000340 	.word	0x20000340
 8001e9c:	2000034c 	.word	0x2000034c
 8001ea0:	20000358 	.word	0x20000358
 8001ea4:	88888889 	.word	0x88888889
 8001ea8:	20000342 	.word	0x20000342
 8001eac:	0800afd0 	.word	0x0800afd0
 8001eb0:	0800d850 	.word	0x0800d850
 8001eb4:	3fcccccd 	.word	0x3fcccccd
 8001eb8:	0800afd8 	.word	0x0800afd8
 8001ebc:	0800b000 	.word	0x0800b000
 8001ec0:	0800d844 	.word	0x0800d844
 8001ec4:	0800b004 	.word	0x0800b004
 8001ec8:	0800b008 	.word	0x0800b008

08001ecc <printMenuScreen.4>:
  {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af02      	add	r7, sp, #8
 8001ed2:	f8c7 c004 	str.w	ip, [r7, #4]
		uint8_t rawCounter = __HAL_TIM_GET_COUNTER(&htim2);
 8001ed6:	4b33      	ldr	r3, [pc, #204]	@ (8001fa4 <printMenuScreen.4+0xd8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001edc:	73fb      	strb	r3, [r7, #15]
		if (rawCounter != prevCounter)
 8001ede:	4b32      	ldr	r3, [pc, #200]	@ (8001fa8 <printMenuScreen.4+0xdc>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	7bfa      	ldrb	r2, [r7, #15]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d011      	beq.n	8001f0c <printMenuScreen.4+0x40>
			if (activeMenuOption == menuSetTime)
 8001ee8:	4b30      	ldr	r3, [pc, #192]	@ (8001fac <printMenuScreen.4+0xe0>)
 8001eea:	781a      	ldrb	r2, [r3, #0]
 8001eec:	4b30      	ldr	r3, [pc, #192]	@ (8001fb0 <printMenuScreen.4+0xe4>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d104      	bne.n	8001efe <printMenuScreen.4+0x32>
				activeMenuOption = menuSetDate;
 8001ef4:	4b2f      	ldr	r3, [pc, #188]	@ (8001fb4 <printMenuScreen.4+0xe8>)
 8001ef6:	781a      	ldrb	r2, [r3, #0]
 8001ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8001fac <printMenuScreen.4+0xe0>)
 8001efa:	701a      	strb	r2, [r3, #0]
 8001efc:	e003      	b.n	8001f06 <printMenuScreen.4+0x3a>
				activeMenuOption = menuSetTime;
 8001efe:	4b2c      	ldr	r3, [pc, #176]	@ (8001fb0 <printMenuScreen.4+0xe4>)
 8001f00:	781a      	ldrb	r2, [r3, #0]
 8001f02:	4b2a      	ldr	r3, [pc, #168]	@ (8001fac <printMenuScreen.4+0xe0>)
 8001f04:	701a      	strb	r2, [r3, #0]
			prevCounter = rawCounter;
 8001f06:	4a28      	ldr	r2, [pc, #160]	@ (8001fa8 <printMenuScreen.4+0xdc>)
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
 8001f0a:	7013      	strb	r3, [r2, #0]
    ssd1306_SetCursor(0, 0);
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	2000      	movs	r0, #0
 8001f10:	f000 ffa8 	bl	8002e64 <ssd1306_SetCursor>
    ssd1306_FillRectangle(0, 0, 128, 20, activeMenuOption == menuSetTime ? White : Black);
 8001f14:	4b25      	ldr	r3, [pc, #148]	@ (8001fac <printMenuScreen.4+0xe0>)
 8001f16:	781a      	ldrb	r2, [r3, #0]
 8001f18:	4b25      	ldr	r3, [pc, #148]	@ (8001fb0 <printMenuScreen.4+0xe4>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	bf0c      	ite	eq
 8001f20:	2301      	moveq	r3, #1
 8001f22:	2300      	movne	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	2314      	movs	r3, #20
 8001f2a:	2280      	movs	r2, #128	@ 0x80
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f000 ffb0 	bl	8002e94 <ssd1306_FillRectangle>
    ssd1306_WriteString("Set Time", Font_11x18, activeMenuOption == menuSetTime ? Black : White);
 8001f34:	4b1d      	ldr	r3, [pc, #116]	@ (8001fac <printMenuScreen.4+0xe0>)
 8001f36:	781a      	ldrb	r2, [r3, #0]
 8001f38:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb0 <printMenuScreen.4+0xe4>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	bf14      	ite	ne
 8001f40:	2301      	movne	r3, #1
 8001f42:	2300      	moveq	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	461a      	mov	r2, r3
 8001f48:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb8 <printMenuScreen.4+0xec>)
 8001f4a:	9200      	str	r2, [sp, #0]
 8001f4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f4e:	481b      	ldr	r0, [pc, #108]	@ (8001fbc <printMenuScreen.4+0xf0>)
 8001f50:	f000 ff38 	bl	8002dc4 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 25);
 8001f54:	2119      	movs	r1, #25
 8001f56:	2000      	movs	r0, #0
 8001f58:	f000 ff84 	bl	8002e64 <ssd1306_SetCursor>
    ssd1306_FillRectangle(0, 25, 128, 20, activeMenuOption == menuSetDate ? White : Black);
 8001f5c:	4b13      	ldr	r3, [pc, #76]	@ (8001fac <printMenuScreen.4+0xe0>)
 8001f5e:	781a      	ldrb	r2, [r3, #0]
 8001f60:	4b14      	ldr	r3, [pc, #80]	@ (8001fb4 <printMenuScreen.4+0xe8>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	bf0c      	ite	eq
 8001f68:	2301      	moveq	r3, #1
 8001f6a:	2300      	movne	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	2314      	movs	r3, #20
 8001f72:	2280      	movs	r2, #128	@ 0x80
 8001f74:	2119      	movs	r1, #25
 8001f76:	2000      	movs	r0, #0
 8001f78:	f000 ff8c 	bl	8002e94 <ssd1306_FillRectangle>
    ssd1306_WriteString("Set Date", Font_11x18, activeMenuOption == menuSetDate ? Black : White);
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <printMenuScreen.4+0xe0>)
 8001f7e:	781a      	ldrb	r2, [r3, #0]
 8001f80:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb4 <printMenuScreen.4+0xe8>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	bf14      	ite	ne
 8001f88:	2301      	movne	r3, #1
 8001f8a:	2300      	moveq	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b09      	ldr	r3, [pc, #36]	@ (8001fb8 <printMenuScreen.4+0xec>)
 8001f92:	9200      	str	r2, [sp, #0]
 8001f94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f96:	480a      	ldr	r0, [pc, #40]	@ (8001fc0 <printMenuScreen.4+0xf4>)
 8001f98:	f000 ff14 	bl	8002dc4 <ssd1306_WriteString>
  }
 8001f9c:	bf00      	nop
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	200002ec 	.word	0x200002ec
 8001fa8:	2000034d 	.word	0x2000034d
 8001fac:	20000345 	.word	0x20000345
 8001fb0:	20000346 	.word	0x20000346
 8001fb4:	20000004 	.word	0x20000004
 8001fb8:	0800d844 	.word	0x0800d844
 8001fbc:	0800b00c 	.word	0x0800b00c
 8001fc0:	0800b018 	.word	0x0800b018

08001fc4 <printSetTimeScreen.5>:
  {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af02      	add	r7, sp, #8
 8001fca:	f8c7 c004 	str.w	ip, [r7, #4]
	  uint8_t rawCounter = __HAL_TIM_GET_COUNTER(&htim2);
 8001fce:	4b37      	ldr	r3, [pc, #220]	@ (80020ac <printSetTimeScreen.5+0xe8>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd4:	75fb      	strb	r3, [r7, #23]
	  if (activeSetTimeOption == setTimeSecondsOption) {
 8001fd6:	4b36      	ldr	r3, [pc, #216]	@ (80020b0 <printSetTimeScreen.5+0xec>)
 8001fd8:	781a      	ldrb	r2, [r3, #0]
 8001fda:	4b36      	ldr	r3, [pc, #216]	@ (80020b4 <printSetTimeScreen.5+0xf0>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d103      	bne.n	8001fea <printSetTimeScreen.5+0x26>
		  setTimeSeconds = rawCounter;
 8001fe2:	4a35      	ldr	r2, [pc, #212]	@ (80020b8 <printSetTimeScreen.5+0xf4>)
 8001fe4:	7dfb      	ldrb	r3, [r7, #23]
 8001fe6:	7013      	strb	r3, [r2, #0]
 8001fe8:	e012      	b.n	8002010 <printSetTimeScreen.5+0x4c>
	  } else if (activeSetTimeOption == setTimeMinutesOption) {
 8001fea:	4b31      	ldr	r3, [pc, #196]	@ (80020b0 <printSetTimeScreen.5+0xec>)
 8001fec:	781a      	ldrb	r2, [r3, #0]
 8001fee:	4b33      	ldr	r3, [pc, #204]	@ (80020bc <printSetTimeScreen.5+0xf8>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d103      	bne.n	8001ffe <printSetTimeScreen.5+0x3a>
		  setTimeMinutes = rawCounter;
 8001ff6:	4a32      	ldr	r2, [pc, #200]	@ (80020c0 <printSetTimeScreen.5+0xfc>)
 8001ff8:	7dfb      	ldrb	r3, [r7, #23]
 8001ffa:	7013      	strb	r3, [r2, #0]
 8001ffc:	e008      	b.n	8002010 <printSetTimeScreen.5+0x4c>
	  } else if (activeSetTimeOption == setTimeHoursOption) {
 8001ffe:	4b2c      	ldr	r3, [pc, #176]	@ (80020b0 <printSetTimeScreen.5+0xec>)
 8002000:	781a      	ldrb	r2, [r3, #0]
 8002002:	4b30      	ldr	r3, [pc, #192]	@ (80020c4 <printSetTimeScreen.5+0x100>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d102      	bne.n	8002010 <printSetTimeScreen.5+0x4c>
		  setTimeHours = rawCounter;
 800200a:	4a2f      	ldr	r2, [pc, #188]	@ (80020c8 <printSetTimeScreen.5+0x104>)
 800200c:	7dfb      	ldrb	r3, [r7, #23]
 800200e:	7013      	strb	r3, [r2, #0]
	  sprintf(bufferHours, "%02d", setTimeHours);
 8002010:	4b2d      	ldr	r3, [pc, #180]	@ (80020c8 <printSetTimeScreen.5+0x104>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	f107 0310 	add.w	r3, r7, #16
 800201a:	492c      	ldr	r1, [pc, #176]	@ (80020cc <printSetTimeScreen.5+0x108>)
 800201c:	4618      	mov	r0, r3
 800201e:	f005 fb9b 	bl	8007758 <siprintf>
	  sprintf(bufferMin, "%02d", setTimeMinutes);
 8002022:	4b27      	ldr	r3, [pc, #156]	@ (80020c0 <printSetTimeScreen.5+0xfc>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	f107 030c 	add.w	r3, r7, #12
 800202c:	4927      	ldr	r1, [pc, #156]	@ (80020cc <printSetTimeScreen.5+0x108>)
 800202e:	4618      	mov	r0, r3
 8002030:	f005 fb92 	bl	8007758 <siprintf>
	  sprintf(bufferSec, "%02d", setTimeSeconds);
 8002034:	4b20      	ldr	r3, [pc, #128]	@ (80020b8 <printSetTimeScreen.5+0xf4>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	f107 0308 	add.w	r3, r7, #8
 800203e:	4923      	ldr	r1, [pc, #140]	@ (80020cc <printSetTimeScreen.5+0x108>)
 8002040:	4618      	mov	r0, r3
 8002042:	f005 fb89 	bl	8007758 <siprintf>
	  ssd1306_SetCursor(0, 0);
 8002046:	2100      	movs	r1, #0
 8002048:	2000      	movs	r0, #0
 800204a:	f000 ff0b 	bl	8002e64 <ssd1306_SetCursor>
	  ssd1306_WriteString(bufferHours, Font_16x26, White);
 800204e:	4b20      	ldr	r3, [pc, #128]	@ (80020d0 <printSetTimeScreen.5+0x10c>)
 8002050:	f107 0010 	add.w	r0, r7, #16
 8002054:	2201      	movs	r2, #1
 8002056:	9200      	str	r2, [sp, #0]
 8002058:	cb0e      	ldmia	r3, {r1, r2, r3}
 800205a:	f000 feb3 	bl	8002dc4 <ssd1306_WriteString>
	  ssd1306_SetCursor(35, 0);
 800205e:	2100      	movs	r1, #0
 8002060:	2023      	movs	r0, #35	@ 0x23
 8002062:	f000 feff 	bl	8002e64 <ssd1306_SetCursor>
	  ssd1306_WriteString(":", Font_16x26, White);
 8002066:	4b1a      	ldr	r3, [pc, #104]	@ (80020d0 <printSetTimeScreen.5+0x10c>)
 8002068:	2201      	movs	r2, #1
 800206a:	9200      	str	r2, [sp, #0]
 800206c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800206e:	4819      	ldr	r0, [pc, #100]	@ (80020d4 <printSetTimeScreen.5+0x110>)
 8002070:	f000 fea8 	bl	8002dc4 <ssd1306_WriteString>
	  ssd1306_SetCursor(55, 0);
 8002074:	2100      	movs	r1, #0
 8002076:	2037      	movs	r0, #55	@ 0x37
 8002078:	f000 fef4 	bl	8002e64 <ssd1306_SetCursor>
	  ssd1306_WriteString(bufferMin, Font_16x26, White);
 800207c:	4b14      	ldr	r3, [pc, #80]	@ (80020d0 <printSetTimeScreen.5+0x10c>)
 800207e:	f107 000c 	add.w	r0, r7, #12
 8002082:	2201      	movs	r2, #1
 8002084:	9200      	str	r2, [sp, #0]
 8002086:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002088:	f000 fe9c 	bl	8002dc4 <ssd1306_WriteString>
	  ssd1306_SetCursor(95, 0);
 800208c:	2100      	movs	r1, #0
 800208e:	205f      	movs	r0, #95	@ 0x5f
 8002090:	f000 fee8 	bl	8002e64 <ssd1306_SetCursor>
	  ssd1306_WriteString(bufferSec, Font_7x10, White);
 8002094:	4b10      	ldr	r3, [pc, #64]	@ (80020d8 <printSetTimeScreen.5+0x114>)
 8002096:	f107 0008 	add.w	r0, r7, #8
 800209a:	2201      	movs	r2, #1
 800209c:	9200      	str	r2, [sp, #0]
 800209e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020a0:	f000 fe90 	bl	8002dc4 <ssd1306_WriteString>
  }
 80020a4:	bf00      	nop
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	200002ec 	.word	0x200002ec
 80020b0:	20000347 	.word	0x20000347
 80020b4:	20000348 	.word	0x20000348
 80020b8:	2000034b 	.word	0x2000034b
 80020bc:	20000005 	.word	0x20000005
 80020c0:	2000034a 	.word	0x2000034a
 80020c4:	20000006 	.word	0x20000006
 80020c8:	20000349 	.word	0x20000349
 80020cc:	0800afd0 	.word	0x0800afd0
 80020d0:	0800d850 	.word	0x0800d850
 80020d4:	0800afd8 	.word	0x0800afd8
 80020d8:	0800d838 	.word	0x0800d838

080020dc <checkAlarm.6>:
  {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	f8c7 c004 	str.w	ip, [r7, #4]
    if (isAlarm == 1)
 80020e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002124 <checkAlarm.6+0x48>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d111      	bne.n	8002112 <checkAlarm.6+0x36>
      alarmIterations++;
 80020ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002128 <checkAlarm.6+0x4c>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	3301      	adds	r3, #1
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <checkAlarm.6+0x4c>)
 80020f8:	701a      	strb	r2, [r3, #0]
      if ((alarmIterations % 2) == 0)
 80020fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002128 <checkAlarm.6+0x4c>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	d109      	bne.n	800211c <checkAlarm.6+0x40>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8002108:	2102      	movs	r1, #2
 800210a:	4808      	ldr	r0, [pc, #32]	@ (800212c <checkAlarm.6+0x50>)
 800210c:	f001 fcda 	bl	8003ac4 <HAL_GPIO_TogglePin>
  }
 8002110:	e004      	b.n	800211c <checkAlarm.6+0x40>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8002112:	2200      	movs	r2, #0
 8002114:	2102      	movs	r1, #2
 8002116:	4805      	ldr	r0, [pc, #20]	@ (800212c <checkAlarm.6+0x50>)
 8002118:	f001 fcbc 	bl	8003a94 <HAL_GPIO_WritePin>
  }
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000341 	.word	0x20000341
 8002128:	2000034e 	.word	0x2000034e
 800212c:	40010800 	.word	0x40010800

08002130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b094      	sub	sp, #80	@ 0x50
 8002134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002136:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800213a:	2228      	movs	r2, #40	@ 0x28
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f005 fb87 	bl	8007852 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002154:	1d3b      	adds	r3, r7, #4
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	609a      	str	r2, [r3, #8]
 800215e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002160:	2305      	movs	r3, #5
 8002162:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002164:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002168:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800216a:	2300      	movs	r3, #0
 800216c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800216e:	2301      	movs	r3, #1
 8002170:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002172:	2301      	movs	r3, #1
 8002174:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002176:	2302      	movs	r3, #2
 8002178:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800217a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800217e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002180:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002184:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002186:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800218a:	4618      	mov	r0, r3
 800218c:	f002 fd32 	bl	8004bf4 <HAL_RCC_OscConfig>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002196:	f000 fb9d 	bl	80028d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800219a:	230f      	movs	r3, #15
 800219c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800219e:	2302      	movs	r3, #2
 80021a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021ac:	2300      	movs	r3, #0
 80021ae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	2102      	movs	r1, #2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f002 ff9e 	bl	80050f8 <HAL_RCC_ClockConfig>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80021c2:	f000 fb87 	bl	80028d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021c6:	2301      	movs	r3, #1
 80021c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80021ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021ce:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021d0:	1d3b      	adds	r3, r7, #4
 80021d2:	4618      	mov	r0, r3
 80021d4:	f003 f91e 	bl	8005414 <HAL_RCCEx_PeriphCLKConfig>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80021de:	f000 fb79 	bl	80028d4 <Error_Handler>
  }
}
 80021e2:	bf00      	nop
 80021e4:	3750      	adds	r7, #80	@ 0x50
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021f0:	4b12      	ldr	r3, [pc, #72]	@ (800223c <MX_I2C1_Init+0x50>)
 80021f2:	4a13      	ldr	r2, [pc, #76]	@ (8002240 <MX_I2C1_Init+0x54>)
 80021f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80021f6:	4b11      	ldr	r3, [pc, #68]	@ (800223c <MX_I2C1_Init+0x50>)
 80021f8:	4a12      	ldr	r2, [pc, #72]	@ (8002244 <MX_I2C1_Init+0x58>)
 80021fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021fc:	4b0f      	ldr	r3, [pc, #60]	@ (800223c <MX_I2C1_Init+0x50>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002202:	4b0e      	ldr	r3, [pc, #56]	@ (800223c <MX_I2C1_Init+0x50>)
 8002204:	2200      	movs	r2, #0
 8002206:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002208:	4b0c      	ldr	r3, [pc, #48]	@ (800223c <MX_I2C1_Init+0x50>)
 800220a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800220e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002210:	4b0a      	ldr	r3, [pc, #40]	@ (800223c <MX_I2C1_Init+0x50>)
 8002212:	2200      	movs	r2, #0
 8002214:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002216:	4b09      	ldr	r3, [pc, #36]	@ (800223c <MX_I2C1_Init+0x50>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800221c:	4b07      	ldr	r3, [pc, #28]	@ (800223c <MX_I2C1_Init+0x50>)
 800221e:	2200      	movs	r2, #0
 8002220:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002222:	4b06      	ldr	r3, [pc, #24]	@ (800223c <MX_I2C1_Init+0x50>)
 8002224:	2200      	movs	r2, #0
 8002226:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002228:	4804      	ldr	r0, [pc, #16]	@ (800223c <MX_I2C1_Init+0x50>)
 800222a:	f001 fc7d 	bl	8003b28 <HAL_I2C_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002234:	f000 fb4e 	bl	80028d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000230 	.word	0x20000230
 8002240:	40005400 	.word	0x40005400
 8002244:	00061a80 	.word	0x00061a80

08002248 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800224c:	4b12      	ldr	r3, [pc, #72]	@ (8002298 <MX_I2C2_Init+0x50>)
 800224e:	4a13      	ldr	r2, [pc, #76]	@ (800229c <MX_I2C2_Init+0x54>)
 8002250:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002252:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <MX_I2C2_Init+0x50>)
 8002254:	4a12      	ldr	r2, [pc, #72]	@ (80022a0 <MX_I2C2_Init+0x58>)
 8002256:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002258:	4b0f      	ldr	r3, [pc, #60]	@ (8002298 <MX_I2C2_Init+0x50>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800225e:	4b0e      	ldr	r3, [pc, #56]	@ (8002298 <MX_I2C2_Init+0x50>)
 8002260:	2200      	movs	r2, #0
 8002262:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002264:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <MX_I2C2_Init+0x50>)
 8002266:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800226a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800226c:	4b0a      	ldr	r3, [pc, #40]	@ (8002298 <MX_I2C2_Init+0x50>)
 800226e:	2200      	movs	r2, #0
 8002270:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002272:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <MX_I2C2_Init+0x50>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002278:	4b07      	ldr	r3, [pc, #28]	@ (8002298 <MX_I2C2_Init+0x50>)
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800227e:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <MX_I2C2_Init+0x50>)
 8002280:	2200      	movs	r2, #0
 8002282:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002284:	4804      	ldr	r0, [pc, #16]	@ (8002298 <MX_I2C2_Init+0x50>)
 8002286:	f001 fc4f 	bl	8003b28 <HAL_I2C_Init>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002290:	f000 fb20 	bl	80028d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20000284 	.word	0x20000284
 800229c:	40005800 	.word	0x40005800
 80022a0:	00061a80 	.word	0x00061a80

080022a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80022aa:	4b33      	ldr	r3, [pc, #204]	@ (8002378 <MX_RTC_Init+0xd4>)
 80022ac:	4a33      	ldr	r2, [pc, #204]	@ (800237c <MX_RTC_Init+0xd8>)
 80022ae:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80022b0:	4b31      	ldr	r3, [pc, #196]	@ (8002378 <MX_RTC_Init+0xd4>)
 80022b2:	f04f 32ff 	mov.w	r2, #4294967295
 80022b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80022b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002378 <MX_RTC_Init+0xd4>)
 80022ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022be:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80022c0:	482d      	ldr	r0, [pc, #180]	@ (8002378 <MX_RTC_Init+0xd4>)
 80022c2:	f003 fa13 	bl	80056ec <HAL_RTC_Init>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_RTC_Init+0x2c>
  {
    Error_Handler();
 80022cc:	f000 fb02 	bl	80028d4 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  uint32_t backup_val = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);
 80022d0:	2101      	movs	r1, #1
 80022d2:	4829      	ldr	r0, [pc, #164]	@ (8002378 <MX_RTC_Init+0xd4>)
 80022d4:	f004 f8ae 	bl	8006434 <HAL_RTCEx_BKUPRead>
 80022d8:	6078      	str	r0, [r7, #4]
  if (backup_val != 0x32F2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d044      	beq.n	800236e <MX_RTC_Init+0xca>
  {
	  /* USER CODE END Check_RTC_BKUP */

	  /** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = 0x0;
 80022e4:	4b26      	ldr	r3, [pc, #152]	@ (8002380 <MX_RTC_Init+0xdc>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	701a      	strb	r2, [r3, #0]
	  sTime.Minutes = 0x0;
 80022ea:	4b25      	ldr	r3, [pc, #148]	@ (8002380 <MX_RTC_Init+0xdc>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	705a      	strb	r2, [r3, #1]
	  sTime.Seconds = 0x0;
 80022f0:	4b23      	ldr	r3, [pc, #140]	@ (8002380 <MX_RTC_Init+0xdc>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	709a      	strb	r2, [r3, #2]

	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80022f6:	2201      	movs	r2, #1
 80022f8:	4921      	ldr	r1, [pc, #132]	@ (8002380 <MX_RTC_Init+0xdc>)
 80022fa:	481f      	ldr	r0, [pc, #124]	@ (8002378 <MX_RTC_Init+0xd4>)
 80022fc:	f003 fa82 	bl	8005804 <HAL_RTC_SetTime>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_RTC_Init+0x66>
	  {
		Error_Handler();
 8002306:	f000 fae5 	bl	80028d4 <Error_Handler>
	  }
	  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800230a:	4b1e      	ldr	r3, [pc, #120]	@ (8002384 <MX_RTC_Init+0xe0>)
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]
	  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002310:	4b1c      	ldr	r3, [pc, #112]	@ (8002384 <MX_RTC_Init+0xe0>)
 8002312:	2201      	movs	r2, #1
 8002314:	705a      	strb	r2, [r3, #1]
	  DateToUpdate.Date = 0x1;
 8002316:	4b1b      	ldr	r3, [pc, #108]	@ (8002384 <MX_RTC_Init+0xe0>)
 8002318:	2201      	movs	r2, #1
 800231a:	709a      	strb	r2, [r3, #2]
	  DateToUpdate.Year = 0x0;
 800231c:	4b19      	ldr	r3, [pc, #100]	@ (8002384 <MX_RTC_Init+0xe0>)
 800231e:	2200      	movs	r2, #0
 8002320:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002322:	2201      	movs	r2, #1
 8002324:	4917      	ldr	r1, [pc, #92]	@ (8002384 <MX_RTC_Init+0xe0>)
 8002326:	4814      	ldr	r0, [pc, #80]	@ (8002378 <MX_RTC_Init+0xd4>)
 8002328:	f003 fbdc 	bl	8005ae4 <HAL_RTC_SetDate>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_RTC_Init+0x92>
	  {
		Error_Handler();
 8002332:	f000 facf 	bl	80028d4 <Error_Handler>
	  }

	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = 0x0;
 8002336:	4b14      	ldr	r3, [pc, #80]	@ (8002388 <MX_RTC_Init+0xe4>)
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = 0x0;
 800233c:	4b12      	ldr	r3, [pc, #72]	@ (8002388 <MX_RTC_Init+0xe4>)
 800233e:	2200      	movs	r2, #0
 8002340:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = 0x0;
 8002342:	4b11      	ldr	r3, [pc, #68]	@ (8002388 <MX_RTC_Init+0xe4>)
 8002344:	2200      	movs	r2, #0
 8002346:	709a      	strb	r2, [r3, #2]
	  sAlarm.Alarm = RTC_ALARM_A;
 8002348:	4b0f      	ldr	r3, [pc, #60]	@ (8002388 <MX_RTC_Init+0xe4>)
 800234a:	2200      	movs	r2, #0
 800234c:	605a      	str	r2, [r3, #4]
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800234e:	2201      	movs	r2, #1
 8002350:	490d      	ldr	r1, [pc, #52]	@ (8002388 <MX_RTC_Init+0xe4>)
 8002352:	4809      	ldr	r0, [pc, #36]	@ (8002378 <MX_RTC_Init+0xd4>)
 8002354:	f003 fcd0 	bl	8005cf8 <HAL_RTC_SetAlarm_IT>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_RTC_Init+0xbe>
	  {
		Error_Handler();
 800235e:	f000 fab9 	bl	80028d4 <Error_Handler>
	  }
	  /* USER CODE BEGIN RTC_Init 2 */

  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8002362:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8002366:	2101      	movs	r1, #1
 8002368:	4803      	ldr	r0, [pc, #12]	@ (8002378 <MX_RTC_Init+0xd4>)
 800236a:	f004 f849 	bl	8006400 <HAL_RTCEx_BKUPWrite>
} else {
	// do not initialize if we get data from backup
}
  /* USER CODE END RTC_Init 2 */

}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	200002d8 	.word	0x200002d8
 800237c:	40002800 	.word	0x40002800
 8002380:	20000350 	.word	0x20000350
 8002384:	20000354 	.word	0x20000354
 8002388:	20000358 	.word	0x20000358

0800238c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08c      	sub	sp, #48	@ 0x30
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002392:	f107 030c 	add.w	r3, r7, #12
 8002396:	2224      	movs	r2, #36	@ 0x24
 8002398:	2100      	movs	r1, #0
 800239a:	4618      	mov	r0, r3
 800239c:	f005 fa59 	bl	8007852 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023a8:	4b20      	ldr	r3, [pc, #128]	@ (800242c <MX_TIM2_Init+0xa0>)
 80023aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80023b0:	4b1e      	ldr	r3, [pc, #120]	@ (800242c <MX_TIM2_Init+0xa0>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b6:	4b1d      	ldr	r3, [pc, #116]	@ (800242c <MX_TIM2_Init+0xa0>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59;
 80023bc:	4b1b      	ldr	r3, [pc, #108]	@ (800242c <MX_TIM2_Init+0xa0>)
 80023be:	223b      	movs	r2, #59	@ 0x3b
 80023c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c2:	4b1a      	ldr	r3, [pc, #104]	@ (800242c <MX_TIM2_Init+0xa0>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c8:	4b18      	ldr	r3, [pc, #96]	@ (800242c <MX_TIM2_Init+0xa0>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80023ce:	2301      	movs	r3, #1
 80023d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023d6:	2301      	movs	r3, #1
 80023d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023da:	2300      	movs	r3, #0
 80023dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023e2:	2300      	movs	r3, #0
 80023e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023e6:	2301      	movs	r3, #1
 80023e8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023ea:	2300      	movs	r3, #0
 80023ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80023f2:	f107 030c 	add.w	r3, r7, #12
 80023f6:	4619      	mov	r1, r3
 80023f8:	480c      	ldr	r0, [pc, #48]	@ (800242c <MX_TIM2_Init+0xa0>)
 80023fa:	f004 f837 	bl	800646c <HAL_TIM_Encoder_Init>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002404:	f000 fa66 	bl	80028d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002408:	2300      	movs	r3, #0
 800240a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800240c:	2300      	movs	r3, #0
 800240e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002410:	1d3b      	adds	r3, r7, #4
 8002412:	4619      	mov	r1, r3
 8002414:	4805      	ldr	r0, [pc, #20]	@ (800242c <MX_TIM2_Init+0xa0>)
 8002416:	f004 f9df 	bl	80067d8 <HAL_TIMEx_MasterConfigSynchronization>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002420:	f000 fa58 	bl	80028d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002424:	bf00      	nop
 8002426:	3730      	adds	r7, #48	@ 0x30
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	200002ec 	.word	0x200002ec

08002430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002436:	f107 0310 	add.w	r3, r7, #16
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	605a      	str	r2, [r3, #4]
 8002440:	609a      	str	r2, [r3, #8]
 8002442:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002444:	4b37      	ldr	r3, [pc, #220]	@ (8002524 <MX_GPIO_Init+0xf4>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	4a36      	ldr	r2, [pc, #216]	@ (8002524 <MX_GPIO_Init+0xf4>)
 800244a:	f043 0310 	orr.w	r3, r3, #16
 800244e:	6193      	str	r3, [r2, #24]
 8002450:	4b34      	ldr	r3, [pc, #208]	@ (8002524 <MX_GPIO_Init+0xf4>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800245c:	4b31      	ldr	r3, [pc, #196]	@ (8002524 <MX_GPIO_Init+0xf4>)
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	4a30      	ldr	r2, [pc, #192]	@ (8002524 <MX_GPIO_Init+0xf4>)
 8002462:	f043 0320 	orr.w	r3, r3, #32
 8002466:	6193      	str	r3, [r2, #24]
 8002468:	4b2e      	ldr	r3, [pc, #184]	@ (8002524 <MX_GPIO_Init+0xf4>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002474:	4b2b      	ldr	r3, [pc, #172]	@ (8002524 <MX_GPIO_Init+0xf4>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	4a2a      	ldr	r2, [pc, #168]	@ (8002524 <MX_GPIO_Init+0xf4>)
 800247a:	f043 0304 	orr.w	r3, r3, #4
 800247e:	6193      	str	r3, [r2, #24]
 8002480:	4b28      	ldr	r3, [pc, #160]	@ (8002524 <MX_GPIO_Init+0xf4>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	607b      	str	r3, [r7, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800248c:	4b25      	ldr	r3, [pc, #148]	@ (8002524 <MX_GPIO_Init+0xf4>)
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	4a24      	ldr	r2, [pc, #144]	@ (8002524 <MX_GPIO_Init+0xf4>)
 8002492:	f043 0308 	orr.w	r3, r3, #8
 8002496:	6193      	str	r3, [r2, #24]
 8002498:	4b22      	ldr	r3, [pc, #136]	@ (8002524 <MX_GPIO_Init+0xf4>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	f003 0308 	and.w	r3, r3, #8
 80024a0:	603b      	str	r3, [r7, #0]
 80024a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Alarm_Led_GPIO_Port, Alarm_Led_Pin, GPIO_PIN_RESET);
 80024a4:	2200      	movs	r2, #0
 80024a6:	2102      	movs	r1, #2
 80024a8:	481f      	ldr	r0, [pc, #124]	@ (8002528 <MX_GPIO_Init+0xf8>)
 80024aa:	f001 faf3 	bl	8003a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Alarm_Led_Pin */
  GPIO_InitStruct.Pin = Alarm_Led_Pin;
 80024ae:	2302      	movs	r3, #2
 80024b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b2:	2301      	movs	r3, #1
 80024b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ba:	2302      	movs	r3, #2
 80024bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Alarm_Led_GPIO_Port, &GPIO_InitStruct);
 80024be:	f107 0310 	add.w	r3, r7, #16
 80024c2:	4619      	mov	r1, r3
 80024c4:	4818      	ldr	r0, [pc, #96]	@ (8002528 <MX_GPIO_Init+0xf8>)
 80024c6:	f001 f961 	bl	800378c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024ca:	2308      	movs	r3, #8
 80024cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024ce:	4b17      	ldr	r3, [pc, #92]	@ (800252c <MX_GPIO_Init+0xfc>)
 80024d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d6:	f107 0310 	add.w	r3, r7, #16
 80024da:	4619      	mov	r1, r3
 80024dc:	4812      	ldr	r0, [pc, #72]	@ (8002528 <MX_GPIO_Init+0xf8>)
 80024de:	f001 f955 	bl	800378c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80024e2:	2302      	movs	r3, #2
 80024e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024e6:	4b11      	ldr	r3, [pc, #68]	@ (800252c <MX_GPIO_Init+0xfc>)
 80024e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ee:	f107 0310 	add.w	r3, r7, #16
 80024f2:	4619      	mov	r1, r3
 80024f4:	480e      	ldr	r0, [pc, #56]	@ (8002530 <MX_GPIO_Init+0x100>)
 80024f6:	f001 f949 	bl	800378c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80024fa:	2200      	movs	r2, #0
 80024fc:	2100      	movs	r1, #0
 80024fe:	2007      	movs	r0, #7
 8002500:	f001 f90d 	bl	800371e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002504:	2007      	movs	r0, #7
 8002506:	f001 f926 	bl	8003756 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800250a:	2200      	movs	r2, #0
 800250c:	2100      	movs	r1, #0
 800250e:	2009      	movs	r0, #9
 8002510:	f001 f905 	bl	800371e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002514:	2009      	movs	r0, #9
 8002516:	f001 f91e 	bl	8003756 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800251a:	bf00      	nop
 800251c:	3720      	adds	r7, #32
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40021000 	.word	0x40021000
 8002528:	40010800 	.word	0x40010800
 800252c:	10110000 	.word	0x10110000
 8002530:	40010c00 	.word	0x40010c00

08002534 <Set_RTC_Alarm>:

/* USER CODE BEGIN 4 */

void Set_RTC_Alarm(uint32_t timerMinutes)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  // Get the current time and date
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 800253c:	2201      	movs	r2, #1
 800253e:	492e      	ldr	r1, [pc, #184]	@ (80025f8 <Set_RTC_Alarm+0xc4>)
 8002540:	482e      	ldr	r0, [pc, #184]	@ (80025fc <Set_RTC_Alarm+0xc8>)
 8002542:	f003 f9f7 	bl	8005934 <HAL_RTC_GetTime>
  // Needed to read date as well due to a quirk
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD); 
 8002546:	2201      	movs	r2, #1
 8002548:	492d      	ldr	r1, [pc, #180]	@ (8002600 <Set_RTC_Alarm+0xcc>)
 800254a:	482c      	ldr	r0, [pc, #176]	@ (80025fc <Set_RTC_Alarm+0xc8>)
 800254c:	f003 fb80 	bl	8005c50 <HAL_RTC_GetDate>

  // Calculate the new alarm time
  uint32_t minutes = BCD_To_Decimal(sTime.Minutes) + timerMinutes;
 8002550:	4b29      	ldr	r3, [pc, #164]	@ (80025f8 <Set_RTC_Alarm+0xc4>)
 8002552:	785b      	ldrb	r3, [r3, #1]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff f9c5 	bl	80018e4 <BCD_To_Decimal>
 800255a:	4603      	mov	r3, r0
 800255c:	461a      	mov	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	617b      	str	r3, [r7, #20]
  uint32_t new_minutes = minutes % 60;
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	4b27      	ldr	r3, [pc, #156]	@ (8002604 <Set_RTC_Alarm+0xd0>)
 8002568:	fba3 1302 	umull	r1, r3, r3, r2
 800256c:	0959      	lsrs	r1, r3, #5
 800256e:	460b      	mov	r3, r1
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	1a5b      	subs	r3, r3, r1
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	613b      	str	r3, [r7, #16]
  uint32_t new_hours = (BCD_To_Decimal(sTime.Hours) + (minutes / 60)) % 24;
 800257a:	4b1f      	ldr	r3, [pc, #124]	@ (80025f8 <Set_RTC_Alarm+0xc4>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff f9b0 	bl	80018e4 <BCD_To_Decimal>
 8002584:	4603      	mov	r3, r0
 8002586:	4619      	mov	r1, r3
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	4a1e      	ldr	r2, [pc, #120]	@ (8002604 <Set_RTC_Alarm+0xd0>)
 800258c:	fba2 2303 	umull	r2, r3, r2, r3
 8002590:	095b      	lsrs	r3, r3, #5
 8002592:	18ca      	adds	r2, r1, r3
 8002594:	4b1c      	ldr	r3, [pc, #112]	@ (8002608 <Set_RTC_Alarm+0xd4>)
 8002596:	fba3 1302 	umull	r1, r3, r3, r2
 800259a:	0919      	lsrs	r1, r3, #4
 800259c:	460b      	mov	r3, r1
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	440b      	add	r3, r1
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	60fb      	str	r3, [r7, #12]

  sAlarm.AlarmTime.Hours = Decimal_To_BCD(new_hours);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff f975 	bl	800189c <Decimal_To_BCD>
 80025b2:	4603      	mov	r3, r0
 80025b4:	461a      	mov	r2, r3
 80025b6:	4b15      	ldr	r3, [pc, #84]	@ (800260c <Set_RTC_Alarm+0xd8>)
 80025b8:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = Decimal_To_BCD(new_minutes);
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff f96c 	bl	800189c <Decimal_To_BCD>
 80025c4:	4603      	mov	r3, r0
 80025c6:	461a      	mov	r2, r3
 80025c8:	4b10      	ldr	r3, [pc, #64]	@ (800260c <Set_RTC_Alarm+0xd8>)
 80025ca:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = sTime.Seconds;
 80025cc:	4b0a      	ldr	r3, [pc, #40]	@ (80025f8 <Set_RTC_Alarm+0xc4>)
 80025ce:	789a      	ldrb	r2, [r3, #2]
 80025d0:	4b0e      	ldr	r3, [pc, #56]	@ (800260c <Set_RTC_Alarm+0xd8>)
 80025d2:	709a      	strb	r2, [r3, #2]

  // Set the alarm
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80025d4:	2201      	movs	r2, #1
 80025d6:	490d      	ldr	r1, [pc, #52]	@ (800260c <Set_RTC_Alarm+0xd8>)
 80025d8:	4808      	ldr	r0, [pc, #32]	@ (80025fc <Set_RTC_Alarm+0xc8>)
 80025da:	f003 fb8d 	bl	8005cf8 <HAL_RTC_SetAlarm_IT>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <Set_RTC_Alarm+0xb4>
  {
    // Initialization Error
    Error_Handler();
 80025e4:	f000 f976 	bl	80028d4 <Error_Handler>
  }

  // Clear encoder counter
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80025e8:	4b09      	ldr	r3, [pc, #36]	@ (8002610 <Set_RTC_Alarm+0xdc>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2200      	movs	r2, #0
 80025ee:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80025f0:	bf00      	nop
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20000350 	.word	0x20000350
 80025fc:	200002d8 	.word	0x200002d8
 8002600:	20000360 	.word	0x20000360
 8002604:	88888889 	.word	0x88888889
 8002608:	aaaaaaab 	.word	0xaaaaaaab
 800260c:	20000358 	.word	0x20000358
 8002610:	200002ec 	.word	0x200002ec

08002614 <Clear_RTC_Alarm>:

void Clear_RTC_Alarm()
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8002618:	2201      	movs	r2, #1
 800261a:	490c      	ldr	r1, [pc, #48]	@ (800264c <Clear_RTC_Alarm+0x38>)
 800261c:	480c      	ldr	r0, [pc, #48]	@ (8002650 <Clear_RTC_Alarm+0x3c>)
 800261e:	f003 f989 	bl	8005934 <HAL_RTC_GetTime>

	sAlarm.AlarmTime.Hours = sTime.Hours;
 8002622:	4b0a      	ldr	r3, [pc, #40]	@ (800264c <Clear_RTC_Alarm+0x38>)
 8002624:	781a      	ldrb	r2, [r3, #0]
 8002626:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <Clear_RTC_Alarm+0x40>)
 8002628:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmTime.Minutes = sTime.Minutes;
 800262a:	4b08      	ldr	r3, [pc, #32]	@ (800264c <Clear_RTC_Alarm+0x38>)
 800262c:	785a      	ldrb	r2, [r3, #1]
 800262e:	4b09      	ldr	r3, [pc, #36]	@ (8002654 <Clear_RTC_Alarm+0x40>)
 8002630:	705a      	strb	r2, [r3, #1]
	sAlarm.AlarmTime.Seconds = sTime.Seconds;
 8002632:	4b06      	ldr	r3, [pc, #24]	@ (800264c <Clear_RTC_Alarm+0x38>)
 8002634:	789a      	ldrb	r2, [r3, #2]
 8002636:	4b07      	ldr	r3, [pc, #28]	@ (8002654 <Clear_RTC_Alarm+0x40>)
 8002638:	709a      	strb	r2, [r3, #2]

	isAlarm = 0;
 800263a:	4b07      	ldr	r3, [pc, #28]	@ (8002658 <Clear_RTC_Alarm+0x44>)
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
	alarmIsSet = 0;
 8002640:	4b06      	ldr	r3, [pc, #24]	@ (800265c <Clear_RTC_Alarm+0x48>)
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000350 	.word	0x20000350
 8002650:	200002d8 	.word	0x200002d8
 8002654:	20000358 	.word	0x20000358
 8002658:	20000341 	.word	0x20000341
 800265c:	20000342 	.word	0x20000342

08002660 <HAL_GPIO_EXTI_Callback>:

volatile uint32_t lastInterruptTime1 = 0;
volatile uint32_t lastInterruptTime3 = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	80fb      	strh	r3, [r7, #6]

	if (isAlarm == 1) {
 800266a:	4b78      	ldr	r3, [pc, #480]	@ (800284c <HAL_GPIO_EXTI_Callback+0x1ec>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d102      	bne.n	8002678 <HAL_GPIO_EXTI_Callback+0x18>
		Clear_RTC_Alarm();
 8002672:	f7ff ffcf 	bl	8002614 <Clear_RTC_Alarm>

				lastInterruptTime1 = currentTime;
			}
		}
	}
}
 8002676:	e0e5      	b.n	8002844 <HAL_GPIO_EXTI_Callback+0x1e4>
		uint32_t currentTime = HAL_GetTick();
 8002678:	f000 ff4c 	bl	8003514 <HAL_GetTick>
 800267c:	60f8      	str	r0, [r7, #12]
		if (GPIO_Pin == GPIO_PIN_3)
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	2b08      	cmp	r3, #8
 8002682:	d148      	bne.n	8002716 <HAL_GPIO_EXTI_Callback+0xb6>
			if (currentTime - lastInterruptTime3 > 300)
 8002684:	4b72      	ldr	r3, [pc, #456]	@ (8002850 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002690:	d941      	bls.n	8002716 <HAL_GPIO_EXTI_Callback+0xb6>
				if (activeScreen == screenTimer)
 8002692:	4b70      	ldr	r3, [pc, #448]	@ (8002854 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002694:	781a      	ldrb	r2, [r3, #0]
 8002696:	4b70      	ldr	r3, [pc, #448]	@ (8002858 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d118      	bne.n	80026d0 <HAL_GPIO_EXTI_Callback+0x70>
					uint8_t rawCounter = __HAL_TIM_GET_COUNTER(&htim2);
 800269e:	4b6f      	ldr	r3, [pc, #444]	@ (800285c <HAL_GPIO_EXTI_Callback+0x1fc>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a4:	72fb      	strb	r3, [r7, #11]
					if (rawCounter != 0) {
 80026a6:	7afb      	ldrb	r3, [r7, #11]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00e      	beq.n	80026ca <HAL_GPIO_EXTI_Callback+0x6a>
						if (alarmIsSet == 1) {
 80026ac:	4b6c      	ldr	r3, [pc, #432]	@ (8002860 <HAL_GPIO_EXTI_Callback+0x200>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d102      	bne.n	80026ba <HAL_GPIO_EXTI_Callback+0x5a>
							Clear_RTC_Alarm();
 80026b4:	f7ff ffae 	bl	8002614 <Clear_RTC_Alarm>
 80026b8:	e02a      	b.n	8002710 <HAL_GPIO_EXTI_Callback+0xb0>
							Set_RTC_Alarm(rawCounter);
 80026ba:	7afb      	ldrb	r3, [r7, #11]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff ff39 	bl	8002534 <Set_RTC_Alarm>
							alarmIsSet = 1;
 80026c2:	4b67      	ldr	r3, [pc, #412]	@ (8002860 <HAL_GPIO_EXTI_Callback+0x200>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
 80026c8:	e022      	b.n	8002710 <HAL_GPIO_EXTI_Callback+0xb0>
						Clear_RTC_Alarm();
 80026ca:	f7ff ffa3 	bl	8002614 <Clear_RTC_Alarm>
 80026ce:	e01f      	b.n	8002710 <HAL_GPIO_EXTI_Callback+0xb0>
					if (activeScreen == screenSetTime) {
 80026d0:	4b60      	ldr	r3, [pc, #384]	@ (8002854 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80026d2:	781a      	ldrb	r2, [r3, #0]
 80026d4:	4b63      	ldr	r3, [pc, #396]	@ (8002864 <HAL_GPIO_EXTI_Callback+0x204>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d104      	bne.n	80026e6 <HAL_GPIO_EXTI_Callback+0x86>
						activeScreen = screenMenu;
 80026dc:	4b62      	ldr	r3, [pc, #392]	@ (8002868 <HAL_GPIO_EXTI_Callback+0x208>)
 80026de:	781a      	ldrb	r2, [r3, #0]
 80026e0:	4b5c      	ldr	r3, [pc, #368]	@ (8002854 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80026e2:	701a      	strb	r2, [r3, #0]
 80026e4:	e014      	b.n	8002710 <HAL_GPIO_EXTI_Callback+0xb0>
					} else if (activeScreen == screenMenu) {
 80026e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002854 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80026e8:	781a      	ldrb	r2, [r3, #0]
 80026ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002868 <HAL_GPIO_EXTI_Callback+0x208>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d104      	bne.n	80026fc <HAL_GPIO_EXTI_Callback+0x9c>
						activeScreen = screenTime;
 80026f2:	4b5e      	ldr	r3, [pc, #376]	@ (800286c <HAL_GPIO_EXTI_Callback+0x20c>)
 80026f4:	781a      	ldrb	r2, [r3, #0]
 80026f6:	4b57      	ldr	r3, [pc, #348]	@ (8002854 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80026f8:	701a      	strb	r2, [r3, #0]
 80026fa:	e009      	b.n	8002710 <HAL_GPIO_EXTI_Callback+0xb0>
					} else if (activeScreen == screenTime) {
 80026fc:	4b55      	ldr	r3, [pc, #340]	@ (8002854 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80026fe:	781a      	ldrb	r2, [r3, #0]
 8002700:	4b5a      	ldr	r3, [pc, #360]	@ (800286c <HAL_GPIO_EXTI_Callback+0x20c>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d103      	bne.n	8002710 <HAL_GPIO_EXTI_Callback+0xb0>
						activeScreen = screenMenu;
 8002708:	4b57      	ldr	r3, [pc, #348]	@ (8002868 <HAL_GPIO_EXTI_Callback+0x208>)
 800270a:	781a      	ldrb	r2, [r3, #0]
 800270c:	4b51      	ldr	r3, [pc, #324]	@ (8002854 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800270e:	701a      	strb	r2, [r3, #0]
				lastInterruptTime3 = currentTime;
 8002710:	4a4f      	ldr	r2, [pc, #316]	@ (8002850 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6013      	str	r3, [r2, #0]
		if (GPIO_Pin == GPIO_PIN_1)
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	2b02      	cmp	r3, #2
 800271a:	f040 8093 	bne.w	8002844 <HAL_GPIO_EXTI_Callback+0x1e4>
			if (currentTime - lastInterruptTime1 > 300)
 800271e:	4b54      	ldr	r3, [pc, #336]	@ (8002870 <HAL_GPIO_EXTI_Callback+0x210>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800272a:	f240 808b 	bls.w	8002844 <HAL_GPIO_EXTI_Callback+0x1e4>
				if (activeScreen == screenTimer)
 800272e:	4b49      	ldr	r3, [pc, #292]	@ (8002854 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002730:	781a      	ldrb	r2, [r3, #0]
 8002732:	4b49      	ldr	r3, [pc, #292]	@ (8002858 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d104      	bne.n	8002744 <HAL_GPIO_EXTI_Callback+0xe4>
					activeScreen = screenTime;
 800273a:	4b4c      	ldr	r3, [pc, #304]	@ (800286c <HAL_GPIO_EXTI_Callback+0x20c>)
 800273c:	781a      	ldrb	r2, [r3, #0]
 800273e:	4b45      	ldr	r3, [pc, #276]	@ (8002854 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002740:	701a      	strb	r2, [r3, #0]
 8002742:	e07c      	b.n	800283e <HAL_GPIO_EXTI_Callback+0x1de>
				} else if (activeScreen == screenWeather)
 8002744:	4b43      	ldr	r3, [pc, #268]	@ (8002854 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002746:	781a      	ldrb	r2, [r3, #0]
 8002748:	4b4a      	ldr	r3, [pc, #296]	@ (8002874 <HAL_GPIO_EXTI_Callback+0x214>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d104      	bne.n	800275a <HAL_GPIO_EXTI_Callback+0xfa>
					activeScreen = screenTimer;
 8002750:	4b41      	ldr	r3, [pc, #260]	@ (8002858 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8002752:	781a      	ldrb	r2, [r3, #0]
 8002754:	4b3f      	ldr	r3, [pc, #252]	@ (8002854 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002756:	701a      	strb	r2, [r3, #0]
 8002758:	e071      	b.n	800283e <HAL_GPIO_EXTI_Callback+0x1de>
				} else if (activeScreen == screenTime)
 800275a:	4b3e      	ldr	r3, [pc, #248]	@ (8002854 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800275c:	781a      	ldrb	r2, [r3, #0]
 800275e:	4b43      	ldr	r3, [pc, #268]	@ (800286c <HAL_GPIO_EXTI_Callback+0x20c>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d104      	bne.n	8002770 <HAL_GPIO_EXTI_Callback+0x110>
					activeScreen = screenWeather;
 8002766:	4b43      	ldr	r3, [pc, #268]	@ (8002874 <HAL_GPIO_EXTI_Callback+0x214>)
 8002768:	781a      	ldrb	r2, [r3, #0]
 800276a:	4b3a      	ldr	r3, [pc, #232]	@ (8002854 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800276c:	701a      	strb	r2, [r3, #0]
 800276e:	e066      	b.n	800283e <HAL_GPIO_EXTI_Callback+0x1de>
				} else if (activeScreen == screenMenu)
 8002770:	4b38      	ldr	r3, [pc, #224]	@ (8002854 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002772:	781a      	ldrb	r2, [r3, #0]
 8002774:	4b3c      	ldr	r3, [pc, #240]	@ (8002868 <HAL_GPIO_EXTI_Callback+0x208>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d10a      	bne.n	8002792 <HAL_GPIO_EXTI_Callback+0x132>
					if (activeMenuOption == menuSetTime)
 800277c:	4b3e      	ldr	r3, [pc, #248]	@ (8002878 <HAL_GPIO_EXTI_Callback+0x218>)
 800277e:	781a      	ldrb	r2, [r3, #0]
 8002780:	4b3e      	ldr	r3, [pc, #248]	@ (800287c <HAL_GPIO_EXTI_Callback+0x21c>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d15a      	bne.n	800283e <HAL_GPIO_EXTI_Callback+0x1de>
						activeScreen = screenSetTime;
 8002788:	4b36      	ldr	r3, [pc, #216]	@ (8002864 <HAL_GPIO_EXTI_Callback+0x204>)
 800278a:	781a      	ldrb	r2, [r3, #0]
 800278c:	4b31      	ldr	r3, [pc, #196]	@ (8002854 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800278e:	701a      	strb	r2, [r3, #0]
 8002790:	e055      	b.n	800283e <HAL_GPIO_EXTI_Callback+0x1de>
				} else if (activeScreen == screenSetTime) {
 8002792:	4b30      	ldr	r3, [pc, #192]	@ (8002854 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002794:	781a      	ldrb	r2, [r3, #0]
 8002796:	4b33      	ldr	r3, [pc, #204]	@ (8002864 <HAL_GPIO_EXTI_Callback+0x204>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d14f      	bne.n	800283e <HAL_GPIO_EXTI_Callback+0x1de>
					  if (activeSetTimeOption == setTimeSecondsOption) {
 800279e:	4b38      	ldr	r3, [pc, #224]	@ (8002880 <HAL_GPIO_EXTI_Callback+0x220>)
 80027a0:	781a      	ldrb	r2, [r3, #0]
 80027a2:	4b38      	ldr	r3, [pc, #224]	@ (8002884 <HAL_GPIO_EXTI_Callback+0x224>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d111      	bne.n	80027ce <HAL_GPIO_EXTI_Callback+0x16e>
						  sTime.Seconds = Decimal_To_BCD(setTimeSeconds);
 80027aa:	4b37      	ldr	r3, [pc, #220]	@ (8002888 <HAL_GPIO_EXTI_Callback+0x228>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff f874 	bl	800189c <Decimal_To_BCD>
 80027b4:	4603      	mov	r3, r0
 80027b6:	461a      	mov	r2, r3
 80027b8:	4b34      	ldr	r3, [pc, #208]	@ (800288c <HAL_GPIO_EXTI_Callback+0x22c>)
 80027ba:	709a      	strb	r2, [r3, #2]
						  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80027bc:	4b27      	ldr	r3, [pc, #156]	@ (800285c <HAL_GPIO_EXTI_Callback+0x1fc>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2200      	movs	r2, #0
 80027c2:	625a      	str	r2, [r3, #36]	@ 0x24
						  activeSetTimeOption = setTimeMinutesOption;
 80027c4:	4b32      	ldr	r3, [pc, #200]	@ (8002890 <HAL_GPIO_EXTI_Callback+0x230>)
 80027c6:	781a      	ldrb	r2, [r3, #0]
 80027c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002880 <HAL_GPIO_EXTI_Callback+0x220>)
 80027ca:	701a      	strb	r2, [r3, #0]
 80027cc:	e037      	b.n	800283e <HAL_GPIO_EXTI_Callback+0x1de>
					  } else if (activeSetTimeOption == setTimeMinutesOption) {
 80027ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002880 <HAL_GPIO_EXTI_Callback+0x220>)
 80027d0:	781a      	ldrb	r2, [r3, #0]
 80027d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002890 <HAL_GPIO_EXTI_Callback+0x230>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d111      	bne.n	80027fe <HAL_GPIO_EXTI_Callback+0x19e>
						  sTime.Minutes = Decimal_To_BCD(setTimeMinutes);
 80027da:	4b2e      	ldr	r3, [pc, #184]	@ (8002894 <HAL_GPIO_EXTI_Callback+0x234>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff f85c 	bl	800189c <Decimal_To_BCD>
 80027e4:	4603      	mov	r3, r0
 80027e6:	461a      	mov	r2, r3
 80027e8:	4b28      	ldr	r3, [pc, #160]	@ (800288c <HAL_GPIO_EXTI_Callback+0x22c>)
 80027ea:	705a      	strb	r2, [r3, #1]
						  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80027ec:	4b1b      	ldr	r3, [pc, #108]	@ (800285c <HAL_GPIO_EXTI_Callback+0x1fc>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2200      	movs	r2, #0
 80027f2:	625a      	str	r2, [r3, #36]	@ 0x24
						  activeSetTimeOption = setTimeHoursOption;
 80027f4:	4b28      	ldr	r3, [pc, #160]	@ (8002898 <HAL_GPIO_EXTI_Callback+0x238>)
 80027f6:	781a      	ldrb	r2, [r3, #0]
 80027f8:	4b21      	ldr	r3, [pc, #132]	@ (8002880 <HAL_GPIO_EXTI_Callback+0x220>)
 80027fa:	701a      	strb	r2, [r3, #0]
 80027fc:	e01f      	b.n	800283e <HAL_GPIO_EXTI_Callback+0x1de>
					  } else if (activeSetTimeOption == setTimeHoursOption) {
 80027fe:	4b20      	ldr	r3, [pc, #128]	@ (8002880 <HAL_GPIO_EXTI_Callback+0x220>)
 8002800:	781a      	ldrb	r2, [r3, #0]
 8002802:	4b25      	ldr	r3, [pc, #148]	@ (8002898 <HAL_GPIO_EXTI_Callback+0x238>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d119      	bne.n	800283e <HAL_GPIO_EXTI_Callback+0x1de>
						  sTime.Hours = Decimal_To_BCD(setTimeHours);
 800280a:	4b24      	ldr	r3, [pc, #144]	@ (800289c <HAL_GPIO_EXTI_Callback+0x23c>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff f844 	bl	800189c <Decimal_To_BCD>
 8002814:	4603      	mov	r3, r0
 8002816:	461a      	mov	r2, r3
 8002818:	4b1c      	ldr	r3, [pc, #112]	@ (800288c <HAL_GPIO_EXTI_Callback+0x22c>)
 800281a:	701a      	strb	r2, [r3, #0]
						  __HAL_TIM_SET_COUNTER(&htim2, 0);
 800281c:	4b0f      	ldr	r3, [pc, #60]	@ (800285c <HAL_GPIO_EXTI_Callback+0x1fc>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2200      	movs	r2, #0
 8002822:	625a      	str	r2, [r3, #36]	@ 0x24
						  HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BCD);
 8002824:	2201      	movs	r2, #1
 8002826:	4919      	ldr	r1, [pc, #100]	@ (800288c <HAL_GPIO_EXTI_Callback+0x22c>)
 8002828:	481d      	ldr	r0, [pc, #116]	@ (80028a0 <HAL_GPIO_EXTI_Callback+0x240>)
 800282a:	f002 ffeb 	bl	8005804 <HAL_RTC_SetTime>
						  activeSetTimeOption = setTimeSecondsOption;
 800282e:	4b15      	ldr	r3, [pc, #84]	@ (8002884 <HAL_GPIO_EXTI_Callback+0x224>)
 8002830:	781a      	ldrb	r2, [r3, #0]
 8002832:	4b13      	ldr	r3, [pc, #76]	@ (8002880 <HAL_GPIO_EXTI_Callback+0x220>)
 8002834:	701a      	strb	r2, [r3, #0]
						  activeScreen = screenMenu;
 8002836:	4b0c      	ldr	r3, [pc, #48]	@ (8002868 <HAL_GPIO_EXTI_Callback+0x208>)
 8002838:	781a      	ldrb	r2, [r3, #0]
 800283a:	4b06      	ldr	r3, [pc, #24]	@ (8002854 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800283c:	701a      	strb	r2, [r3, #0]
				lastInterruptTime1 = currentTime;
 800283e:	4a0c      	ldr	r2, [pc, #48]	@ (8002870 <HAL_GPIO_EXTI_Callback+0x210>)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6013      	str	r3, [r2, #0]
}
 8002844:	bf00      	nop
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20000341 	.word	0x20000341
 8002850:	20000368 	.word	0x20000368
 8002854:	20000343 	.word	0x20000343
 8002858:	20000001 	.word	0x20000001
 800285c:	200002ec 	.word	0x200002ec
 8002860:	20000342 	.word	0x20000342
 8002864:	20000003 	.word	0x20000003
 8002868:	20000002 	.word	0x20000002
 800286c:	20000344 	.word	0x20000344
 8002870:	20000364 	.word	0x20000364
 8002874:	20000000 	.word	0x20000000
 8002878:	20000345 	.word	0x20000345
 800287c:	20000346 	.word	0x20000346
 8002880:	20000347 	.word	0x20000347
 8002884:	20000348 	.word	0x20000348
 8002888:	2000034b 	.word	0x2000034b
 800288c:	20000350 	.word	0x20000350
 8002890:	20000005 	.word	0x20000005
 8002894:	2000034a 	.word	0x2000034a
 8002898:	20000006 	.word	0x20000006
 800289c:	20000349 	.word	0x20000349
 80028a0:	200002d8 	.word	0x200002d8

080028a4 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
	if (alarmIsSet == 1) {
 80028ac:	4b07      	ldr	r3, [pc, #28]	@ (80028cc <HAL_RTC_AlarmAEventCallback+0x28>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d105      	bne.n	80028c0 <HAL_RTC_AlarmAEventCallback+0x1c>
		isAlarm = 1;
 80028b4:	4b06      	ldr	r3, [pc, #24]	@ (80028d0 <HAL_RTC_AlarmAEventCallback+0x2c>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	701a      	strb	r2, [r3, #0]
		alarmIsSet = 0;
 80028ba:	4b04      	ldr	r3, [pc, #16]	@ (80028cc <HAL_RTC_AlarmAEventCallback+0x28>)
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
	}
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	20000342 	.word	0x20000342
 80028d0:	20000341 	.word	0x20000341

080028d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028d8:	b672      	cpsid	i
}
 80028da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028dc:	bf00      	nop
 80028de:	e7fd      	b.n	80028dc <Error_Handler+0x8>

080028e0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af04      	add	r7, sp, #16
 80028f2:	4603      	mov	r3, r0
 80028f4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80028f6:	f04f 33ff 	mov.w	r3, #4294967295
 80028fa:	9302      	str	r3, [sp, #8]
 80028fc:	2301      	movs	r3, #1
 80028fe:	9301      	str	r3, [sp, #4]
 8002900:	1dfb      	adds	r3, r7, #7
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	2301      	movs	r3, #1
 8002906:	2200      	movs	r2, #0
 8002908:	2178      	movs	r1, #120	@ 0x78
 800290a:	4803      	ldr	r0, [pc, #12]	@ (8002918 <ssd1306_WriteCommand+0x2c>)
 800290c:	f001 fa50 	bl	8003db0 <HAL_I2C_Mem_Write>
}
 8002910:	bf00      	nop
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20000230 	.word	0x20000230

0800291c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af04      	add	r7, sp, #16
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	b29b      	uxth	r3, r3
 800292a:	f04f 32ff 	mov.w	r2, #4294967295
 800292e:	9202      	str	r2, [sp, #8]
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	2301      	movs	r3, #1
 8002938:	2240      	movs	r2, #64	@ 0x40
 800293a:	2178      	movs	r1, #120	@ 0x78
 800293c:	4803      	ldr	r0, [pc, #12]	@ (800294c <ssd1306_WriteData+0x30>)
 800293e:	f001 fa37 	bl	8003db0 <HAL_I2C_Mem_Write>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000230 	.word	0x20000230

08002950 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002954:	f7ff ffc4 	bl	80028e0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002958:	2064      	movs	r0, #100	@ 0x64
 800295a:	f000 fde5 	bl	8003528 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800295e:	2000      	movs	r0, #0
 8002960:	f000 fafa 	bl	8002f58 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002964:	2020      	movs	r0, #32
 8002966:	f7ff ffc1 	bl	80028ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800296a:	2000      	movs	r0, #0
 800296c:	f7ff ffbe 	bl	80028ec <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002970:	20b0      	movs	r0, #176	@ 0xb0
 8002972:	f7ff ffbb 	bl	80028ec <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002976:	20c8      	movs	r0, #200	@ 0xc8
 8002978:	f7ff ffb8 	bl	80028ec <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800297c:	2000      	movs	r0, #0
 800297e:	f7ff ffb5 	bl	80028ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002982:	2010      	movs	r0, #16
 8002984:	f7ff ffb2 	bl	80028ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002988:	2040      	movs	r0, #64	@ 0x40
 800298a:	f7ff ffaf 	bl	80028ec <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800298e:	20ff      	movs	r0, #255	@ 0xff
 8002990:	f000 face 	bl	8002f30 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002994:	20a1      	movs	r0, #161	@ 0xa1
 8002996:	f7ff ffa9 	bl	80028ec <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800299a:	20a6      	movs	r0, #166	@ 0xa6
 800299c:	f7ff ffa6 	bl	80028ec <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80029a0:	20a8      	movs	r0, #168	@ 0xa8
 80029a2:	f7ff ffa3 	bl	80028ec <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80029a6:	203f      	movs	r0, #63	@ 0x3f
 80029a8:	f7ff ffa0 	bl	80028ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80029ac:	20a4      	movs	r0, #164	@ 0xa4
 80029ae:	f7ff ff9d 	bl	80028ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80029b2:	20d3      	movs	r0, #211	@ 0xd3
 80029b4:	f7ff ff9a 	bl	80028ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80029b8:	2000      	movs	r0, #0
 80029ba:	f7ff ff97 	bl	80028ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80029be:	20d5      	movs	r0, #213	@ 0xd5
 80029c0:	f7ff ff94 	bl	80028ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80029c4:	20f0      	movs	r0, #240	@ 0xf0
 80029c6:	f7ff ff91 	bl	80028ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80029ca:	20d9      	movs	r0, #217	@ 0xd9
 80029cc:	f7ff ff8e 	bl	80028ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80029d0:	2022      	movs	r0, #34	@ 0x22
 80029d2:	f7ff ff8b 	bl	80028ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80029d6:	20da      	movs	r0, #218	@ 0xda
 80029d8:	f7ff ff88 	bl	80028ec <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80029dc:	2012      	movs	r0, #18
 80029de:	f7ff ff85 	bl	80028ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80029e2:	20db      	movs	r0, #219	@ 0xdb
 80029e4:	f7ff ff82 	bl	80028ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80029e8:	2020      	movs	r0, #32
 80029ea:	f7ff ff7f 	bl	80028ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80029ee:	208d      	movs	r0, #141	@ 0x8d
 80029f0:	f7ff ff7c 	bl	80028ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80029f4:	2014      	movs	r0, #20
 80029f6:	f7ff ff79 	bl	80028ec <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80029fa:	2001      	movs	r0, #1
 80029fc:	f000 faac 	bl	8002f58 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002a00:	2000      	movs	r0, #0
 8002a02:	f000 f80f 	bl	8002a24 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002a06:	f000 f825 	bl	8002a54 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002a0a:	4b05      	ldr	r3, [pc, #20]	@ (8002a20 <ssd1306_Init+0xd0>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002a10:	4b03      	ldr	r3, [pc, #12]	@ (8002a20 <ssd1306_Init+0xd0>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002a16:	4b02      	ldr	r3, [pc, #8]	@ (8002a20 <ssd1306_Init+0xd0>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	711a      	strb	r2, [r3, #4]
}
 8002a1c:	bf00      	nop
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	2000076c 	.word	0x2000076c

08002a24 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <ssd1306_Fill+0x14>
 8002a34:	2300      	movs	r3, #0
 8002a36:	e000      	b.n	8002a3a <ssd1306_Fill+0x16>
 8002a38:	23ff      	movs	r3, #255	@ 0xff
 8002a3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4803      	ldr	r0, [pc, #12]	@ (8002a50 <ssd1306_Fill+0x2c>)
 8002a42:	f004 ff06 	bl	8007852 <memset>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	2000036c 	.word	0x2000036c

08002a54 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	71fb      	strb	r3, [r7, #7]
 8002a5e:	e016      	b.n	8002a8e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	3b50      	subs	r3, #80	@ 0x50
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff ff40 	bl	80028ec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f7ff ff3d 	bl	80028ec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002a72:	2010      	movs	r0, #16
 8002a74:	f7ff ff3a 	bl	80028ec <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	01db      	lsls	r3, r3, #7
 8002a7c:	4a08      	ldr	r2, [pc, #32]	@ (8002aa0 <ssd1306_UpdateScreen+0x4c>)
 8002a7e:	4413      	add	r3, r2
 8002a80:	2180      	movs	r1, #128	@ 0x80
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff ff4a 	bl	800291c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	71fb      	strb	r3, [r7, #7]
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	2b07      	cmp	r3, #7
 8002a92:	d9e5      	bls.n	8002a60 <ssd1306_UpdateScreen+0xc>
    }
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	2000036c 	.word	0x2000036c

08002aa4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	71fb      	strb	r3, [r7, #7]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	71bb      	strb	r3, [r7, #6]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	db3d      	blt.n	8002b3a <ssd1306_DrawPixel+0x96>
 8002abe:	79bb      	ldrb	r3, [r7, #6]
 8002ac0:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ac2:	d83a      	bhi.n	8002b3a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002ac4:	797b      	ldrb	r3, [r7, #5]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d11a      	bne.n	8002b00 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002aca:	79fa      	ldrb	r2, [r7, #7]
 8002acc:	79bb      	ldrb	r3, [r7, #6]
 8002ace:	08db      	lsrs	r3, r3, #3
 8002ad0:	b2d8      	uxtb	r0, r3
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	01db      	lsls	r3, r3, #7
 8002ad6:	4413      	add	r3, r2
 8002ad8:	4a1a      	ldr	r2, [pc, #104]	@ (8002b44 <ssd1306_DrawPixel+0xa0>)
 8002ada:	5cd3      	ldrb	r3, [r2, r3]
 8002adc:	b25a      	sxtb	r2, r3
 8002ade:	79bb      	ldrb	r3, [r7, #6]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aea:	b25b      	sxtb	r3, r3
 8002aec:	4313      	orrs	r3, r2
 8002aee:	b259      	sxtb	r1, r3
 8002af0:	79fa      	ldrb	r2, [r7, #7]
 8002af2:	4603      	mov	r3, r0
 8002af4:	01db      	lsls	r3, r3, #7
 8002af6:	4413      	add	r3, r2
 8002af8:	b2c9      	uxtb	r1, r1
 8002afa:	4a12      	ldr	r2, [pc, #72]	@ (8002b44 <ssd1306_DrawPixel+0xa0>)
 8002afc:	54d1      	strb	r1, [r2, r3]
 8002afe:	e01d      	b.n	8002b3c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002b00:	79fa      	ldrb	r2, [r7, #7]
 8002b02:	79bb      	ldrb	r3, [r7, #6]
 8002b04:	08db      	lsrs	r3, r3, #3
 8002b06:	b2d8      	uxtb	r0, r3
 8002b08:	4603      	mov	r3, r0
 8002b0a:	01db      	lsls	r3, r3, #7
 8002b0c:	4413      	add	r3, r2
 8002b0e:	4a0d      	ldr	r2, [pc, #52]	@ (8002b44 <ssd1306_DrawPixel+0xa0>)
 8002b10:	5cd3      	ldrb	r3, [r2, r3]
 8002b12:	b25a      	sxtb	r2, r3
 8002b14:	79bb      	ldrb	r3, [r7, #6]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b20:	b25b      	sxtb	r3, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	b25b      	sxtb	r3, r3
 8002b26:	4013      	ands	r3, r2
 8002b28:	b259      	sxtb	r1, r3
 8002b2a:	79fa      	ldrb	r2, [r7, #7]
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	01db      	lsls	r3, r3, #7
 8002b30:	4413      	add	r3, r2
 8002b32:	b2c9      	uxtb	r1, r1
 8002b34:	4a03      	ldr	r2, [pc, #12]	@ (8002b44 <ssd1306_DrawPixel+0xa0>)
 8002b36:	54d1      	strb	r1, [r2, r3]
 8002b38:	e000      	b.n	8002b3c <ssd1306_DrawPixel+0x98>
        return;
 8002b3a:	bf00      	nop
    }
}
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	2000036c 	.word	0x2000036c

08002b48 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002b48:	b590      	push	{r4, r7, lr}
 8002b4a:	b089      	sub	sp, #36	@ 0x24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4604      	mov	r4, r0
 8002b50:	4638      	mov	r0, r7
 8002b52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002b56:	4623      	mov	r3, r4
 8002b58:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
 8002b5c:	2b1f      	cmp	r3, #31
 8002b5e:	d902      	bls.n	8002b66 <ssd1306_WriteChar+0x1e>
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	2b7e      	cmp	r3, #126	@ 0x7e
 8002b64:	d901      	bls.n	8002b6a <ssd1306_WriteChar+0x22>
        return 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e077      	b.n	8002c5a <ssd1306_WriteChar+0x112>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002b6a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c64 <ssd1306_WriteChar+0x11c>)
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	783b      	ldrb	r3, [r7, #0]
 8002b72:	4413      	add	r3, r2
 8002b74:	2b80      	cmp	r3, #128	@ 0x80
 8002b76:	dc06      	bgt.n	8002b86 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002b78:	4b3a      	ldr	r3, [pc, #232]	@ (8002c64 <ssd1306_WriteChar+0x11c>)
 8002b7a:	885b      	ldrh	r3, [r3, #2]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	787b      	ldrb	r3, [r7, #1]
 8002b80:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002b82:	2b40      	cmp	r3, #64	@ 0x40
 8002b84:	dd01      	ble.n	8002b8a <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	e067      	b.n	8002c5a <ssd1306_WriteChar+0x112>
    }

    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
 8002b8e:	e04e      	b.n	8002c2e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	3b20      	subs	r3, #32
 8002b96:	7879      	ldrb	r1, [r7, #1]
 8002b98:	fb01 f303 	mul.w	r3, r1, r3
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	440b      	add	r3, r1
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	4413      	add	r3, r2
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8002baa:	2300      	movs	r3, #0
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	e036      	b.n	8002c1e <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d013      	beq.n	8002be8 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002bc0:	4b28      	ldr	r3, [pc, #160]	@ (8002c64 <ssd1306_WriteChar+0x11c>)
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	b2d8      	uxtb	r0, r3
 8002bce:	4b25      	ldr	r3, [pc, #148]	@ (8002c64 <ssd1306_WriteChar+0x11c>)
 8002bd0:	885b      	ldrh	r3, [r3, #2]
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002be0:	4619      	mov	r1, r3
 8002be2:	f7ff ff5f 	bl	8002aa4 <ssd1306_DrawPixel>
 8002be6:	e017      	b.n	8002c18 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002be8:	4b1e      	ldr	r3, [pc, #120]	@ (8002c64 <ssd1306_WriteChar+0x11c>)
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	b2d8      	uxtb	r0, r3
 8002bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c64 <ssd1306_WriteChar+0x11c>)
 8002bf8:	885b      	ldrh	r3, [r3, #2]
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	b2d9      	uxtb	r1, r3
 8002c04:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	bf0c      	ite	eq
 8002c0c:	2301      	moveq	r3, #1
 8002c0e:	2300      	movne	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	461a      	mov	r2, r3
 8002c14:	f7ff ff46 	bl	8002aa4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	61bb      	str	r3, [r7, #24]
 8002c1e:	783b      	ldrb	r3, [r7, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d3c3      	bcc.n	8002bb0 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	61fb      	str	r3, [r7, #28]
 8002c2e:	787b      	ldrb	r3, [r7, #1]
 8002c30:	461a      	mov	r2, r3
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d3ab      	bcc.n	8002b90 <ssd1306_WriteChar+0x48>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8002c38:	4b0a      	ldr	r3, [pc, #40]	@ (8002c64 <ssd1306_WriteChar+0x11c>)
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	2a00      	cmp	r2, #0
 8002c40:	d005      	beq.n	8002c4e <ssd1306_WriteChar+0x106>
 8002c42:	68b9      	ldr	r1, [r7, #8]
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	3a20      	subs	r2, #32
 8002c48:	440a      	add	r2, r1
 8002c4a:	7812      	ldrb	r2, [r2, #0]
 8002c4c:	e000      	b.n	8002c50 <ssd1306_WriteChar+0x108>
 8002c4e:	783a      	ldrb	r2, [r7, #0]
 8002c50:	4413      	add	r3, r2
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	4b03      	ldr	r3, [pc, #12]	@ (8002c64 <ssd1306_WriteChar+0x11c>)
 8002c56:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3724      	adds	r7, #36	@ 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd90      	pop	{r4, r7, pc}
 8002c62:	bf00      	nop
 8002c64:	2000076c 	.word	0x2000076c

08002c68 <ssd1306_WriteScaledChar>:

char ssd1306_WriteScaledChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color, float scaleX, float scaleY) {
 8002c68:	b5b0      	push	{r4, r5, r7, lr}
 8002c6a:	b08a      	sub	sp, #40	@ 0x28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4604      	mov	r4, r0
 8002c70:	4638      	mov	r0, r7
 8002c72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002c76:	4623      	mov	r3, r4
 8002c78:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    int scaledWidth = Font.width * scaleX;
 8002c7a:	783b      	ldrb	r3, [r7, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe f82d 	bl	8000cdc <__aeabi_i2f>
 8002c82:	4603      	mov	r3, r0
 8002c84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe f87c 	bl	8000d84 <__aeabi_fmul>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe f9c8 	bl	8001024 <__aeabi_f2iz>
 8002c94:	4603      	mov	r3, r0
 8002c96:	61fb      	str	r3, [r7, #28]
    int scaledHeight = Font.height * scaleY;
 8002c98:	787b      	ldrb	r3, [r7, #1]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe f81e 	bl	8000cdc <__aeabi_i2f>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fe f86d 	bl	8000d84 <__aeabi_fmul>
 8002caa:	4603      	mov	r3, r0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fe f9b9 	bl	8001024 <__aeabi_f2iz>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	61bb      	str	r3, [r7, #24]

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
 8002cb8:	2b1f      	cmp	r3, #31
 8002cba:	d902      	bls.n	8002cc2 <ssd1306_WriteScaledChar+0x5a>
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
 8002cbe:	2b7e      	cmp	r3, #126	@ 0x7e
 8002cc0:	d901      	bls.n	8002cc6 <ssd1306_WriteScaledChar+0x5e>
        return 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e078      	b.n	8002db8 <ssd1306_WriteScaledChar+0x150>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + scaledWidth) ||
 8002cc6:	4b3e      	ldr	r3, [pc, #248]	@ (8002dc0 <ssd1306_WriteScaledChar+0x158>)
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	4413      	add	r3, r2
 8002cd0:	2b80      	cmp	r3, #128	@ 0x80
 8002cd2:	dc06      	bgt.n	8002ce2 <ssd1306_WriteScaledChar+0x7a>
        SSD1306_HEIGHT < (SSD1306.CurrentY + scaledHeight))
 8002cd4:	4b3a      	ldr	r3, [pc, #232]	@ (8002dc0 <ssd1306_WriteScaledChar+0x158>)
 8002cd6:	885b      	ldrh	r3, [r3, #2]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + scaledWidth) ||
 8002cde:	2b40      	cmp	r3, #64	@ 0x40
 8002ce0:	dd01      	ble.n	8002ce6 <ssd1306_WriteScaledChar+0x7e>
    {
        // Not enough space on current line
        return 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e068      	b.n	8002db8 <ssd1306_WriteScaledChar+0x150>
    }

    // Use the font to write
    for(i = 0; i < scaledHeight; i++) {
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cea:	e058      	b.n	8002d9e <ssd1306_WriteScaledChar+0x136>
        b = Font.data[(ch - 32) * Font.height + (int)(i / scaleY)];
 8002cec:	687c      	ldr	r4, [r7, #4]
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	3b20      	subs	r3, #32
 8002cf2:	787a      	ldrb	r2, [r7, #1]
 8002cf4:	fb02 f503 	mul.w	r5, r2, r3
 8002cf8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002cfa:	f7fd ffeb 	bl	8000cd4 <__aeabi_ui2f>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fe f8f2 	bl	8000eec <__aeabi_fdiv>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe f98a 	bl	8001024 <__aeabi_f2iz>
 8002d10:	4603      	mov	r3, r0
 8002d12:	442b      	add	r3, r5
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	4423      	add	r3, r4
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < scaledWidth; j++) {
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	623b      	str	r3, [r7, #32]
 8002d20:	e036      	b.n	8002d90 <ssd1306_WriteScaledChar+0x128>
            if((b << j) & 0x8000)  {
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d013      	beq.n	8002d5a <ssd1306_WriteScaledChar+0xf2>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002d32:	4b23      	ldr	r3, [pc, #140]	@ (8002dc0 <ssd1306_WriteScaledChar+0x158>)
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	b2d8      	uxtb	r0, r3
 8002d40:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc0 <ssd1306_WriteScaledChar+0x158>)
 8002d42:	885b      	ldrh	r3, [r3, #2]
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002d52:	4619      	mov	r1, r3
 8002d54:	f7ff fea6 	bl	8002aa4 <ssd1306_DrawPixel>
 8002d58:	e017      	b.n	8002d8a <ssd1306_WriteScaledChar+0x122>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002d5a:	4b19      	ldr	r3, [pc, #100]	@ (8002dc0 <ssd1306_WriteScaledChar+0x158>)
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	4413      	add	r3, r2
 8002d66:	b2d8      	uxtb	r0, r3
 8002d68:	4b15      	ldr	r3, [pc, #84]	@ (8002dc0 <ssd1306_WriteScaledChar+0x158>)
 8002d6a:	885b      	ldrh	r3, [r3, #2]
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	b2d9      	uxtb	r1, r3
 8002d76:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	bf0c      	ite	eq
 8002d7e:	2301      	moveq	r3, #1
 8002d80:	2300      	movne	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	f7ff fe8d 	bl	8002aa4 <ssd1306_DrawPixel>
        for(j = 0; j < scaledWidth; j++) {
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	623b      	str	r3, [r7, #32]
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	6a3a      	ldr	r2, [r7, #32]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d3c4      	bcc.n	8002d22 <ssd1306_WriteScaledChar+0xba>
    for(i = 0; i < scaledHeight; i++) {
 8002d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d3a2      	bcc.n	8002cec <ssd1306_WriteScaledChar+0x84>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += scaledWidth;
 8002da6:	4b06      	ldr	r3, [pc, #24]	@ (8002dc0 <ssd1306_WriteScaledChar+0x158>)
 8002da8:	881a      	ldrh	r2, [r3, #0]
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	4b03      	ldr	r3, [pc, #12]	@ (8002dc0 <ssd1306_WriteScaledChar+0x158>)
 8002db4:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3728      	adds	r7, #40	@ 0x28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bdb0      	pop	{r4, r5, r7, pc}
 8002dc0:	2000076c 	.word	0x2000076c

08002dc4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af02      	add	r7, sp, #8
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	4638      	mov	r0, r7
 8002dce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8002dd2:	e013      	b.n	8002dfc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	7818      	ldrb	r0, [r3, #0]
 8002dd8:	7e3b      	ldrb	r3, [r7, #24]
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	463b      	mov	r3, r7
 8002dde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002de0:	f7ff feb2 	bl	8002b48 <ssd1306_WriteChar>
 8002de4:	4603      	mov	r3, r0
 8002de6:	461a      	mov	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d002      	beq.n	8002df6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	e008      	b.n	8002e08 <ssd1306_WriteString+0x44>
        }
        str++;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1e7      	bne.n	8002dd4 <ssd1306_WriteString+0x10>
    }

    // Everything ok
    return *str;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	781b      	ldrb	r3, [r3, #0]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <ssd1306_WriteScaledString>:

/* Write full string to screenbuffer */
char ssd1306_WriteScaledString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color, float scaleX, float scaleY) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af04      	add	r7, sp, #16
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	4638      	mov	r0, r7
 8002e1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8002e1e:	e017      	b.n	8002e50 <ssd1306_WriteScaledString+0x40>
        if (ssd1306_WriteScaledChar(*str, Font, color, scaleX, scaleY) != *str) {
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	7818      	ldrb	r0, [r3, #0]
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	9302      	str	r3, [sp, #8]
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	9301      	str	r3, [sp, #4]
 8002e2c:	7e3b      	ldrb	r3, [r7, #24]
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	463b      	mov	r3, r7
 8002e32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e34:	f7ff ff18 	bl	8002c68 <ssd1306_WriteScaledChar>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d002      	beq.n	8002e4a <ssd1306_WriteScaledString+0x3a>
            // Char could not be written
            return *str;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	e008      	b.n	8002e5c <ssd1306_WriteScaledString+0x4c>
        }
        str++;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1e3      	bne.n	8002e20 <ssd1306_WriteScaledString+0x10>
    }
    
    // Everything ok
    return *str;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	781b      	ldrb	r3, [r3, #0]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	460a      	mov	r2, r1
 8002e6e:	71fb      	strb	r3, [r7, #7]
 8002e70:	4613      	mov	r3, r2
 8002e72:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	4b05      	ldr	r3, [pc, #20]	@ (8002e90 <ssd1306_SetCursor+0x2c>)
 8002e7a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002e7c:	79bb      	ldrb	r3, [r7, #6]
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	4b03      	ldr	r3, [pc, #12]	@ (8002e90 <ssd1306_SetCursor+0x2c>)
 8002e82:	805a      	strh	r2, [r3, #2]
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	2000076c 	.word	0x2000076c

08002e94 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002e94:	b590      	push	{r4, r7, lr}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4604      	mov	r4, r0
 8002e9c:	4608      	mov	r0, r1
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4623      	mov	r3, r4
 8002ea4:	71fb      	strb	r3, [r7, #7]
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	71bb      	strb	r3, [r7, #6]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	717b      	strb	r3, [r7, #5]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8002eb2:	79fa      	ldrb	r2, [r7, #7]
 8002eb4:	797b      	ldrb	r3, [r7, #5]
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	bf28      	it	cs
 8002eba:	4613      	movcs	r3, r2
 8002ebc:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8002ebe:	797a      	ldrb	r2, [r7, #5]
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	bf38      	it	cc
 8002ec6:	4613      	movcc	r3, r2
 8002ec8:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8002eca:	79ba      	ldrb	r2, [r7, #6]
 8002ecc:	793b      	ldrb	r3, [r7, #4]
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	bf28      	it	cs
 8002ed2:	4613      	movcs	r3, r2
 8002ed4:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8002ed6:	793a      	ldrb	r2, [r7, #4]
 8002ed8:	79bb      	ldrb	r3, [r7, #6]
 8002eda:	4293      	cmp	r3, r2
 8002edc:	bf38      	it	cc
 8002ede:	4613      	movcc	r3, r2
 8002ee0:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002ee2:	7afb      	ldrb	r3, [r7, #11]
 8002ee4:	73fb      	strb	r3, [r7, #15]
 8002ee6:	e017      	b.n	8002f18 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002ee8:	7b7b      	ldrb	r3, [r7, #13]
 8002eea:	73bb      	strb	r3, [r7, #14]
 8002eec:	e009      	b.n	8002f02 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8002eee:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002ef2:	7bf9      	ldrb	r1, [r7, #15]
 8002ef4:	7bbb      	ldrb	r3, [r7, #14]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fdd4 	bl	8002aa4 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002efc:	7bbb      	ldrb	r3, [r7, #14]
 8002efe:	3301      	adds	r3, #1
 8002f00:	73bb      	strb	r3, [r7, #14]
 8002f02:	7bba      	ldrb	r2, [r7, #14]
 8002f04:	7b3b      	ldrb	r3, [r7, #12]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d803      	bhi.n	8002f12 <ssd1306_FillRectangle+0x7e>
 8002f0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	daed      	bge.n	8002eee <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	3301      	adds	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
 8002f18:	7bfa      	ldrb	r2, [r7, #15]
 8002f1a:	7abb      	ldrb	r3, [r7, #10]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d803      	bhi.n	8002f28 <ssd1306_FillRectangle+0x94>
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f24:	d9e0      	bls.n	8002ee8 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8002f26:	bf00      	nop
 8002f28:	bf00      	nop
}
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd90      	pop	{r4, r7, pc}

08002f30 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002f3a:	2381      	movs	r3, #129	@ 0x81
 8002f3c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff fcd3 	bl	80028ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fccf 	bl	80028ec <ssd1306_WriteCommand>
}
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002f68:	23af      	movs	r3, #175	@ 0xaf
 8002f6a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002f6c:	4b08      	ldr	r3, [pc, #32]	@ (8002f90 <ssd1306_SetDisplayOn+0x38>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	715a      	strb	r2, [r3, #5]
 8002f72:	e004      	b.n	8002f7e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002f74:	23ae      	movs	r3, #174	@ 0xae
 8002f76:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002f78:	4b05      	ldr	r3, [pc, #20]	@ (8002f90 <ssd1306_SetDisplayOn+0x38>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fcb3 	bl	80028ec <ssd1306_WriteCommand>
}
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	2000076c 	.word	0x2000076c

08002f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f9a:	4b15      	ldr	r3, [pc, #84]	@ (8002ff0 <HAL_MspInit+0x5c>)
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	4a14      	ldr	r2, [pc, #80]	@ (8002ff0 <HAL_MspInit+0x5c>)
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	6193      	str	r3, [r2, #24]
 8002fa6:	4b12      	ldr	r3, [pc, #72]	@ (8002ff0 <HAL_MspInit+0x5c>)
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	60bb      	str	r3, [r7, #8]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8002ff0 <HAL_MspInit+0x5c>)
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	4a0e      	ldr	r2, [pc, #56]	@ (8002ff0 <HAL_MspInit+0x5c>)
 8002fb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fbc:	61d3      	str	r3, [r2, #28]
 8002fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff0 <HAL_MspInit+0x5c>)
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc6:	607b      	str	r3, [r7, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002fca:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff4 <HAL_MspInit+0x60>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	4a04      	ldr	r2, [pc, #16]	@ (8002ff4 <HAL_MspInit+0x60>)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	40010000 	.word	0x40010000

08002ff8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08a      	sub	sp, #40	@ 0x28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003000:	f107 0318 	add.w	r3, r7, #24
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a2b      	ldr	r2, [pc, #172]	@ (80030c0 <HAL_I2C_MspInit+0xc8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d124      	bne.n	8003062 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003018:	4b2a      	ldr	r3, [pc, #168]	@ (80030c4 <HAL_I2C_MspInit+0xcc>)
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	4a29      	ldr	r2, [pc, #164]	@ (80030c4 <HAL_I2C_MspInit+0xcc>)
 800301e:	f043 0308 	orr.w	r3, r3, #8
 8003022:	6193      	str	r3, [r2, #24]
 8003024:	4b27      	ldr	r3, [pc, #156]	@ (80030c4 <HAL_I2C_MspInit+0xcc>)
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003030:	23c0      	movs	r3, #192	@ 0xc0
 8003032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003034:	2312      	movs	r3, #18
 8003036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003038:	2303      	movs	r3, #3
 800303a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800303c:	f107 0318 	add.w	r3, r7, #24
 8003040:	4619      	mov	r1, r3
 8003042:	4821      	ldr	r0, [pc, #132]	@ (80030c8 <HAL_I2C_MspInit+0xd0>)
 8003044:	f000 fba2 	bl	800378c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003048:	4b1e      	ldr	r3, [pc, #120]	@ (80030c4 <HAL_I2C_MspInit+0xcc>)
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	4a1d      	ldr	r2, [pc, #116]	@ (80030c4 <HAL_I2C_MspInit+0xcc>)
 800304e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003052:	61d3      	str	r3, [r2, #28]
 8003054:	4b1b      	ldr	r3, [pc, #108]	@ (80030c4 <HAL_I2C_MspInit+0xcc>)
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800305c:	613b      	str	r3, [r7, #16]
 800305e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003060:	e029      	b.n	80030b6 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a19      	ldr	r2, [pc, #100]	@ (80030cc <HAL_I2C_MspInit+0xd4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d124      	bne.n	80030b6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800306c:	4b15      	ldr	r3, [pc, #84]	@ (80030c4 <HAL_I2C_MspInit+0xcc>)
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	4a14      	ldr	r2, [pc, #80]	@ (80030c4 <HAL_I2C_MspInit+0xcc>)
 8003072:	f043 0308 	orr.w	r3, r3, #8
 8003076:	6193      	str	r3, [r2, #24]
 8003078:	4b12      	ldr	r3, [pc, #72]	@ (80030c4 <HAL_I2C_MspInit+0xcc>)
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003084:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800308a:	2312      	movs	r3, #18
 800308c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800308e:	2303      	movs	r3, #3
 8003090:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003092:	f107 0318 	add.w	r3, r7, #24
 8003096:	4619      	mov	r1, r3
 8003098:	480b      	ldr	r0, [pc, #44]	@ (80030c8 <HAL_I2C_MspInit+0xd0>)
 800309a:	f000 fb77 	bl	800378c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800309e:	4b09      	ldr	r3, [pc, #36]	@ (80030c4 <HAL_I2C_MspInit+0xcc>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	4a08      	ldr	r2, [pc, #32]	@ (80030c4 <HAL_I2C_MspInit+0xcc>)
 80030a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030a8:	61d3      	str	r3, [r2, #28]
 80030aa:	4b06      	ldr	r3, [pc, #24]	@ (80030c4 <HAL_I2C_MspInit+0xcc>)
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	68bb      	ldr	r3, [r7, #8]
}
 80030b6:	bf00      	nop
 80030b8:	3728      	adds	r7, #40	@ 0x28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40005400 	.word	0x40005400
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40010c00 	.word	0x40010c00
 80030cc:	40005800 	.word	0x40005800

080030d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a0f      	ldr	r2, [pc, #60]	@ (800311c <HAL_RTC_MspInit+0x4c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d118      	bne.n	8003114 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80030e2:	f001 fd7b 	bl	8004bdc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80030e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003120 <HAL_RTC_MspInit+0x50>)
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	4a0d      	ldr	r2, [pc, #52]	@ (8003120 <HAL_RTC_MspInit+0x50>)
 80030ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80030f0:	61d3      	str	r3, [r2, #28]
 80030f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <HAL_RTC_MspInit+0x50>)
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80030fe:	4b09      	ldr	r3, [pc, #36]	@ (8003124 <HAL_RTC_MspInit+0x54>)
 8003100:	2201      	movs	r2, #1
 8003102:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8003104:	2200      	movs	r2, #0
 8003106:	2100      	movs	r1, #0
 8003108:	2029      	movs	r0, #41	@ 0x29
 800310a:	f000 fb08 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800310e:	2029      	movs	r0, #41	@ 0x29
 8003110:	f000 fb21 	bl	8003756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003114:	bf00      	nop
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40002800 	.word	0x40002800
 8003120:	40021000 	.word	0x40021000
 8003124:	4242043c 	.word	0x4242043c

08003128 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	@ 0x28
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003130:	f107 0314 	add.w	r3, r7, #20
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	605a      	str	r2, [r3, #4]
 800313a:	609a      	str	r2, [r3, #8]
 800313c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003146:	d14e      	bne.n	80031e6 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003148:	4b29      	ldr	r3, [pc, #164]	@ (80031f0 <HAL_TIM_Encoder_MspInit+0xc8>)
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	4a28      	ldr	r2, [pc, #160]	@ (80031f0 <HAL_TIM_Encoder_MspInit+0xc8>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	61d3      	str	r3, [r2, #28]
 8003154:	4b26      	ldr	r3, [pc, #152]	@ (80031f0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003160:	4b23      	ldr	r3, [pc, #140]	@ (80031f0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	4a22      	ldr	r2, [pc, #136]	@ (80031f0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003166:	f043 0304 	orr.w	r3, r3, #4
 800316a:	6193      	str	r3, [r2, #24]
 800316c:	4b20      	ldr	r3, [pc, #128]	@ (80031f0 <HAL_TIM_Encoder_MspInit+0xc8>)
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003178:	4b1d      	ldr	r3, [pc, #116]	@ (80031f0 <HAL_TIM_Encoder_MspInit+0xc8>)
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	4a1c      	ldr	r2, [pc, #112]	@ (80031f0 <HAL_TIM_Encoder_MspInit+0xc8>)
 800317e:	f043 0308 	orr.w	r3, r3, #8
 8003182:	6193      	str	r3, [r2, #24]
 8003184:	4b1a      	ldr	r3, [pc, #104]	@ (80031f0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003190:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003196:	2300      	movs	r3, #0
 8003198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319a:	2300      	movs	r3, #0
 800319c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319e:	f107 0314 	add.w	r3, r7, #20
 80031a2:	4619      	mov	r1, r3
 80031a4:	4813      	ldr	r0, [pc, #76]	@ (80031f4 <HAL_TIM_Encoder_MspInit+0xcc>)
 80031a6:	f000 faf1 	bl	800378c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80031aa:	2308      	movs	r3, #8
 80031ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b6:	f107 0314 	add.w	r3, r7, #20
 80031ba:	4619      	mov	r1, r3
 80031bc:	480e      	ldr	r0, [pc, #56]	@ (80031f8 <HAL_TIM_Encoder_MspInit+0xd0>)
 80031be:	f000 fae5 	bl	800378c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80031c2:	4b0e      	ldr	r3, [pc, #56]	@ (80031fc <HAL_TIM_Encoder_MspInit+0xd4>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80031c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80031d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80031d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80031d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031de:	627b      	str	r3, [r7, #36]	@ 0x24
 80031e0:	4a06      	ldr	r2, [pc, #24]	@ (80031fc <HAL_TIM_Encoder_MspInit+0xd4>)
 80031e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80031e6:	bf00      	nop
 80031e8:	3728      	adds	r7, #40	@ 0x28
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40021000 	.word	0x40021000
 80031f4:	40010800 	.word	0x40010800
 80031f8:	40010c00 	.word	0x40010c00
 80031fc:	40010000 	.word	0x40010000

08003200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003204:	bf00      	nop
 8003206:	e7fd      	b.n	8003204 <NMI_Handler+0x4>

08003208 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800320c:	bf00      	nop
 800320e:	e7fd      	b.n	800320c <HardFault_Handler+0x4>

08003210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003214:	bf00      	nop
 8003216:	e7fd      	b.n	8003214 <MemManage_Handler+0x4>

08003218 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800321c:	bf00      	nop
 800321e:	e7fd      	b.n	800321c <BusFault_Handler+0x4>

08003220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003224:	bf00      	nop
 8003226:	e7fd      	b.n	8003224 <UsageFault_Handler+0x4>

08003228 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800322c:	bf00      	nop
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr

08003234 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003244:	bf00      	nop
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr

0800324c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003250:	f000 f94e 	bl	80034f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003254:	bf00      	nop
 8003256:	bd80      	pop	{r7, pc}

08003258 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800325c:	2002      	movs	r0, #2
 800325e:	f000 fc4b 	bl	8003af8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}

08003266 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800326a:	2008      	movs	r0, #8
 800326c:	f000 fc44 	bl	8003af8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003270:	bf00      	nop
 8003272:	bd80      	pop	{r7, pc}

08003274 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003278:	4802      	ldr	r0, [pc, #8]	@ (8003284 <RTC_Alarm_IRQHandler+0x10>)
 800327a:	f002 fdf5 	bl	8005e68 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	200002d8 	.word	0x200002d8

08003288 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  return 1;
 800328c:	2301      	movs	r3, #1
}
 800328e:	4618      	mov	r0, r3
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	4770      	bx	lr

08003296 <_kill>:

int _kill(int pid, int sig)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032a0:	f004 fb2a 	bl	80078f8 <__errno>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2216      	movs	r2, #22
 80032a8:	601a      	str	r2, [r3, #0]
  return -1;
 80032aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <_exit>:

void _exit (int status)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032be:	f04f 31ff 	mov.w	r1, #4294967295
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff ffe7 	bl	8003296 <_kill>
  while (1) {}    /* Make sure we hang here */
 80032c8:	bf00      	nop
 80032ca:	e7fd      	b.n	80032c8 <_exit+0x12>

080032cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	e00a      	b.n	80032f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032de:	f3af 8000 	nop.w
 80032e2:	4601      	mov	r1, r0
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	60ba      	str	r2, [r7, #8]
 80032ea:	b2ca      	uxtb	r2, r1
 80032ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	3301      	adds	r3, #1
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	dbf0      	blt.n	80032de <_read+0x12>
  }

  return len;
 80032fc:	687b      	ldr	r3, [r7, #4]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b086      	sub	sp, #24
 800330a:	af00      	add	r7, sp, #0
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	e009      	b.n	800332c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	60ba      	str	r2, [r7, #8]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	3301      	adds	r3, #1
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	429a      	cmp	r2, r3
 8003332:	dbf1      	blt.n	8003318 <_write+0x12>
  }
  return len;
 8003334:	687b      	ldr	r3, [r7, #4]
}
 8003336:	4618      	mov	r0, r3
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <_close>:

int _close(int file)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003346:	f04f 33ff 	mov.w	r3, #4294967295
}
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003364:	605a      	str	r2, [r3, #4]
  return 0;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr

08003372 <_isatty>:

int _isatty(int file)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800337a:	2301      	movs	r3, #1
}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr

08003386 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003386:	b480      	push	{r7}
 8003388:	b085      	sub	sp, #20
 800338a:	af00      	add	r7, sp, #0
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr
	...

080033a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033a8:	4a14      	ldr	r2, [pc, #80]	@ (80033fc <_sbrk+0x5c>)
 80033aa:	4b15      	ldr	r3, [pc, #84]	@ (8003400 <_sbrk+0x60>)
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033b4:	4b13      	ldr	r3, [pc, #76]	@ (8003404 <_sbrk+0x64>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d102      	bne.n	80033c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033bc:	4b11      	ldr	r3, [pc, #68]	@ (8003404 <_sbrk+0x64>)
 80033be:	4a12      	ldr	r2, [pc, #72]	@ (8003408 <_sbrk+0x68>)
 80033c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033c2:	4b10      	ldr	r3, [pc, #64]	@ (8003404 <_sbrk+0x64>)
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4413      	add	r3, r2
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d207      	bcs.n	80033e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033d0:	f004 fa92 	bl	80078f8 <__errno>
 80033d4:	4603      	mov	r3, r0
 80033d6:	220c      	movs	r2, #12
 80033d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033da:	f04f 33ff 	mov.w	r3, #4294967295
 80033de:	e009      	b.n	80033f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033e0:	4b08      	ldr	r3, [pc, #32]	@ (8003404 <_sbrk+0x64>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033e6:	4b07      	ldr	r3, [pc, #28]	@ (8003404 <_sbrk+0x64>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	4a05      	ldr	r2, [pc, #20]	@ (8003404 <_sbrk+0x64>)
 80033f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033f2:	68fb      	ldr	r3, [r7, #12]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	20005000 	.word	0x20005000
 8003400:	00000400 	.word	0x00000400
 8003404:	20000774 	.word	0x20000774
 8003408:	200008c8 	.word	0x200008c8

0800340c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003410:	bf00      	nop
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr

08003418 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003418:	f7ff fff8 	bl	800340c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800341c:	480b      	ldr	r0, [pc, #44]	@ (800344c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800341e:	490c      	ldr	r1, [pc, #48]	@ (8003450 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003420:	4a0c      	ldr	r2, [pc, #48]	@ (8003454 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003424:	e002      	b.n	800342c <LoopCopyDataInit>

08003426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800342a:	3304      	adds	r3, #4

0800342c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800342c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800342e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003430:	d3f9      	bcc.n	8003426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003432:	4a09      	ldr	r2, [pc, #36]	@ (8003458 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003434:	4c09      	ldr	r4, [pc, #36]	@ (800345c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003438:	e001      	b.n	800343e <LoopFillZerobss>

0800343a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800343a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800343c:	3204      	adds	r2, #4

0800343e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800343e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003440:	d3fb      	bcc.n	800343a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003442:	f004 fa5f 	bl	8007904 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003446:	f7fe fa87 	bl	8001958 <main>
  bx lr
 800344a:	4770      	bx	lr
  ldr r0, =_sdata
 800344c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003450:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003454:	0800dcd8 	.word	0x0800dcd8
  ldr r2, =_sbss
 8003458:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800345c:	200008c8 	.word	0x200008c8

08003460 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003460:	e7fe      	b.n	8003460 <ADC1_2_IRQHandler>
	...

08003464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003468:	4b08      	ldr	r3, [pc, #32]	@ (800348c <HAL_Init+0x28>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a07      	ldr	r2, [pc, #28]	@ (800348c <HAL_Init+0x28>)
 800346e:	f043 0310 	orr.w	r3, r3, #16
 8003472:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003474:	2003      	movs	r0, #3
 8003476:	f000 f947 	bl	8003708 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800347a:	200f      	movs	r0, #15
 800347c:	f000 f808 	bl	8003490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003480:	f7ff fd88 	bl	8002f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40022000 	.word	0x40022000

08003490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003498:	4b12      	ldr	r3, [pc, #72]	@ (80034e4 <HAL_InitTick+0x54>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4b12      	ldr	r3, [pc, #72]	@ (80034e8 <HAL_InitTick+0x58>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	4619      	mov	r1, r3
 80034a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80034aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 f95f 	bl	8003772 <HAL_SYSTICK_Config>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e00e      	b.n	80034dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b0f      	cmp	r3, #15
 80034c2:	d80a      	bhi.n	80034da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034c4:	2200      	movs	r2, #0
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	f04f 30ff 	mov.w	r0, #4294967295
 80034cc:	f000 f927 	bl	800371e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034d0:	4a06      	ldr	r2, [pc, #24]	@ (80034ec <HAL_InitTick+0x5c>)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	e000      	b.n	80034dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	20000008 	.word	0x20000008
 80034e8:	20000010 	.word	0x20000010
 80034ec:	2000000c 	.word	0x2000000c

080034f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034f4:	4b05      	ldr	r3, [pc, #20]	@ (800350c <HAL_IncTick+0x1c>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	4b05      	ldr	r3, [pc, #20]	@ (8003510 <HAL_IncTick+0x20>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4413      	add	r3, r2
 8003500:	4a03      	ldr	r2, [pc, #12]	@ (8003510 <HAL_IncTick+0x20>)
 8003502:	6013      	str	r3, [r2, #0]
}
 8003504:	bf00      	nop
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr
 800350c:	20000010 	.word	0x20000010
 8003510:	20000778 	.word	0x20000778

08003514 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  return uwTick;
 8003518:	4b02      	ldr	r3, [pc, #8]	@ (8003524 <HAL_GetTick+0x10>)
 800351a:	681b      	ldr	r3, [r3, #0]
}
 800351c:	4618      	mov	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr
 8003524:	20000778 	.word	0x20000778

08003528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003530:	f7ff fff0 	bl	8003514 <HAL_GetTick>
 8003534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003540:	d005      	beq.n	800354e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003542:	4b0a      	ldr	r3, [pc, #40]	@ (800356c <HAL_Delay+0x44>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4413      	add	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800354e:	bf00      	nop
 8003550:	f7ff ffe0 	bl	8003514 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	429a      	cmp	r2, r3
 800355e:	d8f7      	bhi.n	8003550 <HAL_Delay+0x28>
  {
  }
}
 8003560:	bf00      	nop
 8003562:	bf00      	nop
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20000010 	.word	0x20000010

08003570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003580:	4b0c      	ldr	r3, [pc, #48]	@ (80035b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800358c:	4013      	ands	r3, r2
 800358e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003598:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800359c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035a2:	4a04      	ldr	r2, [pc, #16]	@ (80035b4 <__NVIC_SetPriorityGrouping+0x44>)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	60d3      	str	r3, [r2, #12]
}
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035bc:	4b04      	ldr	r3, [pc, #16]	@ (80035d0 <__NVIC_GetPriorityGrouping+0x18>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	0a1b      	lsrs	r3, r3, #8
 80035c2:	f003 0307 	and.w	r3, r3, #7
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	e000ed00 	.word	0xe000ed00

080035d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	db0b      	blt.n	80035fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035e6:	79fb      	ldrb	r3, [r7, #7]
 80035e8:	f003 021f 	and.w	r2, r3, #31
 80035ec:	4906      	ldr	r1, [pc, #24]	@ (8003608 <__NVIC_EnableIRQ+0x34>)
 80035ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f2:	095b      	lsrs	r3, r3, #5
 80035f4:	2001      	movs	r0, #1
 80035f6:	fa00 f202 	lsl.w	r2, r0, r2
 80035fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr
 8003608:	e000e100 	.word	0xe000e100

0800360c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	4603      	mov	r3, r0
 8003614:	6039      	str	r1, [r7, #0]
 8003616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361c:	2b00      	cmp	r3, #0
 800361e:	db0a      	blt.n	8003636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	b2da      	uxtb	r2, r3
 8003624:	490c      	ldr	r1, [pc, #48]	@ (8003658 <__NVIC_SetPriority+0x4c>)
 8003626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362a:	0112      	lsls	r2, r2, #4
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	440b      	add	r3, r1
 8003630:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003634:	e00a      	b.n	800364c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	b2da      	uxtb	r2, r3
 800363a:	4908      	ldr	r1, [pc, #32]	@ (800365c <__NVIC_SetPriority+0x50>)
 800363c:	79fb      	ldrb	r3, [r7, #7]
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	3b04      	subs	r3, #4
 8003644:	0112      	lsls	r2, r2, #4
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	440b      	add	r3, r1
 800364a:	761a      	strb	r2, [r3, #24]
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	e000e100 	.word	0xe000e100
 800365c:	e000ed00 	.word	0xe000ed00

08003660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003660:	b480      	push	{r7}
 8003662:	b089      	sub	sp, #36	@ 0x24
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f1c3 0307 	rsb	r3, r3, #7
 800367a:	2b04      	cmp	r3, #4
 800367c:	bf28      	it	cs
 800367e:	2304      	movcs	r3, #4
 8003680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	3304      	adds	r3, #4
 8003686:	2b06      	cmp	r3, #6
 8003688:	d902      	bls.n	8003690 <NVIC_EncodePriority+0x30>
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	3b03      	subs	r3, #3
 800368e:	e000      	b.n	8003692 <NVIC_EncodePriority+0x32>
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003694:	f04f 32ff 	mov.w	r2, #4294967295
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43da      	mvns	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	401a      	ands	r2, r3
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036a8:	f04f 31ff 	mov.w	r1, #4294967295
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	fa01 f303 	lsl.w	r3, r1, r3
 80036b2:	43d9      	mvns	r1, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b8:	4313      	orrs	r3, r2
         );
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3724      	adds	r7, #36	@ 0x24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036d4:	d301      	bcc.n	80036da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036d6:	2301      	movs	r3, #1
 80036d8:	e00f      	b.n	80036fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036da:	4a0a      	ldr	r2, [pc, #40]	@ (8003704 <SysTick_Config+0x40>)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3b01      	subs	r3, #1
 80036e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036e2:	210f      	movs	r1, #15
 80036e4:	f04f 30ff 	mov.w	r0, #4294967295
 80036e8:	f7ff ff90 	bl	800360c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036ec:	4b05      	ldr	r3, [pc, #20]	@ (8003704 <SysTick_Config+0x40>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036f2:	4b04      	ldr	r3, [pc, #16]	@ (8003704 <SysTick_Config+0x40>)
 80036f4:	2207      	movs	r2, #7
 80036f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	e000e010 	.word	0xe000e010

08003708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff ff2d 	bl	8003570 <__NVIC_SetPriorityGrouping>
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800371e:	b580      	push	{r7, lr}
 8003720:	b086      	sub	sp, #24
 8003722:	af00      	add	r7, sp, #0
 8003724:	4603      	mov	r3, r0
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
 800372a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003730:	f7ff ff42 	bl	80035b8 <__NVIC_GetPriorityGrouping>
 8003734:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	6978      	ldr	r0, [r7, #20]
 800373c:	f7ff ff90 	bl	8003660 <NVIC_EncodePriority>
 8003740:	4602      	mov	r2, r0
 8003742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003746:	4611      	mov	r1, r2
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff ff5f 	bl	800360c <__NVIC_SetPriority>
}
 800374e:	bf00      	nop
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	4603      	mov	r3, r0
 800375e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff ff35 	bl	80035d4 <__NVIC_EnableIRQ>
}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff ffa2 	bl	80036c4 <SysTick_Config>
 8003780:	4603      	mov	r3, r0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800378c:	b480      	push	{r7}
 800378e:	b08b      	sub	sp, #44	@ 0x2c
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003796:	2300      	movs	r3, #0
 8003798:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800379a:	2300      	movs	r3, #0
 800379c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800379e:	e169      	b.n	8003a74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80037a0:	2201      	movs	r2, #1
 80037a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69fa      	ldr	r2, [r7, #28]
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	f040 8158 	bne.w	8003a6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	4a9a      	ldr	r2, [pc, #616]	@ (8003a2c <HAL_GPIO_Init+0x2a0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d05e      	beq.n	8003886 <HAL_GPIO_Init+0xfa>
 80037c8:	4a98      	ldr	r2, [pc, #608]	@ (8003a2c <HAL_GPIO_Init+0x2a0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d875      	bhi.n	80038ba <HAL_GPIO_Init+0x12e>
 80037ce:	4a98      	ldr	r2, [pc, #608]	@ (8003a30 <HAL_GPIO_Init+0x2a4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d058      	beq.n	8003886 <HAL_GPIO_Init+0xfa>
 80037d4:	4a96      	ldr	r2, [pc, #600]	@ (8003a30 <HAL_GPIO_Init+0x2a4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d86f      	bhi.n	80038ba <HAL_GPIO_Init+0x12e>
 80037da:	4a96      	ldr	r2, [pc, #600]	@ (8003a34 <HAL_GPIO_Init+0x2a8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d052      	beq.n	8003886 <HAL_GPIO_Init+0xfa>
 80037e0:	4a94      	ldr	r2, [pc, #592]	@ (8003a34 <HAL_GPIO_Init+0x2a8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d869      	bhi.n	80038ba <HAL_GPIO_Init+0x12e>
 80037e6:	4a94      	ldr	r2, [pc, #592]	@ (8003a38 <HAL_GPIO_Init+0x2ac>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d04c      	beq.n	8003886 <HAL_GPIO_Init+0xfa>
 80037ec:	4a92      	ldr	r2, [pc, #584]	@ (8003a38 <HAL_GPIO_Init+0x2ac>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d863      	bhi.n	80038ba <HAL_GPIO_Init+0x12e>
 80037f2:	4a92      	ldr	r2, [pc, #584]	@ (8003a3c <HAL_GPIO_Init+0x2b0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d046      	beq.n	8003886 <HAL_GPIO_Init+0xfa>
 80037f8:	4a90      	ldr	r2, [pc, #576]	@ (8003a3c <HAL_GPIO_Init+0x2b0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d85d      	bhi.n	80038ba <HAL_GPIO_Init+0x12e>
 80037fe:	2b12      	cmp	r3, #18
 8003800:	d82a      	bhi.n	8003858 <HAL_GPIO_Init+0xcc>
 8003802:	2b12      	cmp	r3, #18
 8003804:	d859      	bhi.n	80038ba <HAL_GPIO_Init+0x12e>
 8003806:	a201      	add	r2, pc, #4	@ (adr r2, 800380c <HAL_GPIO_Init+0x80>)
 8003808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380c:	08003887 	.word	0x08003887
 8003810:	08003861 	.word	0x08003861
 8003814:	08003873 	.word	0x08003873
 8003818:	080038b5 	.word	0x080038b5
 800381c:	080038bb 	.word	0x080038bb
 8003820:	080038bb 	.word	0x080038bb
 8003824:	080038bb 	.word	0x080038bb
 8003828:	080038bb 	.word	0x080038bb
 800382c:	080038bb 	.word	0x080038bb
 8003830:	080038bb 	.word	0x080038bb
 8003834:	080038bb 	.word	0x080038bb
 8003838:	080038bb 	.word	0x080038bb
 800383c:	080038bb 	.word	0x080038bb
 8003840:	080038bb 	.word	0x080038bb
 8003844:	080038bb 	.word	0x080038bb
 8003848:	080038bb 	.word	0x080038bb
 800384c:	080038bb 	.word	0x080038bb
 8003850:	08003869 	.word	0x08003869
 8003854:	0800387d 	.word	0x0800387d
 8003858:	4a79      	ldr	r2, [pc, #484]	@ (8003a40 <HAL_GPIO_Init+0x2b4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d013      	beq.n	8003886 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800385e:	e02c      	b.n	80038ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	623b      	str	r3, [r7, #32]
          break;
 8003866:	e029      	b.n	80038bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	3304      	adds	r3, #4
 800386e:	623b      	str	r3, [r7, #32]
          break;
 8003870:	e024      	b.n	80038bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	3308      	adds	r3, #8
 8003878:	623b      	str	r3, [r7, #32]
          break;
 800387a:	e01f      	b.n	80038bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	330c      	adds	r3, #12
 8003882:	623b      	str	r3, [r7, #32]
          break;
 8003884:	e01a      	b.n	80038bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d102      	bne.n	8003894 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800388e:	2304      	movs	r3, #4
 8003890:	623b      	str	r3, [r7, #32]
          break;
 8003892:	e013      	b.n	80038bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d105      	bne.n	80038a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800389c:	2308      	movs	r3, #8
 800389e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69fa      	ldr	r2, [r7, #28]
 80038a4:	611a      	str	r2, [r3, #16]
          break;
 80038a6:	e009      	b.n	80038bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038a8:	2308      	movs	r3, #8
 80038aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69fa      	ldr	r2, [r7, #28]
 80038b0:	615a      	str	r2, [r3, #20]
          break;
 80038b2:	e003      	b.n	80038bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80038b4:	2300      	movs	r3, #0
 80038b6:	623b      	str	r3, [r7, #32]
          break;
 80038b8:	e000      	b.n	80038bc <HAL_GPIO_Init+0x130>
          break;
 80038ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	2bff      	cmp	r3, #255	@ 0xff
 80038c0:	d801      	bhi.n	80038c6 <HAL_GPIO_Init+0x13a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	e001      	b.n	80038ca <HAL_GPIO_Init+0x13e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3304      	adds	r3, #4
 80038ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2bff      	cmp	r3, #255	@ 0xff
 80038d0:	d802      	bhi.n	80038d8 <HAL_GPIO_Init+0x14c>
 80038d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	e002      	b.n	80038de <HAL_GPIO_Init+0x152>
 80038d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038da:	3b08      	subs	r3, #8
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	210f      	movs	r1, #15
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	fa01 f303 	lsl.w	r3, r1, r3
 80038ec:	43db      	mvns	r3, r3
 80038ee:	401a      	ands	r2, r3
 80038f0:	6a39      	ldr	r1, [r7, #32]
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	fa01 f303 	lsl.w	r3, r1, r3
 80038f8:	431a      	orrs	r2, r3
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 80b1 	beq.w	8003a6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800390c:	4b4d      	ldr	r3, [pc, #308]	@ (8003a44 <HAL_GPIO_Init+0x2b8>)
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	4a4c      	ldr	r2, [pc, #304]	@ (8003a44 <HAL_GPIO_Init+0x2b8>)
 8003912:	f043 0301 	orr.w	r3, r3, #1
 8003916:	6193      	str	r3, [r2, #24]
 8003918:	4b4a      	ldr	r3, [pc, #296]	@ (8003a44 <HAL_GPIO_Init+0x2b8>)
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003924:	4a48      	ldr	r2, [pc, #288]	@ (8003a48 <HAL_GPIO_Init+0x2bc>)
 8003926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003928:	089b      	lsrs	r3, r3, #2
 800392a:	3302      	adds	r3, #2
 800392c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003930:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	220f      	movs	r2, #15
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4013      	ands	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a40      	ldr	r2, [pc, #256]	@ (8003a4c <HAL_GPIO_Init+0x2c0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d013      	beq.n	8003978 <HAL_GPIO_Init+0x1ec>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a3f      	ldr	r2, [pc, #252]	@ (8003a50 <HAL_GPIO_Init+0x2c4>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d00d      	beq.n	8003974 <HAL_GPIO_Init+0x1e8>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a3e      	ldr	r2, [pc, #248]	@ (8003a54 <HAL_GPIO_Init+0x2c8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d007      	beq.n	8003970 <HAL_GPIO_Init+0x1e4>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a3d      	ldr	r2, [pc, #244]	@ (8003a58 <HAL_GPIO_Init+0x2cc>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d101      	bne.n	800396c <HAL_GPIO_Init+0x1e0>
 8003968:	2303      	movs	r3, #3
 800396a:	e006      	b.n	800397a <HAL_GPIO_Init+0x1ee>
 800396c:	2304      	movs	r3, #4
 800396e:	e004      	b.n	800397a <HAL_GPIO_Init+0x1ee>
 8003970:	2302      	movs	r3, #2
 8003972:	e002      	b.n	800397a <HAL_GPIO_Init+0x1ee>
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <HAL_GPIO_Init+0x1ee>
 8003978:	2300      	movs	r3, #0
 800397a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800397c:	f002 0203 	and.w	r2, r2, #3
 8003980:	0092      	lsls	r2, r2, #2
 8003982:	4093      	lsls	r3, r2
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800398a:	492f      	ldr	r1, [pc, #188]	@ (8003a48 <HAL_GPIO_Init+0x2bc>)
 800398c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398e:	089b      	lsrs	r3, r3, #2
 8003990:	3302      	adds	r3, #2
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d006      	beq.n	80039b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80039a4:	4b2d      	ldr	r3, [pc, #180]	@ (8003a5c <HAL_GPIO_Init+0x2d0>)
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	492c      	ldr	r1, [pc, #176]	@ (8003a5c <HAL_GPIO_Init+0x2d0>)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	608b      	str	r3, [r1, #8]
 80039b0:	e006      	b.n	80039c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80039b2:	4b2a      	ldr	r3, [pc, #168]	@ (8003a5c <HAL_GPIO_Init+0x2d0>)
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	43db      	mvns	r3, r3
 80039ba:	4928      	ldr	r1, [pc, #160]	@ (8003a5c <HAL_GPIO_Init+0x2d0>)
 80039bc:	4013      	ands	r3, r2
 80039be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d006      	beq.n	80039da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80039cc:	4b23      	ldr	r3, [pc, #140]	@ (8003a5c <HAL_GPIO_Init+0x2d0>)
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	4922      	ldr	r1, [pc, #136]	@ (8003a5c <HAL_GPIO_Init+0x2d0>)
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60cb      	str	r3, [r1, #12]
 80039d8:	e006      	b.n	80039e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80039da:	4b20      	ldr	r3, [pc, #128]	@ (8003a5c <HAL_GPIO_Init+0x2d0>)
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	43db      	mvns	r3, r3
 80039e2:	491e      	ldr	r1, [pc, #120]	@ (8003a5c <HAL_GPIO_Init+0x2d0>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d006      	beq.n	8003a02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80039f4:	4b19      	ldr	r3, [pc, #100]	@ (8003a5c <HAL_GPIO_Init+0x2d0>)
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	4918      	ldr	r1, [pc, #96]	@ (8003a5c <HAL_GPIO_Init+0x2d0>)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	604b      	str	r3, [r1, #4]
 8003a00:	e006      	b.n	8003a10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003a02:	4b16      	ldr	r3, [pc, #88]	@ (8003a5c <HAL_GPIO_Init+0x2d0>)
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	4914      	ldr	r1, [pc, #80]	@ (8003a5c <HAL_GPIO_Init+0x2d0>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d021      	beq.n	8003a60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a5c <HAL_GPIO_Init+0x2d0>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	490e      	ldr	r1, [pc, #56]	@ (8003a5c <HAL_GPIO_Init+0x2d0>)
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	600b      	str	r3, [r1, #0]
 8003a28:	e021      	b.n	8003a6e <HAL_GPIO_Init+0x2e2>
 8003a2a:	bf00      	nop
 8003a2c:	10320000 	.word	0x10320000
 8003a30:	10310000 	.word	0x10310000
 8003a34:	10220000 	.word	0x10220000
 8003a38:	10210000 	.word	0x10210000
 8003a3c:	10120000 	.word	0x10120000
 8003a40:	10110000 	.word	0x10110000
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40010000 	.word	0x40010000
 8003a4c:	40010800 	.word	0x40010800
 8003a50:	40010c00 	.word	0x40010c00
 8003a54:	40011000 	.word	0x40011000
 8003a58:	40011400 	.word	0x40011400
 8003a5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a60:	4b0b      	ldr	r3, [pc, #44]	@ (8003a90 <HAL_GPIO_Init+0x304>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	43db      	mvns	r3, r3
 8003a68:	4909      	ldr	r1, [pc, #36]	@ (8003a90 <HAL_GPIO_Init+0x304>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a70:	3301      	adds	r3, #1
 8003a72:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f47f ae8e 	bne.w	80037a0 <HAL_GPIO_Init+0x14>
  }
}
 8003a84:	bf00      	nop
 8003a86:	bf00      	nop
 8003a88:	372c      	adds	r7, #44	@ 0x2c
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr
 8003a90:	40010400 	.word	0x40010400

08003a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	807b      	strh	r3, [r7, #2]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003aa4:	787b      	ldrb	r3, [r7, #1]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aaa:	887a      	ldrh	r2, [r7, #2]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ab0:	e003      	b.n	8003aba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ab2:	887b      	ldrh	r3, [r7, #2]
 8003ab4:	041a      	lsls	r2, r3, #16
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	611a      	str	r2, [r3, #16]
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ad6:	887a      	ldrh	r2, [r7, #2]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4013      	ands	r3, r2
 8003adc:	041a      	lsls	r2, r3, #16
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	43d9      	mvns	r1, r3
 8003ae2:	887b      	ldrh	r3, [r7, #2]
 8003ae4:	400b      	ands	r3, r1
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	611a      	str	r2, [r3, #16]
}
 8003aec:	bf00      	nop
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr
	...

08003af8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b02:	4b08      	ldr	r3, [pc, #32]	@ (8003b24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b04:	695a      	ldr	r2, [r3, #20]
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d006      	beq.n	8003b1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b0e:	4a05      	ldr	r2, [pc, #20]	@ (8003b24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b10:	88fb      	ldrh	r3, [r7, #6]
 8003b12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b14:	88fb      	ldrh	r3, [r7, #6]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fe fda2 	bl	8002660 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b1c:	bf00      	nop
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40010400 	.word	0x40010400

08003b28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e12b      	b.n	8003d92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d106      	bne.n	8003b54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7ff fa52 	bl	8002ff8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2224      	movs	r2, #36	@ 0x24
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0201 	bic.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b8c:	f001 fbfc 	bl	8005388 <HAL_RCC_GetPCLK1Freq>
 8003b90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	4a81      	ldr	r2, [pc, #516]	@ (8003d9c <HAL_I2C_Init+0x274>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d807      	bhi.n	8003bac <HAL_I2C_Init+0x84>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4a80      	ldr	r2, [pc, #512]	@ (8003da0 <HAL_I2C_Init+0x278>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	bf94      	ite	ls
 8003ba4:	2301      	movls	r3, #1
 8003ba6:	2300      	movhi	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	e006      	b.n	8003bba <HAL_I2C_Init+0x92>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4a7d      	ldr	r2, [pc, #500]	@ (8003da4 <HAL_I2C_Init+0x27c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	bf94      	ite	ls
 8003bb4:	2301      	movls	r3, #1
 8003bb6:	2300      	movhi	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e0e7      	b.n	8003d92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4a78      	ldr	r2, [pc, #480]	@ (8003da8 <HAL_I2C_Init+0x280>)
 8003bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bca:	0c9b      	lsrs	r3, r3, #18
 8003bcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	4a6a      	ldr	r2, [pc, #424]	@ (8003d9c <HAL_I2C_Init+0x274>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d802      	bhi.n	8003bfc <HAL_I2C_Init+0xd4>
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	e009      	b.n	8003c10 <HAL_I2C_Init+0xe8>
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c02:	fb02 f303 	mul.w	r3, r2, r3
 8003c06:	4a69      	ldr	r2, [pc, #420]	@ (8003dac <HAL_I2C_Init+0x284>)
 8003c08:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0c:	099b      	lsrs	r3, r3, #6
 8003c0e:	3301      	adds	r3, #1
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	430b      	orrs	r3, r1
 8003c16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	495c      	ldr	r1, [pc, #368]	@ (8003d9c <HAL_I2C_Init+0x274>)
 8003c2c:	428b      	cmp	r3, r1
 8003c2e:	d819      	bhi.n	8003c64 <HAL_I2C_Init+0x13c>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	1e59      	subs	r1, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c3e:	1c59      	adds	r1, r3, #1
 8003c40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c44:	400b      	ands	r3, r1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <HAL_I2C_Init+0x138>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	1e59      	subs	r1, r3, #1
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c58:	3301      	adds	r3, #1
 8003c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c5e:	e051      	b.n	8003d04 <HAL_I2C_Init+0x1dc>
 8003c60:	2304      	movs	r3, #4
 8003c62:	e04f      	b.n	8003d04 <HAL_I2C_Init+0x1dc>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d111      	bne.n	8003c90 <HAL_I2C_Init+0x168>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1e58      	subs	r0, r3, #1
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6859      	ldr	r1, [r3, #4]
 8003c74:	460b      	mov	r3, r1
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	440b      	add	r3, r1
 8003c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c7e:	3301      	adds	r3, #1
 8003c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bf0c      	ite	eq
 8003c88:	2301      	moveq	r3, #1
 8003c8a:	2300      	movne	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	e012      	b.n	8003cb6 <HAL_I2C_Init+0x18e>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	1e58      	subs	r0, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6859      	ldr	r1, [r3, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	0099      	lsls	r1, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	bf0c      	ite	eq
 8003cb0:	2301      	moveq	r3, #1
 8003cb2:	2300      	movne	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_I2C_Init+0x196>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e022      	b.n	8003d04 <HAL_I2C_Init+0x1dc>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10e      	bne.n	8003ce4 <HAL_I2C_Init+0x1bc>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	1e58      	subs	r0, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6859      	ldr	r1, [r3, #4]
 8003cce:	460b      	mov	r3, r1
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	440b      	add	r3, r1
 8003cd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cd8:	3301      	adds	r3, #1
 8003cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ce2:	e00f      	b.n	8003d04 <HAL_I2C_Init+0x1dc>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	1e58      	subs	r0, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6859      	ldr	r1, [r3, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	0099      	lsls	r1, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	6809      	ldr	r1, [r1, #0]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69da      	ldr	r2, [r3, #28]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6911      	ldr	r1, [r2, #16]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	68d2      	ldr	r2, [r2, #12]
 8003d3e:	4311      	orrs	r1, r2
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	430b      	orrs	r3, r1
 8003d46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	695a      	ldr	r2, [r3, #20]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0201 	orr.w	r2, r2, #1
 8003d72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	000186a0 	.word	0x000186a0
 8003da0:	001e847f 	.word	0x001e847f
 8003da4:	003d08ff 	.word	0x003d08ff
 8003da8:	431bde83 	.word	0x431bde83
 8003dac:	10624dd3 	.word	0x10624dd3

08003db0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	4608      	mov	r0, r1
 8003dba:	4611      	mov	r1, r2
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	817b      	strh	r3, [r7, #10]
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	813b      	strh	r3, [r7, #8]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dca:	f7ff fba3 	bl	8003514 <HAL_GetTick>
 8003dce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	f040 80d9 	bne.w	8003f90 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	2319      	movs	r3, #25
 8003de4:	2201      	movs	r2, #1
 8003de6:	496d      	ldr	r1, [pc, #436]	@ (8003f9c <HAL_I2C_Mem_Write+0x1ec>)
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 fcc1 	bl	8004770 <I2C_WaitOnFlagUntilTimeout>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003df4:	2302      	movs	r3, #2
 8003df6:	e0cc      	b.n	8003f92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <HAL_I2C_Mem_Write+0x56>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e0c5      	b.n	8003f92 <HAL_I2C_Mem_Write+0x1e2>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d007      	beq.n	8003e2c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2221      	movs	r2, #33	@ 0x21
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2240      	movs	r2, #64	@ 0x40
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a3a      	ldr	r2, [r7, #32]
 8003e56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4a4d      	ldr	r2, [pc, #308]	@ (8003fa0 <HAL_I2C_Mem_Write+0x1f0>)
 8003e6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e6e:	88f8      	ldrh	r0, [r7, #6]
 8003e70:	893a      	ldrh	r2, [r7, #8]
 8003e72:	8979      	ldrh	r1, [r7, #10]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	9301      	str	r3, [sp, #4]
 8003e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 faf8 	bl	8004474 <I2C_RequestMemoryWrite>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d052      	beq.n	8003f30 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e081      	b.n	8003f92 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fd86 	bl	80049a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00d      	beq.n	8003eba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d107      	bne.n	8003eb6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e06b      	b.n	8003f92 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebe:	781a      	ldrb	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d11b      	bne.n	8003f30 <HAL_I2C_Mem_Write+0x180>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d017      	beq.n	8003f30 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	781a      	ldrb	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1aa      	bne.n	8003e8e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f000 fd79 	bl	8004a34 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00d      	beq.n	8003f64 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d107      	bne.n	8003f60 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e016      	b.n	8003f92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	e000      	b.n	8003f92 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f90:	2302      	movs	r3, #2
  }
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	00100002 	.word	0x00100002
 8003fa0:	ffff0000 	.word	0xffff0000

08003fa4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08c      	sub	sp, #48	@ 0x30
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	4608      	mov	r0, r1
 8003fae:	4611      	mov	r1, r2
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	817b      	strh	r3, [r7, #10]
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	813b      	strh	r3, [r7, #8]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fc2:	f7ff faa7 	bl	8003514 <HAL_GetTick>
 8003fc6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	f040 8244 	bne.w	800445e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	2319      	movs	r3, #25
 8003fdc:	2201      	movs	r2, #1
 8003fde:	4982      	ldr	r1, [pc, #520]	@ (80041e8 <HAL_I2C_Mem_Read+0x244>)
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 fbc5 	bl	8004770 <I2C_WaitOnFlagUntilTimeout>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003fec:	2302      	movs	r3, #2
 8003fee:	e237      	b.n	8004460 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d101      	bne.n	8003ffe <HAL_I2C_Mem_Read+0x5a>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e230      	b.n	8004460 <HAL_I2C_Mem_Read+0x4bc>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b01      	cmp	r3, #1
 8004012:	d007      	beq.n	8004024 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0201 	orr.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004032:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2222      	movs	r2, #34	@ 0x22
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2240      	movs	r2, #64	@ 0x40
 8004040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800404e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004054:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4a62      	ldr	r2, [pc, #392]	@ (80041ec <HAL_I2C_Mem_Read+0x248>)
 8004064:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004066:	88f8      	ldrh	r0, [r7, #6]
 8004068:	893a      	ldrh	r2, [r7, #8]
 800406a:	8979      	ldrh	r1, [r7, #10]
 800406c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406e:	9301      	str	r3, [sp, #4]
 8004070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	4603      	mov	r3, r0
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 fa92 	bl	80045a0 <I2C_RequestMemoryRead>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e1ec      	b.n	8004460 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800408a:	2b00      	cmp	r3, #0
 800408c:	d113      	bne.n	80040b6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800408e:	2300      	movs	r3, #0
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	61fb      	str	r3, [r7, #28]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	61fb      	str	r3, [r7, #28]
 80040a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	e1c0      	b.n	8004438 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d11e      	bne.n	80040fc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040ce:	b672      	cpsid	i
}
 80040d0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040d2:	2300      	movs	r3, #0
 80040d4:	61bb      	str	r3, [r7, #24]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	61bb      	str	r3, [r7, #24]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	61bb      	str	r3, [r7, #24]
 80040e6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80040f8:	b662      	cpsie	i
}
 80040fa:	e035      	b.n	8004168 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004100:	2b02      	cmp	r3, #2
 8004102:	d11e      	bne.n	8004142 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004112:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004114:	b672      	cpsid	i
}
 8004116:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004118:	2300      	movs	r3, #0
 800411a:	617b      	str	r3, [r7, #20]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	617b      	str	r3, [r7, #20]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800413c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800413e:	b662      	cpsie	i
}
 8004140:	e012      	b.n	8004168 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004150:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	613b      	str	r3, [r7, #16]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	613b      	str	r3, [r7, #16]
 8004166:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004168:	e166      	b.n	8004438 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800416e:	2b03      	cmp	r3, #3
 8004170:	f200 811f 	bhi.w	80043b2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004178:	2b01      	cmp	r3, #1
 800417a:	d123      	bne.n	80041c4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800417c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800417e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 fc9f 	bl	8004ac4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e167      	b.n	8004460 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691a      	ldr	r2, [r3, #16]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041c2:	e139      	b.n	8004438 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d152      	bne.n	8004272 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d2:	2200      	movs	r2, #0
 80041d4:	4906      	ldr	r1, [pc, #24]	@ (80041f0 <HAL_I2C_Mem_Read+0x24c>)
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 faca 	bl	8004770 <I2C_WaitOnFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d008      	beq.n	80041f4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e13c      	b.n	8004460 <HAL_I2C_Mem_Read+0x4bc>
 80041e6:	bf00      	nop
 80041e8:	00100002 	.word	0x00100002
 80041ec:	ffff0000 	.word	0xffff0000
 80041f0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80041f4:	b672      	cpsid	i
}
 80041f6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004206:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691a      	ldr	r2, [r3, #16]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800423a:	b662      	cpsie	i
}
 800423c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800425a:	3b01      	subs	r3, #1
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004270:	e0e2      	b.n	8004438 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004278:	2200      	movs	r2, #0
 800427a:	497b      	ldr	r1, [pc, #492]	@ (8004468 <HAL_I2C_Mem_Read+0x4c4>)
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 fa77 	bl	8004770 <I2C_WaitOnFlagUntilTimeout>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0e9      	b.n	8004460 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800429a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800429c:	b672      	cpsid	i
}
 800429e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80042d2:	4b66      	ldr	r3, [pc, #408]	@ (800446c <HAL_I2C_Mem_Read+0x4c8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	08db      	lsrs	r3, r3, #3
 80042d8:	4a65      	ldr	r2, [pc, #404]	@ (8004470 <HAL_I2C_Mem_Read+0x4cc>)
 80042da:	fba2 2303 	umull	r2, r3, r2, r3
 80042de:	0a1a      	lsrs	r2, r3, #8
 80042e0:	4613      	mov	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	00da      	lsls	r2, r3, #3
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80042f2:	6a3b      	ldr	r3, [r7, #32]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d118      	bne.n	800432a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004312:	f043 0220 	orr.w	r2, r3, #32
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800431a:	b662      	cpsie	i
}
 800431c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e09a      	b.n	8004460 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b04      	cmp	r3, #4
 8004336:	d1d9      	bne.n	80042ec <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004346:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691a      	ldr	r2, [r3, #16]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004370:	b29b      	uxth	r3, r3
 8004372:	3b01      	subs	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800437a:	b662      	cpsie	i
}
 800437c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043b0:	e042      	b.n	8004438 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fb84 	bl	8004ac4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e04c      	b.n	8004460 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f003 0304 	and.w	r3, r3, #4
 8004402:	2b04      	cmp	r3, #4
 8004404:	d118      	bne.n	8004438 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	691a      	ldr	r2, [r3, #16]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800442e:	b29b      	uxth	r3, r3
 8004430:	3b01      	subs	r3, #1
 8004432:	b29a      	uxth	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800443c:	2b00      	cmp	r3, #0
 800443e:	f47f ae94 	bne.w	800416a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	e000      	b.n	8004460 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800445e:	2302      	movs	r3, #2
  }
}
 8004460:	4618      	mov	r0, r3
 8004462:	3728      	adds	r7, #40	@ 0x28
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	00010004 	.word	0x00010004
 800446c:	20000008 	.word	0x20000008
 8004470:	14f8b589 	.word	0x14f8b589

08004474 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b088      	sub	sp, #32
 8004478:	af02      	add	r7, sp, #8
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	4608      	mov	r0, r1
 800447e:	4611      	mov	r1, r2
 8004480:	461a      	mov	r2, r3
 8004482:	4603      	mov	r3, r0
 8004484:	817b      	strh	r3, [r7, #10]
 8004486:	460b      	mov	r3, r1
 8004488:	813b      	strh	r3, [r7, #8]
 800448a:	4613      	mov	r3, r2
 800448c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800449c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 f960 	bl	8004770 <I2C_WaitOnFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00d      	beq.n	80044d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044c4:	d103      	bne.n	80044ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e05f      	b.n	8004592 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044d2:	897b      	ldrh	r3, [r7, #10]
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	461a      	mov	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e4:	6a3a      	ldr	r2, [r7, #32]
 80044e6:	492d      	ldr	r1, [pc, #180]	@ (800459c <I2C_RequestMemoryWrite+0x128>)
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 f9bb 	bl	8004864 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e04c      	b.n	8004592 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044f8:	2300      	movs	r3, #0
 80044fa:	617b      	str	r3, [r7, #20]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800450e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004510:	6a39      	ldr	r1, [r7, #32]
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 fa46 	bl	80049a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00d      	beq.n	800453a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004522:	2b04      	cmp	r3, #4
 8004524:	d107      	bne.n	8004536 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004534:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e02b      	b.n	8004592 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800453a:	88fb      	ldrh	r3, [r7, #6]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d105      	bne.n	800454c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004540:	893b      	ldrh	r3, [r7, #8]
 8004542:	b2da      	uxtb	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	611a      	str	r2, [r3, #16]
 800454a:	e021      	b.n	8004590 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800454c:	893b      	ldrh	r3, [r7, #8]
 800454e:	0a1b      	lsrs	r3, r3, #8
 8004550:	b29b      	uxth	r3, r3
 8004552:	b2da      	uxtb	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800455a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800455c:	6a39      	ldr	r1, [r7, #32]
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 fa20 	bl	80049a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00d      	beq.n	8004586 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456e:	2b04      	cmp	r3, #4
 8004570:	d107      	bne.n	8004582 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004580:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e005      	b.n	8004592 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004586:	893b      	ldrh	r3, [r7, #8]
 8004588:	b2da      	uxtb	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	00010002 	.word	0x00010002

080045a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	4608      	mov	r0, r1
 80045aa:	4611      	mov	r1, r2
 80045ac:	461a      	mov	r2, r3
 80045ae:	4603      	mov	r3, r0
 80045b0:	817b      	strh	r3, [r7, #10]
 80045b2:	460b      	mov	r3, r1
 80045b4:	813b      	strh	r3, [r7, #8]
 80045b6:	4613      	mov	r3, r2
 80045b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 f8c2 	bl	8004770 <I2C_WaitOnFlagUntilTimeout>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00d      	beq.n	800460e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004600:	d103      	bne.n	800460a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004608:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e0aa      	b.n	8004764 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800460e:	897b      	ldrh	r3, [r7, #10]
 8004610:	b2db      	uxtb	r3, r3
 8004612:	461a      	mov	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800461c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800461e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004620:	6a3a      	ldr	r2, [r7, #32]
 8004622:	4952      	ldr	r1, [pc, #328]	@ (800476c <I2C_RequestMemoryRead+0x1cc>)
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 f91d 	bl	8004864 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e097      	b.n	8004764 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	617b      	str	r3, [r7, #20]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800464a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800464c:	6a39      	ldr	r1, [r7, #32]
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 f9a8 	bl	80049a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00d      	beq.n	8004676 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465e:	2b04      	cmp	r3, #4
 8004660:	d107      	bne.n	8004672 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004670:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e076      	b.n	8004764 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004676:	88fb      	ldrh	r3, [r7, #6]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d105      	bne.n	8004688 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800467c:	893b      	ldrh	r3, [r7, #8]
 800467e:	b2da      	uxtb	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	611a      	str	r2, [r3, #16]
 8004686:	e021      	b.n	80046cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004688:	893b      	ldrh	r3, [r7, #8]
 800468a:	0a1b      	lsrs	r3, r3, #8
 800468c:	b29b      	uxth	r3, r3
 800468e:	b2da      	uxtb	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004698:	6a39      	ldr	r1, [r7, #32]
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f982 	bl	80049a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00d      	beq.n	80046c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d107      	bne.n	80046be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e050      	b.n	8004764 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046c2:	893b      	ldrh	r3, [r7, #8]
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046ce:	6a39      	ldr	r1, [r7, #32]
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f967 	bl	80049a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00d      	beq.n	80046f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e0:	2b04      	cmp	r3, #4
 80046e2:	d107      	bne.n	80046f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e035      	b.n	8004764 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004706:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	2200      	movs	r2, #0
 8004710:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 f82b 	bl	8004770 <I2C_WaitOnFlagUntilTimeout>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00d      	beq.n	800473c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800472a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800472e:	d103      	bne.n	8004738 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004736:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e013      	b.n	8004764 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800473c:	897b      	ldrh	r3, [r7, #10]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	f043 0301 	orr.w	r3, r3, #1
 8004744:	b2da      	uxtb	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800474c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474e:	6a3a      	ldr	r2, [r7, #32]
 8004750:	4906      	ldr	r1, [pc, #24]	@ (800476c <I2C_RequestMemoryRead+0x1cc>)
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 f886 	bl	8004864 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	00010002 	.word	0x00010002

08004770 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004780:	e048      	b.n	8004814 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004788:	d044      	beq.n	8004814 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800478a:	f7fe fec3 	bl	8003514 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	429a      	cmp	r2, r3
 8004798:	d302      	bcc.n	80047a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d139      	bne.n	8004814 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	0c1b      	lsrs	r3, r3, #16
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d10d      	bne.n	80047c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	43da      	mvns	r2, r3
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	4013      	ands	r3, r2
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	bf0c      	ite	eq
 80047bc:	2301      	moveq	r3, #1
 80047be:	2300      	movne	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	461a      	mov	r2, r3
 80047c4:	e00c      	b.n	80047e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	43da      	mvns	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	4013      	ands	r3, r2
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	bf0c      	ite	eq
 80047d8:	2301      	moveq	r3, #1
 80047da:	2300      	movne	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	461a      	mov	r2, r3
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d116      	bne.n	8004814 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004800:	f043 0220 	orr.w	r2, r3, #32
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e023      	b.n	800485c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	0c1b      	lsrs	r3, r3, #16
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b01      	cmp	r3, #1
 800481c:	d10d      	bne.n	800483a <I2C_WaitOnFlagUntilTimeout+0xca>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	43da      	mvns	r2, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4013      	ands	r3, r2
 800482a:	b29b      	uxth	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	bf0c      	ite	eq
 8004830:	2301      	moveq	r3, #1
 8004832:	2300      	movne	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	e00c      	b.n	8004854 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	43da      	mvns	r2, r3
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	4013      	ands	r3, r2
 8004846:	b29b      	uxth	r3, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	bf0c      	ite	eq
 800484c:	2301      	moveq	r3, #1
 800484e:	2300      	movne	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	461a      	mov	r2, r3
 8004854:	79fb      	ldrb	r3, [r7, #7]
 8004856:	429a      	cmp	r2, r3
 8004858:	d093      	beq.n	8004782 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004872:	e071      	b.n	8004958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800487e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004882:	d123      	bne.n	80048cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004892:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800489c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b8:	f043 0204 	orr.w	r2, r3, #4
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e067      	b.n	800499c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d2:	d041      	beq.n	8004958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048d4:	f7fe fe1e 	bl	8003514 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d302      	bcc.n	80048ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d136      	bne.n	8004958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	0c1b      	lsrs	r3, r3, #16
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d10c      	bne.n	800490e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	43da      	mvns	r2, r3
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	4013      	ands	r3, r2
 8004900:	b29b      	uxth	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	bf14      	ite	ne
 8004906:	2301      	movne	r3, #1
 8004908:	2300      	moveq	r3, #0
 800490a:	b2db      	uxtb	r3, r3
 800490c:	e00b      	b.n	8004926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	43da      	mvns	r2, r3
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	4013      	ands	r3, r2
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	bf14      	ite	ne
 8004920:	2301      	movne	r3, #1
 8004922:	2300      	moveq	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d016      	beq.n	8004958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004944:	f043 0220 	orr.w	r2, r3, #32
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e021      	b.n	800499c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	0c1b      	lsrs	r3, r3, #16
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b01      	cmp	r3, #1
 8004960:	d10c      	bne.n	800497c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	43da      	mvns	r2, r3
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	4013      	ands	r3, r2
 800496e:	b29b      	uxth	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	bf14      	ite	ne
 8004974:	2301      	movne	r3, #1
 8004976:	2300      	moveq	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	e00b      	b.n	8004994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	43da      	mvns	r2, r3
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	4013      	ands	r3, r2
 8004988:	b29b      	uxth	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	bf14      	ite	ne
 800498e:	2301      	movne	r3, #1
 8004990:	2300      	moveq	r3, #0
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	f47f af6d 	bne.w	8004874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049b0:	e034      	b.n	8004a1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 f8e3 	bl	8004b7e <I2C_IsAcknowledgeFailed>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e034      	b.n	8004a2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c8:	d028      	beq.n	8004a1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ca:	f7fe fda3 	bl	8003514 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d302      	bcc.n	80049e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d11d      	bne.n	8004a1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ea:	2b80      	cmp	r3, #128	@ 0x80
 80049ec:	d016      	beq.n	8004a1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a08:	f043 0220 	orr.w	r2, r3, #32
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e007      	b.n	8004a2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a26:	2b80      	cmp	r3, #128	@ 0x80
 8004a28:	d1c3      	bne.n	80049b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a40:	e034      	b.n	8004aac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 f89b 	bl	8004b7e <I2C_IsAcknowledgeFailed>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e034      	b.n	8004abc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a58:	d028      	beq.n	8004aac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a5a:	f7fe fd5b 	bl	8003514 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d302      	bcc.n	8004a70 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d11d      	bne.n	8004aac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	f003 0304 	and.w	r3, r3, #4
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d016      	beq.n	8004aac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a98:	f043 0220 	orr.w	r2, r3, #32
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e007      	b.n	8004abc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d1c3      	bne.n	8004a42 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ad0:	e049      	b.n	8004b66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	f003 0310 	and.w	r3, r3, #16
 8004adc:	2b10      	cmp	r3, #16
 8004ade:	d119      	bne.n	8004b14 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f06f 0210 	mvn.w	r2, #16
 8004ae8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e030      	b.n	8004b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b14:	f7fe fcfe 	bl	8003514 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d302      	bcc.n	8004b2a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d11d      	bne.n	8004b66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b34:	2b40      	cmp	r3, #64	@ 0x40
 8004b36:	d016      	beq.n	8004b66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2220      	movs	r2, #32
 8004b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b52:	f043 0220 	orr.w	r2, r3, #32
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e007      	b.n	8004b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b70:	2b40      	cmp	r3, #64	@ 0x40
 8004b72:	d1ae      	bne.n	8004ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b083      	sub	sp, #12
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b94:	d11b      	bne.n	8004bce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b9e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bba:	f043 0204 	orr.w	r2, r3, #4
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bc80      	pop	{r7}
 8004bd8:	4770      	bx	lr
	...

08004bdc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004be0:	4b03      	ldr	r3, [pc, #12]	@ (8004bf0 <HAL_PWR_EnableBkUpAccess+0x14>)
 8004be2:	2201      	movs	r2, #1
 8004be4:	601a      	str	r2, [r3, #0]
}
 8004be6:	bf00      	nop
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc80      	pop	{r7}
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	420e0020 	.word	0x420e0020

08004bf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e272      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 8087 	beq.w	8004d22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c14:	4b92      	ldr	r3, [pc, #584]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 030c 	and.w	r3, r3, #12
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d00c      	beq.n	8004c3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c20:	4b8f      	ldr	r3, [pc, #572]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f003 030c 	and.w	r3, r3, #12
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d112      	bne.n	8004c52 <HAL_RCC_OscConfig+0x5e>
 8004c2c:	4b8c      	ldr	r3, [pc, #560]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c38:	d10b      	bne.n	8004c52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c3a:	4b89      	ldr	r3, [pc, #548]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d06c      	beq.n	8004d20 <HAL_RCC_OscConfig+0x12c>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d168      	bne.n	8004d20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e24c      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c5a:	d106      	bne.n	8004c6a <HAL_RCC_OscConfig+0x76>
 8004c5c:	4b80      	ldr	r3, [pc, #512]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a7f      	ldr	r2, [pc, #508]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004c62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c66:	6013      	str	r3, [r2, #0]
 8004c68:	e02e      	b.n	8004cc8 <HAL_RCC_OscConfig+0xd4>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10c      	bne.n	8004c8c <HAL_RCC_OscConfig+0x98>
 8004c72:	4b7b      	ldr	r3, [pc, #492]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a7a      	ldr	r2, [pc, #488]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004c78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	4b78      	ldr	r3, [pc, #480]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a77      	ldr	r2, [pc, #476]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004c84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c88:	6013      	str	r3, [r2, #0]
 8004c8a:	e01d      	b.n	8004cc8 <HAL_RCC_OscConfig+0xd4>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c94:	d10c      	bne.n	8004cb0 <HAL_RCC_OscConfig+0xbc>
 8004c96:	4b72      	ldr	r3, [pc, #456]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a71      	ldr	r2, [pc, #452]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004c9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	4b6f      	ldr	r3, [pc, #444]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a6e      	ldr	r2, [pc, #440]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	e00b      	b.n	8004cc8 <HAL_RCC_OscConfig+0xd4>
 8004cb0:	4b6b      	ldr	r3, [pc, #428]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a6a      	ldr	r2, [pc, #424]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004cb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	4b68      	ldr	r3, [pc, #416]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a67      	ldr	r2, [pc, #412]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004cc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d013      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd0:	f7fe fc20 	bl	8003514 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cd8:	f7fe fc1c 	bl	8003514 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b64      	cmp	r3, #100	@ 0x64
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e200      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cea:	4b5d      	ldr	r3, [pc, #372]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0f0      	beq.n	8004cd8 <HAL_RCC_OscConfig+0xe4>
 8004cf6:	e014      	b.n	8004d22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf8:	f7fe fc0c 	bl	8003514 <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d00:	f7fe fc08 	bl	8003514 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b64      	cmp	r3, #100	@ 0x64
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e1ec      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d12:	4b53      	ldr	r3, [pc, #332]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1f0      	bne.n	8004d00 <HAL_RCC_OscConfig+0x10c>
 8004d1e:	e000      	b.n	8004d22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d063      	beq.n	8004df6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d2e:	4b4c      	ldr	r3, [pc, #304]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f003 030c 	and.w	r3, r3, #12
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00b      	beq.n	8004d52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004d3a:	4b49      	ldr	r3, [pc, #292]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f003 030c 	and.w	r3, r3, #12
 8004d42:	2b08      	cmp	r3, #8
 8004d44:	d11c      	bne.n	8004d80 <HAL_RCC_OscConfig+0x18c>
 8004d46:	4b46      	ldr	r3, [pc, #280]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d116      	bne.n	8004d80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d52:	4b43      	ldr	r3, [pc, #268]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d005      	beq.n	8004d6a <HAL_RCC_OscConfig+0x176>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d001      	beq.n	8004d6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e1c0      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d6a:	4b3d      	ldr	r3, [pc, #244]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	4939      	ldr	r1, [pc, #228]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d7e:	e03a      	b.n	8004df6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d020      	beq.n	8004dca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d88:	4b36      	ldr	r3, [pc, #216]	@ (8004e64 <HAL_RCC_OscConfig+0x270>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d8e:	f7fe fbc1 	bl	8003514 <HAL_GetTick>
 8004d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d94:	e008      	b.n	8004da8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d96:	f7fe fbbd 	bl	8003514 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e1a1      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da8:	4b2d      	ldr	r3, [pc, #180]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0f0      	beq.n	8004d96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db4:	4b2a      	ldr	r3, [pc, #168]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4927      	ldr	r1, [pc, #156]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	600b      	str	r3, [r1, #0]
 8004dc8:	e015      	b.n	8004df6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dca:	4b26      	ldr	r3, [pc, #152]	@ (8004e64 <HAL_RCC_OscConfig+0x270>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd0:	f7fe fba0 	bl	8003514 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dd8:	f7fe fb9c 	bl	8003514 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e180      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dea:	4b1d      	ldr	r3, [pc, #116]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1f0      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0308 	and.w	r3, r3, #8
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d03a      	beq.n	8004e78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d019      	beq.n	8004e3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e0a:	4b17      	ldr	r3, [pc, #92]	@ (8004e68 <HAL_RCC_OscConfig+0x274>)
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e10:	f7fe fb80 	bl	8003514 <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e18:	f7fe fb7c 	bl	8003514 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e160      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d0f0      	beq.n	8004e18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004e36:	2001      	movs	r0, #1
 8004e38:	f000 face 	bl	80053d8 <RCC_Delay>
 8004e3c:	e01c      	b.n	8004e78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e68 <HAL_RCC_OscConfig+0x274>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e44:	f7fe fb66 	bl	8003514 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e4a:	e00f      	b.n	8004e6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e4c:	f7fe fb62 	bl	8003514 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d908      	bls.n	8004e6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e146      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
 8004e5e:	bf00      	nop
 8004e60:	40021000 	.word	0x40021000
 8004e64:	42420000 	.word	0x42420000
 8004e68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e6c:	4b92      	ldr	r3, [pc, #584]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1e9      	bne.n	8004e4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 80a6 	beq.w	8004fd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e86:	2300      	movs	r3, #0
 8004e88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e8a:	4b8b      	ldr	r3, [pc, #556]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10d      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e96:	4b88      	ldr	r3, [pc, #544]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	4a87      	ldr	r2, [pc, #540]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004e9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ea0:	61d3      	str	r3, [r2, #28]
 8004ea2:	4b85      	ldr	r3, [pc, #532]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eaa:	60bb      	str	r3, [r7, #8]
 8004eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb2:	4b82      	ldr	r3, [pc, #520]	@ (80050bc <HAL_RCC_OscConfig+0x4c8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d118      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ebe:	4b7f      	ldr	r3, [pc, #508]	@ (80050bc <HAL_RCC_OscConfig+0x4c8>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a7e      	ldr	r2, [pc, #504]	@ (80050bc <HAL_RCC_OscConfig+0x4c8>)
 8004ec4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eca:	f7fe fb23 	bl	8003514 <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ed2:	f7fe fb1f 	bl	8003514 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b64      	cmp	r3, #100	@ 0x64
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e103      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee4:	4b75      	ldr	r3, [pc, #468]	@ (80050bc <HAL_RCC_OscConfig+0x4c8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0f0      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d106      	bne.n	8004f06 <HAL_RCC_OscConfig+0x312>
 8004ef8:	4b6f      	ldr	r3, [pc, #444]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	4a6e      	ldr	r2, [pc, #440]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004efe:	f043 0301 	orr.w	r3, r3, #1
 8004f02:	6213      	str	r3, [r2, #32]
 8004f04:	e02d      	b.n	8004f62 <HAL_RCC_OscConfig+0x36e>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10c      	bne.n	8004f28 <HAL_RCC_OscConfig+0x334>
 8004f0e:	4b6a      	ldr	r3, [pc, #424]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	4a69      	ldr	r2, [pc, #420]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f14:	f023 0301 	bic.w	r3, r3, #1
 8004f18:	6213      	str	r3, [r2, #32]
 8004f1a:	4b67      	ldr	r3, [pc, #412]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	4a66      	ldr	r2, [pc, #408]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f20:	f023 0304 	bic.w	r3, r3, #4
 8004f24:	6213      	str	r3, [r2, #32]
 8004f26:	e01c      	b.n	8004f62 <HAL_RCC_OscConfig+0x36e>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	2b05      	cmp	r3, #5
 8004f2e:	d10c      	bne.n	8004f4a <HAL_RCC_OscConfig+0x356>
 8004f30:	4b61      	ldr	r3, [pc, #388]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	4a60      	ldr	r2, [pc, #384]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f36:	f043 0304 	orr.w	r3, r3, #4
 8004f3a:	6213      	str	r3, [r2, #32]
 8004f3c:	4b5e      	ldr	r3, [pc, #376]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	4a5d      	ldr	r2, [pc, #372]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f42:	f043 0301 	orr.w	r3, r3, #1
 8004f46:	6213      	str	r3, [r2, #32]
 8004f48:	e00b      	b.n	8004f62 <HAL_RCC_OscConfig+0x36e>
 8004f4a:	4b5b      	ldr	r3, [pc, #364]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	4a5a      	ldr	r2, [pc, #360]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f50:	f023 0301 	bic.w	r3, r3, #1
 8004f54:	6213      	str	r3, [r2, #32]
 8004f56:	4b58      	ldr	r3, [pc, #352]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	4a57      	ldr	r2, [pc, #348]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f5c:	f023 0304 	bic.w	r3, r3, #4
 8004f60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d015      	beq.n	8004f96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f6a:	f7fe fad3 	bl	8003514 <HAL_GetTick>
 8004f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f70:	e00a      	b.n	8004f88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f72:	f7fe facf 	bl	8003514 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e0b1      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f88:	4b4b      	ldr	r3, [pc, #300]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0ee      	beq.n	8004f72 <HAL_RCC_OscConfig+0x37e>
 8004f94:	e014      	b.n	8004fc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f96:	f7fe fabd 	bl	8003514 <HAL_GetTick>
 8004f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f9c:	e00a      	b.n	8004fb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f9e:	f7fe fab9 	bl	8003514 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e09b      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fb4:	4b40      	ldr	r3, [pc, #256]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1ee      	bne.n	8004f9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004fc0:	7dfb      	ldrb	r3, [r7, #23]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d105      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fc6:	4b3c      	ldr	r3, [pc, #240]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	4a3b      	ldr	r2, [pc, #236]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004fcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 8087 	beq.w	80050ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fdc:	4b36      	ldr	r3, [pc, #216]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f003 030c 	and.w	r3, r3, #12
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d061      	beq.n	80050ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	69db      	ldr	r3, [r3, #28]
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d146      	bne.n	800507e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ff0:	4b33      	ldr	r3, [pc, #204]	@ (80050c0 <HAL_RCC_OscConfig+0x4cc>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff6:	f7fe fa8d 	bl	8003514 <HAL_GetTick>
 8004ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ffe:	f7fe fa89 	bl	8003514 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e06d      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005010:	4b29      	ldr	r3, [pc, #164]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1f0      	bne.n	8004ffe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005024:	d108      	bne.n	8005038 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005026:	4b24      	ldr	r3, [pc, #144]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	4921      	ldr	r1, [pc, #132]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8005034:	4313      	orrs	r3, r2
 8005036:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005038:	4b1f      	ldr	r3, [pc, #124]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a19      	ldr	r1, [r3, #32]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005048:	430b      	orrs	r3, r1
 800504a:	491b      	ldr	r1, [pc, #108]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 800504c:	4313      	orrs	r3, r2
 800504e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005050:	4b1b      	ldr	r3, [pc, #108]	@ (80050c0 <HAL_RCC_OscConfig+0x4cc>)
 8005052:	2201      	movs	r2, #1
 8005054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005056:	f7fe fa5d 	bl	8003514 <HAL_GetTick>
 800505a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800505c:	e008      	b.n	8005070 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800505e:	f7fe fa59 	bl	8003514 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d901      	bls.n	8005070 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e03d      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005070:	4b11      	ldr	r3, [pc, #68]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0f0      	beq.n	800505e <HAL_RCC_OscConfig+0x46a>
 800507c:	e035      	b.n	80050ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800507e:	4b10      	ldr	r3, [pc, #64]	@ (80050c0 <HAL_RCC_OscConfig+0x4cc>)
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005084:	f7fe fa46 	bl	8003514 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800508c:	f7fe fa42 	bl	8003514 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e026      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800509e:	4b06      	ldr	r3, [pc, #24]	@ (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f0      	bne.n	800508c <HAL_RCC_OscConfig+0x498>
 80050aa:	e01e      	b.n	80050ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d107      	bne.n	80050c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e019      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
 80050b8:	40021000 	.word	0x40021000
 80050bc:	40007000 	.word	0x40007000
 80050c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80050c4:	4b0b      	ldr	r3, [pc, #44]	@ (80050f4 <HAL_RCC_OscConfig+0x500>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d106      	bne.n	80050e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d001      	beq.n	80050ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3718      	adds	r7, #24
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40021000 	.word	0x40021000

080050f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e0d0      	b.n	80052ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800510c:	4b6a      	ldr	r3, [pc, #424]	@ (80052b8 <HAL_RCC_ClockConfig+0x1c0>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d910      	bls.n	800513c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511a:	4b67      	ldr	r3, [pc, #412]	@ (80052b8 <HAL_RCC_ClockConfig+0x1c0>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f023 0207 	bic.w	r2, r3, #7
 8005122:	4965      	ldr	r1, [pc, #404]	@ (80052b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	4313      	orrs	r3, r2
 8005128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800512a:	4b63      	ldr	r3, [pc, #396]	@ (80052b8 <HAL_RCC_ClockConfig+0x1c0>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	429a      	cmp	r2, r3
 8005136:	d001      	beq.n	800513c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e0b8      	b.n	80052ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d020      	beq.n	800518a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b00      	cmp	r3, #0
 8005152:	d005      	beq.n	8005160 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005154:	4b59      	ldr	r3, [pc, #356]	@ (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	4a58      	ldr	r2, [pc, #352]	@ (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 800515a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800515e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0308 	and.w	r3, r3, #8
 8005168:	2b00      	cmp	r3, #0
 800516a:	d005      	beq.n	8005178 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800516c:	4b53      	ldr	r3, [pc, #332]	@ (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	4a52      	ldr	r2, [pc, #328]	@ (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 8005172:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005176:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005178:	4b50      	ldr	r3, [pc, #320]	@ (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	494d      	ldr	r1, [pc, #308]	@ (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 8005186:	4313      	orrs	r3, r2
 8005188:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d040      	beq.n	8005218 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d107      	bne.n	80051ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800519e:	4b47      	ldr	r3, [pc, #284]	@ (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d115      	bne.n	80051d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e07f      	b.n	80052ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d107      	bne.n	80051c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051b6:	4b41      	ldr	r3, [pc, #260]	@ (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d109      	bne.n	80051d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e073      	b.n	80052ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051c6:	4b3d      	ldr	r3, [pc, #244]	@ (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e06b      	b.n	80052ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051d6:	4b39      	ldr	r3, [pc, #228]	@ (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f023 0203 	bic.w	r2, r3, #3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	4936      	ldr	r1, [pc, #216]	@ (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051e8:	f7fe f994 	bl	8003514 <HAL_GetTick>
 80051ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ee:	e00a      	b.n	8005206 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051f0:	f7fe f990 	bl	8003514 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051fe:	4293      	cmp	r3, r2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e053      	b.n	80052ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005206:	4b2d      	ldr	r3, [pc, #180]	@ (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f003 020c 	and.w	r2, r3, #12
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	429a      	cmp	r2, r3
 8005216:	d1eb      	bne.n	80051f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005218:	4b27      	ldr	r3, [pc, #156]	@ (80052b8 <HAL_RCC_ClockConfig+0x1c0>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	429a      	cmp	r2, r3
 8005224:	d210      	bcs.n	8005248 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005226:	4b24      	ldr	r3, [pc, #144]	@ (80052b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f023 0207 	bic.w	r2, r3, #7
 800522e:	4922      	ldr	r1, [pc, #136]	@ (80052b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	4313      	orrs	r3, r2
 8005234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005236:	4b20      	ldr	r3, [pc, #128]	@ (80052b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0307 	and.w	r3, r3, #7
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	429a      	cmp	r2, r3
 8005242:	d001      	beq.n	8005248 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e032      	b.n	80052ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	d008      	beq.n	8005266 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005254:	4b19      	ldr	r3, [pc, #100]	@ (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	4916      	ldr	r1, [pc, #88]	@ (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 8005262:	4313      	orrs	r3, r2
 8005264:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b00      	cmp	r3, #0
 8005270:	d009      	beq.n	8005286 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005272:	4b12      	ldr	r3, [pc, #72]	@ (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	490e      	ldr	r1, [pc, #56]	@ (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 8005282:	4313      	orrs	r3, r2
 8005284:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005286:	f000 f821 	bl	80052cc <HAL_RCC_GetSysClockFreq>
 800528a:	4602      	mov	r2, r0
 800528c:	4b0b      	ldr	r3, [pc, #44]	@ (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	091b      	lsrs	r3, r3, #4
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	490a      	ldr	r1, [pc, #40]	@ (80052c0 <HAL_RCC_ClockConfig+0x1c8>)
 8005298:	5ccb      	ldrb	r3, [r1, r3]
 800529a:	fa22 f303 	lsr.w	r3, r2, r3
 800529e:	4a09      	ldr	r2, [pc, #36]	@ (80052c4 <HAL_RCC_ClockConfig+0x1cc>)
 80052a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80052a2:	4b09      	ldr	r3, [pc, #36]	@ (80052c8 <HAL_RCC_ClockConfig+0x1d0>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fe f8f2 	bl	8003490 <HAL_InitTick>

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40022000 	.word	0x40022000
 80052bc:	40021000 	.word	0x40021000
 80052c0:	0800d85c 	.word	0x0800d85c
 80052c4:	20000008 	.word	0x20000008
 80052c8:	2000000c 	.word	0x2000000c

080052cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	2300      	movs	r3, #0
 80052d8:	60bb      	str	r3, [r7, #8]
 80052da:	2300      	movs	r3, #0
 80052dc:	617b      	str	r3, [r7, #20]
 80052de:	2300      	movs	r3, #0
 80052e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80052e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x94>)
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f003 030c 	and.w	r3, r3, #12
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d002      	beq.n	80052fc <HAL_RCC_GetSysClockFreq+0x30>
 80052f6:	2b08      	cmp	r3, #8
 80052f8:	d003      	beq.n	8005302 <HAL_RCC_GetSysClockFreq+0x36>
 80052fa:	e027      	b.n	800534c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80052fc:	4b19      	ldr	r3, [pc, #100]	@ (8005364 <HAL_RCC_GetSysClockFreq+0x98>)
 80052fe:	613b      	str	r3, [r7, #16]
      break;
 8005300:	e027      	b.n	8005352 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	0c9b      	lsrs	r3, r3, #18
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	4a17      	ldr	r2, [pc, #92]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x9c>)
 800530c:	5cd3      	ldrb	r3, [r2, r3]
 800530e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d010      	beq.n	800533c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800531a:	4b11      	ldr	r3, [pc, #68]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x94>)
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	0c5b      	lsrs	r3, r3, #17
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	4a11      	ldr	r2, [pc, #68]	@ (800536c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005326:	5cd3      	ldrb	r3, [r2, r3]
 8005328:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a0d      	ldr	r2, [pc, #52]	@ (8005364 <HAL_RCC_GetSysClockFreq+0x98>)
 800532e:	fb03 f202 	mul.w	r2, r3, r2
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	fbb2 f3f3 	udiv	r3, r2, r3
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	e004      	b.n	8005346 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a0c      	ldr	r2, [pc, #48]	@ (8005370 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005340:	fb02 f303 	mul.w	r3, r2, r3
 8005344:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	613b      	str	r3, [r7, #16]
      break;
 800534a:	e002      	b.n	8005352 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800534c:	4b05      	ldr	r3, [pc, #20]	@ (8005364 <HAL_RCC_GetSysClockFreq+0x98>)
 800534e:	613b      	str	r3, [r7, #16]
      break;
 8005350:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005352:	693b      	ldr	r3, [r7, #16]
}
 8005354:	4618      	mov	r0, r3
 8005356:	371c      	adds	r7, #28
 8005358:	46bd      	mov	sp, r7
 800535a:	bc80      	pop	{r7}
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40021000 	.word	0x40021000
 8005364:	007a1200 	.word	0x007a1200
 8005368:	0800d874 	.word	0x0800d874
 800536c:	0800d884 	.word	0x0800d884
 8005370:	003d0900 	.word	0x003d0900

08005374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005378:	4b02      	ldr	r3, [pc, #8]	@ (8005384 <HAL_RCC_GetHCLKFreq+0x10>)
 800537a:	681b      	ldr	r3, [r3, #0]
}
 800537c:	4618      	mov	r0, r3
 800537e:	46bd      	mov	sp, r7
 8005380:	bc80      	pop	{r7}
 8005382:	4770      	bx	lr
 8005384:	20000008 	.word	0x20000008

08005388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800538c:	f7ff fff2 	bl	8005374 <HAL_RCC_GetHCLKFreq>
 8005390:	4602      	mov	r2, r0
 8005392:	4b05      	ldr	r3, [pc, #20]	@ (80053a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	0a1b      	lsrs	r3, r3, #8
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	4903      	ldr	r1, [pc, #12]	@ (80053ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800539e:	5ccb      	ldrb	r3, [r1, r3]
 80053a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40021000 	.word	0x40021000
 80053ac:	0800d86c 	.word	0x0800d86c

080053b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053b4:	f7ff ffde 	bl	8005374 <HAL_RCC_GetHCLKFreq>
 80053b8:	4602      	mov	r2, r0
 80053ba:	4b05      	ldr	r3, [pc, #20]	@ (80053d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	0adb      	lsrs	r3, r3, #11
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	4903      	ldr	r1, [pc, #12]	@ (80053d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053c6:	5ccb      	ldrb	r3, [r1, r3]
 80053c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40021000 	.word	0x40021000
 80053d4:	0800d86c 	.word	0x0800d86c

080053d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80053e0:	4b0a      	ldr	r3, [pc, #40]	@ (800540c <RCC_Delay+0x34>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a0a      	ldr	r2, [pc, #40]	@ (8005410 <RCC_Delay+0x38>)
 80053e6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ea:	0a5b      	lsrs	r3, r3, #9
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	fb02 f303 	mul.w	r3, r2, r3
 80053f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80053f4:	bf00      	nop
  }
  while (Delay --);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	1e5a      	subs	r2, r3, #1
 80053fa:	60fa      	str	r2, [r7, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1f9      	bne.n	80053f4 <RCC_Delay+0x1c>
}
 8005400:	bf00      	nop
 8005402:	bf00      	nop
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	bc80      	pop	{r7}
 800540a:	4770      	bx	lr
 800540c:	20000008 	.word	0x20000008
 8005410:	10624dd3 	.word	0x10624dd3

08005414 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	613b      	str	r3, [r7, #16]
 8005420:	2300      	movs	r3, #0
 8005422:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d07d      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005430:	2300      	movs	r3, #0
 8005432:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005434:	4b4f      	ldr	r3, [pc, #316]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10d      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005440:	4b4c      	ldr	r3, [pc, #304]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	4a4b      	ldr	r2, [pc, #300]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005446:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800544a:	61d3      	str	r3, [r2, #28]
 800544c:	4b49      	ldr	r3, [pc, #292]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005454:	60bb      	str	r3, [r7, #8]
 8005456:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005458:	2301      	movs	r3, #1
 800545a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800545c:	4b46      	ldr	r3, [pc, #280]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005464:	2b00      	cmp	r3, #0
 8005466:	d118      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005468:	4b43      	ldr	r3, [pc, #268]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a42      	ldr	r2, [pc, #264]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800546e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005472:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005474:	f7fe f84e 	bl	8003514 <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800547a:	e008      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800547c:	f7fe f84a 	bl	8003514 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b64      	cmp	r3, #100	@ 0x64
 8005488:	d901      	bls.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e06d      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800548e:	4b3a      	ldr	r3, [pc, #232]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0f0      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800549a:	4b36      	ldr	r3, [pc, #216]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054a2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d02e      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d027      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054b8:	4b2e      	ldr	r3, [pc, #184]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054c2:	4b2e      	ldr	r3, [pc, #184]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80054c4:	2201      	movs	r2, #1
 80054c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054c8:	4b2c      	ldr	r3, [pc, #176]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80054ce:	4a29      	ldr	r2, [pc, #164]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d014      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054de:	f7fe f819 	bl	8003514 <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054e4:	e00a      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e6:	f7fe f815 	bl	8003514 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d901      	bls.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e036      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d0ee      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005508:	4b1a      	ldr	r3, [pc, #104]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	4917      	ldr	r1, [pc, #92]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005516:	4313      	orrs	r3, r2
 8005518:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800551a:	7dfb      	ldrb	r3, [r7, #23]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d105      	bne.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005520:	4b14      	ldr	r3, [pc, #80]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	4a13      	ldr	r2, [pc, #76]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005526:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800552a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d008      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005538:	4b0e      	ldr	r3, [pc, #56]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	490b      	ldr	r1, [pc, #44]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005546:	4313      	orrs	r3, r2
 8005548:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0310 	and.w	r3, r3, #16
 8005552:	2b00      	cmp	r3, #0
 8005554:	d008      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005556:	4b07      	ldr	r3, [pc, #28]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	4904      	ldr	r1, [pc, #16]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005564:	4313      	orrs	r3, r2
 8005566:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	40021000 	.word	0x40021000
 8005578:	40007000 	.word	0x40007000
 800557c:	42420440 	.word	0x42420440

08005580 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	2300      	movs	r3, #0
 800558e:	61fb      	str	r3, [r7, #28]
 8005590:	2300      	movs	r3, #0
 8005592:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	2300      	movs	r3, #0
 800559a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b10      	cmp	r3, #16
 80055a0:	d00a      	beq.n	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b10      	cmp	r3, #16
 80055a6:	f200 808a 	bhi.w	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d045      	beq.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d075      	beq.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80055b6:	e082      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80055b8:	4b46      	ldr	r3, [pc, #280]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80055be:	4b45      	ldr	r3, [pc, #276]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d07b      	beq.n	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	0c9b      	lsrs	r3, r3, #18
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	4a41      	ldr	r2, [pc, #260]	@ (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80055d4:	5cd3      	ldrb	r3, [r2, r3]
 80055d6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d015      	beq.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80055e2:	4b3c      	ldr	r3, [pc, #240]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	0c5b      	lsrs	r3, r3, #17
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	4a3b      	ldr	r2, [pc, #236]	@ (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80055ee:	5cd3      	ldrb	r3, [r2, r3]
 80055f0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00d      	beq.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80055fc:	4a38      	ldr	r2, [pc, #224]	@ (80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	fbb2 f2f3 	udiv	r2, r2, r3
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	fb02 f303 	mul.w	r3, r2, r3
 800560a:	61fb      	str	r3, [r7, #28]
 800560c:	e004      	b.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	4a34      	ldr	r2, [pc, #208]	@ (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005612:	fb02 f303 	mul.w	r3, r2, r3
 8005616:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005618:	4b2e      	ldr	r3, [pc, #184]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005620:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005624:	d102      	bne.n	800562c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	61bb      	str	r3, [r7, #24]
      break;
 800562a:	e04a      	b.n	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	4a2d      	ldr	r2, [pc, #180]	@ (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005632:	fba2 2303 	umull	r2, r3, r2, r3
 8005636:	085b      	lsrs	r3, r3, #1
 8005638:	61bb      	str	r3, [r7, #24]
      break;
 800563a:	e042      	b.n	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800563c:	4b25      	ldr	r3, [pc, #148]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005648:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800564c:	d108      	bne.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005658:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800565c:	61bb      	str	r3, [r7, #24]
 800565e:	e01f      	b.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005666:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800566a:	d109      	bne.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800566c:	4b19      	ldr	r3, [pc, #100]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800566e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005678:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800567c:	61bb      	str	r3, [r7, #24]
 800567e:	e00f      	b.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005686:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800568a:	d11c      	bne.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800568c:	4b11      	ldr	r3, [pc, #68]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d016      	beq.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005698:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800569c:	61bb      	str	r3, [r7, #24]
      break;
 800569e:	e012      	b.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80056a0:	e011      	b.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80056a2:	f7ff fe85 	bl	80053b0 <HAL_RCC_GetPCLK2Freq>
 80056a6:	4602      	mov	r2, r0
 80056a8:	4b0a      	ldr	r3, [pc, #40]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	0b9b      	lsrs	r3, r3, #14
 80056ae:	f003 0303 	and.w	r3, r3, #3
 80056b2:	3301      	adds	r3, #1
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ba:	61bb      	str	r3, [r7, #24]
      break;
 80056bc:	e004      	b.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80056be:	bf00      	nop
 80056c0:	e002      	b.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80056c2:	bf00      	nop
 80056c4:	e000      	b.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80056c6:	bf00      	nop
    }
  }
  return (frequency);
 80056c8:	69bb      	ldr	r3, [r7, #24]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3720      	adds	r7, #32
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	40021000 	.word	0x40021000
 80056d8:	0800d888 	.word	0x0800d888
 80056dc:	0800d898 	.word	0x0800d898
 80056e0:	007a1200 	.word	0x007a1200
 80056e4:	003d0900 	.word	0x003d0900
 80056e8:	aaaaaaab 	.word	0xaaaaaaab

080056ec <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e07a      	b.n	80057f8 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	7c5b      	ldrb	r3, [r3, #17]
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d105      	bne.n	8005718 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7fd fcdc 	bl	80030d0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fbcc 	bl	8005ebc <HAL_RTC_WaitForSynchro>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d004      	beq.n	8005734 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2204      	movs	r2, #4
 800572e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e061      	b.n	80057f8 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fc85 	bl	8006044 <RTC_EnterInitMode>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d004      	beq.n	800574a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2204      	movs	r2, #4
 8005744:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e056      	b.n	80057f8 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0207 	bic.w	r2, r2, #7
 8005758:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d005      	beq.n	800576e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8005762:	4b27      	ldr	r3, [pc, #156]	@ (8005800 <HAL_RTC_Init+0x114>)
 8005764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005766:	4a26      	ldr	r2, [pc, #152]	@ (8005800 <HAL_RTC_Init+0x114>)
 8005768:	f023 0301 	bic.w	r3, r3, #1
 800576c:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800576e:	4b24      	ldr	r3, [pc, #144]	@ (8005800 <HAL_RTC_Init+0x114>)
 8005770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005772:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	4921      	ldr	r1, [pc, #132]	@ (8005800 <HAL_RTC_Init+0x114>)
 800577c:	4313      	orrs	r3, r2
 800577e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005788:	d003      	beq.n	8005792 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	e00e      	b.n	80057b0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005792:	2001      	movs	r0, #1
 8005794:	f7ff fef4 	bl	8005580 <HAL_RCCEx_GetPeriphCLKFreq>
 8005798:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d104      	bne.n	80057aa <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2204      	movs	r2, #4
 80057a4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e026      	b.n	80057f8 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	3b01      	subs	r3, #1
 80057ae:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	0c1a      	lsrs	r2, r3, #16
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f002 020f 	and.w	r2, r2, #15
 80057bc:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	b292      	uxth	r2, r2
 80057c6:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 fc63 	bl	8006094 <RTC_ExitInitMode>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d004      	beq.n	80057de <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2204      	movs	r2, #4
 80057d8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e00c      	b.n	80057f8 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80057f6:	2300      	movs	r3, #0
  }
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	40006c00 	.word	0x40006c00

08005804 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005804:	b590      	push	{r4, r7, lr}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	617b      	str	r3, [r7, #20]
 8005814:	2300      	movs	r3, #0
 8005816:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <HAL_RTC_SetTime+0x20>
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e080      	b.n	800592a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	7c1b      	ldrb	r3, [r3, #16]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d101      	bne.n	8005834 <HAL_RTC_SetTime+0x30>
 8005830:	2302      	movs	r3, #2
 8005832:	e07a      	b.n	800592a <HAL_RTC_SetTime+0x126>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2201      	movs	r2, #1
 8005838:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2202      	movs	r2, #2
 800583e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d113      	bne.n	800586e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005850:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	785b      	ldrb	r3, [r3, #1]
 8005858:	4619      	mov	r1, r3
 800585a:	460b      	mov	r3, r1
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	1a5b      	subs	r3, r3, r1
 8005860:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005862:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005868:	4413      	add	r3, r2
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	e01e      	b.n	80058ac <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	4618      	mov	r0, r3
 8005874:	f000 fc53 	bl	800611e <RTC_Bcd2ToByte>
 8005878:	4603      	mov	r3, r0
 800587a:	461a      	mov	r2, r3
 800587c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005880:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	785b      	ldrb	r3, [r3, #1]
 8005888:	4618      	mov	r0, r3
 800588a:	f000 fc48 	bl	800611e <RTC_Bcd2ToByte>
 800588e:	4603      	mov	r3, r0
 8005890:	461a      	mov	r2, r3
 8005892:	4613      	mov	r3, r2
 8005894:	011b      	lsls	r3, r3, #4
 8005896:	1a9b      	subs	r3, r3, r2
 8005898:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800589a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	789b      	ldrb	r3, [r3, #2]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 fc3c 	bl	800611e <RTC_Bcd2ToByte>
 80058a6:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80058a8:	4423      	add	r3, r4
 80058aa:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80058ac:	6979      	ldr	r1, [r7, #20]
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f000 fb61 	bl	8005f76 <RTC_WriteTimeCounter>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d007      	beq.n	80058ca <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2204      	movs	r2, #4
 80058be:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e02f      	b.n	800592a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0205 	bic.w	r2, r2, #5
 80058d8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 fb72 	bl	8005fc4 <RTC_ReadAlarmCounter>
 80058e0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e8:	d018      	beq.n	800591c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d214      	bcs.n	800591c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80058f8:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80058fc:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80058fe:	6939      	ldr	r1, [r7, #16]
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 fb78 	bl	8005ff6 <RTC_WriteAlarmCounter>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d007      	beq.n	800591c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2204      	movs	r2, #4
 8005910:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e006      	b.n	800592a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2201      	movs	r2, #1
 8005920:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005928:	2300      	movs	r3, #0
  }
}
 800592a:	4618      	mov	r0, r3
 800592c:	371c      	adds	r7, #28
 800592e:	46bd      	mov	sp, r7
 8005930:	bd90      	pop	{r4, r7, pc}
	...

08005934 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b088      	sub	sp, #32
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	61bb      	str	r3, [r7, #24]
 8005944:	2300      	movs	r3, #0
 8005946:	61fb      	str	r3, [r7, #28]
 8005948:	2300      	movs	r3, #0
 800594a:	617b      	str	r3, [r7, #20]
 800594c:	2300      	movs	r3, #0
 800594e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d002      	beq.n	800595c <HAL_RTC_GetTime+0x28>
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e0b5      	b.n	8005acc <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f003 0304 	and.w	r3, r3, #4
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e0ac      	b.n	8005acc <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f000 facf 	bl	8005f16 <RTC_ReadTimeCounter>
 8005978:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	4a55      	ldr	r2, [pc, #340]	@ (8005ad4 <HAL_RTC_GetTime+0x1a0>)
 800597e:	fba2 2303 	umull	r2, r3, r2, r3
 8005982:	0adb      	lsrs	r3, r3, #11
 8005984:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	4b52      	ldr	r3, [pc, #328]	@ (8005ad4 <HAL_RTC_GetTime+0x1a0>)
 800598a:	fba3 1302 	umull	r1, r3, r3, r2
 800598e:	0adb      	lsrs	r3, r3, #11
 8005990:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8005994:	fb01 f303 	mul.w	r3, r1, r3
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	4a4f      	ldr	r2, [pc, #316]	@ (8005ad8 <HAL_RTC_GetTime+0x1a4>)
 800599c:	fba2 2303 	umull	r2, r3, r2, r3
 80059a0:	095b      	lsrs	r3, r3, #5
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	4a4a      	ldr	r2, [pc, #296]	@ (8005ad4 <HAL_RTC_GetTime+0x1a0>)
 80059ac:	fba2 1203 	umull	r1, r2, r2, r3
 80059b0:	0ad2      	lsrs	r2, r2, #11
 80059b2:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80059b6:	fb01 f202 	mul.w	r2, r1, r2
 80059ba:	1a9a      	subs	r2, r3, r2
 80059bc:	4b46      	ldr	r3, [pc, #280]	@ (8005ad8 <HAL_RTC_GetTime+0x1a4>)
 80059be:	fba3 1302 	umull	r1, r3, r3, r2
 80059c2:	0959      	lsrs	r1, r3, #5
 80059c4:	460b      	mov	r3, r1
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	1a5b      	subs	r3, r3, r1
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	1ad1      	subs	r1, r2, r3
 80059ce:	b2ca      	uxtb	r2, r1
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	2b17      	cmp	r3, #23
 80059d8:	d955      	bls.n	8005a86 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	4a3f      	ldr	r2, [pc, #252]	@ (8005adc <HAL_RTC_GetTime+0x1a8>)
 80059de:	fba2 2303 	umull	r2, r3, r2, r3
 80059e2:	091b      	lsrs	r3, r3, #4
 80059e4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80059e6:	6939      	ldr	r1, [r7, #16]
 80059e8:	4b3c      	ldr	r3, [pc, #240]	@ (8005adc <HAL_RTC_GetTime+0x1a8>)
 80059ea:	fba3 2301 	umull	r2, r3, r3, r1
 80059ee:	091a      	lsrs	r2, r3, #4
 80059f0:	4613      	mov	r3, r2
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	4413      	add	r3, r2
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	1aca      	subs	r2, r1, r3
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 fadf 	bl	8005fc4 <RTC_ReadAlarmCounter>
 8005a06:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0e:	d008      	beq.n	8005a22 <HAL_RTC_GetTime+0xee>
 8005a10:	69fa      	ldr	r2, [r7, #28]
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d904      	bls.n	8005a22 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8005a18:	69fa      	ldr	r2, [r7, #28]
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	61fb      	str	r3, [r7, #28]
 8005a20:	e002      	b.n	8005a28 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8005a22:	f04f 33ff 	mov.w	r3, #4294967295
 8005a26:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	4a2d      	ldr	r2, [pc, #180]	@ (8005ae0 <HAL_RTC_GetTime+0x1ac>)
 8005a2c:	fb02 f303 	mul.w	r3, r2, r3
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005a36:	69b9      	ldr	r1, [r7, #24]
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 fa9c 	bl	8005f76 <RTC_WriteTimeCounter>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e041      	b.n	8005acc <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4e:	d00c      	beq.n	8005a6a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8005a50:	69fa      	ldr	r2, [r7, #28]
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	4413      	add	r3, r2
 8005a56:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005a58:	69f9      	ldr	r1, [r7, #28]
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f000 facb 	bl	8005ff6 <RTC_WriteAlarmCounter>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00a      	beq.n	8005a7c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e030      	b.n	8005acc <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005a6a:	69f9      	ldr	r1, [r7, #28]
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 fac2 	bl	8005ff6 <RTC_WriteAlarmCounter>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e027      	b.n	8005acc <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8005a7c:	6979      	ldr	r1, [r7, #20]
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f000 fb6a 	bl	8006158 <RTC_DateUpdate>
 8005a84:	e003      	b.n	8005a8e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d01a      	beq.n	8005aca <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 fb23 	bl	80060e4 <RTC_ByteToBcd2>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	785b      	ldrb	r3, [r3, #1]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fb1a 	bl	80060e4 <RTC_ByteToBcd2>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	789b      	ldrb	r3, [r3, #2]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 fb11 	bl	80060e4 <RTC_ByteToBcd2>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3720      	adds	r7, #32
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	91a2b3c5 	.word	0x91a2b3c5
 8005ad8:	88888889 	.word	0x88888889
 8005adc:	aaaaaaab 	.word	0xaaaaaaab
 8005ae0:	00015180 	.word	0x00015180

08005ae4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b088      	sub	sp, #32
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	61fb      	str	r3, [r7, #28]
 8005af4:	2300      	movs	r3, #0
 8005af6:	61bb      	str	r3, [r7, #24]
 8005af8:	2300      	movs	r3, #0
 8005afa:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <HAL_RTC_SetDate+0x24>
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e097      	b.n	8005c3c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	7c1b      	ldrb	r3, [r3, #16]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d101      	bne.n	8005b18 <HAL_RTC_SetDate+0x34>
 8005b14:	2302      	movs	r3, #2
 8005b16:	e091      	b.n	8005c3c <HAL_RTC_SetDate+0x158>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2202      	movs	r2, #2
 8005b22:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10c      	bne.n	8005b44 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	78da      	ldrb	r2, [r3, #3]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	785a      	ldrb	r2, [r3, #1]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	789a      	ldrb	r2, [r3, #2]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	739a      	strb	r2, [r3, #14]
 8005b42:	e01a      	b.n	8005b7a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	78db      	ldrb	r3, [r3, #3]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 fae8 	bl	800611e <RTC_Bcd2ToByte>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	461a      	mov	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	785b      	ldrb	r3, [r3, #1]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 fadf 	bl	800611e <RTC_Bcd2ToByte>
 8005b60:	4603      	mov	r3, r0
 8005b62:	461a      	mov	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	789b      	ldrb	r3, [r3, #2]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f000 fad6 	bl	800611e <RTC_Bcd2ToByte>
 8005b72:	4603      	mov	r3, r0
 8005b74:	461a      	mov	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	7bdb      	ldrb	r3, [r3, #15]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	7b59      	ldrb	r1, [r3, #13]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	7b9b      	ldrb	r3, [r3, #14]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	f000 fbc1 	bl	8006310 <RTC_WeekDayNum>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	461a      	mov	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	7b1a      	ldrb	r2, [r3, #12]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f000 f9b9 	bl	8005f16 <RTC_ReadTimeCounter>
 8005ba4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	4a26      	ldr	r2, [pc, #152]	@ (8005c44 <HAL_RTC_SetDate+0x160>)
 8005baa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bae:	0adb      	lsrs	r3, r3, #11
 8005bb0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2b18      	cmp	r3, #24
 8005bb6:	d93a      	bls.n	8005c2e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	4a23      	ldr	r2, [pc, #140]	@ (8005c48 <HAL_RTC_SetDate+0x164>)
 8005bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc0:	091b      	lsrs	r3, r3, #4
 8005bc2:	4a22      	ldr	r2, [pc, #136]	@ (8005c4c <HAL_RTC_SetDate+0x168>)
 8005bc4:	fb02 f303 	mul.w	r3, r2, r3
 8005bc8:	69fa      	ldr	r2, [r7, #28]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005bce:	69f9      	ldr	r1, [r7, #28]
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 f9d0 	bl	8005f76 <RTC_WriteTimeCounter>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d007      	beq.n	8005bec <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2204      	movs	r2, #4
 8005be0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e027      	b.n	8005c3c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 f9e9 	bl	8005fc4 <RTC_ReadAlarmCounter>
 8005bf2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfa:	d018      	beq.n	8005c2e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d214      	bcs.n	8005c2e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8005c0a:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005c0e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005c10:	69b9      	ldr	r1, [r7, #24]
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 f9ef 	bl	8005ff6 <RTC_WriteAlarmCounter>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d007      	beq.n	8005c2e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2204      	movs	r2, #4
 8005c22:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e006      	b.n	8005c3c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2201      	movs	r2, #1
 8005c32:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3720      	adds	r7, #32
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	91a2b3c5 	.word	0x91a2b3c5
 8005c48:	aaaaaaab 	.word	0xaaaaaaab
 8005c4c:	00015180 	.word	0x00015180

08005c50 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8005c5c:	f107 0314 	add.w	r3, r7, #20
 8005c60:	2100      	movs	r1, #0
 8005c62:	460a      	mov	r2, r1
 8005c64:	801a      	strh	r2, [r3, #0]
 8005c66:	460a      	mov	r2, r1
 8005c68:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <HAL_RTC_GetDate+0x26>
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e03a      	b.n	8005cf0 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8005c7a:	f107 0314 	add.w	r3, r7, #20
 8005c7e:	2200      	movs	r2, #0
 8005c80:	4619      	mov	r1, r3
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f7ff fe56 	bl	8005934 <HAL_RTC_GetTime>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e02e      	b.n	8005cf0 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	7b1a      	ldrb	r2, [r3, #12]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	7bda      	ldrb	r2, [r3, #15]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	7b5a      	ldrb	r2, [r3, #13]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	7b9a      	ldrb	r2, [r3, #14]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d01a      	beq.n	8005cee <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	78db      	ldrb	r3, [r3, #3]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 fa11 	bl	80060e4 <RTC_ByteToBcd2>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	785b      	ldrb	r3, [r3, #1]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 fa08 	bl	80060e4 <RTC_ByteToBcd2>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	789b      	ldrb	r3, [r3, #2]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 f9ff 	bl	80060e4 <RTC_ByteToBcd2>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	461a      	mov	r2, r3
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3718      	adds	r7, #24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005cf8:	b590      	push	{r4, r7, lr}
 8005cfa:	b089      	sub	sp, #36	@ 0x24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8005d04:	2300      	movs	r3, #0
 8005d06:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8005d08:	f107 0314 	add.w	r3, r7, #20
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	460a      	mov	r2, r1
 8005d10:	801a      	strh	r2, [r3, #0]
 8005d12:	460a      	mov	r2, r1
 8005d14:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <HAL_RTC_SetAlarm_IT+0x2a>
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e099      	b.n	8005e5a <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	7c1b      	ldrb	r3, [r3, #16]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d101      	bne.n	8005d32 <HAL_RTC_SetAlarm_IT+0x3a>
 8005d2e:	2302      	movs	r3, #2
 8005d30:	e093      	b.n	8005e5a <HAL_RTC_SetAlarm_IT+0x162>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2201      	movs	r2, #1
 8005d36:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8005d3e:	f107 0314 	add.w	r3, r7, #20
 8005d42:	2200      	movs	r2, #0
 8005d44:	4619      	mov	r1, r3
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f7ff fdf4 	bl	8005934 <HAL_RTC_GetTime>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e081      	b.n	8005e5a <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005d56:	7d3b      	ldrb	r3, [r7, #20]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005d5e:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8005d62:	7d7b      	ldrb	r3, [r7, #21]
 8005d64:	4619      	mov	r1, r3
 8005d66:	460b      	mov	r3, r1
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	1a5b      	subs	r3, r3, r1
 8005d6c:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005d6e:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8005d70:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005d72:	4413      	add	r3, r2
 8005d74:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d113      	bne.n	8005da4 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	461a      	mov	r2, r3
 8005d82:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005d86:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	785b      	ldrb	r3, [r3, #1]
 8005d8e:	4619      	mov	r1, r3
 8005d90:	460b      	mov	r3, r1
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	1a5b      	subs	r3, r3, r1
 8005d96:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8005d98:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8005d9e:	4413      	add	r3, r2
 8005da0:	61fb      	str	r3, [r7, #28]
 8005da2:	e01e      	b.n	8005de2 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 f9b8 	bl	800611e <RTC_Bcd2ToByte>
 8005dae:	4603      	mov	r3, r0
 8005db0:	461a      	mov	r2, r3
 8005db2:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005db6:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	785b      	ldrb	r3, [r3, #1]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 f9ad 	bl	800611e <RTC_Bcd2ToByte>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	4613      	mov	r3, r2
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	1a9b      	subs	r3, r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005dd0:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	789b      	ldrb	r3, [r3, #2]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 f9a1 	bl	800611e <RTC_Bcd2ToByte>
 8005ddc:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005dde:	4423      	add	r3, r4
 8005de0:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d205      	bcs.n	8005df6 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8005df0:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005df4:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005df6:	69f9      	ldr	r1, [r7, #28]
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 f8fc 	bl	8005ff6 <RTC_WriteAlarmCounter>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d007      	beq.n	8005e14 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2204      	movs	r2, #4
 8005e08:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e022      	b.n	8005e5a <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 0202 	bic.w	r2, r2, #2
 8005e22:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0202 	orr.w	r2, r2, #2
 8005e32:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005e34:	4b0b      	ldr	r3, [pc, #44]	@ (8005e64 <HAL_RTC_SetAlarm_IT+0x16c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a0a      	ldr	r2, [pc, #40]	@ (8005e64 <HAL_RTC_SetAlarm_IT+0x16c>)
 8005e3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e3e:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005e40:	4b08      	ldr	r3, [pc, #32]	@ (8005e64 <HAL_RTC_SetAlarm_IT+0x16c>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	4a07      	ldr	r2, [pc, #28]	@ (8005e64 <HAL_RTC_SetAlarm_IT+0x16c>)
 8005e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e4a:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005e58:	2300      	movs	r3, #0
  }
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3724      	adds	r7, #36	@ 0x24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd90      	pop	{r4, r7, pc}
 8005e62:	bf00      	nop
 8005e64:	40010400 	.word	0x40010400

08005e68 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d011      	beq.n	8005ea2 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00a      	beq.n	8005ea2 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7fc fd09 	bl	80028a4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0202 	bic.w	r2, r2, #2
 8005ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005ea2:	4b05      	ldr	r3, [pc, #20]	@ (8005eb8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8005ea4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005ea8:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	745a      	strb	r2, [r3, #17]
}
 8005eb0:	bf00      	nop
 8005eb2:	3708      	adds	r7, #8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	40010400 	.word	0x40010400

08005ebc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e01d      	b.n	8005f0e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 0208 	bic.w	r2, r2, #8
 8005ee0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005ee2:	f7fd fb17 	bl	8003514 <HAL_GetTick>
 8005ee6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005ee8:	e009      	b.n	8005efe <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005eea:	f7fd fb13 	bl	8003514 <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ef8:	d901      	bls.n	8005efe <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e007      	b.n	8005f0e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f003 0308 	and.w	r3, r3, #8
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d0ee      	beq.n	8005eea <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b087      	sub	sp, #28
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	827b      	strh	r3, [r7, #18]
 8005f22:	2300      	movs	r3, #0
 8005f24:	823b      	strh	r3, [r7, #16]
 8005f26:	2300      	movs	r3, #0
 8005f28:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	69db      	ldr	r3, [r3, #28]
 8005f3c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005f46:	8a7a      	ldrh	r2, [r7, #18]
 8005f48:	8a3b      	ldrh	r3, [r7, #16]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d008      	beq.n	8005f60 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005f4e:	8a3b      	ldrh	r3, [r7, #16]
 8005f50:	041a      	lsls	r2, r3, #16
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69db      	ldr	r3, [r3, #28]
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	617b      	str	r3, [r7, #20]
 8005f5e:	e004      	b.n	8005f6a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005f60:	8a7b      	ldrh	r3, [r7, #18]
 8005f62:	041a      	lsls	r2, r3, #16
 8005f64:	89fb      	ldrh	r3, [r7, #14]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005f6a:	697b      	ldr	r3, [r7, #20]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	371c      	adds	r7, #28
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr

08005f76 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b084      	sub	sp, #16
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f80:	2300      	movs	r3, #0
 8005f82:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f85d 	bl	8006044 <RTC_EnterInitMode>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d002      	beq.n	8005f96 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	73fb      	strb	r3, [r7, #15]
 8005f94:	e011      	b.n	8005fba <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	0c12      	lsrs	r2, r2, #16
 8005f9e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	b292      	uxth	r2, r2
 8005fa8:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f872 	bl	8006094 <RTC_ExitInitMode>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	81fb      	strh	r3, [r7, #14]
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005fe4:	89fb      	ldrh	r3, [r7, #14]
 8005fe6:	041a      	lsls	r2, r3, #16
 8005fe8:	89bb      	ldrh	r3, [r7, #12]
 8005fea:	4313      	orrs	r3, r2
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bc80      	pop	{r7}
 8005ff4:	4770      	bx	lr

08005ff6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006000:	2300      	movs	r3, #0
 8006002:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f81d 	bl	8006044 <RTC_EnterInitMode>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	73fb      	strb	r3, [r7, #15]
 8006014:	e011      	b.n	800603a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	0c12      	lsrs	r2, r2, #16
 800601e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	b292      	uxth	r2, r2
 8006028:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f832 	bl	8006094 <RTC_ExitInitMode>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800603a:	7bfb      	ldrb	r3, [r7, #15]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8006050:	f7fd fa60 	bl	8003514 <HAL_GetTick>
 8006054:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006056:	e009      	b.n	800606c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006058:	f7fd fa5c 	bl	8003514 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006066:	d901      	bls.n	800606c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e00f      	b.n	800608c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f003 0320 	and.w	r3, r3, #32
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0ee      	beq.n	8006058 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f042 0210 	orr.w	r2, r2, #16
 8006088:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0210 	bic.w	r2, r2, #16
 80060ae:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80060b0:	f7fd fa30 	bl	8003514 <HAL_GetTick>
 80060b4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80060b6:	e009      	b.n	80060cc <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80060b8:	f7fd fa2c 	bl	8003514 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80060c6:	d901      	bls.n	80060cc <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e007      	b.n	80060dc <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f003 0320 	and.w	r3, r3, #32
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0ee      	beq.n	80060b8 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	4603      	mov	r3, r0
 80060ec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80060f2:	e005      	b.n	8006100 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	3301      	adds	r3, #1
 80060f8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	3b0a      	subs	r3, #10
 80060fe:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8006100:	79fb      	ldrb	r3, [r7, #7]
 8006102:	2b09      	cmp	r3, #9
 8006104:	d8f6      	bhi.n	80060f4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	b2db      	uxtb	r3, r3
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	b2da      	uxtb	r2, r3
 800610e:	79fb      	ldrb	r3, [r7, #7]
 8006110:	4313      	orrs	r3, r2
 8006112:	b2db      	uxtb	r3, r3
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	bc80      	pop	{r7}
 800611c:	4770      	bx	lr

0800611e <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800611e:	b480      	push	{r7}
 8006120:	b085      	sub	sp, #20
 8006122:	af00      	add	r7, sp, #0
 8006124:	4603      	mov	r3, r0
 8006126:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8006128:	2300      	movs	r3, #0
 800612a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800612c:	79fb      	ldrb	r3, [r7, #7]
 800612e:	091b      	lsrs	r3, r3, #4
 8006130:	b2db      	uxtb	r3, r3
 8006132:	461a      	mov	r2, r3
 8006134:	4613      	mov	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800613e:	79fb      	ldrb	r3, [r7, #7]
 8006140:	f003 030f 	and.w	r3, r3, #15
 8006144:	b2da      	uxtb	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	b2db      	uxtb	r3, r3
 800614a:	4413      	add	r3, r2
 800614c:	b2db      	uxtb	r3, r3
}
 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	bc80      	pop	{r7}
 8006156:	4770      	bx	lr

08006158 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8006162:	2300      	movs	r3, #0
 8006164:	617b      	str	r3, [r7, #20]
 8006166:	2300      	movs	r3, #0
 8006168:	613b      	str	r3, [r7, #16]
 800616a:	2300      	movs	r3, #0
 800616c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800616e:	2300      	movs	r3, #0
 8006170:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	7bdb      	ldrb	r3, [r3, #15]
 8006176:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	7b5b      	ldrb	r3, [r3, #13]
 800617c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	7b9b      	ldrb	r3, [r3, #14]
 8006182:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8006184:	2300      	movs	r3, #0
 8006186:	60bb      	str	r3, [r7, #8]
 8006188:	e06f      	b.n	800626a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d011      	beq.n	80061b4 <RTC_DateUpdate+0x5c>
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	2b03      	cmp	r3, #3
 8006194:	d00e      	beq.n	80061b4 <RTC_DateUpdate+0x5c>
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	2b05      	cmp	r3, #5
 800619a:	d00b      	beq.n	80061b4 <RTC_DateUpdate+0x5c>
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	2b07      	cmp	r3, #7
 80061a0:	d008      	beq.n	80061b4 <RTC_DateUpdate+0x5c>
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	d005      	beq.n	80061b4 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	2b0a      	cmp	r3, #10
 80061ac:	d002      	beq.n	80061b4 <RTC_DateUpdate+0x5c>
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	2b0c      	cmp	r3, #12
 80061b2:	d117      	bne.n	80061e4 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2b1e      	cmp	r3, #30
 80061b8:	d803      	bhi.n	80061c2 <RTC_DateUpdate+0x6a>
      {
        day++;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	3301      	adds	r3, #1
 80061be:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80061c0:	e050      	b.n	8006264 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	2b0c      	cmp	r3, #12
 80061c6:	d005      	beq.n	80061d4 <RTC_DateUpdate+0x7c>
        {
          month++;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	3301      	adds	r3, #1
 80061cc:	613b      	str	r3, [r7, #16]
          day = 1U;
 80061ce:	2301      	movs	r3, #1
 80061d0:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80061d2:	e047      	b.n	8006264 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80061d4:	2301      	movs	r3, #1
 80061d6:	613b      	str	r3, [r7, #16]
          day = 1U;
 80061d8:	2301      	movs	r3, #1
 80061da:	60fb      	str	r3, [r7, #12]
          year++;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	3301      	adds	r3, #1
 80061e0:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80061e2:	e03f      	b.n	8006264 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	2b04      	cmp	r3, #4
 80061e8:	d008      	beq.n	80061fc <RTC_DateUpdate+0xa4>
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	2b06      	cmp	r3, #6
 80061ee:	d005      	beq.n	80061fc <RTC_DateUpdate+0xa4>
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	2b09      	cmp	r3, #9
 80061f4:	d002      	beq.n	80061fc <RTC_DateUpdate+0xa4>
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	2b0b      	cmp	r3, #11
 80061fa:	d10c      	bne.n	8006216 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2b1d      	cmp	r3, #29
 8006200:	d803      	bhi.n	800620a <RTC_DateUpdate+0xb2>
      {
        day++;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3301      	adds	r3, #1
 8006206:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006208:	e02c      	b.n	8006264 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	3301      	adds	r3, #1
 800620e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006210:	2301      	movs	r3, #1
 8006212:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006214:	e026      	b.n	8006264 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	2b02      	cmp	r3, #2
 800621a:	d123      	bne.n	8006264 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b1b      	cmp	r3, #27
 8006220:	d803      	bhi.n	800622a <RTC_DateUpdate+0xd2>
      {
        day++;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3301      	adds	r3, #1
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	e01c      	b.n	8006264 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2b1c      	cmp	r3, #28
 800622e:	d111      	bne.n	8006254 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	b29b      	uxth	r3, r3
 8006234:	4618      	mov	r0, r3
 8006236:	f000 f839 	bl	80062ac <RTC_IsLeapYear>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <RTC_DateUpdate+0xf0>
        {
          day++;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	3301      	adds	r3, #1
 8006244:	60fb      	str	r3, [r7, #12]
 8006246:	e00d      	b.n	8006264 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	3301      	adds	r3, #1
 800624c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800624e:	2301      	movs	r3, #1
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	e007      	b.n	8006264 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2b1d      	cmp	r3, #29
 8006258:	d104      	bne.n	8006264 <RTC_DateUpdate+0x10c>
      {
        month++;
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	3301      	adds	r3, #1
 800625e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006260:	2301      	movs	r3, #1
 8006262:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	3301      	adds	r3, #1
 8006268:	60bb      	str	r3, [r7, #8]
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	429a      	cmp	r2, r3
 8006270:	d38b      	bcc.n	800618a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	b2da      	uxtb	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	b2da      	uxtb	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	b2da      	uxtb	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	b2db      	uxtb	r3, r3
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	4619      	mov	r1, r3
 8006294:	6978      	ldr	r0, [r7, #20]
 8006296:	f000 f83b 	bl	8006310 <RTC_WeekDayNum>
 800629a:	4603      	mov	r3, r0
 800629c:	461a      	mov	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	731a      	strb	r2, [r3, #12]
}
 80062a2:	bf00      	nop
 80062a4:	3718      	adds	r7, #24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
	...

080062ac <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	4603      	mov	r3, r0
 80062b4:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80062b6:	88fb      	ldrh	r3, [r7, #6]
 80062b8:	f003 0303 	and.w	r3, r3, #3
 80062bc:	b29b      	uxth	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	e01d      	b.n	8006302 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80062c6:	88fb      	ldrh	r3, [r7, #6]
 80062c8:	4a10      	ldr	r2, [pc, #64]	@ (800630c <RTC_IsLeapYear+0x60>)
 80062ca:	fba2 1203 	umull	r1, r2, r2, r3
 80062ce:	0952      	lsrs	r2, r2, #5
 80062d0:	2164      	movs	r1, #100	@ 0x64
 80062d2:	fb01 f202 	mul.w	r2, r1, r2
 80062d6:	1a9b      	subs	r3, r3, r2
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80062de:	2301      	movs	r3, #1
 80062e0:	e00f      	b.n	8006302 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80062e2:	88fb      	ldrh	r3, [r7, #6]
 80062e4:	4a09      	ldr	r2, [pc, #36]	@ (800630c <RTC_IsLeapYear+0x60>)
 80062e6:	fba2 1203 	umull	r1, r2, r2, r3
 80062ea:	09d2      	lsrs	r2, r2, #7
 80062ec:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80062f0:	fb01 f202 	mul.w	r2, r1, r2
 80062f4:	1a9b      	subs	r3, r3, r2
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e000      	b.n	8006302 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8006300:	2300      	movs	r3, #0
  }
}
 8006302:	4618      	mov	r0, r3
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	bc80      	pop	{r7}
 800630a:	4770      	bx	lr
 800630c:	51eb851f 	.word	0x51eb851f

08006310 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	460b      	mov	r3, r1
 800631a:	70fb      	strb	r3, [r7, #3]
 800631c:	4613      	mov	r3, r2
 800631e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	60bb      	str	r3, [r7, #8]
 8006324:	2300      	movs	r3, #0
 8006326:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800632e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8006330:	78fb      	ldrb	r3, [r7, #3]
 8006332:	2b02      	cmp	r3, #2
 8006334:	d82d      	bhi.n	8006392 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006336:	78fa      	ldrb	r2, [r7, #3]
 8006338:	4613      	mov	r3, r2
 800633a:	005b      	lsls	r3, r3, #1
 800633c:	4413      	add	r3, r2
 800633e:	00db      	lsls	r3, r3, #3
 8006340:	1a9b      	subs	r3, r3, r2
 8006342:	4a2c      	ldr	r2, [pc, #176]	@ (80063f4 <RTC_WeekDayNum+0xe4>)
 8006344:	fba2 2303 	umull	r2, r3, r2, r3
 8006348:	085a      	lsrs	r2, r3, #1
 800634a:	78bb      	ldrb	r3, [r7, #2]
 800634c:	441a      	add	r2, r3
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	441a      	add	r2, r3
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	3b01      	subs	r3, #1
 8006356:	089b      	lsrs	r3, r3, #2
 8006358:	441a      	add	r2, r3
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	3b01      	subs	r3, #1
 800635e:	4926      	ldr	r1, [pc, #152]	@ (80063f8 <RTC_WeekDayNum+0xe8>)
 8006360:	fba1 1303 	umull	r1, r3, r1, r3
 8006364:	095b      	lsrs	r3, r3, #5
 8006366:	1ad2      	subs	r2, r2, r3
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	3b01      	subs	r3, #1
 800636c:	4922      	ldr	r1, [pc, #136]	@ (80063f8 <RTC_WeekDayNum+0xe8>)
 800636e:	fba1 1303 	umull	r1, r3, r1, r3
 8006372:	09db      	lsrs	r3, r3, #7
 8006374:	4413      	add	r3, r2
 8006376:	1d1a      	adds	r2, r3, #4
 8006378:	4b20      	ldr	r3, [pc, #128]	@ (80063fc <RTC_WeekDayNum+0xec>)
 800637a:	fba3 1302 	umull	r1, r3, r3, r2
 800637e:	1ad1      	subs	r1, r2, r3
 8006380:	0849      	lsrs	r1, r1, #1
 8006382:	440b      	add	r3, r1
 8006384:	0899      	lsrs	r1, r3, #2
 8006386:	460b      	mov	r3, r1
 8006388:	00db      	lsls	r3, r3, #3
 800638a:	1a5b      	subs	r3, r3, r1
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	60fb      	str	r3, [r7, #12]
 8006390:	e029      	b.n	80063e6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006392:	78fa      	ldrb	r2, [r7, #3]
 8006394:	4613      	mov	r3, r2
 8006396:	005b      	lsls	r3, r3, #1
 8006398:	4413      	add	r3, r2
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	1a9b      	subs	r3, r3, r2
 800639e:	4a15      	ldr	r2, [pc, #84]	@ (80063f4 <RTC_WeekDayNum+0xe4>)
 80063a0:	fba2 2303 	umull	r2, r3, r2, r3
 80063a4:	085a      	lsrs	r2, r3, #1
 80063a6:	78bb      	ldrb	r3, [r7, #2]
 80063a8:	441a      	add	r2, r3
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	441a      	add	r2, r3
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	089b      	lsrs	r3, r3, #2
 80063b2:	441a      	add	r2, r3
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	4910      	ldr	r1, [pc, #64]	@ (80063f8 <RTC_WeekDayNum+0xe8>)
 80063b8:	fba1 1303 	umull	r1, r3, r1, r3
 80063bc:	095b      	lsrs	r3, r3, #5
 80063be:	1ad2      	subs	r2, r2, r3
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	490d      	ldr	r1, [pc, #52]	@ (80063f8 <RTC_WeekDayNum+0xe8>)
 80063c4:	fba1 1303 	umull	r1, r3, r1, r3
 80063c8:	09db      	lsrs	r3, r3, #7
 80063ca:	4413      	add	r3, r2
 80063cc:	1c9a      	adds	r2, r3, #2
 80063ce:	4b0b      	ldr	r3, [pc, #44]	@ (80063fc <RTC_WeekDayNum+0xec>)
 80063d0:	fba3 1302 	umull	r1, r3, r3, r2
 80063d4:	1ad1      	subs	r1, r2, r3
 80063d6:	0849      	lsrs	r1, r1, #1
 80063d8:	440b      	add	r3, r1
 80063da:	0899      	lsrs	r1, r3, #2
 80063dc:	460b      	mov	r3, r1
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	1a5b      	subs	r3, r3, r1
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	b2db      	uxtb	r3, r3
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bc80      	pop	{r7}
 80063f2:	4770      	bx	lr
 80063f4:	38e38e39 	.word	0x38e38e39
 80063f8:	51eb851f 	.word	0x51eb851f
 80063fc:	24924925 	.word	0x24924925

08006400 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800640c:	2300      	movs	r3, #0
 800640e:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8006410:	4b07      	ldr	r3, [pc, #28]	@ (8006430 <HAL_RTCEx_BKUPWrite+0x30>)
 8006412:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	4413      	add	r3, r2
 800641c:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	b292      	uxth	r2, r2
 8006424:	601a      	str	r2, [r3, #0]
}
 8006426:	bf00      	nop
 8006428:	371c      	adds	r7, #28
 800642a:	46bd      	mov	sp, r7
 800642c:	bc80      	pop	{r7}
 800642e:	4770      	bx	lr
 8006430:	40006c00 	.word	0x40006c00

08006434 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8006446:	4b08      	ldr	r3, [pc, #32]	@ (8006468 <HAL_RTCEx_BKUPRead+0x34>)
 8006448:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	4413      	add	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	b29b      	uxth	r3, r3
 800645a:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 800645c:	68bb      	ldr	r3, [r7, #8]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	bc80      	pop	{r7}
 8006466:	4770      	bx	lr
 8006468:	40006c00 	.word	0x40006c00

0800646c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e093      	b.n	80065a8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b00      	cmp	r3, #0
 800648a:	d106      	bne.n	800649a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7fc fe47 	bl	8003128 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2202      	movs	r2, #2
 800649e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6812      	ldr	r2, [r2, #0]
 80064ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064b0:	f023 0307 	bic.w	r3, r3, #7
 80064b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	3304      	adds	r3, #4
 80064be:	4619      	mov	r1, r3
 80064c0:	4610      	mov	r0, r2
 80064c2:	f000 f903 	bl	80066cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064ee:	f023 0303 	bic.w	r3, r3, #3
 80064f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	021b      	lsls	r3, r3, #8
 80064fe:	4313      	orrs	r3, r2
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	4313      	orrs	r3, r2
 8006504:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800650c:	f023 030c 	bic.w	r3, r3, #12
 8006510:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006518:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800651c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	68da      	ldr	r2, [r3, #12]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	021b      	lsls	r3, r3, #8
 8006528:	4313      	orrs	r3, r2
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	4313      	orrs	r3, r2
 800652e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	011a      	lsls	r2, r3, #4
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	031b      	lsls	r3, r3, #12
 800653c:	4313      	orrs	r3, r2
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	4313      	orrs	r3, r2
 8006542:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800654a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	4313      	orrs	r3, r2
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	4313      	orrs	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80065c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80065c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80065d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d110      	bne.n	8006602 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d102      	bne.n	80065ec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80065e6:	7b7b      	ldrb	r3, [r7, #13]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d001      	beq.n	80065f0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e069      	b.n	80066c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006600:	e031      	b.n	8006666 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b04      	cmp	r3, #4
 8006606:	d110      	bne.n	800662a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006608:	7bbb      	ldrb	r3, [r7, #14]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d102      	bne.n	8006614 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800660e:	7b3b      	ldrb	r3, [r7, #12]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d001      	beq.n	8006618 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e055      	b.n	80066c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2202      	movs	r2, #2
 8006624:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006628:	e01d      	b.n	8006666 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800662a:	7bfb      	ldrb	r3, [r7, #15]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d108      	bne.n	8006642 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006630:	7bbb      	ldrb	r3, [r7, #14]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d105      	bne.n	8006642 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006636:	7b7b      	ldrb	r3, [r7, #13]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d102      	bne.n	8006642 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800663c:	7b3b      	ldrb	r3, [r7, #12]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d001      	beq.n	8006646 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e03e      	b.n	80066c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2202      	movs	r2, #2
 800664a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2202      	movs	r2, #2
 8006652:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2202      	movs	r2, #2
 800665a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2202      	movs	r2, #2
 8006662:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <HAL_TIM_Encoder_Start+0xc4>
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	2b04      	cmp	r3, #4
 8006670:	d008      	beq.n	8006684 <HAL_TIM_Encoder_Start+0xd4>
 8006672:	e00f      	b.n	8006694 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2201      	movs	r2, #1
 800667a:	2100      	movs	r1, #0
 800667c:	4618      	mov	r0, r3
 800667e:	f000 f887 	bl	8006790 <TIM_CCxChannelCmd>
      break;
 8006682:	e016      	b.n	80066b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2201      	movs	r2, #1
 800668a:	2104      	movs	r1, #4
 800668c:	4618      	mov	r0, r3
 800668e:	f000 f87f 	bl	8006790 <TIM_CCxChannelCmd>
      break;
 8006692:	e00e      	b.n	80066b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2201      	movs	r2, #1
 800669a:	2100      	movs	r1, #0
 800669c:	4618      	mov	r0, r3
 800669e:	f000 f877 	bl	8006790 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2201      	movs	r2, #1
 80066a8:	2104      	movs	r1, #4
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 f870 	bl	8006790 <TIM_CCxChannelCmd>
      break;
 80066b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f042 0201 	orr.w	r2, r2, #1
 80066c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a29      	ldr	r2, [pc, #164]	@ (8006784 <TIM_Base_SetConfig+0xb8>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d00b      	beq.n	80066fc <TIM_Base_SetConfig+0x30>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066ea:	d007      	beq.n	80066fc <TIM_Base_SetConfig+0x30>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a26      	ldr	r2, [pc, #152]	@ (8006788 <TIM_Base_SetConfig+0xbc>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d003      	beq.n	80066fc <TIM_Base_SetConfig+0x30>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a25      	ldr	r2, [pc, #148]	@ (800678c <TIM_Base_SetConfig+0xc0>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d108      	bne.n	800670e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	4313      	orrs	r3, r2
 800670c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a1c      	ldr	r2, [pc, #112]	@ (8006784 <TIM_Base_SetConfig+0xb8>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d00b      	beq.n	800672e <TIM_Base_SetConfig+0x62>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800671c:	d007      	beq.n	800672e <TIM_Base_SetConfig+0x62>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a19      	ldr	r2, [pc, #100]	@ (8006788 <TIM_Base_SetConfig+0xbc>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d003      	beq.n	800672e <TIM_Base_SetConfig+0x62>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a18      	ldr	r2, [pc, #96]	@ (800678c <TIM_Base_SetConfig+0xc0>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d108      	bne.n	8006740 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	4313      	orrs	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	689a      	ldr	r2, [r3, #8]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a07      	ldr	r2, [pc, #28]	@ (8006784 <TIM_Base_SetConfig+0xb8>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d103      	bne.n	8006774 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	691a      	ldr	r2, [r3, #16]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	615a      	str	r2, [r3, #20]
}
 800677a:	bf00      	nop
 800677c:	3714      	adds	r7, #20
 800677e:	46bd      	mov	sp, r7
 8006780:	bc80      	pop	{r7}
 8006782:	4770      	bx	lr
 8006784:	40012c00 	.word	0x40012c00
 8006788:	40000400 	.word	0x40000400
 800678c:	40000800 	.word	0x40000800

08006790 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	f003 031f 	and.w	r3, r3, #31
 80067a2:	2201      	movs	r2, #1
 80067a4:	fa02 f303 	lsl.w	r3, r2, r3
 80067a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6a1a      	ldr	r2, [r3, #32]
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	43db      	mvns	r3, r3
 80067b2:	401a      	ands	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6a1a      	ldr	r2, [r3, #32]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	f003 031f 	and.w	r3, r3, #31
 80067c2:	6879      	ldr	r1, [r7, #4]
 80067c4:	fa01 f303 	lsl.w	r3, r1, r3
 80067c8:	431a      	orrs	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	621a      	str	r2, [r3, #32]
}
 80067ce:	bf00      	nop
 80067d0:	371c      	adds	r7, #28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bc80      	pop	{r7}
 80067d6:	4770      	bx	lr

080067d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d101      	bne.n	80067f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067ec:	2302      	movs	r3, #2
 80067ee:	e046      	b.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2202      	movs	r2, #2
 80067fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	4313      	orrs	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a16      	ldr	r2, [pc, #88]	@ (8006888 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d00e      	beq.n	8006852 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800683c:	d009      	beq.n	8006852 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a12      	ldr	r2, [pc, #72]	@ (800688c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d004      	beq.n	8006852 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a10      	ldr	r2, [pc, #64]	@ (8006890 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d10c      	bne.n	800686c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006858:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	4313      	orrs	r3, r2
 8006862:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	bc80      	pop	{r7}
 8006886:	4770      	bx	lr
 8006888:	40012c00 	.word	0x40012c00
 800688c:	40000400 	.word	0x40000400
 8006890:	40000800 	.word	0x40000800

08006894 <__cvt>:
 8006894:	2b00      	cmp	r3, #0
 8006896:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800689a:	461d      	mov	r5, r3
 800689c:	bfbb      	ittet	lt
 800689e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80068a2:	461d      	movlt	r5, r3
 80068a4:	2300      	movge	r3, #0
 80068a6:	232d      	movlt	r3, #45	@ 0x2d
 80068a8:	b088      	sub	sp, #32
 80068aa:	4614      	mov	r4, r2
 80068ac:	bfb8      	it	lt
 80068ae:	4614      	movlt	r4, r2
 80068b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80068b2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80068b4:	7013      	strb	r3, [r2, #0]
 80068b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80068b8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80068bc:	f023 0820 	bic.w	r8, r3, #32
 80068c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80068c4:	d005      	beq.n	80068d2 <__cvt+0x3e>
 80068c6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80068ca:	d100      	bne.n	80068ce <__cvt+0x3a>
 80068cc:	3601      	adds	r6, #1
 80068ce:	2302      	movs	r3, #2
 80068d0:	e000      	b.n	80068d4 <__cvt+0x40>
 80068d2:	2303      	movs	r3, #3
 80068d4:	aa07      	add	r2, sp, #28
 80068d6:	9204      	str	r2, [sp, #16]
 80068d8:	aa06      	add	r2, sp, #24
 80068da:	e9cd a202 	strd	sl, r2, [sp, #8]
 80068de:	e9cd 3600 	strd	r3, r6, [sp]
 80068e2:	4622      	mov	r2, r4
 80068e4:	462b      	mov	r3, r5
 80068e6:	f001 f8df 	bl	8007aa8 <_dtoa_r>
 80068ea:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80068ee:	4607      	mov	r7, r0
 80068f0:	d119      	bne.n	8006926 <__cvt+0x92>
 80068f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80068f4:	07db      	lsls	r3, r3, #31
 80068f6:	d50e      	bpl.n	8006916 <__cvt+0x82>
 80068f8:	eb00 0906 	add.w	r9, r0, r6
 80068fc:	2200      	movs	r2, #0
 80068fe:	2300      	movs	r3, #0
 8006900:	4620      	mov	r0, r4
 8006902:	4629      	mov	r1, r5
 8006904:	f7fa f850 	bl	80009a8 <__aeabi_dcmpeq>
 8006908:	b108      	cbz	r0, 800690e <__cvt+0x7a>
 800690a:	f8cd 901c 	str.w	r9, [sp, #28]
 800690e:	2230      	movs	r2, #48	@ 0x30
 8006910:	9b07      	ldr	r3, [sp, #28]
 8006912:	454b      	cmp	r3, r9
 8006914:	d31e      	bcc.n	8006954 <__cvt+0xc0>
 8006916:	4638      	mov	r0, r7
 8006918:	9b07      	ldr	r3, [sp, #28]
 800691a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800691c:	1bdb      	subs	r3, r3, r7
 800691e:	6013      	str	r3, [r2, #0]
 8006920:	b008      	add	sp, #32
 8006922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006926:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800692a:	eb00 0906 	add.w	r9, r0, r6
 800692e:	d1e5      	bne.n	80068fc <__cvt+0x68>
 8006930:	7803      	ldrb	r3, [r0, #0]
 8006932:	2b30      	cmp	r3, #48	@ 0x30
 8006934:	d10a      	bne.n	800694c <__cvt+0xb8>
 8006936:	2200      	movs	r2, #0
 8006938:	2300      	movs	r3, #0
 800693a:	4620      	mov	r0, r4
 800693c:	4629      	mov	r1, r5
 800693e:	f7fa f833 	bl	80009a8 <__aeabi_dcmpeq>
 8006942:	b918      	cbnz	r0, 800694c <__cvt+0xb8>
 8006944:	f1c6 0601 	rsb	r6, r6, #1
 8006948:	f8ca 6000 	str.w	r6, [sl]
 800694c:	f8da 3000 	ldr.w	r3, [sl]
 8006950:	4499      	add	r9, r3
 8006952:	e7d3      	b.n	80068fc <__cvt+0x68>
 8006954:	1c59      	adds	r1, r3, #1
 8006956:	9107      	str	r1, [sp, #28]
 8006958:	701a      	strb	r2, [r3, #0]
 800695a:	e7d9      	b.n	8006910 <__cvt+0x7c>

0800695c <__exponent>:
 800695c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800695e:	2900      	cmp	r1, #0
 8006960:	bfb6      	itet	lt
 8006962:	232d      	movlt	r3, #45	@ 0x2d
 8006964:	232b      	movge	r3, #43	@ 0x2b
 8006966:	4249      	neglt	r1, r1
 8006968:	2909      	cmp	r1, #9
 800696a:	7002      	strb	r2, [r0, #0]
 800696c:	7043      	strb	r3, [r0, #1]
 800696e:	dd29      	ble.n	80069c4 <__exponent+0x68>
 8006970:	f10d 0307 	add.w	r3, sp, #7
 8006974:	461d      	mov	r5, r3
 8006976:	270a      	movs	r7, #10
 8006978:	fbb1 f6f7 	udiv	r6, r1, r7
 800697c:	461a      	mov	r2, r3
 800697e:	fb07 1416 	mls	r4, r7, r6, r1
 8006982:	3430      	adds	r4, #48	@ 0x30
 8006984:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006988:	460c      	mov	r4, r1
 800698a:	2c63      	cmp	r4, #99	@ 0x63
 800698c:	4631      	mov	r1, r6
 800698e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006992:	dcf1      	bgt.n	8006978 <__exponent+0x1c>
 8006994:	3130      	adds	r1, #48	@ 0x30
 8006996:	1e94      	subs	r4, r2, #2
 8006998:	f803 1c01 	strb.w	r1, [r3, #-1]
 800699c:	4623      	mov	r3, r4
 800699e:	1c41      	adds	r1, r0, #1
 80069a0:	42ab      	cmp	r3, r5
 80069a2:	d30a      	bcc.n	80069ba <__exponent+0x5e>
 80069a4:	f10d 0309 	add.w	r3, sp, #9
 80069a8:	1a9b      	subs	r3, r3, r2
 80069aa:	42ac      	cmp	r4, r5
 80069ac:	bf88      	it	hi
 80069ae:	2300      	movhi	r3, #0
 80069b0:	3302      	adds	r3, #2
 80069b2:	4403      	add	r3, r0
 80069b4:	1a18      	subs	r0, r3, r0
 80069b6:	b003      	add	sp, #12
 80069b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069ba:	f813 6b01 	ldrb.w	r6, [r3], #1
 80069be:	f801 6f01 	strb.w	r6, [r1, #1]!
 80069c2:	e7ed      	b.n	80069a0 <__exponent+0x44>
 80069c4:	2330      	movs	r3, #48	@ 0x30
 80069c6:	3130      	adds	r1, #48	@ 0x30
 80069c8:	7083      	strb	r3, [r0, #2]
 80069ca:	70c1      	strb	r1, [r0, #3]
 80069cc:	1d03      	adds	r3, r0, #4
 80069ce:	e7f1      	b.n	80069b4 <__exponent+0x58>

080069d0 <_printf_float>:
 80069d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d4:	b091      	sub	sp, #68	@ 0x44
 80069d6:	460c      	mov	r4, r1
 80069d8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80069dc:	4616      	mov	r6, r2
 80069de:	461f      	mov	r7, r3
 80069e0:	4605      	mov	r5, r0
 80069e2:	f000 ff3f 	bl	8007864 <_localeconv_r>
 80069e6:	6803      	ldr	r3, [r0, #0]
 80069e8:	4618      	mov	r0, r3
 80069ea:	9308      	str	r3, [sp, #32]
 80069ec:	f7f9 fbb0 	bl	8000150 <strlen>
 80069f0:	2300      	movs	r3, #0
 80069f2:	930e      	str	r3, [sp, #56]	@ 0x38
 80069f4:	f8d8 3000 	ldr.w	r3, [r8]
 80069f8:	9009      	str	r0, [sp, #36]	@ 0x24
 80069fa:	3307      	adds	r3, #7
 80069fc:	f023 0307 	bic.w	r3, r3, #7
 8006a00:	f103 0208 	add.w	r2, r3, #8
 8006a04:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006a08:	f8d4 b000 	ldr.w	fp, [r4]
 8006a0c:	f8c8 2000 	str.w	r2, [r8]
 8006a10:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a14:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006a18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a1a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006a26:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006a2a:	4b9c      	ldr	r3, [pc, #624]	@ (8006c9c <_printf_float+0x2cc>)
 8006a2c:	f7f9 ffee 	bl	8000a0c <__aeabi_dcmpun>
 8006a30:	bb70      	cbnz	r0, 8006a90 <_printf_float+0xc0>
 8006a32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006a36:	f04f 32ff 	mov.w	r2, #4294967295
 8006a3a:	4b98      	ldr	r3, [pc, #608]	@ (8006c9c <_printf_float+0x2cc>)
 8006a3c:	f7f9 ffc8 	bl	80009d0 <__aeabi_dcmple>
 8006a40:	bb30      	cbnz	r0, 8006a90 <_printf_float+0xc0>
 8006a42:	2200      	movs	r2, #0
 8006a44:	2300      	movs	r3, #0
 8006a46:	4640      	mov	r0, r8
 8006a48:	4649      	mov	r1, r9
 8006a4a:	f7f9 ffb7 	bl	80009bc <__aeabi_dcmplt>
 8006a4e:	b110      	cbz	r0, 8006a56 <_printf_float+0x86>
 8006a50:	232d      	movs	r3, #45	@ 0x2d
 8006a52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a56:	4a92      	ldr	r2, [pc, #584]	@ (8006ca0 <_printf_float+0x2d0>)
 8006a58:	4b92      	ldr	r3, [pc, #584]	@ (8006ca4 <_printf_float+0x2d4>)
 8006a5a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006a5e:	bf94      	ite	ls
 8006a60:	4690      	movls	r8, r2
 8006a62:	4698      	movhi	r8, r3
 8006a64:	2303      	movs	r3, #3
 8006a66:	f04f 0900 	mov.w	r9, #0
 8006a6a:	6123      	str	r3, [r4, #16]
 8006a6c:	f02b 0304 	bic.w	r3, fp, #4
 8006a70:	6023      	str	r3, [r4, #0]
 8006a72:	4633      	mov	r3, r6
 8006a74:	4621      	mov	r1, r4
 8006a76:	4628      	mov	r0, r5
 8006a78:	9700      	str	r7, [sp, #0]
 8006a7a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006a7c:	f000 f9d4 	bl	8006e28 <_printf_common>
 8006a80:	3001      	adds	r0, #1
 8006a82:	f040 8090 	bne.w	8006ba6 <_printf_float+0x1d6>
 8006a86:	f04f 30ff 	mov.w	r0, #4294967295
 8006a8a:	b011      	add	sp, #68	@ 0x44
 8006a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a90:	4642      	mov	r2, r8
 8006a92:	464b      	mov	r3, r9
 8006a94:	4640      	mov	r0, r8
 8006a96:	4649      	mov	r1, r9
 8006a98:	f7f9 ffb8 	bl	8000a0c <__aeabi_dcmpun>
 8006a9c:	b148      	cbz	r0, 8006ab2 <_printf_float+0xe2>
 8006a9e:	464b      	mov	r3, r9
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	bfb8      	it	lt
 8006aa4:	232d      	movlt	r3, #45	@ 0x2d
 8006aa6:	4a80      	ldr	r2, [pc, #512]	@ (8006ca8 <_printf_float+0x2d8>)
 8006aa8:	bfb8      	it	lt
 8006aaa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006aae:	4b7f      	ldr	r3, [pc, #508]	@ (8006cac <_printf_float+0x2dc>)
 8006ab0:	e7d3      	b.n	8006a5a <_printf_float+0x8a>
 8006ab2:	6863      	ldr	r3, [r4, #4]
 8006ab4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006ab8:	1c5a      	adds	r2, r3, #1
 8006aba:	d13f      	bne.n	8006b3c <_printf_float+0x16c>
 8006abc:	2306      	movs	r3, #6
 8006abe:	6063      	str	r3, [r4, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006ac6:	6023      	str	r3, [r4, #0]
 8006ac8:	9206      	str	r2, [sp, #24]
 8006aca:	aa0e      	add	r2, sp, #56	@ 0x38
 8006acc:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006ad0:	aa0d      	add	r2, sp, #52	@ 0x34
 8006ad2:	9203      	str	r2, [sp, #12]
 8006ad4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006ad8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006adc:	6863      	ldr	r3, [r4, #4]
 8006ade:	4642      	mov	r2, r8
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	464b      	mov	r3, r9
 8006ae6:	910a      	str	r1, [sp, #40]	@ 0x28
 8006ae8:	f7ff fed4 	bl	8006894 <__cvt>
 8006aec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006aee:	4680      	mov	r8, r0
 8006af0:	2947      	cmp	r1, #71	@ 0x47
 8006af2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006af4:	d128      	bne.n	8006b48 <_printf_float+0x178>
 8006af6:	1cc8      	adds	r0, r1, #3
 8006af8:	db02      	blt.n	8006b00 <_printf_float+0x130>
 8006afa:	6863      	ldr	r3, [r4, #4]
 8006afc:	4299      	cmp	r1, r3
 8006afe:	dd40      	ble.n	8006b82 <_printf_float+0x1b2>
 8006b00:	f1aa 0a02 	sub.w	sl, sl, #2
 8006b04:	fa5f fa8a 	uxtb.w	sl, sl
 8006b08:	4652      	mov	r2, sl
 8006b0a:	3901      	subs	r1, #1
 8006b0c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006b10:	910d      	str	r1, [sp, #52]	@ 0x34
 8006b12:	f7ff ff23 	bl	800695c <__exponent>
 8006b16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b18:	4681      	mov	r9, r0
 8006b1a:	1813      	adds	r3, r2, r0
 8006b1c:	2a01      	cmp	r2, #1
 8006b1e:	6123      	str	r3, [r4, #16]
 8006b20:	dc02      	bgt.n	8006b28 <_printf_float+0x158>
 8006b22:	6822      	ldr	r2, [r4, #0]
 8006b24:	07d2      	lsls	r2, r2, #31
 8006b26:	d501      	bpl.n	8006b2c <_printf_float+0x15c>
 8006b28:	3301      	adds	r3, #1
 8006b2a:	6123      	str	r3, [r4, #16]
 8006b2c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d09e      	beq.n	8006a72 <_printf_float+0xa2>
 8006b34:	232d      	movs	r3, #45	@ 0x2d
 8006b36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b3a:	e79a      	b.n	8006a72 <_printf_float+0xa2>
 8006b3c:	2947      	cmp	r1, #71	@ 0x47
 8006b3e:	d1bf      	bne.n	8006ac0 <_printf_float+0xf0>
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1bd      	bne.n	8006ac0 <_printf_float+0xf0>
 8006b44:	2301      	movs	r3, #1
 8006b46:	e7ba      	b.n	8006abe <_printf_float+0xee>
 8006b48:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b4c:	d9dc      	bls.n	8006b08 <_printf_float+0x138>
 8006b4e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006b52:	d118      	bne.n	8006b86 <_printf_float+0x1b6>
 8006b54:	2900      	cmp	r1, #0
 8006b56:	6863      	ldr	r3, [r4, #4]
 8006b58:	dd0b      	ble.n	8006b72 <_printf_float+0x1a2>
 8006b5a:	6121      	str	r1, [r4, #16]
 8006b5c:	b913      	cbnz	r3, 8006b64 <_printf_float+0x194>
 8006b5e:	6822      	ldr	r2, [r4, #0]
 8006b60:	07d0      	lsls	r0, r2, #31
 8006b62:	d502      	bpl.n	8006b6a <_printf_float+0x19a>
 8006b64:	3301      	adds	r3, #1
 8006b66:	440b      	add	r3, r1
 8006b68:	6123      	str	r3, [r4, #16]
 8006b6a:	f04f 0900 	mov.w	r9, #0
 8006b6e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006b70:	e7dc      	b.n	8006b2c <_printf_float+0x15c>
 8006b72:	b913      	cbnz	r3, 8006b7a <_printf_float+0x1aa>
 8006b74:	6822      	ldr	r2, [r4, #0]
 8006b76:	07d2      	lsls	r2, r2, #31
 8006b78:	d501      	bpl.n	8006b7e <_printf_float+0x1ae>
 8006b7a:	3302      	adds	r3, #2
 8006b7c:	e7f4      	b.n	8006b68 <_printf_float+0x198>
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e7f2      	b.n	8006b68 <_printf_float+0x198>
 8006b82:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006b86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b88:	4299      	cmp	r1, r3
 8006b8a:	db05      	blt.n	8006b98 <_printf_float+0x1c8>
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	6121      	str	r1, [r4, #16]
 8006b90:	07d8      	lsls	r0, r3, #31
 8006b92:	d5ea      	bpl.n	8006b6a <_printf_float+0x19a>
 8006b94:	1c4b      	adds	r3, r1, #1
 8006b96:	e7e7      	b.n	8006b68 <_printf_float+0x198>
 8006b98:	2900      	cmp	r1, #0
 8006b9a:	bfcc      	ite	gt
 8006b9c:	2201      	movgt	r2, #1
 8006b9e:	f1c1 0202 	rsble	r2, r1, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	e7e0      	b.n	8006b68 <_printf_float+0x198>
 8006ba6:	6823      	ldr	r3, [r4, #0]
 8006ba8:	055a      	lsls	r2, r3, #21
 8006baa:	d407      	bmi.n	8006bbc <_printf_float+0x1ec>
 8006bac:	6923      	ldr	r3, [r4, #16]
 8006bae:	4642      	mov	r2, r8
 8006bb0:	4631      	mov	r1, r6
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	47b8      	blx	r7
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	d12b      	bne.n	8006c12 <_printf_float+0x242>
 8006bba:	e764      	b.n	8006a86 <_printf_float+0xb6>
 8006bbc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006bc0:	f240 80dc 	bls.w	8006d7c <_printf_float+0x3ac>
 8006bc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006bc8:	2200      	movs	r2, #0
 8006bca:	2300      	movs	r3, #0
 8006bcc:	f7f9 feec 	bl	80009a8 <__aeabi_dcmpeq>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d033      	beq.n	8006c3c <_printf_float+0x26c>
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	4631      	mov	r1, r6
 8006bd8:	4628      	mov	r0, r5
 8006bda:	4a35      	ldr	r2, [pc, #212]	@ (8006cb0 <_printf_float+0x2e0>)
 8006bdc:	47b8      	blx	r7
 8006bde:	3001      	adds	r0, #1
 8006be0:	f43f af51 	beq.w	8006a86 <_printf_float+0xb6>
 8006be4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006be8:	4543      	cmp	r3, r8
 8006bea:	db02      	blt.n	8006bf2 <_printf_float+0x222>
 8006bec:	6823      	ldr	r3, [r4, #0]
 8006bee:	07d8      	lsls	r0, r3, #31
 8006bf0:	d50f      	bpl.n	8006c12 <_printf_float+0x242>
 8006bf2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006bf6:	4631      	mov	r1, r6
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	47b8      	blx	r7
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	f43f af42 	beq.w	8006a86 <_printf_float+0xb6>
 8006c02:	f04f 0900 	mov.w	r9, #0
 8006c06:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c0a:	f104 0a1a 	add.w	sl, r4, #26
 8006c0e:	45c8      	cmp	r8, r9
 8006c10:	dc09      	bgt.n	8006c26 <_printf_float+0x256>
 8006c12:	6823      	ldr	r3, [r4, #0]
 8006c14:	079b      	lsls	r3, r3, #30
 8006c16:	f100 8102 	bmi.w	8006e1e <_printf_float+0x44e>
 8006c1a:	68e0      	ldr	r0, [r4, #12]
 8006c1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c1e:	4298      	cmp	r0, r3
 8006c20:	bfb8      	it	lt
 8006c22:	4618      	movlt	r0, r3
 8006c24:	e731      	b.n	8006a8a <_printf_float+0xba>
 8006c26:	2301      	movs	r3, #1
 8006c28:	4652      	mov	r2, sl
 8006c2a:	4631      	mov	r1, r6
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	47b8      	blx	r7
 8006c30:	3001      	adds	r0, #1
 8006c32:	f43f af28 	beq.w	8006a86 <_printf_float+0xb6>
 8006c36:	f109 0901 	add.w	r9, r9, #1
 8006c3a:	e7e8      	b.n	8006c0e <_printf_float+0x23e>
 8006c3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	dc38      	bgt.n	8006cb4 <_printf_float+0x2e4>
 8006c42:	2301      	movs	r3, #1
 8006c44:	4631      	mov	r1, r6
 8006c46:	4628      	mov	r0, r5
 8006c48:	4a19      	ldr	r2, [pc, #100]	@ (8006cb0 <_printf_float+0x2e0>)
 8006c4a:	47b8      	blx	r7
 8006c4c:	3001      	adds	r0, #1
 8006c4e:	f43f af1a 	beq.w	8006a86 <_printf_float+0xb6>
 8006c52:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006c56:	ea59 0303 	orrs.w	r3, r9, r3
 8006c5a:	d102      	bne.n	8006c62 <_printf_float+0x292>
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	07d9      	lsls	r1, r3, #31
 8006c60:	d5d7      	bpl.n	8006c12 <_printf_float+0x242>
 8006c62:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c66:	4631      	mov	r1, r6
 8006c68:	4628      	mov	r0, r5
 8006c6a:	47b8      	blx	r7
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	f43f af0a 	beq.w	8006a86 <_printf_float+0xb6>
 8006c72:	f04f 0a00 	mov.w	sl, #0
 8006c76:	f104 0b1a 	add.w	fp, r4, #26
 8006c7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c7c:	425b      	negs	r3, r3
 8006c7e:	4553      	cmp	r3, sl
 8006c80:	dc01      	bgt.n	8006c86 <_printf_float+0x2b6>
 8006c82:	464b      	mov	r3, r9
 8006c84:	e793      	b.n	8006bae <_printf_float+0x1de>
 8006c86:	2301      	movs	r3, #1
 8006c88:	465a      	mov	r2, fp
 8006c8a:	4631      	mov	r1, r6
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	47b8      	blx	r7
 8006c90:	3001      	adds	r0, #1
 8006c92:	f43f aef8 	beq.w	8006a86 <_printf_float+0xb6>
 8006c96:	f10a 0a01 	add.w	sl, sl, #1
 8006c9a:	e7ee      	b.n	8006c7a <_printf_float+0x2aa>
 8006c9c:	7fefffff 	.word	0x7fefffff
 8006ca0:	0800d89a 	.word	0x0800d89a
 8006ca4:	0800d89e 	.word	0x0800d89e
 8006ca8:	0800d8a2 	.word	0x0800d8a2
 8006cac:	0800d8a6 	.word	0x0800d8a6
 8006cb0:	0800d8aa 	.word	0x0800d8aa
 8006cb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006cb6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006cba:	4553      	cmp	r3, sl
 8006cbc:	bfa8      	it	ge
 8006cbe:	4653      	movge	r3, sl
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	4699      	mov	r9, r3
 8006cc4:	dc36      	bgt.n	8006d34 <_printf_float+0x364>
 8006cc6:	f04f 0b00 	mov.w	fp, #0
 8006cca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cce:	f104 021a 	add.w	r2, r4, #26
 8006cd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006cd4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cd6:	eba3 0309 	sub.w	r3, r3, r9
 8006cda:	455b      	cmp	r3, fp
 8006cdc:	dc31      	bgt.n	8006d42 <_printf_float+0x372>
 8006cde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ce0:	459a      	cmp	sl, r3
 8006ce2:	dc3a      	bgt.n	8006d5a <_printf_float+0x38a>
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	07da      	lsls	r2, r3, #31
 8006ce8:	d437      	bmi.n	8006d5a <_printf_float+0x38a>
 8006cea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006cec:	ebaa 0903 	sub.w	r9, sl, r3
 8006cf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cf2:	ebaa 0303 	sub.w	r3, sl, r3
 8006cf6:	4599      	cmp	r9, r3
 8006cf8:	bfa8      	it	ge
 8006cfa:	4699      	movge	r9, r3
 8006cfc:	f1b9 0f00 	cmp.w	r9, #0
 8006d00:	dc33      	bgt.n	8006d6a <_printf_float+0x39a>
 8006d02:	f04f 0800 	mov.w	r8, #0
 8006d06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d0a:	f104 0b1a 	add.w	fp, r4, #26
 8006d0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d10:	ebaa 0303 	sub.w	r3, sl, r3
 8006d14:	eba3 0309 	sub.w	r3, r3, r9
 8006d18:	4543      	cmp	r3, r8
 8006d1a:	f77f af7a 	ble.w	8006c12 <_printf_float+0x242>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	465a      	mov	r2, fp
 8006d22:	4631      	mov	r1, r6
 8006d24:	4628      	mov	r0, r5
 8006d26:	47b8      	blx	r7
 8006d28:	3001      	adds	r0, #1
 8006d2a:	f43f aeac 	beq.w	8006a86 <_printf_float+0xb6>
 8006d2e:	f108 0801 	add.w	r8, r8, #1
 8006d32:	e7ec      	b.n	8006d0e <_printf_float+0x33e>
 8006d34:	4642      	mov	r2, r8
 8006d36:	4631      	mov	r1, r6
 8006d38:	4628      	mov	r0, r5
 8006d3a:	47b8      	blx	r7
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	d1c2      	bne.n	8006cc6 <_printf_float+0x2f6>
 8006d40:	e6a1      	b.n	8006a86 <_printf_float+0xb6>
 8006d42:	2301      	movs	r3, #1
 8006d44:	4631      	mov	r1, r6
 8006d46:	4628      	mov	r0, r5
 8006d48:	920a      	str	r2, [sp, #40]	@ 0x28
 8006d4a:	47b8      	blx	r7
 8006d4c:	3001      	adds	r0, #1
 8006d4e:	f43f ae9a 	beq.w	8006a86 <_printf_float+0xb6>
 8006d52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d54:	f10b 0b01 	add.w	fp, fp, #1
 8006d58:	e7bb      	b.n	8006cd2 <_printf_float+0x302>
 8006d5a:	4631      	mov	r1, r6
 8006d5c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d60:	4628      	mov	r0, r5
 8006d62:	47b8      	blx	r7
 8006d64:	3001      	adds	r0, #1
 8006d66:	d1c0      	bne.n	8006cea <_printf_float+0x31a>
 8006d68:	e68d      	b.n	8006a86 <_printf_float+0xb6>
 8006d6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d6c:	464b      	mov	r3, r9
 8006d6e:	4631      	mov	r1, r6
 8006d70:	4628      	mov	r0, r5
 8006d72:	4442      	add	r2, r8
 8006d74:	47b8      	blx	r7
 8006d76:	3001      	adds	r0, #1
 8006d78:	d1c3      	bne.n	8006d02 <_printf_float+0x332>
 8006d7a:	e684      	b.n	8006a86 <_printf_float+0xb6>
 8006d7c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006d80:	f1ba 0f01 	cmp.w	sl, #1
 8006d84:	dc01      	bgt.n	8006d8a <_printf_float+0x3ba>
 8006d86:	07db      	lsls	r3, r3, #31
 8006d88:	d536      	bpl.n	8006df8 <_printf_float+0x428>
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	4642      	mov	r2, r8
 8006d8e:	4631      	mov	r1, r6
 8006d90:	4628      	mov	r0, r5
 8006d92:	47b8      	blx	r7
 8006d94:	3001      	adds	r0, #1
 8006d96:	f43f ae76 	beq.w	8006a86 <_printf_float+0xb6>
 8006d9a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d9e:	4631      	mov	r1, r6
 8006da0:	4628      	mov	r0, r5
 8006da2:	47b8      	blx	r7
 8006da4:	3001      	adds	r0, #1
 8006da6:	f43f ae6e 	beq.w	8006a86 <_printf_float+0xb6>
 8006daa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006dae:	2200      	movs	r2, #0
 8006db0:	2300      	movs	r3, #0
 8006db2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006db6:	f7f9 fdf7 	bl	80009a8 <__aeabi_dcmpeq>
 8006dba:	b9c0      	cbnz	r0, 8006dee <_printf_float+0x41e>
 8006dbc:	4653      	mov	r3, sl
 8006dbe:	f108 0201 	add.w	r2, r8, #1
 8006dc2:	4631      	mov	r1, r6
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	47b8      	blx	r7
 8006dc8:	3001      	adds	r0, #1
 8006dca:	d10c      	bne.n	8006de6 <_printf_float+0x416>
 8006dcc:	e65b      	b.n	8006a86 <_printf_float+0xb6>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	465a      	mov	r2, fp
 8006dd2:	4631      	mov	r1, r6
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	47b8      	blx	r7
 8006dd8:	3001      	adds	r0, #1
 8006dda:	f43f ae54 	beq.w	8006a86 <_printf_float+0xb6>
 8006dde:	f108 0801 	add.w	r8, r8, #1
 8006de2:	45d0      	cmp	r8, sl
 8006de4:	dbf3      	blt.n	8006dce <_printf_float+0x3fe>
 8006de6:	464b      	mov	r3, r9
 8006de8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006dec:	e6e0      	b.n	8006bb0 <_printf_float+0x1e0>
 8006dee:	f04f 0800 	mov.w	r8, #0
 8006df2:	f104 0b1a 	add.w	fp, r4, #26
 8006df6:	e7f4      	b.n	8006de2 <_printf_float+0x412>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	4642      	mov	r2, r8
 8006dfc:	e7e1      	b.n	8006dc2 <_printf_float+0x3f2>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	464a      	mov	r2, r9
 8006e02:	4631      	mov	r1, r6
 8006e04:	4628      	mov	r0, r5
 8006e06:	47b8      	blx	r7
 8006e08:	3001      	adds	r0, #1
 8006e0a:	f43f ae3c 	beq.w	8006a86 <_printf_float+0xb6>
 8006e0e:	f108 0801 	add.w	r8, r8, #1
 8006e12:	68e3      	ldr	r3, [r4, #12]
 8006e14:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006e16:	1a5b      	subs	r3, r3, r1
 8006e18:	4543      	cmp	r3, r8
 8006e1a:	dcf0      	bgt.n	8006dfe <_printf_float+0x42e>
 8006e1c:	e6fd      	b.n	8006c1a <_printf_float+0x24a>
 8006e1e:	f04f 0800 	mov.w	r8, #0
 8006e22:	f104 0919 	add.w	r9, r4, #25
 8006e26:	e7f4      	b.n	8006e12 <_printf_float+0x442>

08006e28 <_printf_common>:
 8006e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e2c:	4616      	mov	r6, r2
 8006e2e:	4698      	mov	r8, r3
 8006e30:	688a      	ldr	r2, [r1, #8]
 8006e32:	690b      	ldr	r3, [r1, #16]
 8006e34:	4607      	mov	r7, r0
 8006e36:	4293      	cmp	r3, r2
 8006e38:	bfb8      	it	lt
 8006e3a:	4613      	movlt	r3, r2
 8006e3c:	6033      	str	r3, [r6, #0]
 8006e3e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e42:	460c      	mov	r4, r1
 8006e44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e48:	b10a      	cbz	r2, 8006e4e <_printf_common+0x26>
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	6033      	str	r3, [r6, #0]
 8006e4e:	6823      	ldr	r3, [r4, #0]
 8006e50:	0699      	lsls	r1, r3, #26
 8006e52:	bf42      	ittt	mi
 8006e54:	6833      	ldrmi	r3, [r6, #0]
 8006e56:	3302      	addmi	r3, #2
 8006e58:	6033      	strmi	r3, [r6, #0]
 8006e5a:	6825      	ldr	r5, [r4, #0]
 8006e5c:	f015 0506 	ands.w	r5, r5, #6
 8006e60:	d106      	bne.n	8006e70 <_printf_common+0x48>
 8006e62:	f104 0a19 	add.w	sl, r4, #25
 8006e66:	68e3      	ldr	r3, [r4, #12]
 8006e68:	6832      	ldr	r2, [r6, #0]
 8006e6a:	1a9b      	subs	r3, r3, r2
 8006e6c:	42ab      	cmp	r3, r5
 8006e6e:	dc2b      	bgt.n	8006ec8 <_printf_common+0xa0>
 8006e70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e74:	6822      	ldr	r2, [r4, #0]
 8006e76:	3b00      	subs	r3, #0
 8006e78:	bf18      	it	ne
 8006e7a:	2301      	movne	r3, #1
 8006e7c:	0692      	lsls	r2, r2, #26
 8006e7e:	d430      	bmi.n	8006ee2 <_printf_common+0xba>
 8006e80:	4641      	mov	r1, r8
 8006e82:	4638      	mov	r0, r7
 8006e84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e88:	47c8      	blx	r9
 8006e8a:	3001      	adds	r0, #1
 8006e8c:	d023      	beq.n	8006ed6 <_printf_common+0xae>
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	6922      	ldr	r2, [r4, #16]
 8006e92:	f003 0306 	and.w	r3, r3, #6
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	bf14      	ite	ne
 8006e9a:	2500      	movne	r5, #0
 8006e9c:	6833      	ldreq	r3, [r6, #0]
 8006e9e:	f04f 0600 	mov.w	r6, #0
 8006ea2:	bf08      	it	eq
 8006ea4:	68e5      	ldreq	r5, [r4, #12]
 8006ea6:	f104 041a 	add.w	r4, r4, #26
 8006eaa:	bf08      	it	eq
 8006eac:	1aed      	subeq	r5, r5, r3
 8006eae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006eb2:	bf08      	it	eq
 8006eb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	bfc4      	itt	gt
 8006ebc:	1a9b      	subgt	r3, r3, r2
 8006ebe:	18ed      	addgt	r5, r5, r3
 8006ec0:	42b5      	cmp	r5, r6
 8006ec2:	d11a      	bne.n	8006efa <_printf_common+0xd2>
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	e008      	b.n	8006eda <_printf_common+0xb2>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	4652      	mov	r2, sl
 8006ecc:	4641      	mov	r1, r8
 8006ece:	4638      	mov	r0, r7
 8006ed0:	47c8      	blx	r9
 8006ed2:	3001      	adds	r0, #1
 8006ed4:	d103      	bne.n	8006ede <_printf_common+0xb6>
 8006ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ede:	3501      	adds	r5, #1
 8006ee0:	e7c1      	b.n	8006e66 <_printf_common+0x3e>
 8006ee2:	2030      	movs	r0, #48	@ 0x30
 8006ee4:	18e1      	adds	r1, r4, r3
 8006ee6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ef0:	4422      	add	r2, r4
 8006ef2:	3302      	adds	r3, #2
 8006ef4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ef8:	e7c2      	b.n	8006e80 <_printf_common+0x58>
 8006efa:	2301      	movs	r3, #1
 8006efc:	4622      	mov	r2, r4
 8006efe:	4641      	mov	r1, r8
 8006f00:	4638      	mov	r0, r7
 8006f02:	47c8      	blx	r9
 8006f04:	3001      	adds	r0, #1
 8006f06:	d0e6      	beq.n	8006ed6 <_printf_common+0xae>
 8006f08:	3601      	adds	r6, #1
 8006f0a:	e7d9      	b.n	8006ec0 <_printf_common+0x98>

08006f0c <_printf_i>:
 8006f0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f10:	7e0f      	ldrb	r7, [r1, #24]
 8006f12:	4691      	mov	r9, r2
 8006f14:	2f78      	cmp	r7, #120	@ 0x78
 8006f16:	4680      	mov	r8, r0
 8006f18:	460c      	mov	r4, r1
 8006f1a:	469a      	mov	sl, r3
 8006f1c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f22:	d807      	bhi.n	8006f34 <_printf_i+0x28>
 8006f24:	2f62      	cmp	r7, #98	@ 0x62
 8006f26:	d80a      	bhi.n	8006f3e <_printf_i+0x32>
 8006f28:	2f00      	cmp	r7, #0
 8006f2a:	f000 80d3 	beq.w	80070d4 <_printf_i+0x1c8>
 8006f2e:	2f58      	cmp	r7, #88	@ 0x58
 8006f30:	f000 80ba 	beq.w	80070a8 <_printf_i+0x19c>
 8006f34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f3c:	e03a      	b.n	8006fb4 <_printf_i+0xa8>
 8006f3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f42:	2b15      	cmp	r3, #21
 8006f44:	d8f6      	bhi.n	8006f34 <_printf_i+0x28>
 8006f46:	a101      	add	r1, pc, #4	@ (adr r1, 8006f4c <_printf_i+0x40>)
 8006f48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f4c:	08006fa5 	.word	0x08006fa5
 8006f50:	08006fb9 	.word	0x08006fb9
 8006f54:	08006f35 	.word	0x08006f35
 8006f58:	08006f35 	.word	0x08006f35
 8006f5c:	08006f35 	.word	0x08006f35
 8006f60:	08006f35 	.word	0x08006f35
 8006f64:	08006fb9 	.word	0x08006fb9
 8006f68:	08006f35 	.word	0x08006f35
 8006f6c:	08006f35 	.word	0x08006f35
 8006f70:	08006f35 	.word	0x08006f35
 8006f74:	08006f35 	.word	0x08006f35
 8006f78:	080070bb 	.word	0x080070bb
 8006f7c:	08006fe3 	.word	0x08006fe3
 8006f80:	08007075 	.word	0x08007075
 8006f84:	08006f35 	.word	0x08006f35
 8006f88:	08006f35 	.word	0x08006f35
 8006f8c:	080070dd 	.word	0x080070dd
 8006f90:	08006f35 	.word	0x08006f35
 8006f94:	08006fe3 	.word	0x08006fe3
 8006f98:	08006f35 	.word	0x08006f35
 8006f9c:	08006f35 	.word	0x08006f35
 8006fa0:	0800707d 	.word	0x0800707d
 8006fa4:	6833      	ldr	r3, [r6, #0]
 8006fa6:	1d1a      	adds	r2, r3, #4
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	6032      	str	r2, [r6, #0]
 8006fac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e09e      	b.n	80070f6 <_printf_i+0x1ea>
 8006fb8:	6833      	ldr	r3, [r6, #0]
 8006fba:	6820      	ldr	r0, [r4, #0]
 8006fbc:	1d19      	adds	r1, r3, #4
 8006fbe:	6031      	str	r1, [r6, #0]
 8006fc0:	0606      	lsls	r6, r0, #24
 8006fc2:	d501      	bpl.n	8006fc8 <_printf_i+0xbc>
 8006fc4:	681d      	ldr	r5, [r3, #0]
 8006fc6:	e003      	b.n	8006fd0 <_printf_i+0xc4>
 8006fc8:	0645      	lsls	r5, r0, #25
 8006fca:	d5fb      	bpl.n	8006fc4 <_printf_i+0xb8>
 8006fcc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006fd0:	2d00      	cmp	r5, #0
 8006fd2:	da03      	bge.n	8006fdc <_printf_i+0xd0>
 8006fd4:	232d      	movs	r3, #45	@ 0x2d
 8006fd6:	426d      	negs	r5, r5
 8006fd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fdc:	230a      	movs	r3, #10
 8006fde:	4859      	ldr	r0, [pc, #356]	@ (8007144 <_printf_i+0x238>)
 8006fe0:	e011      	b.n	8007006 <_printf_i+0xfa>
 8006fe2:	6821      	ldr	r1, [r4, #0]
 8006fe4:	6833      	ldr	r3, [r6, #0]
 8006fe6:	0608      	lsls	r0, r1, #24
 8006fe8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006fec:	d402      	bmi.n	8006ff4 <_printf_i+0xe8>
 8006fee:	0649      	lsls	r1, r1, #25
 8006ff0:	bf48      	it	mi
 8006ff2:	b2ad      	uxthmi	r5, r5
 8006ff4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ff6:	6033      	str	r3, [r6, #0]
 8006ff8:	bf14      	ite	ne
 8006ffa:	230a      	movne	r3, #10
 8006ffc:	2308      	moveq	r3, #8
 8006ffe:	4851      	ldr	r0, [pc, #324]	@ (8007144 <_printf_i+0x238>)
 8007000:	2100      	movs	r1, #0
 8007002:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007006:	6866      	ldr	r6, [r4, #4]
 8007008:	2e00      	cmp	r6, #0
 800700a:	bfa8      	it	ge
 800700c:	6821      	ldrge	r1, [r4, #0]
 800700e:	60a6      	str	r6, [r4, #8]
 8007010:	bfa4      	itt	ge
 8007012:	f021 0104 	bicge.w	r1, r1, #4
 8007016:	6021      	strge	r1, [r4, #0]
 8007018:	b90d      	cbnz	r5, 800701e <_printf_i+0x112>
 800701a:	2e00      	cmp	r6, #0
 800701c:	d04b      	beq.n	80070b6 <_printf_i+0x1aa>
 800701e:	4616      	mov	r6, r2
 8007020:	fbb5 f1f3 	udiv	r1, r5, r3
 8007024:	fb03 5711 	mls	r7, r3, r1, r5
 8007028:	5dc7      	ldrb	r7, [r0, r7]
 800702a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800702e:	462f      	mov	r7, r5
 8007030:	42bb      	cmp	r3, r7
 8007032:	460d      	mov	r5, r1
 8007034:	d9f4      	bls.n	8007020 <_printf_i+0x114>
 8007036:	2b08      	cmp	r3, #8
 8007038:	d10b      	bne.n	8007052 <_printf_i+0x146>
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	07df      	lsls	r7, r3, #31
 800703e:	d508      	bpl.n	8007052 <_printf_i+0x146>
 8007040:	6923      	ldr	r3, [r4, #16]
 8007042:	6861      	ldr	r1, [r4, #4]
 8007044:	4299      	cmp	r1, r3
 8007046:	bfde      	ittt	le
 8007048:	2330      	movle	r3, #48	@ 0x30
 800704a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800704e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007052:	1b92      	subs	r2, r2, r6
 8007054:	6122      	str	r2, [r4, #16]
 8007056:	464b      	mov	r3, r9
 8007058:	4621      	mov	r1, r4
 800705a:	4640      	mov	r0, r8
 800705c:	f8cd a000 	str.w	sl, [sp]
 8007060:	aa03      	add	r2, sp, #12
 8007062:	f7ff fee1 	bl	8006e28 <_printf_common>
 8007066:	3001      	adds	r0, #1
 8007068:	d14a      	bne.n	8007100 <_printf_i+0x1f4>
 800706a:	f04f 30ff 	mov.w	r0, #4294967295
 800706e:	b004      	add	sp, #16
 8007070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007074:	6823      	ldr	r3, [r4, #0]
 8007076:	f043 0320 	orr.w	r3, r3, #32
 800707a:	6023      	str	r3, [r4, #0]
 800707c:	2778      	movs	r7, #120	@ 0x78
 800707e:	4832      	ldr	r0, [pc, #200]	@ (8007148 <_printf_i+0x23c>)
 8007080:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	6831      	ldr	r1, [r6, #0]
 8007088:	061f      	lsls	r7, r3, #24
 800708a:	f851 5b04 	ldr.w	r5, [r1], #4
 800708e:	d402      	bmi.n	8007096 <_printf_i+0x18a>
 8007090:	065f      	lsls	r7, r3, #25
 8007092:	bf48      	it	mi
 8007094:	b2ad      	uxthmi	r5, r5
 8007096:	6031      	str	r1, [r6, #0]
 8007098:	07d9      	lsls	r1, r3, #31
 800709a:	bf44      	itt	mi
 800709c:	f043 0320 	orrmi.w	r3, r3, #32
 80070a0:	6023      	strmi	r3, [r4, #0]
 80070a2:	b11d      	cbz	r5, 80070ac <_printf_i+0x1a0>
 80070a4:	2310      	movs	r3, #16
 80070a6:	e7ab      	b.n	8007000 <_printf_i+0xf4>
 80070a8:	4826      	ldr	r0, [pc, #152]	@ (8007144 <_printf_i+0x238>)
 80070aa:	e7e9      	b.n	8007080 <_printf_i+0x174>
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	f023 0320 	bic.w	r3, r3, #32
 80070b2:	6023      	str	r3, [r4, #0]
 80070b4:	e7f6      	b.n	80070a4 <_printf_i+0x198>
 80070b6:	4616      	mov	r6, r2
 80070b8:	e7bd      	b.n	8007036 <_printf_i+0x12a>
 80070ba:	6833      	ldr	r3, [r6, #0]
 80070bc:	6825      	ldr	r5, [r4, #0]
 80070be:	1d18      	adds	r0, r3, #4
 80070c0:	6961      	ldr	r1, [r4, #20]
 80070c2:	6030      	str	r0, [r6, #0]
 80070c4:	062e      	lsls	r6, r5, #24
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	d501      	bpl.n	80070ce <_printf_i+0x1c2>
 80070ca:	6019      	str	r1, [r3, #0]
 80070cc:	e002      	b.n	80070d4 <_printf_i+0x1c8>
 80070ce:	0668      	lsls	r0, r5, #25
 80070d0:	d5fb      	bpl.n	80070ca <_printf_i+0x1be>
 80070d2:	8019      	strh	r1, [r3, #0]
 80070d4:	2300      	movs	r3, #0
 80070d6:	4616      	mov	r6, r2
 80070d8:	6123      	str	r3, [r4, #16]
 80070da:	e7bc      	b.n	8007056 <_printf_i+0x14a>
 80070dc:	6833      	ldr	r3, [r6, #0]
 80070de:	2100      	movs	r1, #0
 80070e0:	1d1a      	adds	r2, r3, #4
 80070e2:	6032      	str	r2, [r6, #0]
 80070e4:	681e      	ldr	r6, [r3, #0]
 80070e6:	6862      	ldr	r2, [r4, #4]
 80070e8:	4630      	mov	r0, r6
 80070ea:	f000 fc32 	bl	8007952 <memchr>
 80070ee:	b108      	cbz	r0, 80070f4 <_printf_i+0x1e8>
 80070f0:	1b80      	subs	r0, r0, r6
 80070f2:	6060      	str	r0, [r4, #4]
 80070f4:	6863      	ldr	r3, [r4, #4]
 80070f6:	6123      	str	r3, [r4, #16]
 80070f8:	2300      	movs	r3, #0
 80070fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070fe:	e7aa      	b.n	8007056 <_printf_i+0x14a>
 8007100:	4632      	mov	r2, r6
 8007102:	4649      	mov	r1, r9
 8007104:	4640      	mov	r0, r8
 8007106:	6923      	ldr	r3, [r4, #16]
 8007108:	47d0      	blx	sl
 800710a:	3001      	adds	r0, #1
 800710c:	d0ad      	beq.n	800706a <_printf_i+0x15e>
 800710e:	6823      	ldr	r3, [r4, #0]
 8007110:	079b      	lsls	r3, r3, #30
 8007112:	d413      	bmi.n	800713c <_printf_i+0x230>
 8007114:	68e0      	ldr	r0, [r4, #12]
 8007116:	9b03      	ldr	r3, [sp, #12]
 8007118:	4298      	cmp	r0, r3
 800711a:	bfb8      	it	lt
 800711c:	4618      	movlt	r0, r3
 800711e:	e7a6      	b.n	800706e <_printf_i+0x162>
 8007120:	2301      	movs	r3, #1
 8007122:	4632      	mov	r2, r6
 8007124:	4649      	mov	r1, r9
 8007126:	4640      	mov	r0, r8
 8007128:	47d0      	blx	sl
 800712a:	3001      	adds	r0, #1
 800712c:	d09d      	beq.n	800706a <_printf_i+0x15e>
 800712e:	3501      	adds	r5, #1
 8007130:	68e3      	ldr	r3, [r4, #12]
 8007132:	9903      	ldr	r1, [sp, #12]
 8007134:	1a5b      	subs	r3, r3, r1
 8007136:	42ab      	cmp	r3, r5
 8007138:	dcf2      	bgt.n	8007120 <_printf_i+0x214>
 800713a:	e7eb      	b.n	8007114 <_printf_i+0x208>
 800713c:	2500      	movs	r5, #0
 800713e:	f104 0619 	add.w	r6, r4, #25
 8007142:	e7f5      	b.n	8007130 <_printf_i+0x224>
 8007144:	0800d8ac 	.word	0x0800d8ac
 8007148:	0800d8bd 	.word	0x0800d8bd

0800714c <_scanf_float>:
 800714c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007150:	b087      	sub	sp, #28
 8007152:	9303      	str	r3, [sp, #12]
 8007154:	688b      	ldr	r3, [r1, #8]
 8007156:	4617      	mov	r7, r2
 8007158:	1e5a      	subs	r2, r3, #1
 800715a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800715e:	bf82      	ittt	hi
 8007160:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007164:	eb03 0b05 	addhi.w	fp, r3, r5
 8007168:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800716c:	460a      	mov	r2, r1
 800716e:	f04f 0500 	mov.w	r5, #0
 8007172:	bf88      	it	hi
 8007174:	608b      	strhi	r3, [r1, #8]
 8007176:	680b      	ldr	r3, [r1, #0]
 8007178:	4680      	mov	r8, r0
 800717a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800717e:	f842 3b1c 	str.w	r3, [r2], #28
 8007182:	460c      	mov	r4, r1
 8007184:	bf98      	it	ls
 8007186:	f04f 0b00 	movls.w	fp, #0
 800718a:	4616      	mov	r6, r2
 800718c:	46aa      	mov	sl, r5
 800718e:	46a9      	mov	r9, r5
 8007190:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007194:	9201      	str	r2, [sp, #4]
 8007196:	9502      	str	r5, [sp, #8]
 8007198:	68a2      	ldr	r2, [r4, #8]
 800719a:	b152      	cbz	r2, 80071b2 <_scanf_float+0x66>
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	2b4e      	cmp	r3, #78	@ 0x4e
 80071a2:	d865      	bhi.n	8007270 <_scanf_float+0x124>
 80071a4:	2b40      	cmp	r3, #64	@ 0x40
 80071a6:	d83d      	bhi.n	8007224 <_scanf_float+0xd8>
 80071a8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80071ac:	b2c8      	uxtb	r0, r1
 80071ae:	280e      	cmp	r0, #14
 80071b0:	d93b      	bls.n	800722a <_scanf_float+0xde>
 80071b2:	f1b9 0f00 	cmp.w	r9, #0
 80071b6:	d003      	beq.n	80071c0 <_scanf_float+0x74>
 80071b8:	6823      	ldr	r3, [r4, #0]
 80071ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071be:	6023      	str	r3, [r4, #0]
 80071c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071c4:	f1ba 0f01 	cmp.w	sl, #1
 80071c8:	f200 8118 	bhi.w	80073fc <_scanf_float+0x2b0>
 80071cc:	9b01      	ldr	r3, [sp, #4]
 80071ce:	429e      	cmp	r6, r3
 80071d0:	f200 8109 	bhi.w	80073e6 <_scanf_float+0x29a>
 80071d4:	2001      	movs	r0, #1
 80071d6:	b007      	add	sp, #28
 80071d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071dc:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80071e0:	2a0d      	cmp	r2, #13
 80071e2:	d8e6      	bhi.n	80071b2 <_scanf_float+0x66>
 80071e4:	a101      	add	r1, pc, #4	@ (adr r1, 80071ec <_scanf_float+0xa0>)
 80071e6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80071ea:	bf00      	nop
 80071ec:	08007333 	.word	0x08007333
 80071f0:	080071b3 	.word	0x080071b3
 80071f4:	080071b3 	.word	0x080071b3
 80071f8:	080071b3 	.word	0x080071b3
 80071fc:	08007393 	.word	0x08007393
 8007200:	0800736b 	.word	0x0800736b
 8007204:	080071b3 	.word	0x080071b3
 8007208:	080071b3 	.word	0x080071b3
 800720c:	08007341 	.word	0x08007341
 8007210:	080071b3 	.word	0x080071b3
 8007214:	080071b3 	.word	0x080071b3
 8007218:	080071b3 	.word	0x080071b3
 800721c:	080071b3 	.word	0x080071b3
 8007220:	080072f9 	.word	0x080072f9
 8007224:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007228:	e7da      	b.n	80071e0 <_scanf_float+0x94>
 800722a:	290e      	cmp	r1, #14
 800722c:	d8c1      	bhi.n	80071b2 <_scanf_float+0x66>
 800722e:	a001      	add	r0, pc, #4	@ (adr r0, 8007234 <_scanf_float+0xe8>)
 8007230:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007234:	080072e9 	.word	0x080072e9
 8007238:	080071b3 	.word	0x080071b3
 800723c:	080072e9 	.word	0x080072e9
 8007240:	0800737f 	.word	0x0800737f
 8007244:	080071b3 	.word	0x080071b3
 8007248:	08007291 	.word	0x08007291
 800724c:	080072cf 	.word	0x080072cf
 8007250:	080072cf 	.word	0x080072cf
 8007254:	080072cf 	.word	0x080072cf
 8007258:	080072cf 	.word	0x080072cf
 800725c:	080072cf 	.word	0x080072cf
 8007260:	080072cf 	.word	0x080072cf
 8007264:	080072cf 	.word	0x080072cf
 8007268:	080072cf 	.word	0x080072cf
 800726c:	080072cf 	.word	0x080072cf
 8007270:	2b6e      	cmp	r3, #110	@ 0x6e
 8007272:	d809      	bhi.n	8007288 <_scanf_float+0x13c>
 8007274:	2b60      	cmp	r3, #96	@ 0x60
 8007276:	d8b1      	bhi.n	80071dc <_scanf_float+0x90>
 8007278:	2b54      	cmp	r3, #84	@ 0x54
 800727a:	d07b      	beq.n	8007374 <_scanf_float+0x228>
 800727c:	2b59      	cmp	r3, #89	@ 0x59
 800727e:	d198      	bne.n	80071b2 <_scanf_float+0x66>
 8007280:	2d07      	cmp	r5, #7
 8007282:	d196      	bne.n	80071b2 <_scanf_float+0x66>
 8007284:	2508      	movs	r5, #8
 8007286:	e02c      	b.n	80072e2 <_scanf_float+0x196>
 8007288:	2b74      	cmp	r3, #116	@ 0x74
 800728a:	d073      	beq.n	8007374 <_scanf_float+0x228>
 800728c:	2b79      	cmp	r3, #121	@ 0x79
 800728e:	e7f6      	b.n	800727e <_scanf_float+0x132>
 8007290:	6821      	ldr	r1, [r4, #0]
 8007292:	05c8      	lsls	r0, r1, #23
 8007294:	d51b      	bpl.n	80072ce <_scanf_float+0x182>
 8007296:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800729a:	6021      	str	r1, [r4, #0]
 800729c:	f109 0901 	add.w	r9, r9, #1
 80072a0:	f1bb 0f00 	cmp.w	fp, #0
 80072a4:	d003      	beq.n	80072ae <_scanf_float+0x162>
 80072a6:	3201      	adds	r2, #1
 80072a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80072ac:	60a2      	str	r2, [r4, #8]
 80072ae:	68a3      	ldr	r3, [r4, #8]
 80072b0:	3b01      	subs	r3, #1
 80072b2:	60a3      	str	r3, [r4, #8]
 80072b4:	6923      	ldr	r3, [r4, #16]
 80072b6:	3301      	adds	r3, #1
 80072b8:	6123      	str	r3, [r4, #16]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	3b01      	subs	r3, #1
 80072be:	2b00      	cmp	r3, #0
 80072c0:	607b      	str	r3, [r7, #4]
 80072c2:	f340 8087 	ble.w	80073d4 <_scanf_float+0x288>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	3301      	adds	r3, #1
 80072ca:	603b      	str	r3, [r7, #0]
 80072cc:	e764      	b.n	8007198 <_scanf_float+0x4c>
 80072ce:	eb1a 0105 	adds.w	r1, sl, r5
 80072d2:	f47f af6e 	bne.w	80071b2 <_scanf_float+0x66>
 80072d6:	460d      	mov	r5, r1
 80072d8:	468a      	mov	sl, r1
 80072da:	6822      	ldr	r2, [r4, #0]
 80072dc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80072e0:	6022      	str	r2, [r4, #0]
 80072e2:	f806 3b01 	strb.w	r3, [r6], #1
 80072e6:	e7e2      	b.n	80072ae <_scanf_float+0x162>
 80072e8:	6822      	ldr	r2, [r4, #0]
 80072ea:	0610      	lsls	r0, r2, #24
 80072ec:	f57f af61 	bpl.w	80071b2 <_scanf_float+0x66>
 80072f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80072f4:	6022      	str	r2, [r4, #0]
 80072f6:	e7f4      	b.n	80072e2 <_scanf_float+0x196>
 80072f8:	f1ba 0f00 	cmp.w	sl, #0
 80072fc:	d10e      	bne.n	800731c <_scanf_float+0x1d0>
 80072fe:	f1b9 0f00 	cmp.w	r9, #0
 8007302:	d10e      	bne.n	8007322 <_scanf_float+0x1d6>
 8007304:	6822      	ldr	r2, [r4, #0]
 8007306:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800730a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800730e:	d108      	bne.n	8007322 <_scanf_float+0x1d6>
 8007310:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007314:	f04f 0a01 	mov.w	sl, #1
 8007318:	6022      	str	r2, [r4, #0]
 800731a:	e7e2      	b.n	80072e2 <_scanf_float+0x196>
 800731c:	f1ba 0f02 	cmp.w	sl, #2
 8007320:	d055      	beq.n	80073ce <_scanf_float+0x282>
 8007322:	2d01      	cmp	r5, #1
 8007324:	d002      	beq.n	800732c <_scanf_float+0x1e0>
 8007326:	2d04      	cmp	r5, #4
 8007328:	f47f af43 	bne.w	80071b2 <_scanf_float+0x66>
 800732c:	3501      	adds	r5, #1
 800732e:	b2ed      	uxtb	r5, r5
 8007330:	e7d7      	b.n	80072e2 <_scanf_float+0x196>
 8007332:	f1ba 0f01 	cmp.w	sl, #1
 8007336:	f47f af3c 	bne.w	80071b2 <_scanf_float+0x66>
 800733a:	f04f 0a02 	mov.w	sl, #2
 800733e:	e7d0      	b.n	80072e2 <_scanf_float+0x196>
 8007340:	b97d      	cbnz	r5, 8007362 <_scanf_float+0x216>
 8007342:	f1b9 0f00 	cmp.w	r9, #0
 8007346:	f47f af37 	bne.w	80071b8 <_scanf_float+0x6c>
 800734a:	6822      	ldr	r2, [r4, #0]
 800734c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007350:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007354:	f040 8103 	bne.w	800755e <_scanf_float+0x412>
 8007358:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800735c:	2501      	movs	r5, #1
 800735e:	6022      	str	r2, [r4, #0]
 8007360:	e7bf      	b.n	80072e2 <_scanf_float+0x196>
 8007362:	2d03      	cmp	r5, #3
 8007364:	d0e2      	beq.n	800732c <_scanf_float+0x1e0>
 8007366:	2d05      	cmp	r5, #5
 8007368:	e7de      	b.n	8007328 <_scanf_float+0x1dc>
 800736a:	2d02      	cmp	r5, #2
 800736c:	f47f af21 	bne.w	80071b2 <_scanf_float+0x66>
 8007370:	2503      	movs	r5, #3
 8007372:	e7b6      	b.n	80072e2 <_scanf_float+0x196>
 8007374:	2d06      	cmp	r5, #6
 8007376:	f47f af1c 	bne.w	80071b2 <_scanf_float+0x66>
 800737a:	2507      	movs	r5, #7
 800737c:	e7b1      	b.n	80072e2 <_scanf_float+0x196>
 800737e:	6822      	ldr	r2, [r4, #0]
 8007380:	0591      	lsls	r1, r2, #22
 8007382:	f57f af16 	bpl.w	80071b2 <_scanf_float+0x66>
 8007386:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800738a:	6022      	str	r2, [r4, #0]
 800738c:	f8cd 9008 	str.w	r9, [sp, #8]
 8007390:	e7a7      	b.n	80072e2 <_scanf_float+0x196>
 8007392:	6822      	ldr	r2, [r4, #0]
 8007394:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007398:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800739c:	d006      	beq.n	80073ac <_scanf_float+0x260>
 800739e:	0550      	lsls	r0, r2, #21
 80073a0:	f57f af07 	bpl.w	80071b2 <_scanf_float+0x66>
 80073a4:	f1b9 0f00 	cmp.w	r9, #0
 80073a8:	f000 80d9 	beq.w	800755e <_scanf_float+0x412>
 80073ac:	0591      	lsls	r1, r2, #22
 80073ae:	bf58      	it	pl
 80073b0:	9902      	ldrpl	r1, [sp, #8]
 80073b2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80073b6:	bf58      	it	pl
 80073b8:	eba9 0101 	subpl.w	r1, r9, r1
 80073bc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80073c0:	f04f 0900 	mov.w	r9, #0
 80073c4:	bf58      	it	pl
 80073c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80073ca:	6022      	str	r2, [r4, #0]
 80073cc:	e789      	b.n	80072e2 <_scanf_float+0x196>
 80073ce:	f04f 0a03 	mov.w	sl, #3
 80073d2:	e786      	b.n	80072e2 <_scanf_float+0x196>
 80073d4:	4639      	mov	r1, r7
 80073d6:	4640      	mov	r0, r8
 80073d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80073dc:	4798      	blx	r3
 80073de:	2800      	cmp	r0, #0
 80073e0:	f43f aeda 	beq.w	8007198 <_scanf_float+0x4c>
 80073e4:	e6e5      	b.n	80071b2 <_scanf_float+0x66>
 80073e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073ea:	463a      	mov	r2, r7
 80073ec:	4640      	mov	r0, r8
 80073ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80073f2:	4798      	blx	r3
 80073f4:	6923      	ldr	r3, [r4, #16]
 80073f6:	3b01      	subs	r3, #1
 80073f8:	6123      	str	r3, [r4, #16]
 80073fa:	e6e7      	b.n	80071cc <_scanf_float+0x80>
 80073fc:	1e6b      	subs	r3, r5, #1
 80073fe:	2b06      	cmp	r3, #6
 8007400:	d824      	bhi.n	800744c <_scanf_float+0x300>
 8007402:	2d02      	cmp	r5, #2
 8007404:	d836      	bhi.n	8007474 <_scanf_float+0x328>
 8007406:	9b01      	ldr	r3, [sp, #4]
 8007408:	429e      	cmp	r6, r3
 800740a:	f67f aee3 	bls.w	80071d4 <_scanf_float+0x88>
 800740e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007412:	463a      	mov	r2, r7
 8007414:	4640      	mov	r0, r8
 8007416:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800741a:	4798      	blx	r3
 800741c:	6923      	ldr	r3, [r4, #16]
 800741e:	3b01      	subs	r3, #1
 8007420:	6123      	str	r3, [r4, #16]
 8007422:	e7f0      	b.n	8007406 <_scanf_float+0x2ba>
 8007424:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007428:	463a      	mov	r2, r7
 800742a:	4640      	mov	r0, r8
 800742c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007430:	4798      	blx	r3
 8007432:	6923      	ldr	r3, [r4, #16]
 8007434:	3b01      	subs	r3, #1
 8007436:	6123      	str	r3, [r4, #16]
 8007438:	f10a 3aff 	add.w	sl, sl, #4294967295
 800743c:	fa5f fa8a 	uxtb.w	sl, sl
 8007440:	f1ba 0f02 	cmp.w	sl, #2
 8007444:	d1ee      	bne.n	8007424 <_scanf_float+0x2d8>
 8007446:	3d03      	subs	r5, #3
 8007448:	b2ed      	uxtb	r5, r5
 800744a:	1b76      	subs	r6, r6, r5
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	05da      	lsls	r2, r3, #23
 8007450:	d530      	bpl.n	80074b4 <_scanf_float+0x368>
 8007452:	055b      	lsls	r3, r3, #21
 8007454:	d511      	bpl.n	800747a <_scanf_float+0x32e>
 8007456:	9b01      	ldr	r3, [sp, #4]
 8007458:	429e      	cmp	r6, r3
 800745a:	f67f aebb 	bls.w	80071d4 <_scanf_float+0x88>
 800745e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007462:	463a      	mov	r2, r7
 8007464:	4640      	mov	r0, r8
 8007466:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800746a:	4798      	blx	r3
 800746c:	6923      	ldr	r3, [r4, #16]
 800746e:	3b01      	subs	r3, #1
 8007470:	6123      	str	r3, [r4, #16]
 8007472:	e7f0      	b.n	8007456 <_scanf_float+0x30a>
 8007474:	46aa      	mov	sl, r5
 8007476:	46b3      	mov	fp, r6
 8007478:	e7de      	b.n	8007438 <_scanf_float+0x2ec>
 800747a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800747e:	6923      	ldr	r3, [r4, #16]
 8007480:	2965      	cmp	r1, #101	@ 0x65
 8007482:	f103 33ff 	add.w	r3, r3, #4294967295
 8007486:	f106 35ff 	add.w	r5, r6, #4294967295
 800748a:	6123      	str	r3, [r4, #16]
 800748c:	d00c      	beq.n	80074a8 <_scanf_float+0x35c>
 800748e:	2945      	cmp	r1, #69	@ 0x45
 8007490:	d00a      	beq.n	80074a8 <_scanf_float+0x35c>
 8007492:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007496:	463a      	mov	r2, r7
 8007498:	4640      	mov	r0, r8
 800749a:	4798      	blx	r3
 800749c:	6923      	ldr	r3, [r4, #16]
 800749e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80074a2:	3b01      	subs	r3, #1
 80074a4:	1eb5      	subs	r5, r6, #2
 80074a6:	6123      	str	r3, [r4, #16]
 80074a8:	463a      	mov	r2, r7
 80074aa:	4640      	mov	r0, r8
 80074ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074b0:	4798      	blx	r3
 80074b2:	462e      	mov	r6, r5
 80074b4:	6822      	ldr	r2, [r4, #0]
 80074b6:	f012 0210 	ands.w	r2, r2, #16
 80074ba:	d001      	beq.n	80074c0 <_scanf_float+0x374>
 80074bc:	2000      	movs	r0, #0
 80074be:	e68a      	b.n	80071d6 <_scanf_float+0x8a>
 80074c0:	7032      	strb	r2, [r6, #0]
 80074c2:	6823      	ldr	r3, [r4, #0]
 80074c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80074c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074cc:	d11c      	bne.n	8007508 <_scanf_float+0x3bc>
 80074ce:	9b02      	ldr	r3, [sp, #8]
 80074d0:	454b      	cmp	r3, r9
 80074d2:	eba3 0209 	sub.w	r2, r3, r9
 80074d6:	d123      	bne.n	8007520 <_scanf_float+0x3d4>
 80074d8:	2200      	movs	r2, #0
 80074da:	4640      	mov	r0, r8
 80074dc:	9901      	ldr	r1, [sp, #4]
 80074de:	f002 fc4b 	bl	8009d78 <_strtod_r>
 80074e2:	9b03      	ldr	r3, [sp, #12]
 80074e4:	6825      	ldr	r5, [r4, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f015 0f02 	tst.w	r5, #2
 80074ec:	4606      	mov	r6, r0
 80074ee:	460f      	mov	r7, r1
 80074f0:	f103 0204 	add.w	r2, r3, #4
 80074f4:	d01f      	beq.n	8007536 <_scanf_float+0x3ea>
 80074f6:	9903      	ldr	r1, [sp, #12]
 80074f8:	600a      	str	r2, [r1, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	e9c3 6700 	strd	r6, r7, [r3]
 8007500:	68e3      	ldr	r3, [r4, #12]
 8007502:	3301      	adds	r3, #1
 8007504:	60e3      	str	r3, [r4, #12]
 8007506:	e7d9      	b.n	80074bc <_scanf_float+0x370>
 8007508:	9b04      	ldr	r3, [sp, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d0e4      	beq.n	80074d8 <_scanf_float+0x38c>
 800750e:	9905      	ldr	r1, [sp, #20]
 8007510:	230a      	movs	r3, #10
 8007512:	4640      	mov	r0, r8
 8007514:	3101      	adds	r1, #1
 8007516:	f002 fcaf 	bl	8009e78 <_strtol_r>
 800751a:	9b04      	ldr	r3, [sp, #16]
 800751c:	9e05      	ldr	r6, [sp, #20]
 800751e:	1ac2      	subs	r2, r0, r3
 8007520:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007524:	429e      	cmp	r6, r3
 8007526:	bf28      	it	cs
 8007528:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800752c:	4630      	mov	r0, r6
 800752e:	490d      	ldr	r1, [pc, #52]	@ (8007564 <_scanf_float+0x418>)
 8007530:	f000 f912 	bl	8007758 <siprintf>
 8007534:	e7d0      	b.n	80074d8 <_scanf_float+0x38c>
 8007536:	076d      	lsls	r5, r5, #29
 8007538:	d4dd      	bmi.n	80074f6 <_scanf_float+0x3aa>
 800753a:	9d03      	ldr	r5, [sp, #12]
 800753c:	602a      	str	r2, [r5, #0]
 800753e:	681d      	ldr	r5, [r3, #0]
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	f7f9 fa62 	bl	8000a0c <__aeabi_dcmpun>
 8007548:	b120      	cbz	r0, 8007554 <_scanf_float+0x408>
 800754a:	4807      	ldr	r0, [pc, #28]	@ (8007568 <_scanf_float+0x41c>)
 800754c:	f000 fa1e 	bl	800798c <nanf>
 8007550:	6028      	str	r0, [r5, #0]
 8007552:	e7d5      	b.n	8007500 <_scanf_float+0x3b4>
 8007554:	4630      	mov	r0, r6
 8007556:	4639      	mov	r1, r7
 8007558:	f7f9 fab6 	bl	8000ac8 <__aeabi_d2f>
 800755c:	e7f8      	b.n	8007550 <_scanf_float+0x404>
 800755e:	f04f 0900 	mov.w	r9, #0
 8007562:	e62d      	b.n	80071c0 <_scanf_float+0x74>
 8007564:	0800d8ce 	.word	0x0800d8ce
 8007568:	0800dc65 	.word	0x0800dc65

0800756c <std>:
 800756c:	2300      	movs	r3, #0
 800756e:	b510      	push	{r4, lr}
 8007570:	4604      	mov	r4, r0
 8007572:	e9c0 3300 	strd	r3, r3, [r0]
 8007576:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800757a:	6083      	str	r3, [r0, #8]
 800757c:	8181      	strh	r1, [r0, #12]
 800757e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007580:	81c2      	strh	r2, [r0, #14]
 8007582:	6183      	str	r3, [r0, #24]
 8007584:	4619      	mov	r1, r3
 8007586:	2208      	movs	r2, #8
 8007588:	305c      	adds	r0, #92	@ 0x5c
 800758a:	f000 f962 	bl	8007852 <memset>
 800758e:	4b0d      	ldr	r3, [pc, #52]	@ (80075c4 <std+0x58>)
 8007590:	6224      	str	r4, [r4, #32]
 8007592:	6263      	str	r3, [r4, #36]	@ 0x24
 8007594:	4b0c      	ldr	r3, [pc, #48]	@ (80075c8 <std+0x5c>)
 8007596:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007598:	4b0c      	ldr	r3, [pc, #48]	@ (80075cc <std+0x60>)
 800759a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800759c:	4b0c      	ldr	r3, [pc, #48]	@ (80075d0 <std+0x64>)
 800759e:	6323      	str	r3, [r4, #48]	@ 0x30
 80075a0:	4b0c      	ldr	r3, [pc, #48]	@ (80075d4 <std+0x68>)
 80075a2:	429c      	cmp	r4, r3
 80075a4:	d006      	beq.n	80075b4 <std+0x48>
 80075a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80075aa:	4294      	cmp	r4, r2
 80075ac:	d002      	beq.n	80075b4 <std+0x48>
 80075ae:	33d0      	adds	r3, #208	@ 0xd0
 80075b0:	429c      	cmp	r4, r3
 80075b2:	d105      	bne.n	80075c0 <std+0x54>
 80075b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80075b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075bc:	f000 b9c6 	b.w	800794c <__retarget_lock_init_recursive>
 80075c0:	bd10      	pop	{r4, pc}
 80075c2:	bf00      	nop
 80075c4:	08007799 	.word	0x08007799
 80075c8:	080077bb 	.word	0x080077bb
 80075cc:	080077f3 	.word	0x080077f3
 80075d0:	08007817 	.word	0x08007817
 80075d4:	2000077c 	.word	0x2000077c

080075d8 <stdio_exit_handler>:
 80075d8:	4a02      	ldr	r2, [pc, #8]	@ (80075e4 <stdio_exit_handler+0xc>)
 80075da:	4903      	ldr	r1, [pc, #12]	@ (80075e8 <stdio_exit_handler+0x10>)
 80075dc:	4803      	ldr	r0, [pc, #12]	@ (80075ec <stdio_exit_handler+0x14>)
 80075de:	f000 b869 	b.w	80076b4 <_fwalk_sglue>
 80075e2:	bf00      	nop
 80075e4:	20000014 	.word	0x20000014
 80075e8:	0800a22d 	.word	0x0800a22d
 80075ec:	20000024 	.word	0x20000024

080075f0 <cleanup_stdio>:
 80075f0:	6841      	ldr	r1, [r0, #4]
 80075f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007624 <cleanup_stdio+0x34>)
 80075f4:	b510      	push	{r4, lr}
 80075f6:	4299      	cmp	r1, r3
 80075f8:	4604      	mov	r4, r0
 80075fa:	d001      	beq.n	8007600 <cleanup_stdio+0x10>
 80075fc:	f002 fe16 	bl	800a22c <_fflush_r>
 8007600:	68a1      	ldr	r1, [r4, #8]
 8007602:	4b09      	ldr	r3, [pc, #36]	@ (8007628 <cleanup_stdio+0x38>)
 8007604:	4299      	cmp	r1, r3
 8007606:	d002      	beq.n	800760e <cleanup_stdio+0x1e>
 8007608:	4620      	mov	r0, r4
 800760a:	f002 fe0f 	bl	800a22c <_fflush_r>
 800760e:	68e1      	ldr	r1, [r4, #12]
 8007610:	4b06      	ldr	r3, [pc, #24]	@ (800762c <cleanup_stdio+0x3c>)
 8007612:	4299      	cmp	r1, r3
 8007614:	d004      	beq.n	8007620 <cleanup_stdio+0x30>
 8007616:	4620      	mov	r0, r4
 8007618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800761c:	f002 be06 	b.w	800a22c <_fflush_r>
 8007620:	bd10      	pop	{r4, pc}
 8007622:	bf00      	nop
 8007624:	2000077c 	.word	0x2000077c
 8007628:	200007e4 	.word	0x200007e4
 800762c:	2000084c 	.word	0x2000084c

08007630 <global_stdio_init.part.0>:
 8007630:	b510      	push	{r4, lr}
 8007632:	4b0b      	ldr	r3, [pc, #44]	@ (8007660 <global_stdio_init.part.0+0x30>)
 8007634:	4c0b      	ldr	r4, [pc, #44]	@ (8007664 <global_stdio_init.part.0+0x34>)
 8007636:	4a0c      	ldr	r2, [pc, #48]	@ (8007668 <global_stdio_init.part.0+0x38>)
 8007638:	4620      	mov	r0, r4
 800763a:	601a      	str	r2, [r3, #0]
 800763c:	2104      	movs	r1, #4
 800763e:	2200      	movs	r2, #0
 8007640:	f7ff ff94 	bl	800756c <std>
 8007644:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007648:	2201      	movs	r2, #1
 800764a:	2109      	movs	r1, #9
 800764c:	f7ff ff8e 	bl	800756c <std>
 8007650:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007654:	2202      	movs	r2, #2
 8007656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800765a:	2112      	movs	r1, #18
 800765c:	f7ff bf86 	b.w	800756c <std>
 8007660:	200008b4 	.word	0x200008b4
 8007664:	2000077c 	.word	0x2000077c
 8007668:	080075d9 	.word	0x080075d9

0800766c <__sfp_lock_acquire>:
 800766c:	4801      	ldr	r0, [pc, #4]	@ (8007674 <__sfp_lock_acquire+0x8>)
 800766e:	f000 b96e 	b.w	800794e <__retarget_lock_acquire_recursive>
 8007672:	bf00      	nop
 8007674:	200008bd 	.word	0x200008bd

08007678 <__sfp_lock_release>:
 8007678:	4801      	ldr	r0, [pc, #4]	@ (8007680 <__sfp_lock_release+0x8>)
 800767a:	f000 b969 	b.w	8007950 <__retarget_lock_release_recursive>
 800767e:	bf00      	nop
 8007680:	200008bd 	.word	0x200008bd

08007684 <__sinit>:
 8007684:	b510      	push	{r4, lr}
 8007686:	4604      	mov	r4, r0
 8007688:	f7ff fff0 	bl	800766c <__sfp_lock_acquire>
 800768c:	6a23      	ldr	r3, [r4, #32]
 800768e:	b11b      	cbz	r3, 8007698 <__sinit+0x14>
 8007690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007694:	f7ff bff0 	b.w	8007678 <__sfp_lock_release>
 8007698:	4b04      	ldr	r3, [pc, #16]	@ (80076ac <__sinit+0x28>)
 800769a:	6223      	str	r3, [r4, #32]
 800769c:	4b04      	ldr	r3, [pc, #16]	@ (80076b0 <__sinit+0x2c>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1f5      	bne.n	8007690 <__sinit+0xc>
 80076a4:	f7ff ffc4 	bl	8007630 <global_stdio_init.part.0>
 80076a8:	e7f2      	b.n	8007690 <__sinit+0xc>
 80076aa:	bf00      	nop
 80076ac:	080075f1 	.word	0x080075f1
 80076b0:	200008b4 	.word	0x200008b4

080076b4 <_fwalk_sglue>:
 80076b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076b8:	4607      	mov	r7, r0
 80076ba:	4688      	mov	r8, r1
 80076bc:	4614      	mov	r4, r2
 80076be:	2600      	movs	r6, #0
 80076c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076c4:	f1b9 0901 	subs.w	r9, r9, #1
 80076c8:	d505      	bpl.n	80076d6 <_fwalk_sglue+0x22>
 80076ca:	6824      	ldr	r4, [r4, #0]
 80076cc:	2c00      	cmp	r4, #0
 80076ce:	d1f7      	bne.n	80076c0 <_fwalk_sglue+0xc>
 80076d0:	4630      	mov	r0, r6
 80076d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076d6:	89ab      	ldrh	r3, [r5, #12]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d907      	bls.n	80076ec <_fwalk_sglue+0x38>
 80076dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076e0:	3301      	adds	r3, #1
 80076e2:	d003      	beq.n	80076ec <_fwalk_sglue+0x38>
 80076e4:	4629      	mov	r1, r5
 80076e6:	4638      	mov	r0, r7
 80076e8:	47c0      	blx	r8
 80076ea:	4306      	orrs	r6, r0
 80076ec:	3568      	adds	r5, #104	@ 0x68
 80076ee:	e7e9      	b.n	80076c4 <_fwalk_sglue+0x10>

080076f0 <sniprintf>:
 80076f0:	b40c      	push	{r2, r3}
 80076f2:	b530      	push	{r4, r5, lr}
 80076f4:	4b17      	ldr	r3, [pc, #92]	@ (8007754 <sniprintf+0x64>)
 80076f6:	1e0c      	subs	r4, r1, #0
 80076f8:	681d      	ldr	r5, [r3, #0]
 80076fa:	b09d      	sub	sp, #116	@ 0x74
 80076fc:	da08      	bge.n	8007710 <sniprintf+0x20>
 80076fe:	238b      	movs	r3, #139	@ 0x8b
 8007700:	f04f 30ff 	mov.w	r0, #4294967295
 8007704:	602b      	str	r3, [r5, #0]
 8007706:	b01d      	add	sp, #116	@ 0x74
 8007708:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800770c:	b002      	add	sp, #8
 800770e:	4770      	bx	lr
 8007710:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007714:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007718:	bf0c      	ite	eq
 800771a:	4623      	moveq	r3, r4
 800771c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007720:	9304      	str	r3, [sp, #16]
 8007722:	9307      	str	r3, [sp, #28]
 8007724:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007728:	9002      	str	r0, [sp, #8]
 800772a:	9006      	str	r0, [sp, #24]
 800772c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007730:	4628      	mov	r0, r5
 8007732:	ab21      	add	r3, sp, #132	@ 0x84
 8007734:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007736:	a902      	add	r1, sp, #8
 8007738:	9301      	str	r3, [sp, #4]
 800773a:	f002 fbfb 	bl	8009f34 <_svfiprintf_r>
 800773e:	1c43      	adds	r3, r0, #1
 8007740:	bfbc      	itt	lt
 8007742:	238b      	movlt	r3, #139	@ 0x8b
 8007744:	602b      	strlt	r3, [r5, #0]
 8007746:	2c00      	cmp	r4, #0
 8007748:	d0dd      	beq.n	8007706 <sniprintf+0x16>
 800774a:	2200      	movs	r2, #0
 800774c:	9b02      	ldr	r3, [sp, #8]
 800774e:	701a      	strb	r2, [r3, #0]
 8007750:	e7d9      	b.n	8007706 <sniprintf+0x16>
 8007752:	bf00      	nop
 8007754:	20000020 	.word	0x20000020

08007758 <siprintf>:
 8007758:	b40e      	push	{r1, r2, r3}
 800775a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800775e:	b500      	push	{lr}
 8007760:	b09c      	sub	sp, #112	@ 0x70
 8007762:	ab1d      	add	r3, sp, #116	@ 0x74
 8007764:	9002      	str	r0, [sp, #8]
 8007766:	9006      	str	r0, [sp, #24]
 8007768:	9107      	str	r1, [sp, #28]
 800776a:	9104      	str	r1, [sp, #16]
 800776c:	4808      	ldr	r0, [pc, #32]	@ (8007790 <siprintf+0x38>)
 800776e:	4909      	ldr	r1, [pc, #36]	@ (8007794 <siprintf+0x3c>)
 8007770:	f853 2b04 	ldr.w	r2, [r3], #4
 8007774:	9105      	str	r1, [sp, #20]
 8007776:	6800      	ldr	r0, [r0, #0]
 8007778:	a902      	add	r1, sp, #8
 800777a:	9301      	str	r3, [sp, #4]
 800777c:	f002 fbda 	bl	8009f34 <_svfiprintf_r>
 8007780:	2200      	movs	r2, #0
 8007782:	9b02      	ldr	r3, [sp, #8]
 8007784:	701a      	strb	r2, [r3, #0]
 8007786:	b01c      	add	sp, #112	@ 0x70
 8007788:	f85d eb04 	ldr.w	lr, [sp], #4
 800778c:	b003      	add	sp, #12
 800778e:	4770      	bx	lr
 8007790:	20000020 	.word	0x20000020
 8007794:	ffff0208 	.word	0xffff0208

08007798 <__sread>:
 8007798:	b510      	push	{r4, lr}
 800779a:	460c      	mov	r4, r1
 800779c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a0:	f000 f886 	bl	80078b0 <_read_r>
 80077a4:	2800      	cmp	r0, #0
 80077a6:	bfab      	itete	ge
 80077a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80077aa:	89a3      	ldrhlt	r3, [r4, #12]
 80077ac:	181b      	addge	r3, r3, r0
 80077ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80077b2:	bfac      	ite	ge
 80077b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80077b6:	81a3      	strhlt	r3, [r4, #12]
 80077b8:	bd10      	pop	{r4, pc}

080077ba <__swrite>:
 80077ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077be:	461f      	mov	r7, r3
 80077c0:	898b      	ldrh	r3, [r1, #12]
 80077c2:	4605      	mov	r5, r0
 80077c4:	05db      	lsls	r3, r3, #23
 80077c6:	460c      	mov	r4, r1
 80077c8:	4616      	mov	r6, r2
 80077ca:	d505      	bpl.n	80077d8 <__swrite+0x1e>
 80077cc:	2302      	movs	r3, #2
 80077ce:	2200      	movs	r2, #0
 80077d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077d4:	f000 f85a 	bl	800788c <_lseek_r>
 80077d8:	89a3      	ldrh	r3, [r4, #12]
 80077da:	4632      	mov	r2, r6
 80077dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80077e0:	81a3      	strh	r3, [r4, #12]
 80077e2:	4628      	mov	r0, r5
 80077e4:	463b      	mov	r3, r7
 80077e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077ee:	f000 b871 	b.w	80078d4 <_write_r>

080077f2 <__sseek>:
 80077f2:	b510      	push	{r4, lr}
 80077f4:	460c      	mov	r4, r1
 80077f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077fa:	f000 f847 	bl	800788c <_lseek_r>
 80077fe:	1c43      	adds	r3, r0, #1
 8007800:	89a3      	ldrh	r3, [r4, #12]
 8007802:	bf15      	itete	ne
 8007804:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007806:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800780a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800780e:	81a3      	strheq	r3, [r4, #12]
 8007810:	bf18      	it	ne
 8007812:	81a3      	strhne	r3, [r4, #12]
 8007814:	bd10      	pop	{r4, pc}

08007816 <__sclose>:
 8007816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800781a:	f000 b827 	b.w	800786c <_close_r>

0800781e <memmove>:
 800781e:	4288      	cmp	r0, r1
 8007820:	b510      	push	{r4, lr}
 8007822:	eb01 0402 	add.w	r4, r1, r2
 8007826:	d902      	bls.n	800782e <memmove+0x10>
 8007828:	4284      	cmp	r4, r0
 800782a:	4623      	mov	r3, r4
 800782c:	d807      	bhi.n	800783e <memmove+0x20>
 800782e:	1e43      	subs	r3, r0, #1
 8007830:	42a1      	cmp	r1, r4
 8007832:	d008      	beq.n	8007846 <memmove+0x28>
 8007834:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007838:	f803 2f01 	strb.w	r2, [r3, #1]!
 800783c:	e7f8      	b.n	8007830 <memmove+0x12>
 800783e:	4601      	mov	r1, r0
 8007840:	4402      	add	r2, r0
 8007842:	428a      	cmp	r2, r1
 8007844:	d100      	bne.n	8007848 <memmove+0x2a>
 8007846:	bd10      	pop	{r4, pc}
 8007848:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800784c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007850:	e7f7      	b.n	8007842 <memmove+0x24>

08007852 <memset>:
 8007852:	4603      	mov	r3, r0
 8007854:	4402      	add	r2, r0
 8007856:	4293      	cmp	r3, r2
 8007858:	d100      	bne.n	800785c <memset+0xa>
 800785a:	4770      	bx	lr
 800785c:	f803 1b01 	strb.w	r1, [r3], #1
 8007860:	e7f9      	b.n	8007856 <memset+0x4>
	...

08007864 <_localeconv_r>:
 8007864:	4800      	ldr	r0, [pc, #0]	@ (8007868 <_localeconv_r+0x4>)
 8007866:	4770      	bx	lr
 8007868:	20000160 	.word	0x20000160

0800786c <_close_r>:
 800786c:	b538      	push	{r3, r4, r5, lr}
 800786e:	2300      	movs	r3, #0
 8007870:	4d05      	ldr	r5, [pc, #20]	@ (8007888 <_close_r+0x1c>)
 8007872:	4604      	mov	r4, r0
 8007874:	4608      	mov	r0, r1
 8007876:	602b      	str	r3, [r5, #0]
 8007878:	f7fb fd61 	bl	800333e <_close>
 800787c:	1c43      	adds	r3, r0, #1
 800787e:	d102      	bne.n	8007886 <_close_r+0x1a>
 8007880:	682b      	ldr	r3, [r5, #0]
 8007882:	b103      	cbz	r3, 8007886 <_close_r+0x1a>
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	bd38      	pop	{r3, r4, r5, pc}
 8007888:	200008b8 	.word	0x200008b8

0800788c <_lseek_r>:
 800788c:	b538      	push	{r3, r4, r5, lr}
 800788e:	4604      	mov	r4, r0
 8007890:	4608      	mov	r0, r1
 8007892:	4611      	mov	r1, r2
 8007894:	2200      	movs	r2, #0
 8007896:	4d05      	ldr	r5, [pc, #20]	@ (80078ac <_lseek_r+0x20>)
 8007898:	602a      	str	r2, [r5, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	f7fb fd73 	bl	8003386 <_lseek>
 80078a0:	1c43      	adds	r3, r0, #1
 80078a2:	d102      	bne.n	80078aa <_lseek_r+0x1e>
 80078a4:	682b      	ldr	r3, [r5, #0]
 80078a6:	b103      	cbz	r3, 80078aa <_lseek_r+0x1e>
 80078a8:	6023      	str	r3, [r4, #0]
 80078aa:	bd38      	pop	{r3, r4, r5, pc}
 80078ac:	200008b8 	.word	0x200008b8

080078b0 <_read_r>:
 80078b0:	b538      	push	{r3, r4, r5, lr}
 80078b2:	4604      	mov	r4, r0
 80078b4:	4608      	mov	r0, r1
 80078b6:	4611      	mov	r1, r2
 80078b8:	2200      	movs	r2, #0
 80078ba:	4d05      	ldr	r5, [pc, #20]	@ (80078d0 <_read_r+0x20>)
 80078bc:	602a      	str	r2, [r5, #0]
 80078be:	461a      	mov	r2, r3
 80078c0:	f7fb fd04 	bl	80032cc <_read>
 80078c4:	1c43      	adds	r3, r0, #1
 80078c6:	d102      	bne.n	80078ce <_read_r+0x1e>
 80078c8:	682b      	ldr	r3, [r5, #0]
 80078ca:	b103      	cbz	r3, 80078ce <_read_r+0x1e>
 80078cc:	6023      	str	r3, [r4, #0]
 80078ce:	bd38      	pop	{r3, r4, r5, pc}
 80078d0:	200008b8 	.word	0x200008b8

080078d4 <_write_r>:
 80078d4:	b538      	push	{r3, r4, r5, lr}
 80078d6:	4604      	mov	r4, r0
 80078d8:	4608      	mov	r0, r1
 80078da:	4611      	mov	r1, r2
 80078dc:	2200      	movs	r2, #0
 80078de:	4d05      	ldr	r5, [pc, #20]	@ (80078f4 <_write_r+0x20>)
 80078e0:	602a      	str	r2, [r5, #0]
 80078e2:	461a      	mov	r2, r3
 80078e4:	f7fb fd0f 	bl	8003306 <_write>
 80078e8:	1c43      	adds	r3, r0, #1
 80078ea:	d102      	bne.n	80078f2 <_write_r+0x1e>
 80078ec:	682b      	ldr	r3, [r5, #0]
 80078ee:	b103      	cbz	r3, 80078f2 <_write_r+0x1e>
 80078f0:	6023      	str	r3, [r4, #0]
 80078f2:	bd38      	pop	{r3, r4, r5, pc}
 80078f4:	200008b8 	.word	0x200008b8

080078f8 <__errno>:
 80078f8:	4b01      	ldr	r3, [pc, #4]	@ (8007900 <__errno+0x8>)
 80078fa:	6818      	ldr	r0, [r3, #0]
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	20000020 	.word	0x20000020

08007904 <__libc_init_array>:
 8007904:	b570      	push	{r4, r5, r6, lr}
 8007906:	2600      	movs	r6, #0
 8007908:	4d0c      	ldr	r5, [pc, #48]	@ (800793c <__libc_init_array+0x38>)
 800790a:	4c0d      	ldr	r4, [pc, #52]	@ (8007940 <__libc_init_array+0x3c>)
 800790c:	1b64      	subs	r4, r4, r5
 800790e:	10a4      	asrs	r4, r4, #2
 8007910:	42a6      	cmp	r6, r4
 8007912:	d109      	bne.n	8007928 <__libc_init_array+0x24>
 8007914:	f003 fb4e 	bl	800afb4 <_init>
 8007918:	2600      	movs	r6, #0
 800791a:	4d0a      	ldr	r5, [pc, #40]	@ (8007944 <__libc_init_array+0x40>)
 800791c:	4c0a      	ldr	r4, [pc, #40]	@ (8007948 <__libc_init_array+0x44>)
 800791e:	1b64      	subs	r4, r4, r5
 8007920:	10a4      	asrs	r4, r4, #2
 8007922:	42a6      	cmp	r6, r4
 8007924:	d105      	bne.n	8007932 <__libc_init_array+0x2e>
 8007926:	bd70      	pop	{r4, r5, r6, pc}
 8007928:	f855 3b04 	ldr.w	r3, [r5], #4
 800792c:	4798      	blx	r3
 800792e:	3601      	adds	r6, #1
 8007930:	e7ee      	b.n	8007910 <__libc_init_array+0xc>
 8007932:	f855 3b04 	ldr.w	r3, [r5], #4
 8007936:	4798      	blx	r3
 8007938:	3601      	adds	r6, #1
 800793a:	e7f2      	b.n	8007922 <__libc_init_array+0x1e>
 800793c:	0800dcd0 	.word	0x0800dcd0
 8007940:	0800dcd0 	.word	0x0800dcd0
 8007944:	0800dcd0 	.word	0x0800dcd0
 8007948:	0800dcd4 	.word	0x0800dcd4

0800794c <__retarget_lock_init_recursive>:
 800794c:	4770      	bx	lr

0800794e <__retarget_lock_acquire_recursive>:
 800794e:	4770      	bx	lr

08007950 <__retarget_lock_release_recursive>:
 8007950:	4770      	bx	lr

08007952 <memchr>:
 8007952:	4603      	mov	r3, r0
 8007954:	b510      	push	{r4, lr}
 8007956:	b2c9      	uxtb	r1, r1
 8007958:	4402      	add	r2, r0
 800795a:	4293      	cmp	r3, r2
 800795c:	4618      	mov	r0, r3
 800795e:	d101      	bne.n	8007964 <memchr+0x12>
 8007960:	2000      	movs	r0, #0
 8007962:	e003      	b.n	800796c <memchr+0x1a>
 8007964:	7804      	ldrb	r4, [r0, #0]
 8007966:	3301      	adds	r3, #1
 8007968:	428c      	cmp	r4, r1
 800796a:	d1f6      	bne.n	800795a <memchr+0x8>
 800796c:	bd10      	pop	{r4, pc}

0800796e <memcpy>:
 800796e:	440a      	add	r2, r1
 8007970:	4291      	cmp	r1, r2
 8007972:	f100 33ff 	add.w	r3, r0, #4294967295
 8007976:	d100      	bne.n	800797a <memcpy+0xc>
 8007978:	4770      	bx	lr
 800797a:	b510      	push	{r4, lr}
 800797c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007980:	4291      	cmp	r1, r2
 8007982:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007986:	d1f9      	bne.n	800797c <memcpy+0xe>
 8007988:	bd10      	pop	{r4, pc}
	...

0800798c <nanf>:
 800798c:	4800      	ldr	r0, [pc, #0]	@ (8007990 <nanf+0x4>)
 800798e:	4770      	bx	lr
 8007990:	7fc00000 	.word	0x7fc00000

08007994 <quorem>:
 8007994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007998:	6903      	ldr	r3, [r0, #16]
 800799a:	690c      	ldr	r4, [r1, #16]
 800799c:	4607      	mov	r7, r0
 800799e:	42a3      	cmp	r3, r4
 80079a0:	db7e      	blt.n	8007aa0 <quorem+0x10c>
 80079a2:	3c01      	subs	r4, #1
 80079a4:	00a3      	lsls	r3, r4, #2
 80079a6:	f100 0514 	add.w	r5, r0, #20
 80079aa:	f101 0814 	add.w	r8, r1, #20
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079b4:	9301      	str	r3, [sp, #4]
 80079b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079be:	3301      	adds	r3, #1
 80079c0:	429a      	cmp	r2, r3
 80079c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80079c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079ca:	d32e      	bcc.n	8007a2a <quorem+0x96>
 80079cc:	f04f 0a00 	mov.w	sl, #0
 80079d0:	46c4      	mov	ip, r8
 80079d2:	46ae      	mov	lr, r5
 80079d4:	46d3      	mov	fp, sl
 80079d6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80079da:	b298      	uxth	r0, r3
 80079dc:	fb06 a000 	mla	r0, r6, r0, sl
 80079e0:	0c1b      	lsrs	r3, r3, #16
 80079e2:	0c02      	lsrs	r2, r0, #16
 80079e4:	fb06 2303 	mla	r3, r6, r3, r2
 80079e8:	f8de 2000 	ldr.w	r2, [lr]
 80079ec:	b280      	uxth	r0, r0
 80079ee:	b292      	uxth	r2, r2
 80079f0:	1a12      	subs	r2, r2, r0
 80079f2:	445a      	add	r2, fp
 80079f4:	f8de 0000 	ldr.w	r0, [lr]
 80079f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007a02:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007a06:	b292      	uxth	r2, r2
 8007a08:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007a0c:	45e1      	cmp	r9, ip
 8007a0e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007a12:	f84e 2b04 	str.w	r2, [lr], #4
 8007a16:	d2de      	bcs.n	80079d6 <quorem+0x42>
 8007a18:	9b00      	ldr	r3, [sp, #0]
 8007a1a:	58eb      	ldr	r3, [r5, r3]
 8007a1c:	b92b      	cbnz	r3, 8007a2a <quorem+0x96>
 8007a1e:	9b01      	ldr	r3, [sp, #4]
 8007a20:	3b04      	subs	r3, #4
 8007a22:	429d      	cmp	r5, r3
 8007a24:	461a      	mov	r2, r3
 8007a26:	d32f      	bcc.n	8007a88 <quorem+0xf4>
 8007a28:	613c      	str	r4, [r7, #16]
 8007a2a:	4638      	mov	r0, r7
 8007a2c:	f001 f9c4 	bl	8008db8 <__mcmp>
 8007a30:	2800      	cmp	r0, #0
 8007a32:	db25      	blt.n	8007a80 <quorem+0xec>
 8007a34:	4629      	mov	r1, r5
 8007a36:	2000      	movs	r0, #0
 8007a38:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a3c:	f8d1 c000 	ldr.w	ip, [r1]
 8007a40:	fa1f fe82 	uxth.w	lr, r2
 8007a44:	fa1f f38c 	uxth.w	r3, ip
 8007a48:	eba3 030e 	sub.w	r3, r3, lr
 8007a4c:	4403      	add	r3, r0
 8007a4e:	0c12      	lsrs	r2, r2, #16
 8007a50:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007a54:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a5e:	45c1      	cmp	r9, r8
 8007a60:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a64:	f841 3b04 	str.w	r3, [r1], #4
 8007a68:	d2e6      	bcs.n	8007a38 <quorem+0xa4>
 8007a6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a72:	b922      	cbnz	r2, 8007a7e <quorem+0xea>
 8007a74:	3b04      	subs	r3, #4
 8007a76:	429d      	cmp	r5, r3
 8007a78:	461a      	mov	r2, r3
 8007a7a:	d30b      	bcc.n	8007a94 <quorem+0x100>
 8007a7c:	613c      	str	r4, [r7, #16]
 8007a7e:	3601      	adds	r6, #1
 8007a80:	4630      	mov	r0, r6
 8007a82:	b003      	add	sp, #12
 8007a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a88:	6812      	ldr	r2, [r2, #0]
 8007a8a:	3b04      	subs	r3, #4
 8007a8c:	2a00      	cmp	r2, #0
 8007a8e:	d1cb      	bne.n	8007a28 <quorem+0x94>
 8007a90:	3c01      	subs	r4, #1
 8007a92:	e7c6      	b.n	8007a22 <quorem+0x8e>
 8007a94:	6812      	ldr	r2, [r2, #0]
 8007a96:	3b04      	subs	r3, #4
 8007a98:	2a00      	cmp	r2, #0
 8007a9a:	d1ef      	bne.n	8007a7c <quorem+0xe8>
 8007a9c:	3c01      	subs	r4, #1
 8007a9e:	e7ea      	b.n	8007a76 <quorem+0xe2>
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	e7ee      	b.n	8007a82 <quorem+0xee>
 8007aa4:	0000      	movs	r0, r0
	...

08007aa8 <_dtoa_r>:
 8007aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aac:	4614      	mov	r4, r2
 8007aae:	461d      	mov	r5, r3
 8007ab0:	69c7      	ldr	r7, [r0, #28]
 8007ab2:	b097      	sub	sp, #92	@ 0x5c
 8007ab4:	4683      	mov	fp, r0
 8007ab6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007aba:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007abc:	b97f      	cbnz	r7, 8007ade <_dtoa_r+0x36>
 8007abe:	2010      	movs	r0, #16
 8007ac0:	f000 fe02 	bl	80086c8 <malloc>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	f8cb 001c 	str.w	r0, [fp, #28]
 8007aca:	b920      	cbnz	r0, 8007ad6 <_dtoa_r+0x2e>
 8007acc:	21ef      	movs	r1, #239	@ 0xef
 8007ace:	4ba8      	ldr	r3, [pc, #672]	@ (8007d70 <_dtoa_r+0x2c8>)
 8007ad0:	48a8      	ldr	r0, [pc, #672]	@ (8007d74 <_dtoa_r+0x2cc>)
 8007ad2:	f002 fbfb 	bl	800a2cc <__assert_func>
 8007ad6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007ada:	6007      	str	r7, [r0, #0]
 8007adc:	60c7      	str	r7, [r0, #12]
 8007ade:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ae2:	6819      	ldr	r1, [r3, #0]
 8007ae4:	b159      	cbz	r1, 8007afe <_dtoa_r+0x56>
 8007ae6:	685a      	ldr	r2, [r3, #4]
 8007ae8:	2301      	movs	r3, #1
 8007aea:	4093      	lsls	r3, r2
 8007aec:	604a      	str	r2, [r1, #4]
 8007aee:	608b      	str	r3, [r1, #8]
 8007af0:	4658      	mov	r0, fp
 8007af2:	f000 fedf 	bl	80088b4 <_Bfree>
 8007af6:	2200      	movs	r2, #0
 8007af8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007afc:	601a      	str	r2, [r3, #0]
 8007afe:	1e2b      	subs	r3, r5, #0
 8007b00:	bfaf      	iteee	ge
 8007b02:	2300      	movge	r3, #0
 8007b04:	2201      	movlt	r2, #1
 8007b06:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007b0a:	9303      	strlt	r3, [sp, #12]
 8007b0c:	bfa8      	it	ge
 8007b0e:	6033      	strge	r3, [r6, #0]
 8007b10:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007b14:	4b98      	ldr	r3, [pc, #608]	@ (8007d78 <_dtoa_r+0x2d0>)
 8007b16:	bfb8      	it	lt
 8007b18:	6032      	strlt	r2, [r6, #0]
 8007b1a:	ea33 0308 	bics.w	r3, r3, r8
 8007b1e:	d112      	bne.n	8007b46 <_dtoa_r+0x9e>
 8007b20:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007b24:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007b26:	6013      	str	r3, [r2, #0]
 8007b28:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007b2c:	4323      	orrs	r3, r4
 8007b2e:	f000 8550 	beq.w	80085d2 <_dtoa_r+0xb2a>
 8007b32:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007b34:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007d7c <_dtoa_r+0x2d4>
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f000 8552 	beq.w	80085e2 <_dtoa_r+0xb3a>
 8007b3e:	f10a 0303 	add.w	r3, sl, #3
 8007b42:	f000 bd4c 	b.w	80085de <_dtoa_r+0xb36>
 8007b46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b4a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007b4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b52:	2200      	movs	r2, #0
 8007b54:	2300      	movs	r3, #0
 8007b56:	f7f8 ff27 	bl	80009a8 <__aeabi_dcmpeq>
 8007b5a:	4607      	mov	r7, r0
 8007b5c:	b158      	cbz	r0, 8007b76 <_dtoa_r+0xce>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007b62:	6013      	str	r3, [r2, #0]
 8007b64:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007b66:	b113      	cbz	r3, 8007b6e <_dtoa_r+0xc6>
 8007b68:	4b85      	ldr	r3, [pc, #532]	@ (8007d80 <_dtoa_r+0x2d8>)
 8007b6a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007b6c:	6013      	str	r3, [r2, #0]
 8007b6e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007d84 <_dtoa_r+0x2dc>
 8007b72:	f000 bd36 	b.w	80085e2 <_dtoa_r+0xb3a>
 8007b76:	ab14      	add	r3, sp, #80	@ 0x50
 8007b78:	9301      	str	r3, [sp, #4]
 8007b7a:	ab15      	add	r3, sp, #84	@ 0x54
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	4658      	mov	r0, fp
 8007b80:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007b84:	f001 fa30 	bl	8008fe8 <__d2b>
 8007b88:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007b8c:	4681      	mov	r9, r0
 8007b8e:	2e00      	cmp	r6, #0
 8007b90:	d077      	beq.n	8007c82 <_dtoa_r+0x1da>
 8007b92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b98:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ba0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007ba4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007ba8:	9712      	str	r7, [sp, #72]	@ 0x48
 8007baa:	4619      	mov	r1, r3
 8007bac:	2200      	movs	r2, #0
 8007bae:	4b76      	ldr	r3, [pc, #472]	@ (8007d88 <_dtoa_r+0x2e0>)
 8007bb0:	f7f8 fada 	bl	8000168 <__aeabi_dsub>
 8007bb4:	a368      	add	r3, pc, #416	@ (adr r3, 8007d58 <_dtoa_r+0x2b0>)
 8007bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bba:	f7f8 fc8d 	bl	80004d8 <__aeabi_dmul>
 8007bbe:	a368      	add	r3, pc, #416	@ (adr r3, 8007d60 <_dtoa_r+0x2b8>)
 8007bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc4:	f7f8 fad2 	bl	800016c <__adddf3>
 8007bc8:	4604      	mov	r4, r0
 8007bca:	4630      	mov	r0, r6
 8007bcc:	460d      	mov	r5, r1
 8007bce:	f7f8 fc19 	bl	8000404 <__aeabi_i2d>
 8007bd2:	a365      	add	r3, pc, #404	@ (adr r3, 8007d68 <_dtoa_r+0x2c0>)
 8007bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd8:	f7f8 fc7e 	bl	80004d8 <__aeabi_dmul>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	4620      	mov	r0, r4
 8007be2:	4629      	mov	r1, r5
 8007be4:	f7f8 fac2 	bl	800016c <__adddf3>
 8007be8:	4604      	mov	r4, r0
 8007bea:	460d      	mov	r5, r1
 8007bec:	f7f8 ff24 	bl	8000a38 <__aeabi_d2iz>
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	4607      	mov	r7, r0
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	4629      	mov	r1, r5
 8007bfa:	f7f8 fedf 	bl	80009bc <__aeabi_dcmplt>
 8007bfe:	b140      	cbz	r0, 8007c12 <_dtoa_r+0x16a>
 8007c00:	4638      	mov	r0, r7
 8007c02:	f7f8 fbff 	bl	8000404 <__aeabi_i2d>
 8007c06:	4622      	mov	r2, r4
 8007c08:	462b      	mov	r3, r5
 8007c0a:	f7f8 fecd 	bl	80009a8 <__aeabi_dcmpeq>
 8007c0e:	b900      	cbnz	r0, 8007c12 <_dtoa_r+0x16a>
 8007c10:	3f01      	subs	r7, #1
 8007c12:	2f16      	cmp	r7, #22
 8007c14:	d853      	bhi.n	8007cbe <_dtoa_r+0x216>
 8007c16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c1a:	4b5c      	ldr	r3, [pc, #368]	@ (8007d8c <_dtoa_r+0x2e4>)
 8007c1c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c24:	f7f8 feca 	bl	80009bc <__aeabi_dcmplt>
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	d04a      	beq.n	8007cc2 <_dtoa_r+0x21a>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	3f01      	subs	r7, #1
 8007c30:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007c32:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007c34:	1b9b      	subs	r3, r3, r6
 8007c36:	1e5a      	subs	r2, r3, #1
 8007c38:	bf46      	itte	mi
 8007c3a:	f1c3 0801 	rsbmi	r8, r3, #1
 8007c3e:	2300      	movmi	r3, #0
 8007c40:	f04f 0800 	movpl.w	r8, #0
 8007c44:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c46:	bf48      	it	mi
 8007c48:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007c4a:	2f00      	cmp	r7, #0
 8007c4c:	db3b      	blt.n	8007cc6 <_dtoa_r+0x21e>
 8007c4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c50:	970e      	str	r7, [sp, #56]	@ 0x38
 8007c52:	443b      	add	r3, r7
 8007c54:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c56:	2300      	movs	r3, #0
 8007c58:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c5a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c5c:	2b09      	cmp	r3, #9
 8007c5e:	d866      	bhi.n	8007d2e <_dtoa_r+0x286>
 8007c60:	2b05      	cmp	r3, #5
 8007c62:	bfc4      	itt	gt
 8007c64:	3b04      	subgt	r3, #4
 8007c66:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007c68:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c6a:	bfc8      	it	gt
 8007c6c:	2400      	movgt	r4, #0
 8007c6e:	f1a3 0302 	sub.w	r3, r3, #2
 8007c72:	bfd8      	it	le
 8007c74:	2401      	movle	r4, #1
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	d864      	bhi.n	8007d44 <_dtoa_r+0x29c>
 8007c7a:	e8df f003 	tbb	[pc, r3]
 8007c7e:	382b      	.short	0x382b
 8007c80:	5636      	.short	0x5636
 8007c82:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007c86:	441e      	add	r6, r3
 8007c88:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007c8c:	2b20      	cmp	r3, #32
 8007c8e:	bfc1      	itttt	gt
 8007c90:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007c94:	fa08 f803 	lslgt.w	r8, r8, r3
 8007c98:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007c9c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007ca0:	bfd6      	itet	le
 8007ca2:	f1c3 0320 	rsble	r3, r3, #32
 8007ca6:	ea48 0003 	orrgt.w	r0, r8, r3
 8007caa:	fa04 f003 	lslle.w	r0, r4, r3
 8007cae:	f7f8 fb99 	bl	80003e4 <__aeabi_ui2d>
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007cb8:	3e01      	subs	r6, #1
 8007cba:	9212      	str	r2, [sp, #72]	@ 0x48
 8007cbc:	e775      	b.n	8007baa <_dtoa_r+0x102>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e7b6      	b.n	8007c30 <_dtoa_r+0x188>
 8007cc2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007cc4:	e7b5      	b.n	8007c32 <_dtoa_r+0x18a>
 8007cc6:	427b      	negs	r3, r7
 8007cc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cca:	2300      	movs	r3, #0
 8007ccc:	eba8 0807 	sub.w	r8, r8, r7
 8007cd0:	930e      	str	r3, [sp, #56]	@ 0x38
 8007cd2:	e7c2      	b.n	8007c5a <_dtoa_r+0x1b2>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cd8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	dc35      	bgt.n	8007d4a <_dtoa_r+0x2a2>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007ce6:	9221      	str	r2, [sp, #132]	@ 0x84
 8007ce8:	e00b      	b.n	8007d02 <_dtoa_r+0x25a>
 8007cea:	2301      	movs	r3, #1
 8007cec:	e7f3      	b.n	8007cd6 <_dtoa_r+0x22e>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cf2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007cf4:	18fb      	adds	r3, r7, r3
 8007cf6:	9308      	str	r3, [sp, #32]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	9307      	str	r3, [sp, #28]
 8007cfe:	bfb8      	it	lt
 8007d00:	2301      	movlt	r3, #1
 8007d02:	2100      	movs	r1, #0
 8007d04:	2204      	movs	r2, #4
 8007d06:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007d0a:	f102 0514 	add.w	r5, r2, #20
 8007d0e:	429d      	cmp	r5, r3
 8007d10:	d91f      	bls.n	8007d52 <_dtoa_r+0x2aa>
 8007d12:	6041      	str	r1, [r0, #4]
 8007d14:	4658      	mov	r0, fp
 8007d16:	f000 fd8d 	bl	8008834 <_Balloc>
 8007d1a:	4682      	mov	sl, r0
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	d139      	bne.n	8007d94 <_dtoa_r+0x2ec>
 8007d20:	4602      	mov	r2, r0
 8007d22:	f240 11af 	movw	r1, #431	@ 0x1af
 8007d26:	4b1a      	ldr	r3, [pc, #104]	@ (8007d90 <_dtoa_r+0x2e8>)
 8007d28:	e6d2      	b.n	8007ad0 <_dtoa_r+0x28>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e7e0      	b.n	8007cf0 <_dtoa_r+0x248>
 8007d2e:	2401      	movs	r4, #1
 8007d30:	2300      	movs	r3, #0
 8007d32:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007d34:	9320      	str	r3, [sp, #128]	@ 0x80
 8007d36:	f04f 33ff 	mov.w	r3, #4294967295
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007d40:	2312      	movs	r3, #18
 8007d42:	e7d0      	b.n	8007ce6 <_dtoa_r+0x23e>
 8007d44:	2301      	movs	r3, #1
 8007d46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d48:	e7f5      	b.n	8007d36 <_dtoa_r+0x28e>
 8007d4a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d4c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007d50:	e7d7      	b.n	8007d02 <_dtoa_r+0x25a>
 8007d52:	3101      	adds	r1, #1
 8007d54:	0052      	lsls	r2, r2, #1
 8007d56:	e7d8      	b.n	8007d0a <_dtoa_r+0x262>
 8007d58:	636f4361 	.word	0x636f4361
 8007d5c:	3fd287a7 	.word	0x3fd287a7
 8007d60:	8b60c8b3 	.word	0x8b60c8b3
 8007d64:	3fc68a28 	.word	0x3fc68a28
 8007d68:	509f79fb 	.word	0x509f79fb
 8007d6c:	3fd34413 	.word	0x3fd34413
 8007d70:	0800d8e0 	.word	0x0800d8e0
 8007d74:	0800d8f7 	.word	0x0800d8f7
 8007d78:	7ff00000 	.word	0x7ff00000
 8007d7c:	0800d8dc 	.word	0x0800d8dc
 8007d80:	0800d8ab 	.word	0x0800d8ab
 8007d84:	0800d8aa 	.word	0x0800d8aa
 8007d88:	3ff80000 	.word	0x3ff80000
 8007d8c:	0800d9f0 	.word	0x0800d9f0
 8007d90:	0800d94f 	.word	0x0800d94f
 8007d94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d98:	6018      	str	r0, [r3, #0]
 8007d9a:	9b07      	ldr	r3, [sp, #28]
 8007d9c:	2b0e      	cmp	r3, #14
 8007d9e:	f200 80a4 	bhi.w	8007eea <_dtoa_r+0x442>
 8007da2:	2c00      	cmp	r4, #0
 8007da4:	f000 80a1 	beq.w	8007eea <_dtoa_r+0x442>
 8007da8:	2f00      	cmp	r7, #0
 8007daa:	dd33      	ble.n	8007e14 <_dtoa_r+0x36c>
 8007dac:	4b86      	ldr	r3, [pc, #536]	@ (8007fc8 <_dtoa_r+0x520>)
 8007dae:	f007 020f 	and.w	r2, r7, #15
 8007db2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007db6:	05f8      	lsls	r0, r7, #23
 8007db8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007dbc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007dc0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007dc4:	d516      	bpl.n	8007df4 <_dtoa_r+0x34c>
 8007dc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007dca:	4b80      	ldr	r3, [pc, #512]	@ (8007fcc <_dtoa_r+0x524>)
 8007dcc:	2603      	movs	r6, #3
 8007dce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007dd2:	f7f8 fcab 	bl	800072c <__aeabi_ddiv>
 8007dd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dda:	f004 040f 	and.w	r4, r4, #15
 8007dde:	4d7b      	ldr	r5, [pc, #492]	@ (8007fcc <_dtoa_r+0x524>)
 8007de0:	b954      	cbnz	r4, 8007df8 <_dtoa_r+0x350>
 8007de2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007de6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dea:	f7f8 fc9f 	bl	800072c <__aeabi_ddiv>
 8007dee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007df2:	e028      	b.n	8007e46 <_dtoa_r+0x39e>
 8007df4:	2602      	movs	r6, #2
 8007df6:	e7f2      	b.n	8007dde <_dtoa_r+0x336>
 8007df8:	07e1      	lsls	r1, r4, #31
 8007dfa:	d508      	bpl.n	8007e0e <_dtoa_r+0x366>
 8007dfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e04:	f7f8 fb68 	bl	80004d8 <__aeabi_dmul>
 8007e08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e0c:	3601      	adds	r6, #1
 8007e0e:	1064      	asrs	r4, r4, #1
 8007e10:	3508      	adds	r5, #8
 8007e12:	e7e5      	b.n	8007de0 <_dtoa_r+0x338>
 8007e14:	f000 80d2 	beq.w	8007fbc <_dtoa_r+0x514>
 8007e18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e1c:	427c      	negs	r4, r7
 8007e1e:	4b6a      	ldr	r3, [pc, #424]	@ (8007fc8 <_dtoa_r+0x520>)
 8007e20:	f004 020f 	and.w	r2, r4, #15
 8007e24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2c:	f7f8 fb54 	bl	80004d8 <__aeabi_dmul>
 8007e30:	2602      	movs	r6, #2
 8007e32:	2300      	movs	r3, #0
 8007e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e38:	4d64      	ldr	r5, [pc, #400]	@ (8007fcc <_dtoa_r+0x524>)
 8007e3a:	1124      	asrs	r4, r4, #4
 8007e3c:	2c00      	cmp	r4, #0
 8007e3e:	f040 80b2 	bne.w	8007fa6 <_dtoa_r+0x4fe>
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1d3      	bne.n	8007dee <_dtoa_r+0x346>
 8007e46:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007e4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f000 80b7 	beq.w	8007fc0 <_dtoa_r+0x518>
 8007e52:	2200      	movs	r2, #0
 8007e54:	4620      	mov	r0, r4
 8007e56:	4629      	mov	r1, r5
 8007e58:	4b5d      	ldr	r3, [pc, #372]	@ (8007fd0 <_dtoa_r+0x528>)
 8007e5a:	f7f8 fdaf 	bl	80009bc <__aeabi_dcmplt>
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	f000 80ae 	beq.w	8007fc0 <_dtoa_r+0x518>
 8007e64:	9b07      	ldr	r3, [sp, #28]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f000 80aa 	beq.w	8007fc0 <_dtoa_r+0x518>
 8007e6c:	9b08      	ldr	r3, [sp, #32]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	dd37      	ble.n	8007ee2 <_dtoa_r+0x43a>
 8007e72:	1e7b      	subs	r3, r7, #1
 8007e74:	4620      	mov	r0, r4
 8007e76:	9304      	str	r3, [sp, #16]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	4629      	mov	r1, r5
 8007e7c:	4b55      	ldr	r3, [pc, #340]	@ (8007fd4 <_dtoa_r+0x52c>)
 8007e7e:	f7f8 fb2b 	bl	80004d8 <__aeabi_dmul>
 8007e82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e86:	9c08      	ldr	r4, [sp, #32]
 8007e88:	3601      	adds	r6, #1
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	f7f8 faba 	bl	8000404 <__aeabi_i2d>
 8007e90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e94:	f7f8 fb20 	bl	80004d8 <__aeabi_dmul>
 8007e98:	2200      	movs	r2, #0
 8007e9a:	4b4f      	ldr	r3, [pc, #316]	@ (8007fd8 <_dtoa_r+0x530>)
 8007e9c:	f7f8 f966 	bl	800016c <__adddf3>
 8007ea0:	4605      	mov	r5, r0
 8007ea2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007ea6:	2c00      	cmp	r4, #0
 8007ea8:	f040 809a 	bne.w	8007fe0 <_dtoa_r+0x538>
 8007eac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	4b4a      	ldr	r3, [pc, #296]	@ (8007fdc <_dtoa_r+0x534>)
 8007eb4:	f7f8 f958 	bl	8000168 <__aeabi_dsub>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	460b      	mov	r3, r1
 8007ebc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ec0:	462a      	mov	r2, r5
 8007ec2:	4633      	mov	r3, r6
 8007ec4:	f7f8 fd98 	bl	80009f8 <__aeabi_dcmpgt>
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	f040 828e 	bne.w	80083ea <_dtoa_r+0x942>
 8007ece:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ed2:	462a      	mov	r2, r5
 8007ed4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007ed8:	f7f8 fd70 	bl	80009bc <__aeabi_dcmplt>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	f040 8127 	bne.w	8008130 <_dtoa_r+0x688>
 8007ee2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007ee6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007eea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f2c0 8163 	blt.w	80081b8 <_dtoa_r+0x710>
 8007ef2:	2f0e      	cmp	r7, #14
 8007ef4:	f300 8160 	bgt.w	80081b8 <_dtoa_r+0x710>
 8007ef8:	4b33      	ldr	r3, [pc, #204]	@ (8007fc8 <_dtoa_r+0x520>)
 8007efa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007efe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007f02:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007f06:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	da03      	bge.n	8007f14 <_dtoa_r+0x46c>
 8007f0c:	9b07      	ldr	r3, [sp, #28]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f340 8100 	ble.w	8008114 <_dtoa_r+0x66c>
 8007f14:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007f18:	4656      	mov	r6, sl
 8007f1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f1e:	4620      	mov	r0, r4
 8007f20:	4629      	mov	r1, r5
 8007f22:	f7f8 fc03 	bl	800072c <__aeabi_ddiv>
 8007f26:	f7f8 fd87 	bl	8000a38 <__aeabi_d2iz>
 8007f2a:	4680      	mov	r8, r0
 8007f2c:	f7f8 fa6a 	bl	8000404 <__aeabi_i2d>
 8007f30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f34:	f7f8 fad0 	bl	80004d8 <__aeabi_dmul>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	4629      	mov	r1, r5
 8007f40:	f7f8 f912 	bl	8000168 <__aeabi_dsub>
 8007f44:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007f48:	9d07      	ldr	r5, [sp, #28]
 8007f4a:	f806 4b01 	strb.w	r4, [r6], #1
 8007f4e:	eba6 040a 	sub.w	r4, r6, sl
 8007f52:	42a5      	cmp	r5, r4
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	f040 8116 	bne.w	8008188 <_dtoa_r+0x6e0>
 8007f5c:	f7f8 f906 	bl	800016c <__adddf3>
 8007f60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f64:	4604      	mov	r4, r0
 8007f66:	460d      	mov	r5, r1
 8007f68:	f7f8 fd46 	bl	80009f8 <__aeabi_dcmpgt>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	f040 80f8 	bne.w	8008162 <_dtoa_r+0x6ba>
 8007f72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f76:	4620      	mov	r0, r4
 8007f78:	4629      	mov	r1, r5
 8007f7a:	f7f8 fd15 	bl	80009a8 <__aeabi_dcmpeq>
 8007f7e:	b118      	cbz	r0, 8007f88 <_dtoa_r+0x4e0>
 8007f80:	f018 0f01 	tst.w	r8, #1
 8007f84:	f040 80ed 	bne.w	8008162 <_dtoa_r+0x6ba>
 8007f88:	4649      	mov	r1, r9
 8007f8a:	4658      	mov	r0, fp
 8007f8c:	f000 fc92 	bl	80088b4 <_Bfree>
 8007f90:	2300      	movs	r3, #0
 8007f92:	7033      	strb	r3, [r6, #0]
 8007f94:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007f96:	3701      	adds	r7, #1
 8007f98:	601f      	str	r7, [r3, #0]
 8007f9a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f000 8320 	beq.w	80085e2 <_dtoa_r+0xb3a>
 8007fa2:	601e      	str	r6, [r3, #0]
 8007fa4:	e31d      	b.n	80085e2 <_dtoa_r+0xb3a>
 8007fa6:	07e2      	lsls	r2, r4, #31
 8007fa8:	d505      	bpl.n	8007fb6 <_dtoa_r+0x50e>
 8007faa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007fae:	f7f8 fa93 	bl	80004d8 <__aeabi_dmul>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	3601      	adds	r6, #1
 8007fb6:	1064      	asrs	r4, r4, #1
 8007fb8:	3508      	adds	r5, #8
 8007fba:	e73f      	b.n	8007e3c <_dtoa_r+0x394>
 8007fbc:	2602      	movs	r6, #2
 8007fbe:	e742      	b.n	8007e46 <_dtoa_r+0x39e>
 8007fc0:	9c07      	ldr	r4, [sp, #28]
 8007fc2:	9704      	str	r7, [sp, #16]
 8007fc4:	e761      	b.n	8007e8a <_dtoa_r+0x3e2>
 8007fc6:	bf00      	nop
 8007fc8:	0800d9f0 	.word	0x0800d9f0
 8007fcc:	0800d9c8 	.word	0x0800d9c8
 8007fd0:	3ff00000 	.word	0x3ff00000
 8007fd4:	40240000 	.word	0x40240000
 8007fd8:	401c0000 	.word	0x401c0000
 8007fdc:	40140000 	.word	0x40140000
 8007fe0:	4b70      	ldr	r3, [pc, #448]	@ (80081a4 <_dtoa_r+0x6fc>)
 8007fe2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007fe4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007fe8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007fec:	4454      	add	r4, sl
 8007fee:	2900      	cmp	r1, #0
 8007ff0:	d045      	beq.n	800807e <_dtoa_r+0x5d6>
 8007ff2:	2000      	movs	r0, #0
 8007ff4:	496c      	ldr	r1, [pc, #432]	@ (80081a8 <_dtoa_r+0x700>)
 8007ff6:	f7f8 fb99 	bl	800072c <__aeabi_ddiv>
 8007ffa:	4633      	mov	r3, r6
 8007ffc:	462a      	mov	r2, r5
 8007ffe:	f7f8 f8b3 	bl	8000168 <__aeabi_dsub>
 8008002:	4656      	mov	r6, sl
 8008004:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008008:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800800c:	f7f8 fd14 	bl	8000a38 <__aeabi_d2iz>
 8008010:	4605      	mov	r5, r0
 8008012:	f7f8 f9f7 	bl	8000404 <__aeabi_i2d>
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800801e:	f7f8 f8a3 	bl	8000168 <__aeabi_dsub>
 8008022:	4602      	mov	r2, r0
 8008024:	460b      	mov	r3, r1
 8008026:	3530      	adds	r5, #48	@ 0x30
 8008028:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800802c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008030:	f806 5b01 	strb.w	r5, [r6], #1
 8008034:	f7f8 fcc2 	bl	80009bc <__aeabi_dcmplt>
 8008038:	2800      	cmp	r0, #0
 800803a:	d163      	bne.n	8008104 <_dtoa_r+0x65c>
 800803c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008040:	2000      	movs	r0, #0
 8008042:	495a      	ldr	r1, [pc, #360]	@ (80081ac <_dtoa_r+0x704>)
 8008044:	f7f8 f890 	bl	8000168 <__aeabi_dsub>
 8008048:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800804c:	f7f8 fcb6 	bl	80009bc <__aeabi_dcmplt>
 8008050:	2800      	cmp	r0, #0
 8008052:	f040 8087 	bne.w	8008164 <_dtoa_r+0x6bc>
 8008056:	42a6      	cmp	r6, r4
 8008058:	f43f af43 	beq.w	8007ee2 <_dtoa_r+0x43a>
 800805c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008060:	2200      	movs	r2, #0
 8008062:	4b53      	ldr	r3, [pc, #332]	@ (80081b0 <_dtoa_r+0x708>)
 8008064:	f7f8 fa38 	bl	80004d8 <__aeabi_dmul>
 8008068:	2200      	movs	r2, #0
 800806a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800806e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008072:	4b4f      	ldr	r3, [pc, #316]	@ (80081b0 <_dtoa_r+0x708>)
 8008074:	f7f8 fa30 	bl	80004d8 <__aeabi_dmul>
 8008078:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800807c:	e7c4      	b.n	8008008 <_dtoa_r+0x560>
 800807e:	4631      	mov	r1, r6
 8008080:	4628      	mov	r0, r5
 8008082:	f7f8 fa29 	bl	80004d8 <__aeabi_dmul>
 8008086:	4656      	mov	r6, sl
 8008088:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800808c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800808e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008092:	f7f8 fcd1 	bl	8000a38 <__aeabi_d2iz>
 8008096:	4605      	mov	r5, r0
 8008098:	f7f8 f9b4 	bl	8000404 <__aeabi_i2d>
 800809c:	4602      	mov	r2, r0
 800809e:	460b      	mov	r3, r1
 80080a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080a4:	f7f8 f860 	bl	8000168 <__aeabi_dsub>
 80080a8:	4602      	mov	r2, r0
 80080aa:	460b      	mov	r3, r1
 80080ac:	3530      	adds	r5, #48	@ 0x30
 80080ae:	f806 5b01 	strb.w	r5, [r6], #1
 80080b2:	42a6      	cmp	r6, r4
 80080b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080b8:	f04f 0200 	mov.w	r2, #0
 80080bc:	d124      	bne.n	8008108 <_dtoa_r+0x660>
 80080be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80080c2:	4b39      	ldr	r3, [pc, #228]	@ (80081a8 <_dtoa_r+0x700>)
 80080c4:	f7f8 f852 	bl	800016c <__adddf3>
 80080c8:	4602      	mov	r2, r0
 80080ca:	460b      	mov	r3, r1
 80080cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080d0:	f7f8 fc92 	bl	80009f8 <__aeabi_dcmpgt>
 80080d4:	2800      	cmp	r0, #0
 80080d6:	d145      	bne.n	8008164 <_dtoa_r+0x6bc>
 80080d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80080dc:	2000      	movs	r0, #0
 80080de:	4932      	ldr	r1, [pc, #200]	@ (80081a8 <_dtoa_r+0x700>)
 80080e0:	f7f8 f842 	bl	8000168 <__aeabi_dsub>
 80080e4:	4602      	mov	r2, r0
 80080e6:	460b      	mov	r3, r1
 80080e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080ec:	f7f8 fc66 	bl	80009bc <__aeabi_dcmplt>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	f43f aef6 	beq.w	8007ee2 <_dtoa_r+0x43a>
 80080f6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80080f8:	1e73      	subs	r3, r6, #1
 80080fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80080fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008100:	2b30      	cmp	r3, #48	@ 0x30
 8008102:	d0f8      	beq.n	80080f6 <_dtoa_r+0x64e>
 8008104:	9f04      	ldr	r7, [sp, #16]
 8008106:	e73f      	b.n	8007f88 <_dtoa_r+0x4e0>
 8008108:	4b29      	ldr	r3, [pc, #164]	@ (80081b0 <_dtoa_r+0x708>)
 800810a:	f7f8 f9e5 	bl	80004d8 <__aeabi_dmul>
 800810e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008112:	e7bc      	b.n	800808e <_dtoa_r+0x5e6>
 8008114:	d10c      	bne.n	8008130 <_dtoa_r+0x688>
 8008116:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800811a:	2200      	movs	r2, #0
 800811c:	4b25      	ldr	r3, [pc, #148]	@ (80081b4 <_dtoa_r+0x70c>)
 800811e:	f7f8 f9db 	bl	80004d8 <__aeabi_dmul>
 8008122:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008126:	f7f8 fc5d 	bl	80009e4 <__aeabi_dcmpge>
 800812a:	2800      	cmp	r0, #0
 800812c:	f000 815b 	beq.w	80083e6 <_dtoa_r+0x93e>
 8008130:	2400      	movs	r4, #0
 8008132:	4625      	mov	r5, r4
 8008134:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008136:	4656      	mov	r6, sl
 8008138:	43db      	mvns	r3, r3
 800813a:	9304      	str	r3, [sp, #16]
 800813c:	2700      	movs	r7, #0
 800813e:	4621      	mov	r1, r4
 8008140:	4658      	mov	r0, fp
 8008142:	f000 fbb7 	bl	80088b4 <_Bfree>
 8008146:	2d00      	cmp	r5, #0
 8008148:	d0dc      	beq.n	8008104 <_dtoa_r+0x65c>
 800814a:	b12f      	cbz	r7, 8008158 <_dtoa_r+0x6b0>
 800814c:	42af      	cmp	r7, r5
 800814e:	d003      	beq.n	8008158 <_dtoa_r+0x6b0>
 8008150:	4639      	mov	r1, r7
 8008152:	4658      	mov	r0, fp
 8008154:	f000 fbae 	bl	80088b4 <_Bfree>
 8008158:	4629      	mov	r1, r5
 800815a:	4658      	mov	r0, fp
 800815c:	f000 fbaa 	bl	80088b4 <_Bfree>
 8008160:	e7d0      	b.n	8008104 <_dtoa_r+0x65c>
 8008162:	9704      	str	r7, [sp, #16]
 8008164:	4633      	mov	r3, r6
 8008166:	461e      	mov	r6, r3
 8008168:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800816c:	2a39      	cmp	r2, #57	@ 0x39
 800816e:	d107      	bne.n	8008180 <_dtoa_r+0x6d8>
 8008170:	459a      	cmp	sl, r3
 8008172:	d1f8      	bne.n	8008166 <_dtoa_r+0x6be>
 8008174:	9a04      	ldr	r2, [sp, #16]
 8008176:	3201      	adds	r2, #1
 8008178:	9204      	str	r2, [sp, #16]
 800817a:	2230      	movs	r2, #48	@ 0x30
 800817c:	f88a 2000 	strb.w	r2, [sl]
 8008180:	781a      	ldrb	r2, [r3, #0]
 8008182:	3201      	adds	r2, #1
 8008184:	701a      	strb	r2, [r3, #0]
 8008186:	e7bd      	b.n	8008104 <_dtoa_r+0x65c>
 8008188:	2200      	movs	r2, #0
 800818a:	4b09      	ldr	r3, [pc, #36]	@ (80081b0 <_dtoa_r+0x708>)
 800818c:	f7f8 f9a4 	bl	80004d8 <__aeabi_dmul>
 8008190:	2200      	movs	r2, #0
 8008192:	2300      	movs	r3, #0
 8008194:	4604      	mov	r4, r0
 8008196:	460d      	mov	r5, r1
 8008198:	f7f8 fc06 	bl	80009a8 <__aeabi_dcmpeq>
 800819c:	2800      	cmp	r0, #0
 800819e:	f43f aebc 	beq.w	8007f1a <_dtoa_r+0x472>
 80081a2:	e6f1      	b.n	8007f88 <_dtoa_r+0x4e0>
 80081a4:	0800d9f0 	.word	0x0800d9f0
 80081a8:	3fe00000 	.word	0x3fe00000
 80081ac:	3ff00000 	.word	0x3ff00000
 80081b0:	40240000 	.word	0x40240000
 80081b4:	40140000 	.word	0x40140000
 80081b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80081ba:	2a00      	cmp	r2, #0
 80081bc:	f000 80db 	beq.w	8008376 <_dtoa_r+0x8ce>
 80081c0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80081c2:	2a01      	cmp	r2, #1
 80081c4:	f300 80bf 	bgt.w	8008346 <_dtoa_r+0x89e>
 80081c8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80081ca:	2a00      	cmp	r2, #0
 80081cc:	f000 80b7 	beq.w	800833e <_dtoa_r+0x896>
 80081d0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80081d4:	4646      	mov	r6, r8
 80081d6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80081d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081da:	2101      	movs	r1, #1
 80081dc:	441a      	add	r2, r3
 80081de:	4658      	mov	r0, fp
 80081e0:	4498      	add	r8, r3
 80081e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80081e4:	f000 fc64 	bl	8008ab0 <__i2b>
 80081e8:	4605      	mov	r5, r0
 80081ea:	b15e      	cbz	r6, 8008204 <_dtoa_r+0x75c>
 80081ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	dd08      	ble.n	8008204 <_dtoa_r+0x75c>
 80081f2:	42b3      	cmp	r3, r6
 80081f4:	bfa8      	it	ge
 80081f6:	4633      	movge	r3, r6
 80081f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081fa:	eba8 0803 	sub.w	r8, r8, r3
 80081fe:	1af6      	subs	r6, r6, r3
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	9309      	str	r3, [sp, #36]	@ 0x24
 8008204:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008206:	b1f3      	cbz	r3, 8008246 <_dtoa_r+0x79e>
 8008208:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 80b7 	beq.w	800837e <_dtoa_r+0x8d6>
 8008210:	b18c      	cbz	r4, 8008236 <_dtoa_r+0x78e>
 8008212:	4629      	mov	r1, r5
 8008214:	4622      	mov	r2, r4
 8008216:	4658      	mov	r0, fp
 8008218:	f000 fd08 	bl	8008c2c <__pow5mult>
 800821c:	464a      	mov	r2, r9
 800821e:	4601      	mov	r1, r0
 8008220:	4605      	mov	r5, r0
 8008222:	4658      	mov	r0, fp
 8008224:	f000 fc5a 	bl	8008adc <__multiply>
 8008228:	4649      	mov	r1, r9
 800822a:	9004      	str	r0, [sp, #16]
 800822c:	4658      	mov	r0, fp
 800822e:	f000 fb41 	bl	80088b4 <_Bfree>
 8008232:	9b04      	ldr	r3, [sp, #16]
 8008234:	4699      	mov	r9, r3
 8008236:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008238:	1b1a      	subs	r2, r3, r4
 800823a:	d004      	beq.n	8008246 <_dtoa_r+0x79e>
 800823c:	4649      	mov	r1, r9
 800823e:	4658      	mov	r0, fp
 8008240:	f000 fcf4 	bl	8008c2c <__pow5mult>
 8008244:	4681      	mov	r9, r0
 8008246:	2101      	movs	r1, #1
 8008248:	4658      	mov	r0, fp
 800824a:	f000 fc31 	bl	8008ab0 <__i2b>
 800824e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008250:	4604      	mov	r4, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	f000 81c9 	beq.w	80085ea <_dtoa_r+0xb42>
 8008258:	461a      	mov	r2, r3
 800825a:	4601      	mov	r1, r0
 800825c:	4658      	mov	r0, fp
 800825e:	f000 fce5 	bl	8008c2c <__pow5mult>
 8008262:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008264:	4604      	mov	r4, r0
 8008266:	2b01      	cmp	r3, #1
 8008268:	f300 808f 	bgt.w	800838a <_dtoa_r+0x8e2>
 800826c:	9b02      	ldr	r3, [sp, #8]
 800826e:	2b00      	cmp	r3, #0
 8008270:	f040 8087 	bne.w	8008382 <_dtoa_r+0x8da>
 8008274:	9b03      	ldr	r3, [sp, #12]
 8008276:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800827a:	2b00      	cmp	r3, #0
 800827c:	f040 8083 	bne.w	8008386 <_dtoa_r+0x8de>
 8008280:	9b03      	ldr	r3, [sp, #12]
 8008282:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008286:	0d1b      	lsrs	r3, r3, #20
 8008288:	051b      	lsls	r3, r3, #20
 800828a:	b12b      	cbz	r3, 8008298 <_dtoa_r+0x7f0>
 800828c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800828e:	f108 0801 	add.w	r8, r8, #1
 8008292:	3301      	adds	r3, #1
 8008294:	9309      	str	r3, [sp, #36]	@ 0x24
 8008296:	2301      	movs	r3, #1
 8008298:	930a      	str	r3, [sp, #40]	@ 0x28
 800829a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800829c:	2b00      	cmp	r3, #0
 800829e:	f000 81aa 	beq.w	80085f6 <_dtoa_r+0xb4e>
 80082a2:	6923      	ldr	r3, [r4, #16]
 80082a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80082a8:	6918      	ldr	r0, [r3, #16]
 80082aa:	f000 fbb5 	bl	8008a18 <__hi0bits>
 80082ae:	f1c0 0020 	rsb	r0, r0, #32
 80082b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082b4:	4418      	add	r0, r3
 80082b6:	f010 001f 	ands.w	r0, r0, #31
 80082ba:	d071      	beq.n	80083a0 <_dtoa_r+0x8f8>
 80082bc:	f1c0 0320 	rsb	r3, r0, #32
 80082c0:	2b04      	cmp	r3, #4
 80082c2:	dd65      	ble.n	8008390 <_dtoa_r+0x8e8>
 80082c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082c6:	f1c0 001c 	rsb	r0, r0, #28
 80082ca:	4403      	add	r3, r0
 80082cc:	4480      	add	r8, r0
 80082ce:	4406      	add	r6, r0
 80082d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80082d2:	f1b8 0f00 	cmp.w	r8, #0
 80082d6:	dd05      	ble.n	80082e4 <_dtoa_r+0x83c>
 80082d8:	4649      	mov	r1, r9
 80082da:	4642      	mov	r2, r8
 80082dc:	4658      	mov	r0, fp
 80082de:	f000 fcff 	bl	8008ce0 <__lshift>
 80082e2:	4681      	mov	r9, r0
 80082e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	dd05      	ble.n	80082f6 <_dtoa_r+0x84e>
 80082ea:	4621      	mov	r1, r4
 80082ec:	461a      	mov	r2, r3
 80082ee:	4658      	mov	r0, fp
 80082f0:	f000 fcf6 	bl	8008ce0 <__lshift>
 80082f4:	4604      	mov	r4, r0
 80082f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d053      	beq.n	80083a4 <_dtoa_r+0x8fc>
 80082fc:	4621      	mov	r1, r4
 80082fe:	4648      	mov	r0, r9
 8008300:	f000 fd5a 	bl	8008db8 <__mcmp>
 8008304:	2800      	cmp	r0, #0
 8008306:	da4d      	bge.n	80083a4 <_dtoa_r+0x8fc>
 8008308:	1e7b      	subs	r3, r7, #1
 800830a:	4649      	mov	r1, r9
 800830c:	9304      	str	r3, [sp, #16]
 800830e:	220a      	movs	r2, #10
 8008310:	2300      	movs	r3, #0
 8008312:	4658      	mov	r0, fp
 8008314:	f000 faf0 	bl	80088f8 <__multadd>
 8008318:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800831a:	4681      	mov	r9, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 816c 	beq.w	80085fa <_dtoa_r+0xb52>
 8008322:	2300      	movs	r3, #0
 8008324:	4629      	mov	r1, r5
 8008326:	220a      	movs	r2, #10
 8008328:	4658      	mov	r0, fp
 800832a:	f000 fae5 	bl	80088f8 <__multadd>
 800832e:	9b08      	ldr	r3, [sp, #32]
 8008330:	4605      	mov	r5, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	dc61      	bgt.n	80083fa <_dtoa_r+0x952>
 8008336:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008338:	2b02      	cmp	r3, #2
 800833a:	dc3b      	bgt.n	80083b4 <_dtoa_r+0x90c>
 800833c:	e05d      	b.n	80083fa <_dtoa_r+0x952>
 800833e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008340:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008344:	e746      	b.n	80081d4 <_dtoa_r+0x72c>
 8008346:	9b07      	ldr	r3, [sp, #28]
 8008348:	1e5c      	subs	r4, r3, #1
 800834a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800834c:	42a3      	cmp	r3, r4
 800834e:	bfbf      	itttt	lt
 8008350:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008352:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008354:	1ae3      	sublt	r3, r4, r3
 8008356:	18d2      	addlt	r2, r2, r3
 8008358:	bfa8      	it	ge
 800835a:	1b1c      	subge	r4, r3, r4
 800835c:	9b07      	ldr	r3, [sp, #28]
 800835e:	bfbe      	ittt	lt
 8008360:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008362:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008364:	2400      	movlt	r4, #0
 8008366:	2b00      	cmp	r3, #0
 8008368:	bfb5      	itete	lt
 800836a:	eba8 0603 	sublt.w	r6, r8, r3
 800836e:	4646      	movge	r6, r8
 8008370:	2300      	movlt	r3, #0
 8008372:	9b07      	ldrge	r3, [sp, #28]
 8008374:	e730      	b.n	80081d8 <_dtoa_r+0x730>
 8008376:	4646      	mov	r6, r8
 8008378:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800837a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800837c:	e735      	b.n	80081ea <_dtoa_r+0x742>
 800837e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008380:	e75c      	b.n	800823c <_dtoa_r+0x794>
 8008382:	2300      	movs	r3, #0
 8008384:	e788      	b.n	8008298 <_dtoa_r+0x7f0>
 8008386:	9b02      	ldr	r3, [sp, #8]
 8008388:	e786      	b.n	8008298 <_dtoa_r+0x7f0>
 800838a:	2300      	movs	r3, #0
 800838c:	930a      	str	r3, [sp, #40]	@ 0x28
 800838e:	e788      	b.n	80082a2 <_dtoa_r+0x7fa>
 8008390:	d09f      	beq.n	80082d2 <_dtoa_r+0x82a>
 8008392:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008394:	331c      	adds	r3, #28
 8008396:	441a      	add	r2, r3
 8008398:	4498      	add	r8, r3
 800839a:	441e      	add	r6, r3
 800839c:	9209      	str	r2, [sp, #36]	@ 0x24
 800839e:	e798      	b.n	80082d2 <_dtoa_r+0x82a>
 80083a0:	4603      	mov	r3, r0
 80083a2:	e7f6      	b.n	8008392 <_dtoa_r+0x8ea>
 80083a4:	9b07      	ldr	r3, [sp, #28]
 80083a6:	9704      	str	r7, [sp, #16]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	dc20      	bgt.n	80083ee <_dtoa_r+0x946>
 80083ac:	9308      	str	r3, [sp, #32]
 80083ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	dd1e      	ble.n	80083f2 <_dtoa_r+0x94a>
 80083b4:	9b08      	ldr	r3, [sp, #32]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f47f aebc 	bne.w	8008134 <_dtoa_r+0x68c>
 80083bc:	4621      	mov	r1, r4
 80083be:	2205      	movs	r2, #5
 80083c0:	4658      	mov	r0, fp
 80083c2:	f000 fa99 	bl	80088f8 <__multadd>
 80083c6:	4601      	mov	r1, r0
 80083c8:	4604      	mov	r4, r0
 80083ca:	4648      	mov	r0, r9
 80083cc:	f000 fcf4 	bl	8008db8 <__mcmp>
 80083d0:	2800      	cmp	r0, #0
 80083d2:	f77f aeaf 	ble.w	8008134 <_dtoa_r+0x68c>
 80083d6:	2331      	movs	r3, #49	@ 0x31
 80083d8:	4656      	mov	r6, sl
 80083da:	f806 3b01 	strb.w	r3, [r6], #1
 80083de:	9b04      	ldr	r3, [sp, #16]
 80083e0:	3301      	adds	r3, #1
 80083e2:	9304      	str	r3, [sp, #16]
 80083e4:	e6aa      	b.n	800813c <_dtoa_r+0x694>
 80083e6:	9c07      	ldr	r4, [sp, #28]
 80083e8:	9704      	str	r7, [sp, #16]
 80083ea:	4625      	mov	r5, r4
 80083ec:	e7f3      	b.n	80083d6 <_dtoa_r+0x92e>
 80083ee:	9b07      	ldr	r3, [sp, #28]
 80083f0:	9308      	str	r3, [sp, #32]
 80083f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 8104 	beq.w	8008602 <_dtoa_r+0xb5a>
 80083fa:	2e00      	cmp	r6, #0
 80083fc:	dd05      	ble.n	800840a <_dtoa_r+0x962>
 80083fe:	4629      	mov	r1, r5
 8008400:	4632      	mov	r2, r6
 8008402:	4658      	mov	r0, fp
 8008404:	f000 fc6c 	bl	8008ce0 <__lshift>
 8008408:	4605      	mov	r5, r0
 800840a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800840c:	2b00      	cmp	r3, #0
 800840e:	d05a      	beq.n	80084c6 <_dtoa_r+0xa1e>
 8008410:	4658      	mov	r0, fp
 8008412:	6869      	ldr	r1, [r5, #4]
 8008414:	f000 fa0e 	bl	8008834 <_Balloc>
 8008418:	4606      	mov	r6, r0
 800841a:	b928      	cbnz	r0, 8008428 <_dtoa_r+0x980>
 800841c:	4602      	mov	r2, r0
 800841e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008422:	4b83      	ldr	r3, [pc, #524]	@ (8008630 <_dtoa_r+0xb88>)
 8008424:	f7ff bb54 	b.w	8007ad0 <_dtoa_r+0x28>
 8008428:	692a      	ldr	r2, [r5, #16]
 800842a:	f105 010c 	add.w	r1, r5, #12
 800842e:	3202      	adds	r2, #2
 8008430:	0092      	lsls	r2, r2, #2
 8008432:	300c      	adds	r0, #12
 8008434:	f7ff fa9b 	bl	800796e <memcpy>
 8008438:	2201      	movs	r2, #1
 800843a:	4631      	mov	r1, r6
 800843c:	4658      	mov	r0, fp
 800843e:	f000 fc4f 	bl	8008ce0 <__lshift>
 8008442:	462f      	mov	r7, r5
 8008444:	4605      	mov	r5, r0
 8008446:	f10a 0301 	add.w	r3, sl, #1
 800844a:	9307      	str	r3, [sp, #28]
 800844c:	9b08      	ldr	r3, [sp, #32]
 800844e:	4453      	add	r3, sl
 8008450:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008452:	9b02      	ldr	r3, [sp, #8]
 8008454:	f003 0301 	and.w	r3, r3, #1
 8008458:	930a      	str	r3, [sp, #40]	@ 0x28
 800845a:	9b07      	ldr	r3, [sp, #28]
 800845c:	4621      	mov	r1, r4
 800845e:	3b01      	subs	r3, #1
 8008460:	4648      	mov	r0, r9
 8008462:	9302      	str	r3, [sp, #8]
 8008464:	f7ff fa96 	bl	8007994 <quorem>
 8008468:	4639      	mov	r1, r7
 800846a:	9008      	str	r0, [sp, #32]
 800846c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008470:	4648      	mov	r0, r9
 8008472:	f000 fca1 	bl	8008db8 <__mcmp>
 8008476:	462a      	mov	r2, r5
 8008478:	9009      	str	r0, [sp, #36]	@ 0x24
 800847a:	4621      	mov	r1, r4
 800847c:	4658      	mov	r0, fp
 800847e:	f000 fcb7 	bl	8008df0 <__mdiff>
 8008482:	68c2      	ldr	r2, [r0, #12]
 8008484:	4606      	mov	r6, r0
 8008486:	bb02      	cbnz	r2, 80084ca <_dtoa_r+0xa22>
 8008488:	4601      	mov	r1, r0
 800848a:	4648      	mov	r0, r9
 800848c:	f000 fc94 	bl	8008db8 <__mcmp>
 8008490:	4602      	mov	r2, r0
 8008492:	4631      	mov	r1, r6
 8008494:	4658      	mov	r0, fp
 8008496:	920c      	str	r2, [sp, #48]	@ 0x30
 8008498:	f000 fa0c 	bl	80088b4 <_Bfree>
 800849c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800849e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80084a0:	9e07      	ldr	r6, [sp, #28]
 80084a2:	ea43 0102 	orr.w	r1, r3, r2
 80084a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084a8:	4319      	orrs	r1, r3
 80084aa:	d110      	bne.n	80084ce <_dtoa_r+0xa26>
 80084ac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80084b0:	d029      	beq.n	8008506 <_dtoa_r+0xa5e>
 80084b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	dd02      	ble.n	80084be <_dtoa_r+0xa16>
 80084b8:	9b08      	ldr	r3, [sp, #32]
 80084ba:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80084be:	9b02      	ldr	r3, [sp, #8]
 80084c0:	f883 8000 	strb.w	r8, [r3]
 80084c4:	e63b      	b.n	800813e <_dtoa_r+0x696>
 80084c6:	4628      	mov	r0, r5
 80084c8:	e7bb      	b.n	8008442 <_dtoa_r+0x99a>
 80084ca:	2201      	movs	r2, #1
 80084cc:	e7e1      	b.n	8008492 <_dtoa_r+0x9ea>
 80084ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	db04      	blt.n	80084de <_dtoa_r+0xa36>
 80084d4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80084d6:	430b      	orrs	r3, r1
 80084d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80084da:	430b      	orrs	r3, r1
 80084dc:	d120      	bne.n	8008520 <_dtoa_r+0xa78>
 80084de:	2a00      	cmp	r2, #0
 80084e0:	dded      	ble.n	80084be <_dtoa_r+0xa16>
 80084e2:	4649      	mov	r1, r9
 80084e4:	2201      	movs	r2, #1
 80084e6:	4658      	mov	r0, fp
 80084e8:	f000 fbfa 	bl	8008ce0 <__lshift>
 80084ec:	4621      	mov	r1, r4
 80084ee:	4681      	mov	r9, r0
 80084f0:	f000 fc62 	bl	8008db8 <__mcmp>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	dc03      	bgt.n	8008500 <_dtoa_r+0xa58>
 80084f8:	d1e1      	bne.n	80084be <_dtoa_r+0xa16>
 80084fa:	f018 0f01 	tst.w	r8, #1
 80084fe:	d0de      	beq.n	80084be <_dtoa_r+0xa16>
 8008500:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008504:	d1d8      	bne.n	80084b8 <_dtoa_r+0xa10>
 8008506:	2339      	movs	r3, #57	@ 0x39
 8008508:	9a02      	ldr	r2, [sp, #8]
 800850a:	7013      	strb	r3, [r2, #0]
 800850c:	4633      	mov	r3, r6
 800850e:	461e      	mov	r6, r3
 8008510:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008514:	3b01      	subs	r3, #1
 8008516:	2a39      	cmp	r2, #57	@ 0x39
 8008518:	d052      	beq.n	80085c0 <_dtoa_r+0xb18>
 800851a:	3201      	adds	r2, #1
 800851c:	701a      	strb	r2, [r3, #0]
 800851e:	e60e      	b.n	800813e <_dtoa_r+0x696>
 8008520:	2a00      	cmp	r2, #0
 8008522:	dd07      	ble.n	8008534 <_dtoa_r+0xa8c>
 8008524:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008528:	d0ed      	beq.n	8008506 <_dtoa_r+0xa5e>
 800852a:	9a02      	ldr	r2, [sp, #8]
 800852c:	f108 0301 	add.w	r3, r8, #1
 8008530:	7013      	strb	r3, [r2, #0]
 8008532:	e604      	b.n	800813e <_dtoa_r+0x696>
 8008534:	9b07      	ldr	r3, [sp, #28]
 8008536:	9a07      	ldr	r2, [sp, #28]
 8008538:	f803 8c01 	strb.w	r8, [r3, #-1]
 800853c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800853e:	4293      	cmp	r3, r2
 8008540:	d028      	beq.n	8008594 <_dtoa_r+0xaec>
 8008542:	4649      	mov	r1, r9
 8008544:	2300      	movs	r3, #0
 8008546:	220a      	movs	r2, #10
 8008548:	4658      	mov	r0, fp
 800854a:	f000 f9d5 	bl	80088f8 <__multadd>
 800854e:	42af      	cmp	r7, r5
 8008550:	4681      	mov	r9, r0
 8008552:	f04f 0300 	mov.w	r3, #0
 8008556:	f04f 020a 	mov.w	r2, #10
 800855a:	4639      	mov	r1, r7
 800855c:	4658      	mov	r0, fp
 800855e:	d107      	bne.n	8008570 <_dtoa_r+0xac8>
 8008560:	f000 f9ca 	bl	80088f8 <__multadd>
 8008564:	4607      	mov	r7, r0
 8008566:	4605      	mov	r5, r0
 8008568:	9b07      	ldr	r3, [sp, #28]
 800856a:	3301      	adds	r3, #1
 800856c:	9307      	str	r3, [sp, #28]
 800856e:	e774      	b.n	800845a <_dtoa_r+0x9b2>
 8008570:	f000 f9c2 	bl	80088f8 <__multadd>
 8008574:	4629      	mov	r1, r5
 8008576:	4607      	mov	r7, r0
 8008578:	2300      	movs	r3, #0
 800857a:	220a      	movs	r2, #10
 800857c:	4658      	mov	r0, fp
 800857e:	f000 f9bb 	bl	80088f8 <__multadd>
 8008582:	4605      	mov	r5, r0
 8008584:	e7f0      	b.n	8008568 <_dtoa_r+0xac0>
 8008586:	9b08      	ldr	r3, [sp, #32]
 8008588:	2700      	movs	r7, #0
 800858a:	2b00      	cmp	r3, #0
 800858c:	bfcc      	ite	gt
 800858e:	461e      	movgt	r6, r3
 8008590:	2601      	movle	r6, #1
 8008592:	4456      	add	r6, sl
 8008594:	4649      	mov	r1, r9
 8008596:	2201      	movs	r2, #1
 8008598:	4658      	mov	r0, fp
 800859a:	f000 fba1 	bl	8008ce0 <__lshift>
 800859e:	4621      	mov	r1, r4
 80085a0:	4681      	mov	r9, r0
 80085a2:	f000 fc09 	bl	8008db8 <__mcmp>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	dcb0      	bgt.n	800850c <_dtoa_r+0xa64>
 80085aa:	d102      	bne.n	80085b2 <_dtoa_r+0xb0a>
 80085ac:	f018 0f01 	tst.w	r8, #1
 80085b0:	d1ac      	bne.n	800850c <_dtoa_r+0xa64>
 80085b2:	4633      	mov	r3, r6
 80085b4:	461e      	mov	r6, r3
 80085b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085ba:	2a30      	cmp	r2, #48	@ 0x30
 80085bc:	d0fa      	beq.n	80085b4 <_dtoa_r+0xb0c>
 80085be:	e5be      	b.n	800813e <_dtoa_r+0x696>
 80085c0:	459a      	cmp	sl, r3
 80085c2:	d1a4      	bne.n	800850e <_dtoa_r+0xa66>
 80085c4:	9b04      	ldr	r3, [sp, #16]
 80085c6:	3301      	adds	r3, #1
 80085c8:	9304      	str	r3, [sp, #16]
 80085ca:	2331      	movs	r3, #49	@ 0x31
 80085cc:	f88a 3000 	strb.w	r3, [sl]
 80085d0:	e5b5      	b.n	800813e <_dtoa_r+0x696>
 80085d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80085d4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008634 <_dtoa_r+0xb8c>
 80085d8:	b11b      	cbz	r3, 80085e2 <_dtoa_r+0xb3a>
 80085da:	f10a 0308 	add.w	r3, sl, #8
 80085de:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80085e0:	6013      	str	r3, [r2, #0]
 80085e2:	4650      	mov	r0, sl
 80085e4:	b017      	add	sp, #92	@ 0x5c
 80085e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	f77f ae3d 	ble.w	800826c <_dtoa_r+0x7c4>
 80085f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80085f6:	2001      	movs	r0, #1
 80085f8:	e65b      	b.n	80082b2 <_dtoa_r+0x80a>
 80085fa:	9b08      	ldr	r3, [sp, #32]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f77f aed6 	ble.w	80083ae <_dtoa_r+0x906>
 8008602:	4656      	mov	r6, sl
 8008604:	4621      	mov	r1, r4
 8008606:	4648      	mov	r0, r9
 8008608:	f7ff f9c4 	bl	8007994 <quorem>
 800860c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008610:	9b08      	ldr	r3, [sp, #32]
 8008612:	f806 8b01 	strb.w	r8, [r6], #1
 8008616:	eba6 020a 	sub.w	r2, r6, sl
 800861a:	4293      	cmp	r3, r2
 800861c:	ddb3      	ble.n	8008586 <_dtoa_r+0xade>
 800861e:	4649      	mov	r1, r9
 8008620:	2300      	movs	r3, #0
 8008622:	220a      	movs	r2, #10
 8008624:	4658      	mov	r0, fp
 8008626:	f000 f967 	bl	80088f8 <__multadd>
 800862a:	4681      	mov	r9, r0
 800862c:	e7ea      	b.n	8008604 <_dtoa_r+0xb5c>
 800862e:	bf00      	nop
 8008630:	0800d94f 	.word	0x0800d94f
 8008634:	0800d8d3 	.word	0x0800d8d3

08008638 <_free_r>:
 8008638:	b538      	push	{r3, r4, r5, lr}
 800863a:	4605      	mov	r5, r0
 800863c:	2900      	cmp	r1, #0
 800863e:	d040      	beq.n	80086c2 <_free_r+0x8a>
 8008640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008644:	1f0c      	subs	r4, r1, #4
 8008646:	2b00      	cmp	r3, #0
 8008648:	bfb8      	it	lt
 800864a:	18e4      	addlt	r4, r4, r3
 800864c:	f000 f8e6 	bl	800881c <__malloc_lock>
 8008650:	4a1c      	ldr	r2, [pc, #112]	@ (80086c4 <_free_r+0x8c>)
 8008652:	6813      	ldr	r3, [r2, #0]
 8008654:	b933      	cbnz	r3, 8008664 <_free_r+0x2c>
 8008656:	6063      	str	r3, [r4, #4]
 8008658:	6014      	str	r4, [r2, #0]
 800865a:	4628      	mov	r0, r5
 800865c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008660:	f000 b8e2 	b.w	8008828 <__malloc_unlock>
 8008664:	42a3      	cmp	r3, r4
 8008666:	d908      	bls.n	800867a <_free_r+0x42>
 8008668:	6820      	ldr	r0, [r4, #0]
 800866a:	1821      	adds	r1, r4, r0
 800866c:	428b      	cmp	r3, r1
 800866e:	bf01      	itttt	eq
 8008670:	6819      	ldreq	r1, [r3, #0]
 8008672:	685b      	ldreq	r3, [r3, #4]
 8008674:	1809      	addeq	r1, r1, r0
 8008676:	6021      	streq	r1, [r4, #0]
 8008678:	e7ed      	b.n	8008656 <_free_r+0x1e>
 800867a:	461a      	mov	r2, r3
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	b10b      	cbz	r3, 8008684 <_free_r+0x4c>
 8008680:	42a3      	cmp	r3, r4
 8008682:	d9fa      	bls.n	800867a <_free_r+0x42>
 8008684:	6811      	ldr	r1, [r2, #0]
 8008686:	1850      	adds	r0, r2, r1
 8008688:	42a0      	cmp	r0, r4
 800868a:	d10b      	bne.n	80086a4 <_free_r+0x6c>
 800868c:	6820      	ldr	r0, [r4, #0]
 800868e:	4401      	add	r1, r0
 8008690:	1850      	adds	r0, r2, r1
 8008692:	4283      	cmp	r3, r0
 8008694:	6011      	str	r1, [r2, #0]
 8008696:	d1e0      	bne.n	800865a <_free_r+0x22>
 8008698:	6818      	ldr	r0, [r3, #0]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	4408      	add	r0, r1
 800869e:	6010      	str	r0, [r2, #0]
 80086a0:	6053      	str	r3, [r2, #4]
 80086a2:	e7da      	b.n	800865a <_free_r+0x22>
 80086a4:	d902      	bls.n	80086ac <_free_r+0x74>
 80086a6:	230c      	movs	r3, #12
 80086a8:	602b      	str	r3, [r5, #0]
 80086aa:	e7d6      	b.n	800865a <_free_r+0x22>
 80086ac:	6820      	ldr	r0, [r4, #0]
 80086ae:	1821      	adds	r1, r4, r0
 80086b0:	428b      	cmp	r3, r1
 80086b2:	bf01      	itttt	eq
 80086b4:	6819      	ldreq	r1, [r3, #0]
 80086b6:	685b      	ldreq	r3, [r3, #4]
 80086b8:	1809      	addeq	r1, r1, r0
 80086ba:	6021      	streq	r1, [r4, #0]
 80086bc:	6063      	str	r3, [r4, #4]
 80086be:	6054      	str	r4, [r2, #4]
 80086c0:	e7cb      	b.n	800865a <_free_r+0x22>
 80086c2:	bd38      	pop	{r3, r4, r5, pc}
 80086c4:	200008c4 	.word	0x200008c4

080086c8 <malloc>:
 80086c8:	4b02      	ldr	r3, [pc, #8]	@ (80086d4 <malloc+0xc>)
 80086ca:	4601      	mov	r1, r0
 80086cc:	6818      	ldr	r0, [r3, #0]
 80086ce:	f000 b825 	b.w	800871c <_malloc_r>
 80086d2:	bf00      	nop
 80086d4:	20000020 	.word	0x20000020

080086d8 <sbrk_aligned>:
 80086d8:	b570      	push	{r4, r5, r6, lr}
 80086da:	4e0f      	ldr	r6, [pc, #60]	@ (8008718 <sbrk_aligned+0x40>)
 80086dc:	460c      	mov	r4, r1
 80086de:	6831      	ldr	r1, [r6, #0]
 80086e0:	4605      	mov	r5, r0
 80086e2:	b911      	cbnz	r1, 80086ea <sbrk_aligned+0x12>
 80086e4:	f001 fddc 	bl	800a2a0 <_sbrk_r>
 80086e8:	6030      	str	r0, [r6, #0]
 80086ea:	4621      	mov	r1, r4
 80086ec:	4628      	mov	r0, r5
 80086ee:	f001 fdd7 	bl	800a2a0 <_sbrk_r>
 80086f2:	1c43      	adds	r3, r0, #1
 80086f4:	d103      	bne.n	80086fe <sbrk_aligned+0x26>
 80086f6:	f04f 34ff 	mov.w	r4, #4294967295
 80086fa:	4620      	mov	r0, r4
 80086fc:	bd70      	pop	{r4, r5, r6, pc}
 80086fe:	1cc4      	adds	r4, r0, #3
 8008700:	f024 0403 	bic.w	r4, r4, #3
 8008704:	42a0      	cmp	r0, r4
 8008706:	d0f8      	beq.n	80086fa <sbrk_aligned+0x22>
 8008708:	1a21      	subs	r1, r4, r0
 800870a:	4628      	mov	r0, r5
 800870c:	f001 fdc8 	bl	800a2a0 <_sbrk_r>
 8008710:	3001      	adds	r0, #1
 8008712:	d1f2      	bne.n	80086fa <sbrk_aligned+0x22>
 8008714:	e7ef      	b.n	80086f6 <sbrk_aligned+0x1e>
 8008716:	bf00      	nop
 8008718:	200008c0 	.word	0x200008c0

0800871c <_malloc_r>:
 800871c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008720:	1ccd      	adds	r5, r1, #3
 8008722:	f025 0503 	bic.w	r5, r5, #3
 8008726:	3508      	adds	r5, #8
 8008728:	2d0c      	cmp	r5, #12
 800872a:	bf38      	it	cc
 800872c:	250c      	movcc	r5, #12
 800872e:	2d00      	cmp	r5, #0
 8008730:	4606      	mov	r6, r0
 8008732:	db01      	blt.n	8008738 <_malloc_r+0x1c>
 8008734:	42a9      	cmp	r1, r5
 8008736:	d904      	bls.n	8008742 <_malloc_r+0x26>
 8008738:	230c      	movs	r3, #12
 800873a:	6033      	str	r3, [r6, #0]
 800873c:	2000      	movs	r0, #0
 800873e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008742:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008818 <_malloc_r+0xfc>
 8008746:	f000 f869 	bl	800881c <__malloc_lock>
 800874a:	f8d8 3000 	ldr.w	r3, [r8]
 800874e:	461c      	mov	r4, r3
 8008750:	bb44      	cbnz	r4, 80087a4 <_malloc_r+0x88>
 8008752:	4629      	mov	r1, r5
 8008754:	4630      	mov	r0, r6
 8008756:	f7ff ffbf 	bl	80086d8 <sbrk_aligned>
 800875a:	1c43      	adds	r3, r0, #1
 800875c:	4604      	mov	r4, r0
 800875e:	d158      	bne.n	8008812 <_malloc_r+0xf6>
 8008760:	f8d8 4000 	ldr.w	r4, [r8]
 8008764:	4627      	mov	r7, r4
 8008766:	2f00      	cmp	r7, #0
 8008768:	d143      	bne.n	80087f2 <_malloc_r+0xd6>
 800876a:	2c00      	cmp	r4, #0
 800876c:	d04b      	beq.n	8008806 <_malloc_r+0xea>
 800876e:	6823      	ldr	r3, [r4, #0]
 8008770:	4639      	mov	r1, r7
 8008772:	4630      	mov	r0, r6
 8008774:	eb04 0903 	add.w	r9, r4, r3
 8008778:	f001 fd92 	bl	800a2a0 <_sbrk_r>
 800877c:	4581      	cmp	r9, r0
 800877e:	d142      	bne.n	8008806 <_malloc_r+0xea>
 8008780:	6821      	ldr	r1, [r4, #0]
 8008782:	4630      	mov	r0, r6
 8008784:	1a6d      	subs	r5, r5, r1
 8008786:	4629      	mov	r1, r5
 8008788:	f7ff ffa6 	bl	80086d8 <sbrk_aligned>
 800878c:	3001      	adds	r0, #1
 800878e:	d03a      	beq.n	8008806 <_malloc_r+0xea>
 8008790:	6823      	ldr	r3, [r4, #0]
 8008792:	442b      	add	r3, r5
 8008794:	6023      	str	r3, [r4, #0]
 8008796:	f8d8 3000 	ldr.w	r3, [r8]
 800879a:	685a      	ldr	r2, [r3, #4]
 800879c:	bb62      	cbnz	r2, 80087f8 <_malloc_r+0xdc>
 800879e:	f8c8 7000 	str.w	r7, [r8]
 80087a2:	e00f      	b.n	80087c4 <_malloc_r+0xa8>
 80087a4:	6822      	ldr	r2, [r4, #0]
 80087a6:	1b52      	subs	r2, r2, r5
 80087a8:	d420      	bmi.n	80087ec <_malloc_r+0xd0>
 80087aa:	2a0b      	cmp	r2, #11
 80087ac:	d917      	bls.n	80087de <_malloc_r+0xc2>
 80087ae:	1961      	adds	r1, r4, r5
 80087b0:	42a3      	cmp	r3, r4
 80087b2:	6025      	str	r5, [r4, #0]
 80087b4:	bf18      	it	ne
 80087b6:	6059      	strne	r1, [r3, #4]
 80087b8:	6863      	ldr	r3, [r4, #4]
 80087ba:	bf08      	it	eq
 80087bc:	f8c8 1000 	streq.w	r1, [r8]
 80087c0:	5162      	str	r2, [r4, r5]
 80087c2:	604b      	str	r3, [r1, #4]
 80087c4:	4630      	mov	r0, r6
 80087c6:	f000 f82f 	bl	8008828 <__malloc_unlock>
 80087ca:	f104 000b 	add.w	r0, r4, #11
 80087ce:	1d23      	adds	r3, r4, #4
 80087d0:	f020 0007 	bic.w	r0, r0, #7
 80087d4:	1ac2      	subs	r2, r0, r3
 80087d6:	bf1c      	itt	ne
 80087d8:	1a1b      	subne	r3, r3, r0
 80087da:	50a3      	strne	r3, [r4, r2]
 80087dc:	e7af      	b.n	800873e <_malloc_r+0x22>
 80087de:	6862      	ldr	r2, [r4, #4]
 80087e0:	42a3      	cmp	r3, r4
 80087e2:	bf0c      	ite	eq
 80087e4:	f8c8 2000 	streq.w	r2, [r8]
 80087e8:	605a      	strne	r2, [r3, #4]
 80087ea:	e7eb      	b.n	80087c4 <_malloc_r+0xa8>
 80087ec:	4623      	mov	r3, r4
 80087ee:	6864      	ldr	r4, [r4, #4]
 80087f0:	e7ae      	b.n	8008750 <_malloc_r+0x34>
 80087f2:	463c      	mov	r4, r7
 80087f4:	687f      	ldr	r7, [r7, #4]
 80087f6:	e7b6      	b.n	8008766 <_malloc_r+0x4a>
 80087f8:	461a      	mov	r2, r3
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	42a3      	cmp	r3, r4
 80087fe:	d1fb      	bne.n	80087f8 <_malloc_r+0xdc>
 8008800:	2300      	movs	r3, #0
 8008802:	6053      	str	r3, [r2, #4]
 8008804:	e7de      	b.n	80087c4 <_malloc_r+0xa8>
 8008806:	230c      	movs	r3, #12
 8008808:	4630      	mov	r0, r6
 800880a:	6033      	str	r3, [r6, #0]
 800880c:	f000 f80c 	bl	8008828 <__malloc_unlock>
 8008810:	e794      	b.n	800873c <_malloc_r+0x20>
 8008812:	6005      	str	r5, [r0, #0]
 8008814:	e7d6      	b.n	80087c4 <_malloc_r+0xa8>
 8008816:	bf00      	nop
 8008818:	200008c4 	.word	0x200008c4

0800881c <__malloc_lock>:
 800881c:	4801      	ldr	r0, [pc, #4]	@ (8008824 <__malloc_lock+0x8>)
 800881e:	f7ff b896 	b.w	800794e <__retarget_lock_acquire_recursive>
 8008822:	bf00      	nop
 8008824:	200008bc 	.word	0x200008bc

08008828 <__malloc_unlock>:
 8008828:	4801      	ldr	r0, [pc, #4]	@ (8008830 <__malloc_unlock+0x8>)
 800882a:	f7ff b891 	b.w	8007950 <__retarget_lock_release_recursive>
 800882e:	bf00      	nop
 8008830:	200008bc 	.word	0x200008bc

08008834 <_Balloc>:
 8008834:	b570      	push	{r4, r5, r6, lr}
 8008836:	69c6      	ldr	r6, [r0, #28]
 8008838:	4604      	mov	r4, r0
 800883a:	460d      	mov	r5, r1
 800883c:	b976      	cbnz	r6, 800885c <_Balloc+0x28>
 800883e:	2010      	movs	r0, #16
 8008840:	f7ff ff42 	bl	80086c8 <malloc>
 8008844:	4602      	mov	r2, r0
 8008846:	61e0      	str	r0, [r4, #28]
 8008848:	b920      	cbnz	r0, 8008854 <_Balloc+0x20>
 800884a:	216b      	movs	r1, #107	@ 0x6b
 800884c:	4b17      	ldr	r3, [pc, #92]	@ (80088ac <_Balloc+0x78>)
 800884e:	4818      	ldr	r0, [pc, #96]	@ (80088b0 <_Balloc+0x7c>)
 8008850:	f001 fd3c 	bl	800a2cc <__assert_func>
 8008854:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008858:	6006      	str	r6, [r0, #0]
 800885a:	60c6      	str	r6, [r0, #12]
 800885c:	69e6      	ldr	r6, [r4, #28]
 800885e:	68f3      	ldr	r3, [r6, #12]
 8008860:	b183      	cbz	r3, 8008884 <_Balloc+0x50>
 8008862:	69e3      	ldr	r3, [r4, #28]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800886a:	b9b8      	cbnz	r0, 800889c <_Balloc+0x68>
 800886c:	2101      	movs	r1, #1
 800886e:	fa01 f605 	lsl.w	r6, r1, r5
 8008872:	1d72      	adds	r2, r6, #5
 8008874:	4620      	mov	r0, r4
 8008876:	0092      	lsls	r2, r2, #2
 8008878:	f001 fd46 	bl	800a308 <_calloc_r>
 800887c:	b160      	cbz	r0, 8008898 <_Balloc+0x64>
 800887e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008882:	e00e      	b.n	80088a2 <_Balloc+0x6e>
 8008884:	2221      	movs	r2, #33	@ 0x21
 8008886:	2104      	movs	r1, #4
 8008888:	4620      	mov	r0, r4
 800888a:	f001 fd3d 	bl	800a308 <_calloc_r>
 800888e:	69e3      	ldr	r3, [r4, #28]
 8008890:	60f0      	str	r0, [r6, #12]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1e4      	bne.n	8008862 <_Balloc+0x2e>
 8008898:	2000      	movs	r0, #0
 800889a:	bd70      	pop	{r4, r5, r6, pc}
 800889c:	6802      	ldr	r2, [r0, #0]
 800889e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088a2:	2300      	movs	r3, #0
 80088a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088a8:	e7f7      	b.n	800889a <_Balloc+0x66>
 80088aa:	bf00      	nop
 80088ac:	0800d8e0 	.word	0x0800d8e0
 80088b0:	0800d960 	.word	0x0800d960

080088b4 <_Bfree>:
 80088b4:	b570      	push	{r4, r5, r6, lr}
 80088b6:	69c6      	ldr	r6, [r0, #28]
 80088b8:	4605      	mov	r5, r0
 80088ba:	460c      	mov	r4, r1
 80088bc:	b976      	cbnz	r6, 80088dc <_Bfree+0x28>
 80088be:	2010      	movs	r0, #16
 80088c0:	f7ff ff02 	bl	80086c8 <malloc>
 80088c4:	4602      	mov	r2, r0
 80088c6:	61e8      	str	r0, [r5, #28]
 80088c8:	b920      	cbnz	r0, 80088d4 <_Bfree+0x20>
 80088ca:	218f      	movs	r1, #143	@ 0x8f
 80088cc:	4b08      	ldr	r3, [pc, #32]	@ (80088f0 <_Bfree+0x3c>)
 80088ce:	4809      	ldr	r0, [pc, #36]	@ (80088f4 <_Bfree+0x40>)
 80088d0:	f001 fcfc 	bl	800a2cc <__assert_func>
 80088d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088d8:	6006      	str	r6, [r0, #0]
 80088da:	60c6      	str	r6, [r0, #12]
 80088dc:	b13c      	cbz	r4, 80088ee <_Bfree+0x3a>
 80088de:	69eb      	ldr	r3, [r5, #28]
 80088e0:	6862      	ldr	r2, [r4, #4]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088e8:	6021      	str	r1, [r4, #0]
 80088ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088ee:	bd70      	pop	{r4, r5, r6, pc}
 80088f0:	0800d8e0 	.word	0x0800d8e0
 80088f4:	0800d960 	.word	0x0800d960

080088f8 <__multadd>:
 80088f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088fc:	4607      	mov	r7, r0
 80088fe:	460c      	mov	r4, r1
 8008900:	461e      	mov	r6, r3
 8008902:	2000      	movs	r0, #0
 8008904:	690d      	ldr	r5, [r1, #16]
 8008906:	f101 0c14 	add.w	ip, r1, #20
 800890a:	f8dc 3000 	ldr.w	r3, [ip]
 800890e:	3001      	adds	r0, #1
 8008910:	b299      	uxth	r1, r3
 8008912:	fb02 6101 	mla	r1, r2, r1, r6
 8008916:	0c1e      	lsrs	r6, r3, #16
 8008918:	0c0b      	lsrs	r3, r1, #16
 800891a:	fb02 3306 	mla	r3, r2, r6, r3
 800891e:	b289      	uxth	r1, r1
 8008920:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008924:	4285      	cmp	r5, r0
 8008926:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800892a:	f84c 1b04 	str.w	r1, [ip], #4
 800892e:	dcec      	bgt.n	800890a <__multadd+0x12>
 8008930:	b30e      	cbz	r6, 8008976 <__multadd+0x7e>
 8008932:	68a3      	ldr	r3, [r4, #8]
 8008934:	42ab      	cmp	r3, r5
 8008936:	dc19      	bgt.n	800896c <__multadd+0x74>
 8008938:	6861      	ldr	r1, [r4, #4]
 800893a:	4638      	mov	r0, r7
 800893c:	3101      	adds	r1, #1
 800893e:	f7ff ff79 	bl	8008834 <_Balloc>
 8008942:	4680      	mov	r8, r0
 8008944:	b928      	cbnz	r0, 8008952 <__multadd+0x5a>
 8008946:	4602      	mov	r2, r0
 8008948:	21ba      	movs	r1, #186	@ 0xba
 800894a:	4b0c      	ldr	r3, [pc, #48]	@ (800897c <__multadd+0x84>)
 800894c:	480c      	ldr	r0, [pc, #48]	@ (8008980 <__multadd+0x88>)
 800894e:	f001 fcbd 	bl	800a2cc <__assert_func>
 8008952:	6922      	ldr	r2, [r4, #16]
 8008954:	f104 010c 	add.w	r1, r4, #12
 8008958:	3202      	adds	r2, #2
 800895a:	0092      	lsls	r2, r2, #2
 800895c:	300c      	adds	r0, #12
 800895e:	f7ff f806 	bl	800796e <memcpy>
 8008962:	4621      	mov	r1, r4
 8008964:	4638      	mov	r0, r7
 8008966:	f7ff ffa5 	bl	80088b4 <_Bfree>
 800896a:	4644      	mov	r4, r8
 800896c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008970:	3501      	adds	r5, #1
 8008972:	615e      	str	r6, [r3, #20]
 8008974:	6125      	str	r5, [r4, #16]
 8008976:	4620      	mov	r0, r4
 8008978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800897c:	0800d94f 	.word	0x0800d94f
 8008980:	0800d960 	.word	0x0800d960

08008984 <__s2b>:
 8008984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008988:	4615      	mov	r5, r2
 800898a:	2209      	movs	r2, #9
 800898c:	461f      	mov	r7, r3
 800898e:	3308      	adds	r3, #8
 8008990:	460c      	mov	r4, r1
 8008992:	fb93 f3f2 	sdiv	r3, r3, r2
 8008996:	4606      	mov	r6, r0
 8008998:	2201      	movs	r2, #1
 800899a:	2100      	movs	r1, #0
 800899c:	429a      	cmp	r2, r3
 800899e:	db09      	blt.n	80089b4 <__s2b+0x30>
 80089a0:	4630      	mov	r0, r6
 80089a2:	f7ff ff47 	bl	8008834 <_Balloc>
 80089a6:	b940      	cbnz	r0, 80089ba <__s2b+0x36>
 80089a8:	4602      	mov	r2, r0
 80089aa:	21d3      	movs	r1, #211	@ 0xd3
 80089ac:	4b18      	ldr	r3, [pc, #96]	@ (8008a10 <__s2b+0x8c>)
 80089ae:	4819      	ldr	r0, [pc, #100]	@ (8008a14 <__s2b+0x90>)
 80089b0:	f001 fc8c 	bl	800a2cc <__assert_func>
 80089b4:	0052      	lsls	r2, r2, #1
 80089b6:	3101      	adds	r1, #1
 80089b8:	e7f0      	b.n	800899c <__s2b+0x18>
 80089ba:	9b08      	ldr	r3, [sp, #32]
 80089bc:	2d09      	cmp	r5, #9
 80089be:	6143      	str	r3, [r0, #20]
 80089c0:	f04f 0301 	mov.w	r3, #1
 80089c4:	6103      	str	r3, [r0, #16]
 80089c6:	dd16      	ble.n	80089f6 <__s2b+0x72>
 80089c8:	f104 0909 	add.w	r9, r4, #9
 80089cc:	46c8      	mov	r8, r9
 80089ce:	442c      	add	r4, r5
 80089d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80089d4:	4601      	mov	r1, r0
 80089d6:	220a      	movs	r2, #10
 80089d8:	4630      	mov	r0, r6
 80089da:	3b30      	subs	r3, #48	@ 0x30
 80089dc:	f7ff ff8c 	bl	80088f8 <__multadd>
 80089e0:	45a0      	cmp	r8, r4
 80089e2:	d1f5      	bne.n	80089d0 <__s2b+0x4c>
 80089e4:	f1a5 0408 	sub.w	r4, r5, #8
 80089e8:	444c      	add	r4, r9
 80089ea:	1b2d      	subs	r5, r5, r4
 80089ec:	1963      	adds	r3, r4, r5
 80089ee:	42bb      	cmp	r3, r7
 80089f0:	db04      	blt.n	80089fc <__s2b+0x78>
 80089f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089f6:	2509      	movs	r5, #9
 80089f8:	340a      	adds	r4, #10
 80089fa:	e7f6      	b.n	80089ea <__s2b+0x66>
 80089fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008a00:	4601      	mov	r1, r0
 8008a02:	220a      	movs	r2, #10
 8008a04:	4630      	mov	r0, r6
 8008a06:	3b30      	subs	r3, #48	@ 0x30
 8008a08:	f7ff ff76 	bl	80088f8 <__multadd>
 8008a0c:	e7ee      	b.n	80089ec <__s2b+0x68>
 8008a0e:	bf00      	nop
 8008a10:	0800d94f 	.word	0x0800d94f
 8008a14:	0800d960 	.word	0x0800d960

08008a18 <__hi0bits>:
 8008a18:	4603      	mov	r3, r0
 8008a1a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008a1e:	bf3a      	itte	cc
 8008a20:	0403      	lslcc	r3, r0, #16
 8008a22:	2010      	movcc	r0, #16
 8008a24:	2000      	movcs	r0, #0
 8008a26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a2a:	bf3c      	itt	cc
 8008a2c:	021b      	lslcc	r3, r3, #8
 8008a2e:	3008      	addcc	r0, #8
 8008a30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a34:	bf3c      	itt	cc
 8008a36:	011b      	lslcc	r3, r3, #4
 8008a38:	3004      	addcc	r0, #4
 8008a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a3e:	bf3c      	itt	cc
 8008a40:	009b      	lslcc	r3, r3, #2
 8008a42:	3002      	addcc	r0, #2
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	db05      	blt.n	8008a54 <__hi0bits+0x3c>
 8008a48:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008a4c:	f100 0001 	add.w	r0, r0, #1
 8008a50:	bf08      	it	eq
 8008a52:	2020      	moveq	r0, #32
 8008a54:	4770      	bx	lr

08008a56 <__lo0bits>:
 8008a56:	6803      	ldr	r3, [r0, #0]
 8008a58:	4602      	mov	r2, r0
 8008a5a:	f013 0007 	ands.w	r0, r3, #7
 8008a5e:	d00b      	beq.n	8008a78 <__lo0bits+0x22>
 8008a60:	07d9      	lsls	r1, r3, #31
 8008a62:	d421      	bmi.n	8008aa8 <__lo0bits+0x52>
 8008a64:	0798      	lsls	r0, r3, #30
 8008a66:	bf49      	itett	mi
 8008a68:	085b      	lsrmi	r3, r3, #1
 8008a6a:	089b      	lsrpl	r3, r3, #2
 8008a6c:	2001      	movmi	r0, #1
 8008a6e:	6013      	strmi	r3, [r2, #0]
 8008a70:	bf5c      	itt	pl
 8008a72:	2002      	movpl	r0, #2
 8008a74:	6013      	strpl	r3, [r2, #0]
 8008a76:	4770      	bx	lr
 8008a78:	b299      	uxth	r1, r3
 8008a7a:	b909      	cbnz	r1, 8008a80 <__lo0bits+0x2a>
 8008a7c:	2010      	movs	r0, #16
 8008a7e:	0c1b      	lsrs	r3, r3, #16
 8008a80:	b2d9      	uxtb	r1, r3
 8008a82:	b909      	cbnz	r1, 8008a88 <__lo0bits+0x32>
 8008a84:	3008      	adds	r0, #8
 8008a86:	0a1b      	lsrs	r3, r3, #8
 8008a88:	0719      	lsls	r1, r3, #28
 8008a8a:	bf04      	itt	eq
 8008a8c:	091b      	lsreq	r3, r3, #4
 8008a8e:	3004      	addeq	r0, #4
 8008a90:	0799      	lsls	r1, r3, #30
 8008a92:	bf04      	itt	eq
 8008a94:	089b      	lsreq	r3, r3, #2
 8008a96:	3002      	addeq	r0, #2
 8008a98:	07d9      	lsls	r1, r3, #31
 8008a9a:	d403      	bmi.n	8008aa4 <__lo0bits+0x4e>
 8008a9c:	085b      	lsrs	r3, r3, #1
 8008a9e:	f100 0001 	add.w	r0, r0, #1
 8008aa2:	d003      	beq.n	8008aac <__lo0bits+0x56>
 8008aa4:	6013      	str	r3, [r2, #0]
 8008aa6:	4770      	bx	lr
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	4770      	bx	lr
 8008aac:	2020      	movs	r0, #32
 8008aae:	4770      	bx	lr

08008ab0 <__i2b>:
 8008ab0:	b510      	push	{r4, lr}
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	2101      	movs	r1, #1
 8008ab6:	f7ff febd 	bl	8008834 <_Balloc>
 8008aba:	4602      	mov	r2, r0
 8008abc:	b928      	cbnz	r0, 8008aca <__i2b+0x1a>
 8008abe:	f240 1145 	movw	r1, #325	@ 0x145
 8008ac2:	4b04      	ldr	r3, [pc, #16]	@ (8008ad4 <__i2b+0x24>)
 8008ac4:	4804      	ldr	r0, [pc, #16]	@ (8008ad8 <__i2b+0x28>)
 8008ac6:	f001 fc01 	bl	800a2cc <__assert_func>
 8008aca:	2301      	movs	r3, #1
 8008acc:	6144      	str	r4, [r0, #20]
 8008ace:	6103      	str	r3, [r0, #16]
 8008ad0:	bd10      	pop	{r4, pc}
 8008ad2:	bf00      	nop
 8008ad4:	0800d94f 	.word	0x0800d94f
 8008ad8:	0800d960 	.word	0x0800d960

08008adc <__multiply>:
 8008adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae0:	4614      	mov	r4, r2
 8008ae2:	690a      	ldr	r2, [r1, #16]
 8008ae4:	6923      	ldr	r3, [r4, #16]
 8008ae6:	460f      	mov	r7, r1
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	bfa2      	ittt	ge
 8008aec:	4623      	movge	r3, r4
 8008aee:	460c      	movge	r4, r1
 8008af0:	461f      	movge	r7, r3
 8008af2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008af6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008afa:	68a3      	ldr	r3, [r4, #8]
 8008afc:	6861      	ldr	r1, [r4, #4]
 8008afe:	eb0a 0609 	add.w	r6, sl, r9
 8008b02:	42b3      	cmp	r3, r6
 8008b04:	b085      	sub	sp, #20
 8008b06:	bfb8      	it	lt
 8008b08:	3101      	addlt	r1, #1
 8008b0a:	f7ff fe93 	bl	8008834 <_Balloc>
 8008b0e:	b930      	cbnz	r0, 8008b1e <__multiply+0x42>
 8008b10:	4602      	mov	r2, r0
 8008b12:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008b16:	4b43      	ldr	r3, [pc, #268]	@ (8008c24 <__multiply+0x148>)
 8008b18:	4843      	ldr	r0, [pc, #268]	@ (8008c28 <__multiply+0x14c>)
 8008b1a:	f001 fbd7 	bl	800a2cc <__assert_func>
 8008b1e:	f100 0514 	add.w	r5, r0, #20
 8008b22:	462b      	mov	r3, r5
 8008b24:	2200      	movs	r2, #0
 8008b26:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008b2a:	4543      	cmp	r3, r8
 8008b2c:	d321      	bcc.n	8008b72 <__multiply+0x96>
 8008b2e:	f107 0114 	add.w	r1, r7, #20
 8008b32:	f104 0214 	add.w	r2, r4, #20
 8008b36:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008b3a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008b3e:	9302      	str	r3, [sp, #8]
 8008b40:	1b13      	subs	r3, r2, r4
 8008b42:	3b15      	subs	r3, #21
 8008b44:	f023 0303 	bic.w	r3, r3, #3
 8008b48:	3304      	adds	r3, #4
 8008b4a:	f104 0715 	add.w	r7, r4, #21
 8008b4e:	42ba      	cmp	r2, r7
 8008b50:	bf38      	it	cc
 8008b52:	2304      	movcc	r3, #4
 8008b54:	9301      	str	r3, [sp, #4]
 8008b56:	9b02      	ldr	r3, [sp, #8]
 8008b58:	9103      	str	r1, [sp, #12]
 8008b5a:	428b      	cmp	r3, r1
 8008b5c:	d80c      	bhi.n	8008b78 <__multiply+0x9c>
 8008b5e:	2e00      	cmp	r6, #0
 8008b60:	dd03      	ble.n	8008b6a <__multiply+0x8e>
 8008b62:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d05a      	beq.n	8008c20 <__multiply+0x144>
 8008b6a:	6106      	str	r6, [r0, #16]
 8008b6c:	b005      	add	sp, #20
 8008b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b72:	f843 2b04 	str.w	r2, [r3], #4
 8008b76:	e7d8      	b.n	8008b2a <__multiply+0x4e>
 8008b78:	f8b1 a000 	ldrh.w	sl, [r1]
 8008b7c:	f1ba 0f00 	cmp.w	sl, #0
 8008b80:	d023      	beq.n	8008bca <__multiply+0xee>
 8008b82:	46a9      	mov	r9, r5
 8008b84:	f04f 0c00 	mov.w	ip, #0
 8008b88:	f104 0e14 	add.w	lr, r4, #20
 8008b8c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b90:	f8d9 3000 	ldr.w	r3, [r9]
 8008b94:	fa1f fb87 	uxth.w	fp, r7
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	fb0a 330b 	mla	r3, sl, fp, r3
 8008b9e:	4463      	add	r3, ip
 8008ba0:	f8d9 c000 	ldr.w	ip, [r9]
 8008ba4:	0c3f      	lsrs	r7, r7, #16
 8008ba6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008baa:	fb0a c707 	mla	r7, sl, r7, ip
 8008bae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008bb8:	4572      	cmp	r2, lr
 8008bba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008bbe:	f849 3b04 	str.w	r3, [r9], #4
 8008bc2:	d8e3      	bhi.n	8008b8c <__multiply+0xb0>
 8008bc4:	9b01      	ldr	r3, [sp, #4]
 8008bc6:	f845 c003 	str.w	ip, [r5, r3]
 8008bca:	9b03      	ldr	r3, [sp, #12]
 8008bcc:	3104      	adds	r1, #4
 8008bce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008bd2:	f1b9 0f00 	cmp.w	r9, #0
 8008bd6:	d021      	beq.n	8008c1c <__multiply+0x140>
 8008bd8:	46ae      	mov	lr, r5
 8008bda:	f04f 0a00 	mov.w	sl, #0
 8008bde:	682b      	ldr	r3, [r5, #0]
 8008be0:	f104 0c14 	add.w	ip, r4, #20
 8008be4:	f8bc b000 	ldrh.w	fp, [ip]
 8008be8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	fb09 770b 	mla	r7, r9, fp, r7
 8008bf2:	4457      	add	r7, sl
 8008bf4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008bf8:	f84e 3b04 	str.w	r3, [lr], #4
 8008bfc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c04:	f8be 3000 	ldrh.w	r3, [lr]
 8008c08:	4562      	cmp	r2, ip
 8008c0a:	fb09 330a 	mla	r3, r9, sl, r3
 8008c0e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008c12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c16:	d8e5      	bhi.n	8008be4 <__multiply+0x108>
 8008c18:	9f01      	ldr	r7, [sp, #4]
 8008c1a:	51eb      	str	r3, [r5, r7]
 8008c1c:	3504      	adds	r5, #4
 8008c1e:	e79a      	b.n	8008b56 <__multiply+0x7a>
 8008c20:	3e01      	subs	r6, #1
 8008c22:	e79c      	b.n	8008b5e <__multiply+0x82>
 8008c24:	0800d94f 	.word	0x0800d94f
 8008c28:	0800d960 	.word	0x0800d960

08008c2c <__pow5mult>:
 8008c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c30:	4615      	mov	r5, r2
 8008c32:	f012 0203 	ands.w	r2, r2, #3
 8008c36:	4607      	mov	r7, r0
 8008c38:	460e      	mov	r6, r1
 8008c3a:	d007      	beq.n	8008c4c <__pow5mult+0x20>
 8008c3c:	4c25      	ldr	r4, [pc, #148]	@ (8008cd4 <__pow5mult+0xa8>)
 8008c3e:	3a01      	subs	r2, #1
 8008c40:	2300      	movs	r3, #0
 8008c42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c46:	f7ff fe57 	bl	80088f8 <__multadd>
 8008c4a:	4606      	mov	r6, r0
 8008c4c:	10ad      	asrs	r5, r5, #2
 8008c4e:	d03d      	beq.n	8008ccc <__pow5mult+0xa0>
 8008c50:	69fc      	ldr	r4, [r7, #28]
 8008c52:	b97c      	cbnz	r4, 8008c74 <__pow5mult+0x48>
 8008c54:	2010      	movs	r0, #16
 8008c56:	f7ff fd37 	bl	80086c8 <malloc>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	61f8      	str	r0, [r7, #28]
 8008c5e:	b928      	cbnz	r0, 8008c6c <__pow5mult+0x40>
 8008c60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008c64:	4b1c      	ldr	r3, [pc, #112]	@ (8008cd8 <__pow5mult+0xac>)
 8008c66:	481d      	ldr	r0, [pc, #116]	@ (8008cdc <__pow5mult+0xb0>)
 8008c68:	f001 fb30 	bl	800a2cc <__assert_func>
 8008c6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c70:	6004      	str	r4, [r0, #0]
 8008c72:	60c4      	str	r4, [r0, #12]
 8008c74:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008c78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c7c:	b94c      	cbnz	r4, 8008c92 <__pow5mult+0x66>
 8008c7e:	f240 2171 	movw	r1, #625	@ 0x271
 8008c82:	4638      	mov	r0, r7
 8008c84:	f7ff ff14 	bl	8008ab0 <__i2b>
 8008c88:	2300      	movs	r3, #0
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c90:	6003      	str	r3, [r0, #0]
 8008c92:	f04f 0900 	mov.w	r9, #0
 8008c96:	07eb      	lsls	r3, r5, #31
 8008c98:	d50a      	bpl.n	8008cb0 <__pow5mult+0x84>
 8008c9a:	4631      	mov	r1, r6
 8008c9c:	4622      	mov	r2, r4
 8008c9e:	4638      	mov	r0, r7
 8008ca0:	f7ff ff1c 	bl	8008adc <__multiply>
 8008ca4:	4680      	mov	r8, r0
 8008ca6:	4631      	mov	r1, r6
 8008ca8:	4638      	mov	r0, r7
 8008caa:	f7ff fe03 	bl	80088b4 <_Bfree>
 8008cae:	4646      	mov	r6, r8
 8008cb0:	106d      	asrs	r5, r5, #1
 8008cb2:	d00b      	beq.n	8008ccc <__pow5mult+0xa0>
 8008cb4:	6820      	ldr	r0, [r4, #0]
 8008cb6:	b938      	cbnz	r0, 8008cc8 <__pow5mult+0x9c>
 8008cb8:	4622      	mov	r2, r4
 8008cba:	4621      	mov	r1, r4
 8008cbc:	4638      	mov	r0, r7
 8008cbe:	f7ff ff0d 	bl	8008adc <__multiply>
 8008cc2:	6020      	str	r0, [r4, #0]
 8008cc4:	f8c0 9000 	str.w	r9, [r0]
 8008cc8:	4604      	mov	r4, r0
 8008cca:	e7e4      	b.n	8008c96 <__pow5mult+0x6a>
 8008ccc:	4630      	mov	r0, r6
 8008cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cd2:	bf00      	nop
 8008cd4:	0800d9bc 	.word	0x0800d9bc
 8008cd8:	0800d8e0 	.word	0x0800d8e0
 8008cdc:	0800d960 	.word	0x0800d960

08008ce0 <__lshift>:
 8008ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ce4:	460c      	mov	r4, r1
 8008ce6:	4607      	mov	r7, r0
 8008ce8:	4691      	mov	r9, r2
 8008cea:	6923      	ldr	r3, [r4, #16]
 8008cec:	6849      	ldr	r1, [r1, #4]
 8008cee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cf2:	68a3      	ldr	r3, [r4, #8]
 8008cf4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008cf8:	f108 0601 	add.w	r6, r8, #1
 8008cfc:	42b3      	cmp	r3, r6
 8008cfe:	db0b      	blt.n	8008d18 <__lshift+0x38>
 8008d00:	4638      	mov	r0, r7
 8008d02:	f7ff fd97 	bl	8008834 <_Balloc>
 8008d06:	4605      	mov	r5, r0
 8008d08:	b948      	cbnz	r0, 8008d1e <__lshift+0x3e>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008d10:	4b27      	ldr	r3, [pc, #156]	@ (8008db0 <__lshift+0xd0>)
 8008d12:	4828      	ldr	r0, [pc, #160]	@ (8008db4 <__lshift+0xd4>)
 8008d14:	f001 fada 	bl	800a2cc <__assert_func>
 8008d18:	3101      	adds	r1, #1
 8008d1a:	005b      	lsls	r3, r3, #1
 8008d1c:	e7ee      	b.n	8008cfc <__lshift+0x1c>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f100 0114 	add.w	r1, r0, #20
 8008d24:	f100 0210 	add.w	r2, r0, #16
 8008d28:	4618      	mov	r0, r3
 8008d2a:	4553      	cmp	r3, sl
 8008d2c:	db33      	blt.n	8008d96 <__lshift+0xb6>
 8008d2e:	6920      	ldr	r0, [r4, #16]
 8008d30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d34:	f104 0314 	add.w	r3, r4, #20
 8008d38:	f019 091f 	ands.w	r9, r9, #31
 8008d3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d44:	d02b      	beq.n	8008d9e <__lshift+0xbe>
 8008d46:	468a      	mov	sl, r1
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f1c9 0e20 	rsb	lr, r9, #32
 8008d4e:	6818      	ldr	r0, [r3, #0]
 8008d50:	fa00 f009 	lsl.w	r0, r0, r9
 8008d54:	4310      	orrs	r0, r2
 8008d56:	f84a 0b04 	str.w	r0, [sl], #4
 8008d5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d5e:	459c      	cmp	ip, r3
 8008d60:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d64:	d8f3      	bhi.n	8008d4e <__lshift+0x6e>
 8008d66:	ebac 0304 	sub.w	r3, ip, r4
 8008d6a:	3b15      	subs	r3, #21
 8008d6c:	f023 0303 	bic.w	r3, r3, #3
 8008d70:	3304      	adds	r3, #4
 8008d72:	f104 0015 	add.w	r0, r4, #21
 8008d76:	4584      	cmp	ip, r0
 8008d78:	bf38      	it	cc
 8008d7a:	2304      	movcc	r3, #4
 8008d7c:	50ca      	str	r2, [r1, r3]
 8008d7e:	b10a      	cbz	r2, 8008d84 <__lshift+0xa4>
 8008d80:	f108 0602 	add.w	r6, r8, #2
 8008d84:	3e01      	subs	r6, #1
 8008d86:	4638      	mov	r0, r7
 8008d88:	4621      	mov	r1, r4
 8008d8a:	612e      	str	r6, [r5, #16]
 8008d8c:	f7ff fd92 	bl	80088b4 <_Bfree>
 8008d90:	4628      	mov	r0, r5
 8008d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d96:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	e7c5      	b.n	8008d2a <__lshift+0x4a>
 8008d9e:	3904      	subs	r1, #4
 8008da0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008da4:	459c      	cmp	ip, r3
 8008da6:	f841 2f04 	str.w	r2, [r1, #4]!
 8008daa:	d8f9      	bhi.n	8008da0 <__lshift+0xc0>
 8008dac:	e7ea      	b.n	8008d84 <__lshift+0xa4>
 8008dae:	bf00      	nop
 8008db0:	0800d94f 	.word	0x0800d94f
 8008db4:	0800d960 	.word	0x0800d960

08008db8 <__mcmp>:
 8008db8:	4603      	mov	r3, r0
 8008dba:	690a      	ldr	r2, [r1, #16]
 8008dbc:	6900      	ldr	r0, [r0, #16]
 8008dbe:	b530      	push	{r4, r5, lr}
 8008dc0:	1a80      	subs	r0, r0, r2
 8008dc2:	d10e      	bne.n	8008de2 <__mcmp+0x2a>
 8008dc4:	3314      	adds	r3, #20
 8008dc6:	3114      	adds	r1, #20
 8008dc8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008dcc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008dd0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008dd4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008dd8:	4295      	cmp	r5, r2
 8008dda:	d003      	beq.n	8008de4 <__mcmp+0x2c>
 8008ddc:	d205      	bcs.n	8008dea <__mcmp+0x32>
 8008dde:	f04f 30ff 	mov.w	r0, #4294967295
 8008de2:	bd30      	pop	{r4, r5, pc}
 8008de4:	42a3      	cmp	r3, r4
 8008de6:	d3f3      	bcc.n	8008dd0 <__mcmp+0x18>
 8008de8:	e7fb      	b.n	8008de2 <__mcmp+0x2a>
 8008dea:	2001      	movs	r0, #1
 8008dec:	e7f9      	b.n	8008de2 <__mcmp+0x2a>
	...

08008df0 <__mdiff>:
 8008df0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df4:	4689      	mov	r9, r1
 8008df6:	4606      	mov	r6, r0
 8008df8:	4611      	mov	r1, r2
 8008dfa:	4648      	mov	r0, r9
 8008dfc:	4614      	mov	r4, r2
 8008dfe:	f7ff ffdb 	bl	8008db8 <__mcmp>
 8008e02:	1e05      	subs	r5, r0, #0
 8008e04:	d112      	bne.n	8008e2c <__mdiff+0x3c>
 8008e06:	4629      	mov	r1, r5
 8008e08:	4630      	mov	r0, r6
 8008e0a:	f7ff fd13 	bl	8008834 <_Balloc>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	b928      	cbnz	r0, 8008e1e <__mdiff+0x2e>
 8008e12:	f240 2137 	movw	r1, #567	@ 0x237
 8008e16:	4b3e      	ldr	r3, [pc, #248]	@ (8008f10 <__mdiff+0x120>)
 8008e18:	483e      	ldr	r0, [pc, #248]	@ (8008f14 <__mdiff+0x124>)
 8008e1a:	f001 fa57 	bl	800a2cc <__assert_func>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e24:	4610      	mov	r0, r2
 8008e26:	b003      	add	sp, #12
 8008e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e2c:	bfbc      	itt	lt
 8008e2e:	464b      	movlt	r3, r9
 8008e30:	46a1      	movlt	r9, r4
 8008e32:	4630      	mov	r0, r6
 8008e34:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008e38:	bfba      	itte	lt
 8008e3a:	461c      	movlt	r4, r3
 8008e3c:	2501      	movlt	r5, #1
 8008e3e:	2500      	movge	r5, #0
 8008e40:	f7ff fcf8 	bl	8008834 <_Balloc>
 8008e44:	4602      	mov	r2, r0
 8008e46:	b918      	cbnz	r0, 8008e50 <__mdiff+0x60>
 8008e48:	f240 2145 	movw	r1, #581	@ 0x245
 8008e4c:	4b30      	ldr	r3, [pc, #192]	@ (8008f10 <__mdiff+0x120>)
 8008e4e:	e7e3      	b.n	8008e18 <__mdiff+0x28>
 8008e50:	f100 0b14 	add.w	fp, r0, #20
 8008e54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008e58:	f109 0310 	add.w	r3, r9, #16
 8008e5c:	60c5      	str	r5, [r0, #12]
 8008e5e:	f04f 0c00 	mov.w	ip, #0
 8008e62:	f109 0514 	add.w	r5, r9, #20
 8008e66:	46d9      	mov	r9, fp
 8008e68:	6926      	ldr	r6, [r4, #16]
 8008e6a:	f104 0e14 	add.w	lr, r4, #20
 8008e6e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008e72:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008e76:	9301      	str	r3, [sp, #4]
 8008e78:	9b01      	ldr	r3, [sp, #4]
 8008e7a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008e7e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008e82:	b281      	uxth	r1, r0
 8008e84:	9301      	str	r3, [sp, #4]
 8008e86:	fa1f f38a 	uxth.w	r3, sl
 8008e8a:	1a5b      	subs	r3, r3, r1
 8008e8c:	0c00      	lsrs	r0, r0, #16
 8008e8e:	4463      	add	r3, ip
 8008e90:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008e94:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008e9e:	4576      	cmp	r6, lr
 8008ea0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ea4:	f849 3b04 	str.w	r3, [r9], #4
 8008ea8:	d8e6      	bhi.n	8008e78 <__mdiff+0x88>
 8008eaa:	1b33      	subs	r3, r6, r4
 8008eac:	3b15      	subs	r3, #21
 8008eae:	f023 0303 	bic.w	r3, r3, #3
 8008eb2:	3415      	adds	r4, #21
 8008eb4:	3304      	adds	r3, #4
 8008eb6:	42a6      	cmp	r6, r4
 8008eb8:	bf38      	it	cc
 8008eba:	2304      	movcc	r3, #4
 8008ebc:	441d      	add	r5, r3
 8008ebe:	445b      	add	r3, fp
 8008ec0:	461e      	mov	r6, r3
 8008ec2:	462c      	mov	r4, r5
 8008ec4:	4544      	cmp	r4, r8
 8008ec6:	d30e      	bcc.n	8008ee6 <__mdiff+0xf6>
 8008ec8:	f108 0103 	add.w	r1, r8, #3
 8008ecc:	1b49      	subs	r1, r1, r5
 8008ece:	f021 0103 	bic.w	r1, r1, #3
 8008ed2:	3d03      	subs	r5, #3
 8008ed4:	45a8      	cmp	r8, r5
 8008ed6:	bf38      	it	cc
 8008ed8:	2100      	movcc	r1, #0
 8008eda:	440b      	add	r3, r1
 8008edc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ee0:	b199      	cbz	r1, 8008f0a <__mdiff+0x11a>
 8008ee2:	6117      	str	r7, [r2, #16]
 8008ee4:	e79e      	b.n	8008e24 <__mdiff+0x34>
 8008ee6:	46e6      	mov	lr, ip
 8008ee8:	f854 1b04 	ldr.w	r1, [r4], #4
 8008eec:	fa1f fc81 	uxth.w	ip, r1
 8008ef0:	44f4      	add	ip, lr
 8008ef2:	0c08      	lsrs	r0, r1, #16
 8008ef4:	4471      	add	r1, lr
 8008ef6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008efa:	b289      	uxth	r1, r1
 8008efc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008f00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f04:	f846 1b04 	str.w	r1, [r6], #4
 8008f08:	e7dc      	b.n	8008ec4 <__mdiff+0xd4>
 8008f0a:	3f01      	subs	r7, #1
 8008f0c:	e7e6      	b.n	8008edc <__mdiff+0xec>
 8008f0e:	bf00      	nop
 8008f10:	0800d94f 	.word	0x0800d94f
 8008f14:	0800d960 	.word	0x0800d960

08008f18 <__ulp>:
 8008f18:	4b0e      	ldr	r3, [pc, #56]	@ (8008f54 <__ulp+0x3c>)
 8008f1a:	400b      	ands	r3, r1
 8008f1c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	dc08      	bgt.n	8008f36 <__ulp+0x1e>
 8008f24:	425b      	negs	r3, r3
 8008f26:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008f2a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008f2e:	da04      	bge.n	8008f3a <__ulp+0x22>
 8008f30:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008f34:	4113      	asrs	r3, r2
 8008f36:	2200      	movs	r2, #0
 8008f38:	e008      	b.n	8008f4c <__ulp+0x34>
 8008f3a:	f1a2 0314 	sub.w	r3, r2, #20
 8008f3e:	2b1e      	cmp	r3, #30
 8008f40:	bfd6      	itet	le
 8008f42:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008f46:	2201      	movgt	r2, #1
 8008f48:	40da      	lsrle	r2, r3
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	4610      	mov	r0, r2
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	7ff00000 	.word	0x7ff00000

08008f58 <__b2d>:
 8008f58:	6902      	ldr	r2, [r0, #16]
 8008f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5c:	f100 0614 	add.w	r6, r0, #20
 8008f60:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008f64:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008f68:	4f1e      	ldr	r7, [pc, #120]	@ (8008fe4 <__b2d+0x8c>)
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f7ff fd54 	bl	8008a18 <__hi0bits>
 8008f70:	4603      	mov	r3, r0
 8008f72:	f1c0 0020 	rsb	r0, r0, #32
 8008f76:	2b0a      	cmp	r3, #10
 8008f78:	f1a2 0504 	sub.w	r5, r2, #4
 8008f7c:	6008      	str	r0, [r1, #0]
 8008f7e:	dc12      	bgt.n	8008fa6 <__b2d+0x4e>
 8008f80:	42ae      	cmp	r6, r5
 8008f82:	bf2c      	ite	cs
 8008f84:	2200      	movcs	r2, #0
 8008f86:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008f8a:	f1c3 0c0b 	rsb	ip, r3, #11
 8008f8e:	3315      	adds	r3, #21
 8008f90:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008f94:	fa04 f303 	lsl.w	r3, r4, r3
 8008f98:	fa22 f20c 	lsr.w	r2, r2, ip
 8008f9c:	ea4e 0107 	orr.w	r1, lr, r7
 8008fa0:	431a      	orrs	r2, r3
 8008fa2:	4610      	mov	r0, r2
 8008fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fa6:	42ae      	cmp	r6, r5
 8008fa8:	bf36      	itet	cc
 8008faa:	f1a2 0508 	subcc.w	r5, r2, #8
 8008fae:	2200      	movcs	r2, #0
 8008fb0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008fb4:	3b0b      	subs	r3, #11
 8008fb6:	d012      	beq.n	8008fde <__b2d+0x86>
 8008fb8:	f1c3 0720 	rsb	r7, r3, #32
 8008fbc:	fa22 f107 	lsr.w	r1, r2, r7
 8008fc0:	409c      	lsls	r4, r3
 8008fc2:	430c      	orrs	r4, r1
 8008fc4:	42b5      	cmp	r5, r6
 8008fc6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8008fca:	bf94      	ite	ls
 8008fcc:	2400      	movls	r4, #0
 8008fce:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008fd2:	409a      	lsls	r2, r3
 8008fd4:	40fc      	lsrs	r4, r7
 8008fd6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008fda:	4322      	orrs	r2, r4
 8008fdc:	e7e1      	b.n	8008fa2 <__b2d+0x4a>
 8008fde:	ea44 0107 	orr.w	r1, r4, r7
 8008fe2:	e7de      	b.n	8008fa2 <__b2d+0x4a>
 8008fe4:	3ff00000 	.word	0x3ff00000

08008fe8 <__d2b>:
 8008fe8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008fec:	2101      	movs	r1, #1
 8008fee:	4690      	mov	r8, r2
 8008ff0:	4699      	mov	r9, r3
 8008ff2:	9e08      	ldr	r6, [sp, #32]
 8008ff4:	f7ff fc1e 	bl	8008834 <_Balloc>
 8008ff8:	4604      	mov	r4, r0
 8008ffa:	b930      	cbnz	r0, 800900a <__d2b+0x22>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	f240 310f 	movw	r1, #783	@ 0x30f
 8009002:	4b23      	ldr	r3, [pc, #140]	@ (8009090 <__d2b+0xa8>)
 8009004:	4823      	ldr	r0, [pc, #140]	@ (8009094 <__d2b+0xac>)
 8009006:	f001 f961 	bl	800a2cc <__assert_func>
 800900a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800900e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009012:	b10d      	cbz	r5, 8009018 <__d2b+0x30>
 8009014:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009018:	9301      	str	r3, [sp, #4]
 800901a:	f1b8 0300 	subs.w	r3, r8, #0
 800901e:	d024      	beq.n	800906a <__d2b+0x82>
 8009020:	4668      	mov	r0, sp
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	f7ff fd17 	bl	8008a56 <__lo0bits>
 8009028:	e9dd 1200 	ldrd	r1, r2, [sp]
 800902c:	b1d8      	cbz	r0, 8009066 <__d2b+0x7e>
 800902e:	f1c0 0320 	rsb	r3, r0, #32
 8009032:	fa02 f303 	lsl.w	r3, r2, r3
 8009036:	430b      	orrs	r3, r1
 8009038:	40c2      	lsrs	r2, r0
 800903a:	6163      	str	r3, [r4, #20]
 800903c:	9201      	str	r2, [sp, #4]
 800903e:	9b01      	ldr	r3, [sp, #4]
 8009040:	2b00      	cmp	r3, #0
 8009042:	bf0c      	ite	eq
 8009044:	2201      	moveq	r2, #1
 8009046:	2202      	movne	r2, #2
 8009048:	61a3      	str	r3, [r4, #24]
 800904a:	6122      	str	r2, [r4, #16]
 800904c:	b1ad      	cbz	r5, 800907a <__d2b+0x92>
 800904e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009052:	4405      	add	r5, r0
 8009054:	6035      	str	r5, [r6, #0]
 8009056:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800905a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800905c:	6018      	str	r0, [r3, #0]
 800905e:	4620      	mov	r0, r4
 8009060:	b002      	add	sp, #8
 8009062:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009066:	6161      	str	r1, [r4, #20]
 8009068:	e7e9      	b.n	800903e <__d2b+0x56>
 800906a:	a801      	add	r0, sp, #4
 800906c:	f7ff fcf3 	bl	8008a56 <__lo0bits>
 8009070:	9b01      	ldr	r3, [sp, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	6163      	str	r3, [r4, #20]
 8009076:	3020      	adds	r0, #32
 8009078:	e7e7      	b.n	800904a <__d2b+0x62>
 800907a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800907e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009082:	6030      	str	r0, [r6, #0]
 8009084:	6918      	ldr	r0, [r3, #16]
 8009086:	f7ff fcc7 	bl	8008a18 <__hi0bits>
 800908a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800908e:	e7e4      	b.n	800905a <__d2b+0x72>
 8009090:	0800d94f 	.word	0x0800d94f
 8009094:	0800d960 	.word	0x0800d960

08009098 <__ratio>:
 8009098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800909c:	b085      	sub	sp, #20
 800909e:	e9cd 1000 	strd	r1, r0, [sp]
 80090a2:	a902      	add	r1, sp, #8
 80090a4:	f7ff ff58 	bl	8008f58 <__b2d>
 80090a8:	468b      	mov	fp, r1
 80090aa:	4606      	mov	r6, r0
 80090ac:	460f      	mov	r7, r1
 80090ae:	9800      	ldr	r0, [sp, #0]
 80090b0:	a903      	add	r1, sp, #12
 80090b2:	f7ff ff51 	bl	8008f58 <__b2d>
 80090b6:	460d      	mov	r5, r1
 80090b8:	9b01      	ldr	r3, [sp, #4]
 80090ba:	4689      	mov	r9, r1
 80090bc:	6919      	ldr	r1, [r3, #16]
 80090be:	9b00      	ldr	r3, [sp, #0]
 80090c0:	4604      	mov	r4, r0
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	4630      	mov	r0, r6
 80090c6:	1ac9      	subs	r1, r1, r3
 80090c8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80090cc:	1a9b      	subs	r3, r3, r2
 80090ce:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	bfcd      	iteet	gt
 80090d6:	463a      	movgt	r2, r7
 80090d8:	462a      	movle	r2, r5
 80090da:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80090de:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80090e2:	bfd8      	it	le
 80090e4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80090e8:	464b      	mov	r3, r9
 80090ea:	4622      	mov	r2, r4
 80090ec:	4659      	mov	r1, fp
 80090ee:	f7f7 fb1d 	bl	800072c <__aeabi_ddiv>
 80090f2:	b005      	add	sp, #20
 80090f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090f8 <__copybits>:
 80090f8:	3901      	subs	r1, #1
 80090fa:	b570      	push	{r4, r5, r6, lr}
 80090fc:	1149      	asrs	r1, r1, #5
 80090fe:	6914      	ldr	r4, [r2, #16]
 8009100:	3101      	adds	r1, #1
 8009102:	f102 0314 	add.w	r3, r2, #20
 8009106:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800910a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800910e:	1f05      	subs	r5, r0, #4
 8009110:	42a3      	cmp	r3, r4
 8009112:	d30c      	bcc.n	800912e <__copybits+0x36>
 8009114:	1aa3      	subs	r3, r4, r2
 8009116:	3b11      	subs	r3, #17
 8009118:	f023 0303 	bic.w	r3, r3, #3
 800911c:	3211      	adds	r2, #17
 800911e:	42a2      	cmp	r2, r4
 8009120:	bf88      	it	hi
 8009122:	2300      	movhi	r3, #0
 8009124:	4418      	add	r0, r3
 8009126:	2300      	movs	r3, #0
 8009128:	4288      	cmp	r0, r1
 800912a:	d305      	bcc.n	8009138 <__copybits+0x40>
 800912c:	bd70      	pop	{r4, r5, r6, pc}
 800912e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009132:	f845 6f04 	str.w	r6, [r5, #4]!
 8009136:	e7eb      	b.n	8009110 <__copybits+0x18>
 8009138:	f840 3b04 	str.w	r3, [r0], #4
 800913c:	e7f4      	b.n	8009128 <__copybits+0x30>

0800913e <__any_on>:
 800913e:	f100 0214 	add.w	r2, r0, #20
 8009142:	6900      	ldr	r0, [r0, #16]
 8009144:	114b      	asrs	r3, r1, #5
 8009146:	4298      	cmp	r0, r3
 8009148:	b510      	push	{r4, lr}
 800914a:	db11      	blt.n	8009170 <__any_on+0x32>
 800914c:	dd0a      	ble.n	8009164 <__any_on+0x26>
 800914e:	f011 011f 	ands.w	r1, r1, #31
 8009152:	d007      	beq.n	8009164 <__any_on+0x26>
 8009154:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009158:	fa24 f001 	lsr.w	r0, r4, r1
 800915c:	fa00 f101 	lsl.w	r1, r0, r1
 8009160:	428c      	cmp	r4, r1
 8009162:	d10b      	bne.n	800917c <__any_on+0x3e>
 8009164:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009168:	4293      	cmp	r3, r2
 800916a:	d803      	bhi.n	8009174 <__any_on+0x36>
 800916c:	2000      	movs	r0, #0
 800916e:	bd10      	pop	{r4, pc}
 8009170:	4603      	mov	r3, r0
 8009172:	e7f7      	b.n	8009164 <__any_on+0x26>
 8009174:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009178:	2900      	cmp	r1, #0
 800917a:	d0f5      	beq.n	8009168 <__any_on+0x2a>
 800917c:	2001      	movs	r0, #1
 800917e:	e7f6      	b.n	800916e <__any_on+0x30>

08009180 <sulp>:
 8009180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009184:	460f      	mov	r7, r1
 8009186:	4690      	mov	r8, r2
 8009188:	f7ff fec6 	bl	8008f18 <__ulp>
 800918c:	4604      	mov	r4, r0
 800918e:	460d      	mov	r5, r1
 8009190:	f1b8 0f00 	cmp.w	r8, #0
 8009194:	d011      	beq.n	80091ba <sulp+0x3a>
 8009196:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800919a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800919e:	2b00      	cmp	r3, #0
 80091a0:	dd0b      	ble.n	80091ba <sulp+0x3a>
 80091a2:	2400      	movs	r4, #0
 80091a4:	051b      	lsls	r3, r3, #20
 80091a6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80091aa:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80091ae:	4622      	mov	r2, r4
 80091b0:	462b      	mov	r3, r5
 80091b2:	f7f7 f991 	bl	80004d8 <__aeabi_dmul>
 80091b6:	4604      	mov	r4, r0
 80091b8:	460d      	mov	r5, r1
 80091ba:	4620      	mov	r0, r4
 80091bc:	4629      	mov	r1, r5
 80091be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091c2:	0000      	movs	r0, r0
 80091c4:	0000      	movs	r0, r0
	...

080091c8 <_strtod_l>:
 80091c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091cc:	b09f      	sub	sp, #124	@ 0x7c
 80091ce:	9217      	str	r2, [sp, #92]	@ 0x5c
 80091d0:	2200      	movs	r2, #0
 80091d2:	460c      	mov	r4, r1
 80091d4:	921a      	str	r2, [sp, #104]	@ 0x68
 80091d6:	f04f 0a00 	mov.w	sl, #0
 80091da:	f04f 0b00 	mov.w	fp, #0
 80091de:	460a      	mov	r2, r1
 80091e0:	9005      	str	r0, [sp, #20]
 80091e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80091e4:	7811      	ldrb	r1, [r2, #0]
 80091e6:	292b      	cmp	r1, #43	@ 0x2b
 80091e8:	d048      	beq.n	800927c <_strtod_l+0xb4>
 80091ea:	d836      	bhi.n	800925a <_strtod_l+0x92>
 80091ec:	290d      	cmp	r1, #13
 80091ee:	d830      	bhi.n	8009252 <_strtod_l+0x8a>
 80091f0:	2908      	cmp	r1, #8
 80091f2:	d830      	bhi.n	8009256 <_strtod_l+0x8e>
 80091f4:	2900      	cmp	r1, #0
 80091f6:	d039      	beq.n	800926c <_strtod_l+0xa4>
 80091f8:	2200      	movs	r2, #0
 80091fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80091fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80091fe:	782a      	ldrb	r2, [r5, #0]
 8009200:	2a30      	cmp	r2, #48	@ 0x30
 8009202:	f040 80b1 	bne.w	8009368 <_strtod_l+0x1a0>
 8009206:	786a      	ldrb	r2, [r5, #1]
 8009208:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800920c:	2a58      	cmp	r2, #88	@ 0x58
 800920e:	d16c      	bne.n	80092ea <_strtod_l+0x122>
 8009210:	9302      	str	r3, [sp, #8]
 8009212:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009214:	4a8e      	ldr	r2, [pc, #568]	@ (8009450 <_strtod_l+0x288>)
 8009216:	9301      	str	r3, [sp, #4]
 8009218:	ab1a      	add	r3, sp, #104	@ 0x68
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	9805      	ldr	r0, [sp, #20]
 800921e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009220:	a919      	add	r1, sp, #100	@ 0x64
 8009222:	f001 f8ed 	bl	800a400 <__gethex>
 8009226:	f010 060f 	ands.w	r6, r0, #15
 800922a:	4604      	mov	r4, r0
 800922c:	d005      	beq.n	800923a <_strtod_l+0x72>
 800922e:	2e06      	cmp	r6, #6
 8009230:	d126      	bne.n	8009280 <_strtod_l+0xb8>
 8009232:	2300      	movs	r3, #0
 8009234:	3501      	adds	r5, #1
 8009236:	9519      	str	r5, [sp, #100]	@ 0x64
 8009238:	930b      	str	r3, [sp, #44]	@ 0x2c
 800923a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800923c:	2b00      	cmp	r3, #0
 800923e:	f040 8584 	bne.w	8009d4a <_strtod_l+0xb82>
 8009242:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009244:	b1bb      	cbz	r3, 8009276 <_strtod_l+0xae>
 8009246:	4650      	mov	r0, sl
 8009248:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800924c:	b01f      	add	sp, #124	@ 0x7c
 800924e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009252:	2920      	cmp	r1, #32
 8009254:	d1d0      	bne.n	80091f8 <_strtod_l+0x30>
 8009256:	3201      	adds	r2, #1
 8009258:	e7c3      	b.n	80091e2 <_strtod_l+0x1a>
 800925a:	292d      	cmp	r1, #45	@ 0x2d
 800925c:	d1cc      	bne.n	80091f8 <_strtod_l+0x30>
 800925e:	2101      	movs	r1, #1
 8009260:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009262:	1c51      	adds	r1, r2, #1
 8009264:	9119      	str	r1, [sp, #100]	@ 0x64
 8009266:	7852      	ldrb	r2, [r2, #1]
 8009268:	2a00      	cmp	r2, #0
 800926a:	d1c7      	bne.n	80091fc <_strtod_l+0x34>
 800926c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800926e:	9419      	str	r4, [sp, #100]	@ 0x64
 8009270:	2b00      	cmp	r3, #0
 8009272:	f040 8568 	bne.w	8009d46 <_strtod_l+0xb7e>
 8009276:	4650      	mov	r0, sl
 8009278:	4659      	mov	r1, fp
 800927a:	e7e7      	b.n	800924c <_strtod_l+0x84>
 800927c:	2100      	movs	r1, #0
 800927e:	e7ef      	b.n	8009260 <_strtod_l+0x98>
 8009280:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009282:	b13a      	cbz	r2, 8009294 <_strtod_l+0xcc>
 8009284:	2135      	movs	r1, #53	@ 0x35
 8009286:	a81c      	add	r0, sp, #112	@ 0x70
 8009288:	f7ff ff36 	bl	80090f8 <__copybits>
 800928c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800928e:	9805      	ldr	r0, [sp, #20]
 8009290:	f7ff fb10 	bl	80088b4 <_Bfree>
 8009294:	3e01      	subs	r6, #1
 8009296:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009298:	2e04      	cmp	r6, #4
 800929a:	d806      	bhi.n	80092aa <_strtod_l+0xe2>
 800929c:	e8df f006 	tbb	[pc, r6]
 80092a0:	201d0314 	.word	0x201d0314
 80092a4:	14          	.byte	0x14
 80092a5:	00          	.byte	0x00
 80092a6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80092aa:	05e1      	lsls	r1, r4, #23
 80092ac:	bf48      	it	mi
 80092ae:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80092b2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80092b6:	0d1b      	lsrs	r3, r3, #20
 80092b8:	051b      	lsls	r3, r3, #20
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1bd      	bne.n	800923a <_strtod_l+0x72>
 80092be:	f7fe fb1b 	bl	80078f8 <__errno>
 80092c2:	2322      	movs	r3, #34	@ 0x22
 80092c4:	6003      	str	r3, [r0, #0]
 80092c6:	e7b8      	b.n	800923a <_strtod_l+0x72>
 80092c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80092cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80092d0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80092d4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80092d8:	e7e7      	b.n	80092aa <_strtod_l+0xe2>
 80092da:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8009454 <_strtod_l+0x28c>
 80092de:	e7e4      	b.n	80092aa <_strtod_l+0xe2>
 80092e0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80092e4:	f04f 3aff 	mov.w	sl, #4294967295
 80092e8:	e7df      	b.n	80092aa <_strtod_l+0xe2>
 80092ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092ec:	1c5a      	adds	r2, r3, #1
 80092ee:	9219      	str	r2, [sp, #100]	@ 0x64
 80092f0:	785b      	ldrb	r3, [r3, #1]
 80092f2:	2b30      	cmp	r3, #48	@ 0x30
 80092f4:	d0f9      	beq.n	80092ea <_strtod_l+0x122>
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d09f      	beq.n	800923a <_strtod_l+0x72>
 80092fa:	2301      	movs	r3, #1
 80092fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80092fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009300:	220a      	movs	r2, #10
 8009302:	930c      	str	r3, [sp, #48]	@ 0x30
 8009304:	2300      	movs	r3, #0
 8009306:	461f      	mov	r7, r3
 8009308:	9308      	str	r3, [sp, #32]
 800930a:	930a      	str	r3, [sp, #40]	@ 0x28
 800930c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800930e:	7805      	ldrb	r5, [r0, #0]
 8009310:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009314:	b2d9      	uxtb	r1, r3
 8009316:	2909      	cmp	r1, #9
 8009318:	d928      	bls.n	800936c <_strtod_l+0x1a4>
 800931a:	2201      	movs	r2, #1
 800931c:	494e      	ldr	r1, [pc, #312]	@ (8009458 <_strtod_l+0x290>)
 800931e:	f000 ffad 	bl	800a27c <strncmp>
 8009322:	2800      	cmp	r0, #0
 8009324:	d032      	beq.n	800938c <_strtod_l+0x1c4>
 8009326:	2000      	movs	r0, #0
 8009328:	462a      	mov	r2, r5
 800932a:	4681      	mov	r9, r0
 800932c:	463d      	mov	r5, r7
 800932e:	4603      	mov	r3, r0
 8009330:	2a65      	cmp	r2, #101	@ 0x65
 8009332:	d001      	beq.n	8009338 <_strtod_l+0x170>
 8009334:	2a45      	cmp	r2, #69	@ 0x45
 8009336:	d114      	bne.n	8009362 <_strtod_l+0x19a>
 8009338:	b91d      	cbnz	r5, 8009342 <_strtod_l+0x17a>
 800933a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800933c:	4302      	orrs	r2, r0
 800933e:	d095      	beq.n	800926c <_strtod_l+0xa4>
 8009340:	2500      	movs	r5, #0
 8009342:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009344:	1c62      	adds	r2, r4, #1
 8009346:	9219      	str	r2, [sp, #100]	@ 0x64
 8009348:	7862      	ldrb	r2, [r4, #1]
 800934a:	2a2b      	cmp	r2, #43	@ 0x2b
 800934c:	d077      	beq.n	800943e <_strtod_l+0x276>
 800934e:	2a2d      	cmp	r2, #45	@ 0x2d
 8009350:	d07b      	beq.n	800944a <_strtod_l+0x282>
 8009352:	f04f 0c00 	mov.w	ip, #0
 8009356:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800935a:	2909      	cmp	r1, #9
 800935c:	f240 8082 	bls.w	8009464 <_strtod_l+0x29c>
 8009360:	9419      	str	r4, [sp, #100]	@ 0x64
 8009362:	f04f 0800 	mov.w	r8, #0
 8009366:	e0a2      	b.n	80094ae <_strtod_l+0x2e6>
 8009368:	2300      	movs	r3, #0
 800936a:	e7c7      	b.n	80092fc <_strtod_l+0x134>
 800936c:	2f08      	cmp	r7, #8
 800936e:	bfd5      	itete	le
 8009370:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009372:	9908      	ldrgt	r1, [sp, #32]
 8009374:	fb02 3301 	mlale	r3, r2, r1, r3
 8009378:	fb02 3301 	mlagt	r3, r2, r1, r3
 800937c:	f100 0001 	add.w	r0, r0, #1
 8009380:	bfd4      	ite	le
 8009382:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009384:	9308      	strgt	r3, [sp, #32]
 8009386:	3701      	adds	r7, #1
 8009388:	9019      	str	r0, [sp, #100]	@ 0x64
 800938a:	e7bf      	b.n	800930c <_strtod_l+0x144>
 800938c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800938e:	1c5a      	adds	r2, r3, #1
 8009390:	9219      	str	r2, [sp, #100]	@ 0x64
 8009392:	785a      	ldrb	r2, [r3, #1]
 8009394:	b37f      	cbz	r7, 80093f6 <_strtod_l+0x22e>
 8009396:	4681      	mov	r9, r0
 8009398:	463d      	mov	r5, r7
 800939a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800939e:	2b09      	cmp	r3, #9
 80093a0:	d912      	bls.n	80093c8 <_strtod_l+0x200>
 80093a2:	2301      	movs	r3, #1
 80093a4:	e7c4      	b.n	8009330 <_strtod_l+0x168>
 80093a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093a8:	3001      	adds	r0, #1
 80093aa:	1c5a      	adds	r2, r3, #1
 80093ac:	9219      	str	r2, [sp, #100]	@ 0x64
 80093ae:	785a      	ldrb	r2, [r3, #1]
 80093b0:	2a30      	cmp	r2, #48	@ 0x30
 80093b2:	d0f8      	beq.n	80093a6 <_strtod_l+0x1de>
 80093b4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80093b8:	2b08      	cmp	r3, #8
 80093ba:	f200 84cb 	bhi.w	8009d54 <_strtod_l+0xb8c>
 80093be:	4681      	mov	r9, r0
 80093c0:	2000      	movs	r0, #0
 80093c2:	4605      	mov	r5, r0
 80093c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80093c8:	3a30      	subs	r2, #48	@ 0x30
 80093ca:	f100 0301 	add.w	r3, r0, #1
 80093ce:	d02a      	beq.n	8009426 <_strtod_l+0x25e>
 80093d0:	4499      	add	r9, r3
 80093d2:	210a      	movs	r1, #10
 80093d4:	462b      	mov	r3, r5
 80093d6:	eb00 0c05 	add.w	ip, r0, r5
 80093da:	4563      	cmp	r3, ip
 80093dc:	d10d      	bne.n	80093fa <_strtod_l+0x232>
 80093de:	1c69      	adds	r1, r5, #1
 80093e0:	4401      	add	r1, r0
 80093e2:	4428      	add	r0, r5
 80093e4:	2808      	cmp	r0, #8
 80093e6:	dc16      	bgt.n	8009416 <_strtod_l+0x24e>
 80093e8:	230a      	movs	r3, #10
 80093ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80093ec:	fb03 2300 	mla	r3, r3, r0, r2
 80093f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80093f2:	2300      	movs	r3, #0
 80093f4:	e018      	b.n	8009428 <_strtod_l+0x260>
 80093f6:	4638      	mov	r0, r7
 80093f8:	e7da      	b.n	80093b0 <_strtod_l+0x1e8>
 80093fa:	2b08      	cmp	r3, #8
 80093fc:	f103 0301 	add.w	r3, r3, #1
 8009400:	dc03      	bgt.n	800940a <_strtod_l+0x242>
 8009402:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009404:	434e      	muls	r6, r1
 8009406:	960a      	str	r6, [sp, #40]	@ 0x28
 8009408:	e7e7      	b.n	80093da <_strtod_l+0x212>
 800940a:	2b10      	cmp	r3, #16
 800940c:	bfde      	ittt	le
 800940e:	9e08      	ldrle	r6, [sp, #32]
 8009410:	434e      	mulle	r6, r1
 8009412:	9608      	strle	r6, [sp, #32]
 8009414:	e7e1      	b.n	80093da <_strtod_l+0x212>
 8009416:	280f      	cmp	r0, #15
 8009418:	dceb      	bgt.n	80093f2 <_strtod_l+0x22a>
 800941a:	230a      	movs	r3, #10
 800941c:	9808      	ldr	r0, [sp, #32]
 800941e:	fb03 2300 	mla	r3, r3, r0, r2
 8009422:	9308      	str	r3, [sp, #32]
 8009424:	e7e5      	b.n	80093f2 <_strtod_l+0x22a>
 8009426:	4629      	mov	r1, r5
 8009428:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800942a:	460d      	mov	r5, r1
 800942c:	1c50      	adds	r0, r2, #1
 800942e:	9019      	str	r0, [sp, #100]	@ 0x64
 8009430:	7852      	ldrb	r2, [r2, #1]
 8009432:	4618      	mov	r0, r3
 8009434:	e7b1      	b.n	800939a <_strtod_l+0x1d2>
 8009436:	f04f 0900 	mov.w	r9, #0
 800943a:	2301      	movs	r3, #1
 800943c:	e77d      	b.n	800933a <_strtod_l+0x172>
 800943e:	f04f 0c00 	mov.w	ip, #0
 8009442:	1ca2      	adds	r2, r4, #2
 8009444:	9219      	str	r2, [sp, #100]	@ 0x64
 8009446:	78a2      	ldrb	r2, [r4, #2]
 8009448:	e785      	b.n	8009356 <_strtod_l+0x18e>
 800944a:	f04f 0c01 	mov.w	ip, #1
 800944e:	e7f8      	b.n	8009442 <_strtod_l+0x27a>
 8009450:	0800dad0 	.word	0x0800dad0
 8009454:	7ff00000 	.word	0x7ff00000
 8009458:	0800dab8 	.word	0x0800dab8
 800945c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800945e:	1c51      	adds	r1, r2, #1
 8009460:	9119      	str	r1, [sp, #100]	@ 0x64
 8009462:	7852      	ldrb	r2, [r2, #1]
 8009464:	2a30      	cmp	r2, #48	@ 0x30
 8009466:	d0f9      	beq.n	800945c <_strtod_l+0x294>
 8009468:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800946c:	2908      	cmp	r1, #8
 800946e:	f63f af78 	bhi.w	8009362 <_strtod_l+0x19a>
 8009472:	f04f 080a 	mov.w	r8, #10
 8009476:	3a30      	subs	r2, #48	@ 0x30
 8009478:	920e      	str	r2, [sp, #56]	@ 0x38
 800947a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800947c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800947e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009480:	1c56      	adds	r6, r2, #1
 8009482:	9619      	str	r6, [sp, #100]	@ 0x64
 8009484:	7852      	ldrb	r2, [r2, #1]
 8009486:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800948a:	f1be 0f09 	cmp.w	lr, #9
 800948e:	d939      	bls.n	8009504 <_strtod_l+0x33c>
 8009490:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009492:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009496:	1a76      	subs	r6, r6, r1
 8009498:	2e08      	cmp	r6, #8
 800949a:	dc03      	bgt.n	80094a4 <_strtod_l+0x2dc>
 800949c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800949e:	4588      	cmp	r8, r1
 80094a0:	bfa8      	it	ge
 80094a2:	4688      	movge	r8, r1
 80094a4:	f1bc 0f00 	cmp.w	ip, #0
 80094a8:	d001      	beq.n	80094ae <_strtod_l+0x2e6>
 80094aa:	f1c8 0800 	rsb	r8, r8, #0
 80094ae:	2d00      	cmp	r5, #0
 80094b0:	d14e      	bne.n	8009550 <_strtod_l+0x388>
 80094b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80094b4:	4308      	orrs	r0, r1
 80094b6:	f47f aec0 	bne.w	800923a <_strtod_l+0x72>
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f47f aed6 	bne.w	800926c <_strtod_l+0xa4>
 80094c0:	2a69      	cmp	r2, #105	@ 0x69
 80094c2:	d028      	beq.n	8009516 <_strtod_l+0x34e>
 80094c4:	dc25      	bgt.n	8009512 <_strtod_l+0x34a>
 80094c6:	2a49      	cmp	r2, #73	@ 0x49
 80094c8:	d025      	beq.n	8009516 <_strtod_l+0x34e>
 80094ca:	2a4e      	cmp	r2, #78	@ 0x4e
 80094cc:	f47f aece 	bne.w	800926c <_strtod_l+0xa4>
 80094d0:	499a      	ldr	r1, [pc, #616]	@ (800973c <_strtod_l+0x574>)
 80094d2:	a819      	add	r0, sp, #100	@ 0x64
 80094d4:	f001 f9b6 	bl	800a844 <__match>
 80094d8:	2800      	cmp	r0, #0
 80094da:	f43f aec7 	beq.w	800926c <_strtod_l+0xa4>
 80094de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	2b28      	cmp	r3, #40	@ 0x28
 80094e4:	d12e      	bne.n	8009544 <_strtod_l+0x37c>
 80094e6:	4996      	ldr	r1, [pc, #600]	@ (8009740 <_strtod_l+0x578>)
 80094e8:	aa1c      	add	r2, sp, #112	@ 0x70
 80094ea:	a819      	add	r0, sp, #100	@ 0x64
 80094ec:	f001 f9be 	bl	800a86c <__hexnan>
 80094f0:	2805      	cmp	r0, #5
 80094f2:	d127      	bne.n	8009544 <_strtod_l+0x37c>
 80094f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80094f6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80094fa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80094fe:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009502:	e69a      	b.n	800923a <_strtod_l+0x72>
 8009504:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009506:	fb08 2101 	mla	r1, r8, r1, r2
 800950a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800950e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009510:	e7b5      	b.n	800947e <_strtod_l+0x2b6>
 8009512:	2a6e      	cmp	r2, #110	@ 0x6e
 8009514:	e7da      	b.n	80094cc <_strtod_l+0x304>
 8009516:	498b      	ldr	r1, [pc, #556]	@ (8009744 <_strtod_l+0x57c>)
 8009518:	a819      	add	r0, sp, #100	@ 0x64
 800951a:	f001 f993 	bl	800a844 <__match>
 800951e:	2800      	cmp	r0, #0
 8009520:	f43f aea4 	beq.w	800926c <_strtod_l+0xa4>
 8009524:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009526:	4988      	ldr	r1, [pc, #544]	@ (8009748 <_strtod_l+0x580>)
 8009528:	3b01      	subs	r3, #1
 800952a:	a819      	add	r0, sp, #100	@ 0x64
 800952c:	9319      	str	r3, [sp, #100]	@ 0x64
 800952e:	f001 f989 	bl	800a844 <__match>
 8009532:	b910      	cbnz	r0, 800953a <_strtod_l+0x372>
 8009534:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009536:	3301      	adds	r3, #1
 8009538:	9319      	str	r3, [sp, #100]	@ 0x64
 800953a:	f04f 0a00 	mov.w	sl, #0
 800953e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800974c <_strtod_l+0x584>
 8009542:	e67a      	b.n	800923a <_strtod_l+0x72>
 8009544:	4882      	ldr	r0, [pc, #520]	@ (8009750 <_strtod_l+0x588>)
 8009546:	f000 febb 	bl	800a2c0 <nan>
 800954a:	4682      	mov	sl, r0
 800954c:	468b      	mov	fp, r1
 800954e:	e674      	b.n	800923a <_strtod_l+0x72>
 8009550:	eba8 0309 	sub.w	r3, r8, r9
 8009554:	2f00      	cmp	r7, #0
 8009556:	bf08      	it	eq
 8009558:	462f      	moveq	r7, r5
 800955a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800955c:	2d10      	cmp	r5, #16
 800955e:	462c      	mov	r4, r5
 8009560:	9309      	str	r3, [sp, #36]	@ 0x24
 8009562:	bfa8      	it	ge
 8009564:	2410      	movge	r4, #16
 8009566:	f7f6 ff3d 	bl	80003e4 <__aeabi_ui2d>
 800956a:	2d09      	cmp	r5, #9
 800956c:	4682      	mov	sl, r0
 800956e:	468b      	mov	fp, r1
 8009570:	dc11      	bgt.n	8009596 <_strtod_l+0x3ce>
 8009572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009574:	2b00      	cmp	r3, #0
 8009576:	f43f ae60 	beq.w	800923a <_strtod_l+0x72>
 800957a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800957c:	dd76      	ble.n	800966c <_strtod_l+0x4a4>
 800957e:	2b16      	cmp	r3, #22
 8009580:	dc5d      	bgt.n	800963e <_strtod_l+0x476>
 8009582:	4974      	ldr	r1, [pc, #464]	@ (8009754 <_strtod_l+0x58c>)
 8009584:	4652      	mov	r2, sl
 8009586:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800958a:	465b      	mov	r3, fp
 800958c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009590:	f7f6 ffa2 	bl	80004d8 <__aeabi_dmul>
 8009594:	e7d9      	b.n	800954a <_strtod_l+0x382>
 8009596:	4b6f      	ldr	r3, [pc, #444]	@ (8009754 <_strtod_l+0x58c>)
 8009598:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800959c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80095a0:	f7f6 ff9a 	bl	80004d8 <__aeabi_dmul>
 80095a4:	4682      	mov	sl, r0
 80095a6:	9808      	ldr	r0, [sp, #32]
 80095a8:	468b      	mov	fp, r1
 80095aa:	f7f6 ff1b 	bl	80003e4 <__aeabi_ui2d>
 80095ae:	4602      	mov	r2, r0
 80095b0:	460b      	mov	r3, r1
 80095b2:	4650      	mov	r0, sl
 80095b4:	4659      	mov	r1, fp
 80095b6:	f7f6 fdd9 	bl	800016c <__adddf3>
 80095ba:	2d0f      	cmp	r5, #15
 80095bc:	4682      	mov	sl, r0
 80095be:	468b      	mov	fp, r1
 80095c0:	ddd7      	ble.n	8009572 <_strtod_l+0x3aa>
 80095c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095c4:	1b2c      	subs	r4, r5, r4
 80095c6:	441c      	add	r4, r3
 80095c8:	2c00      	cmp	r4, #0
 80095ca:	f340 8096 	ble.w	80096fa <_strtod_l+0x532>
 80095ce:	f014 030f 	ands.w	r3, r4, #15
 80095d2:	d00a      	beq.n	80095ea <_strtod_l+0x422>
 80095d4:	495f      	ldr	r1, [pc, #380]	@ (8009754 <_strtod_l+0x58c>)
 80095d6:	4652      	mov	r2, sl
 80095d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80095dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095e0:	465b      	mov	r3, fp
 80095e2:	f7f6 ff79 	bl	80004d8 <__aeabi_dmul>
 80095e6:	4682      	mov	sl, r0
 80095e8:	468b      	mov	fp, r1
 80095ea:	f034 040f 	bics.w	r4, r4, #15
 80095ee:	d073      	beq.n	80096d8 <_strtod_l+0x510>
 80095f0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80095f4:	dd48      	ble.n	8009688 <_strtod_l+0x4c0>
 80095f6:	2400      	movs	r4, #0
 80095f8:	46a0      	mov	r8, r4
 80095fa:	46a1      	mov	r9, r4
 80095fc:	940a      	str	r4, [sp, #40]	@ 0x28
 80095fe:	2322      	movs	r3, #34	@ 0x22
 8009600:	f04f 0a00 	mov.w	sl, #0
 8009604:	9a05      	ldr	r2, [sp, #20]
 8009606:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800974c <_strtod_l+0x584>
 800960a:	6013      	str	r3, [r2, #0]
 800960c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800960e:	2b00      	cmp	r3, #0
 8009610:	f43f ae13 	beq.w	800923a <_strtod_l+0x72>
 8009614:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009616:	9805      	ldr	r0, [sp, #20]
 8009618:	f7ff f94c 	bl	80088b4 <_Bfree>
 800961c:	4649      	mov	r1, r9
 800961e:	9805      	ldr	r0, [sp, #20]
 8009620:	f7ff f948 	bl	80088b4 <_Bfree>
 8009624:	4641      	mov	r1, r8
 8009626:	9805      	ldr	r0, [sp, #20]
 8009628:	f7ff f944 	bl	80088b4 <_Bfree>
 800962c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800962e:	9805      	ldr	r0, [sp, #20]
 8009630:	f7ff f940 	bl	80088b4 <_Bfree>
 8009634:	4621      	mov	r1, r4
 8009636:	9805      	ldr	r0, [sp, #20]
 8009638:	f7ff f93c 	bl	80088b4 <_Bfree>
 800963c:	e5fd      	b.n	800923a <_strtod_l+0x72>
 800963e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009640:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009644:	4293      	cmp	r3, r2
 8009646:	dbbc      	blt.n	80095c2 <_strtod_l+0x3fa>
 8009648:	4c42      	ldr	r4, [pc, #264]	@ (8009754 <_strtod_l+0x58c>)
 800964a:	f1c5 050f 	rsb	r5, r5, #15
 800964e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009652:	4652      	mov	r2, sl
 8009654:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009658:	465b      	mov	r3, fp
 800965a:	f7f6 ff3d 	bl	80004d8 <__aeabi_dmul>
 800965e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009660:	1b5d      	subs	r5, r3, r5
 8009662:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009666:	e9d4 2300 	ldrd	r2, r3, [r4]
 800966a:	e791      	b.n	8009590 <_strtod_l+0x3c8>
 800966c:	3316      	adds	r3, #22
 800966e:	dba8      	blt.n	80095c2 <_strtod_l+0x3fa>
 8009670:	4b38      	ldr	r3, [pc, #224]	@ (8009754 <_strtod_l+0x58c>)
 8009672:	eba9 0808 	sub.w	r8, r9, r8
 8009676:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800967a:	4650      	mov	r0, sl
 800967c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009680:	4659      	mov	r1, fp
 8009682:	f7f7 f853 	bl	800072c <__aeabi_ddiv>
 8009686:	e760      	b.n	800954a <_strtod_l+0x382>
 8009688:	4b33      	ldr	r3, [pc, #204]	@ (8009758 <_strtod_l+0x590>)
 800968a:	4650      	mov	r0, sl
 800968c:	9308      	str	r3, [sp, #32]
 800968e:	2300      	movs	r3, #0
 8009690:	4659      	mov	r1, fp
 8009692:	461e      	mov	r6, r3
 8009694:	1124      	asrs	r4, r4, #4
 8009696:	2c01      	cmp	r4, #1
 8009698:	dc21      	bgt.n	80096de <_strtod_l+0x516>
 800969a:	b10b      	cbz	r3, 80096a0 <_strtod_l+0x4d8>
 800969c:	4682      	mov	sl, r0
 800969e:	468b      	mov	fp, r1
 80096a0:	492d      	ldr	r1, [pc, #180]	@ (8009758 <_strtod_l+0x590>)
 80096a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80096a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80096aa:	4652      	mov	r2, sl
 80096ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096b0:	465b      	mov	r3, fp
 80096b2:	f7f6 ff11 	bl	80004d8 <__aeabi_dmul>
 80096b6:	4b25      	ldr	r3, [pc, #148]	@ (800974c <_strtod_l+0x584>)
 80096b8:	460a      	mov	r2, r1
 80096ba:	400b      	ands	r3, r1
 80096bc:	4927      	ldr	r1, [pc, #156]	@ (800975c <_strtod_l+0x594>)
 80096be:	4682      	mov	sl, r0
 80096c0:	428b      	cmp	r3, r1
 80096c2:	d898      	bhi.n	80095f6 <_strtod_l+0x42e>
 80096c4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80096c8:	428b      	cmp	r3, r1
 80096ca:	bf86      	itte	hi
 80096cc:	f04f 3aff 	movhi.w	sl, #4294967295
 80096d0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009760 <_strtod_l+0x598>
 80096d4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80096d8:	2300      	movs	r3, #0
 80096da:	9308      	str	r3, [sp, #32]
 80096dc:	e07a      	b.n	80097d4 <_strtod_l+0x60c>
 80096de:	07e2      	lsls	r2, r4, #31
 80096e0:	d505      	bpl.n	80096ee <_strtod_l+0x526>
 80096e2:	9b08      	ldr	r3, [sp, #32]
 80096e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e8:	f7f6 fef6 	bl	80004d8 <__aeabi_dmul>
 80096ec:	2301      	movs	r3, #1
 80096ee:	9a08      	ldr	r2, [sp, #32]
 80096f0:	3601      	adds	r6, #1
 80096f2:	3208      	adds	r2, #8
 80096f4:	1064      	asrs	r4, r4, #1
 80096f6:	9208      	str	r2, [sp, #32]
 80096f8:	e7cd      	b.n	8009696 <_strtod_l+0x4ce>
 80096fa:	d0ed      	beq.n	80096d8 <_strtod_l+0x510>
 80096fc:	4264      	negs	r4, r4
 80096fe:	f014 020f 	ands.w	r2, r4, #15
 8009702:	d00a      	beq.n	800971a <_strtod_l+0x552>
 8009704:	4b13      	ldr	r3, [pc, #76]	@ (8009754 <_strtod_l+0x58c>)
 8009706:	4650      	mov	r0, sl
 8009708:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800970c:	4659      	mov	r1, fp
 800970e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009712:	f7f7 f80b 	bl	800072c <__aeabi_ddiv>
 8009716:	4682      	mov	sl, r0
 8009718:	468b      	mov	fp, r1
 800971a:	1124      	asrs	r4, r4, #4
 800971c:	d0dc      	beq.n	80096d8 <_strtod_l+0x510>
 800971e:	2c1f      	cmp	r4, #31
 8009720:	dd20      	ble.n	8009764 <_strtod_l+0x59c>
 8009722:	2400      	movs	r4, #0
 8009724:	46a0      	mov	r8, r4
 8009726:	46a1      	mov	r9, r4
 8009728:	940a      	str	r4, [sp, #40]	@ 0x28
 800972a:	2322      	movs	r3, #34	@ 0x22
 800972c:	9a05      	ldr	r2, [sp, #20]
 800972e:	f04f 0a00 	mov.w	sl, #0
 8009732:	f04f 0b00 	mov.w	fp, #0
 8009736:	6013      	str	r3, [r2, #0]
 8009738:	e768      	b.n	800960c <_strtod_l+0x444>
 800973a:	bf00      	nop
 800973c:	0800d8a7 	.word	0x0800d8a7
 8009740:	0800dabc 	.word	0x0800dabc
 8009744:	0800d89f 	.word	0x0800d89f
 8009748:	0800d8d6 	.word	0x0800d8d6
 800974c:	7ff00000 	.word	0x7ff00000
 8009750:	0800dc65 	.word	0x0800dc65
 8009754:	0800d9f0 	.word	0x0800d9f0
 8009758:	0800d9c8 	.word	0x0800d9c8
 800975c:	7ca00000 	.word	0x7ca00000
 8009760:	7fefffff 	.word	0x7fefffff
 8009764:	f014 0310 	ands.w	r3, r4, #16
 8009768:	bf18      	it	ne
 800976a:	236a      	movne	r3, #106	@ 0x6a
 800976c:	4650      	mov	r0, sl
 800976e:	9308      	str	r3, [sp, #32]
 8009770:	4659      	mov	r1, fp
 8009772:	2300      	movs	r3, #0
 8009774:	4ea9      	ldr	r6, [pc, #676]	@ (8009a1c <_strtod_l+0x854>)
 8009776:	07e2      	lsls	r2, r4, #31
 8009778:	d504      	bpl.n	8009784 <_strtod_l+0x5bc>
 800977a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800977e:	f7f6 feab 	bl	80004d8 <__aeabi_dmul>
 8009782:	2301      	movs	r3, #1
 8009784:	1064      	asrs	r4, r4, #1
 8009786:	f106 0608 	add.w	r6, r6, #8
 800978a:	d1f4      	bne.n	8009776 <_strtod_l+0x5ae>
 800978c:	b10b      	cbz	r3, 8009792 <_strtod_l+0x5ca>
 800978e:	4682      	mov	sl, r0
 8009790:	468b      	mov	fp, r1
 8009792:	9b08      	ldr	r3, [sp, #32]
 8009794:	b1b3      	cbz	r3, 80097c4 <_strtod_l+0x5fc>
 8009796:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800979a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800979e:	2b00      	cmp	r3, #0
 80097a0:	4659      	mov	r1, fp
 80097a2:	dd0f      	ble.n	80097c4 <_strtod_l+0x5fc>
 80097a4:	2b1f      	cmp	r3, #31
 80097a6:	dd57      	ble.n	8009858 <_strtod_l+0x690>
 80097a8:	2b34      	cmp	r3, #52	@ 0x34
 80097aa:	bfd8      	it	le
 80097ac:	f04f 33ff 	movle.w	r3, #4294967295
 80097b0:	f04f 0a00 	mov.w	sl, #0
 80097b4:	bfcf      	iteee	gt
 80097b6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80097ba:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80097be:	4093      	lslle	r3, r2
 80097c0:	ea03 0b01 	andle.w	fp, r3, r1
 80097c4:	2200      	movs	r2, #0
 80097c6:	2300      	movs	r3, #0
 80097c8:	4650      	mov	r0, sl
 80097ca:	4659      	mov	r1, fp
 80097cc:	f7f7 f8ec 	bl	80009a8 <__aeabi_dcmpeq>
 80097d0:	2800      	cmp	r0, #0
 80097d2:	d1a6      	bne.n	8009722 <_strtod_l+0x55a>
 80097d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097d6:	463a      	mov	r2, r7
 80097d8:	9300      	str	r3, [sp, #0]
 80097da:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80097dc:	462b      	mov	r3, r5
 80097de:	9805      	ldr	r0, [sp, #20]
 80097e0:	f7ff f8d0 	bl	8008984 <__s2b>
 80097e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80097e6:	2800      	cmp	r0, #0
 80097e8:	f43f af05 	beq.w	80095f6 <_strtod_l+0x42e>
 80097ec:	2400      	movs	r4, #0
 80097ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097f0:	eba9 0308 	sub.w	r3, r9, r8
 80097f4:	2a00      	cmp	r2, #0
 80097f6:	bfa8      	it	ge
 80097f8:	2300      	movge	r3, #0
 80097fa:	46a0      	mov	r8, r4
 80097fc:	9312      	str	r3, [sp, #72]	@ 0x48
 80097fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009802:	9316      	str	r3, [sp, #88]	@ 0x58
 8009804:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009806:	9805      	ldr	r0, [sp, #20]
 8009808:	6859      	ldr	r1, [r3, #4]
 800980a:	f7ff f813 	bl	8008834 <_Balloc>
 800980e:	4681      	mov	r9, r0
 8009810:	2800      	cmp	r0, #0
 8009812:	f43f aef4 	beq.w	80095fe <_strtod_l+0x436>
 8009816:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009818:	300c      	adds	r0, #12
 800981a:	691a      	ldr	r2, [r3, #16]
 800981c:	f103 010c 	add.w	r1, r3, #12
 8009820:	3202      	adds	r2, #2
 8009822:	0092      	lsls	r2, r2, #2
 8009824:	f7fe f8a3 	bl	800796e <memcpy>
 8009828:	ab1c      	add	r3, sp, #112	@ 0x70
 800982a:	9301      	str	r3, [sp, #4]
 800982c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	4652      	mov	r2, sl
 8009832:	465b      	mov	r3, fp
 8009834:	9805      	ldr	r0, [sp, #20]
 8009836:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800983a:	f7ff fbd5 	bl	8008fe8 <__d2b>
 800983e:	901a      	str	r0, [sp, #104]	@ 0x68
 8009840:	2800      	cmp	r0, #0
 8009842:	f43f aedc 	beq.w	80095fe <_strtod_l+0x436>
 8009846:	2101      	movs	r1, #1
 8009848:	9805      	ldr	r0, [sp, #20]
 800984a:	f7ff f931 	bl	8008ab0 <__i2b>
 800984e:	4680      	mov	r8, r0
 8009850:	b948      	cbnz	r0, 8009866 <_strtod_l+0x69e>
 8009852:	f04f 0800 	mov.w	r8, #0
 8009856:	e6d2      	b.n	80095fe <_strtod_l+0x436>
 8009858:	f04f 32ff 	mov.w	r2, #4294967295
 800985c:	fa02 f303 	lsl.w	r3, r2, r3
 8009860:	ea03 0a0a 	and.w	sl, r3, sl
 8009864:	e7ae      	b.n	80097c4 <_strtod_l+0x5fc>
 8009866:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009868:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800986a:	2d00      	cmp	r5, #0
 800986c:	bfab      	itete	ge
 800986e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009870:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009872:	18ef      	addge	r7, r5, r3
 8009874:	1b5e      	sublt	r6, r3, r5
 8009876:	9b08      	ldr	r3, [sp, #32]
 8009878:	bfa8      	it	ge
 800987a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800987c:	eba5 0503 	sub.w	r5, r5, r3
 8009880:	4415      	add	r5, r2
 8009882:	4b67      	ldr	r3, [pc, #412]	@ (8009a20 <_strtod_l+0x858>)
 8009884:	f105 35ff 	add.w	r5, r5, #4294967295
 8009888:	bfb8      	it	lt
 800988a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800988c:	429d      	cmp	r5, r3
 800988e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009892:	da50      	bge.n	8009936 <_strtod_l+0x76e>
 8009894:	1b5b      	subs	r3, r3, r5
 8009896:	2b1f      	cmp	r3, #31
 8009898:	f04f 0101 	mov.w	r1, #1
 800989c:	eba2 0203 	sub.w	r2, r2, r3
 80098a0:	dc3d      	bgt.n	800991e <_strtod_l+0x756>
 80098a2:	fa01 f303 	lsl.w	r3, r1, r3
 80098a6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80098a8:	2300      	movs	r3, #0
 80098aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80098ac:	18bd      	adds	r5, r7, r2
 80098ae:	9b08      	ldr	r3, [sp, #32]
 80098b0:	42af      	cmp	r7, r5
 80098b2:	4416      	add	r6, r2
 80098b4:	441e      	add	r6, r3
 80098b6:	463b      	mov	r3, r7
 80098b8:	bfa8      	it	ge
 80098ba:	462b      	movge	r3, r5
 80098bc:	42b3      	cmp	r3, r6
 80098be:	bfa8      	it	ge
 80098c0:	4633      	movge	r3, r6
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	bfc2      	ittt	gt
 80098c6:	1aed      	subgt	r5, r5, r3
 80098c8:	1af6      	subgt	r6, r6, r3
 80098ca:	1aff      	subgt	r7, r7, r3
 80098cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	dd16      	ble.n	8009900 <_strtod_l+0x738>
 80098d2:	4641      	mov	r1, r8
 80098d4:	461a      	mov	r2, r3
 80098d6:	9805      	ldr	r0, [sp, #20]
 80098d8:	f7ff f9a8 	bl	8008c2c <__pow5mult>
 80098dc:	4680      	mov	r8, r0
 80098de:	2800      	cmp	r0, #0
 80098e0:	d0b7      	beq.n	8009852 <_strtod_l+0x68a>
 80098e2:	4601      	mov	r1, r0
 80098e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80098e6:	9805      	ldr	r0, [sp, #20]
 80098e8:	f7ff f8f8 	bl	8008adc <__multiply>
 80098ec:	900e      	str	r0, [sp, #56]	@ 0x38
 80098ee:	2800      	cmp	r0, #0
 80098f0:	f43f ae85 	beq.w	80095fe <_strtod_l+0x436>
 80098f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098f6:	9805      	ldr	r0, [sp, #20]
 80098f8:	f7fe ffdc 	bl	80088b4 <_Bfree>
 80098fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8009900:	2d00      	cmp	r5, #0
 8009902:	dc1d      	bgt.n	8009940 <_strtod_l+0x778>
 8009904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009906:	2b00      	cmp	r3, #0
 8009908:	dd23      	ble.n	8009952 <_strtod_l+0x78a>
 800990a:	4649      	mov	r1, r9
 800990c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800990e:	9805      	ldr	r0, [sp, #20]
 8009910:	f7ff f98c 	bl	8008c2c <__pow5mult>
 8009914:	4681      	mov	r9, r0
 8009916:	b9e0      	cbnz	r0, 8009952 <_strtod_l+0x78a>
 8009918:	f04f 0900 	mov.w	r9, #0
 800991c:	e66f      	b.n	80095fe <_strtod_l+0x436>
 800991e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009922:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009926:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800992a:	35e2      	adds	r5, #226	@ 0xe2
 800992c:	fa01 f305 	lsl.w	r3, r1, r5
 8009930:	9310      	str	r3, [sp, #64]	@ 0x40
 8009932:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009934:	e7ba      	b.n	80098ac <_strtod_l+0x6e4>
 8009936:	2300      	movs	r3, #0
 8009938:	9310      	str	r3, [sp, #64]	@ 0x40
 800993a:	2301      	movs	r3, #1
 800993c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800993e:	e7b5      	b.n	80098ac <_strtod_l+0x6e4>
 8009940:	462a      	mov	r2, r5
 8009942:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009944:	9805      	ldr	r0, [sp, #20]
 8009946:	f7ff f9cb 	bl	8008ce0 <__lshift>
 800994a:	901a      	str	r0, [sp, #104]	@ 0x68
 800994c:	2800      	cmp	r0, #0
 800994e:	d1d9      	bne.n	8009904 <_strtod_l+0x73c>
 8009950:	e655      	b.n	80095fe <_strtod_l+0x436>
 8009952:	2e00      	cmp	r6, #0
 8009954:	dd07      	ble.n	8009966 <_strtod_l+0x79e>
 8009956:	4649      	mov	r1, r9
 8009958:	4632      	mov	r2, r6
 800995a:	9805      	ldr	r0, [sp, #20]
 800995c:	f7ff f9c0 	bl	8008ce0 <__lshift>
 8009960:	4681      	mov	r9, r0
 8009962:	2800      	cmp	r0, #0
 8009964:	d0d8      	beq.n	8009918 <_strtod_l+0x750>
 8009966:	2f00      	cmp	r7, #0
 8009968:	dd08      	ble.n	800997c <_strtod_l+0x7b4>
 800996a:	4641      	mov	r1, r8
 800996c:	463a      	mov	r2, r7
 800996e:	9805      	ldr	r0, [sp, #20]
 8009970:	f7ff f9b6 	bl	8008ce0 <__lshift>
 8009974:	4680      	mov	r8, r0
 8009976:	2800      	cmp	r0, #0
 8009978:	f43f ae41 	beq.w	80095fe <_strtod_l+0x436>
 800997c:	464a      	mov	r2, r9
 800997e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009980:	9805      	ldr	r0, [sp, #20]
 8009982:	f7ff fa35 	bl	8008df0 <__mdiff>
 8009986:	4604      	mov	r4, r0
 8009988:	2800      	cmp	r0, #0
 800998a:	f43f ae38 	beq.w	80095fe <_strtod_l+0x436>
 800998e:	68c3      	ldr	r3, [r0, #12]
 8009990:	4641      	mov	r1, r8
 8009992:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009994:	2300      	movs	r3, #0
 8009996:	60c3      	str	r3, [r0, #12]
 8009998:	f7ff fa0e 	bl	8008db8 <__mcmp>
 800999c:	2800      	cmp	r0, #0
 800999e:	da45      	bge.n	8009a2c <_strtod_l+0x864>
 80099a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099a2:	ea53 030a 	orrs.w	r3, r3, sl
 80099a6:	d16b      	bne.n	8009a80 <_strtod_l+0x8b8>
 80099a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d167      	bne.n	8009a80 <_strtod_l+0x8b8>
 80099b0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80099b4:	0d1b      	lsrs	r3, r3, #20
 80099b6:	051b      	lsls	r3, r3, #20
 80099b8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80099bc:	d960      	bls.n	8009a80 <_strtod_l+0x8b8>
 80099be:	6963      	ldr	r3, [r4, #20]
 80099c0:	b913      	cbnz	r3, 80099c8 <_strtod_l+0x800>
 80099c2:	6923      	ldr	r3, [r4, #16]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	dd5b      	ble.n	8009a80 <_strtod_l+0x8b8>
 80099c8:	4621      	mov	r1, r4
 80099ca:	2201      	movs	r2, #1
 80099cc:	9805      	ldr	r0, [sp, #20]
 80099ce:	f7ff f987 	bl	8008ce0 <__lshift>
 80099d2:	4641      	mov	r1, r8
 80099d4:	4604      	mov	r4, r0
 80099d6:	f7ff f9ef 	bl	8008db8 <__mcmp>
 80099da:	2800      	cmp	r0, #0
 80099dc:	dd50      	ble.n	8009a80 <_strtod_l+0x8b8>
 80099de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80099e2:	9a08      	ldr	r2, [sp, #32]
 80099e4:	0d1b      	lsrs	r3, r3, #20
 80099e6:	051b      	lsls	r3, r3, #20
 80099e8:	2a00      	cmp	r2, #0
 80099ea:	d06a      	beq.n	8009ac2 <_strtod_l+0x8fa>
 80099ec:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80099f0:	d867      	bhi.n	8009ac2 <_strtod_l+0x8fa>
 80099f2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80099f6:	f67f ae98 	bls.w	800972a <_strtod_l+0x562>
 80099fa:	4650      	mov	r0, sl
 80099fc:	4659      	mov	r1, fp
 80099fe:	4b09      	ldr	r3, [pc, #36]	@ (8009a24 <_strtod_l+0x85c>)
 8009a00:	2200      	movs	r2, #0
 8009a02:	f7f6 fd69 	bl	80004d8 <__aeabi_dmul>
 8009a06:	4b08      	ldr	r3, [pc, #32]	@ (8009a28 <_strtod_l+0x860>)
 8009a08:	4682      	mov	sl, r0
 8009a0a:	400b      	ands	r3, r1
 8009a0c:	468b      	mov	fp, r1
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	f47f ae00 	bne.w	8009614 <_strtod_l+0x44c>
 8009a14:	2322      	movs	r3, #34	@ 0x22
 8009a16:	9a05      	ldr	r2, [sp, #20]
 8009a18:	6013      	str	r3, [r2, #0]
 8009a1a:	e5fb      	b.n	8009614 <_strtod_l+0x44c>
 8009a1c:	0800dae8 	.word	0x0800dae8
 8009a20:	fffffc02 	.word	0xfffffc02
 8009a24:	39500000 	.word	0x39500000
 8009a28:	7ff00000 	.word	0x7ff00000
 8009a2c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009a30:	d165      	bne.n	8009afe <_strtod_l+0x936>
 8009a32:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009a34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a38:	b35a      	cbz	r2, 8009a92 <_strtod_l+0x8ca>
 8009a3a:	4a99      	ldr	r2, [pc, #612]	@ (8009ca0 <_strtod_l+0xad8>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d12b      	bne.n	8009a98 <_strtod_l+0x8d0>
 8009a40:	9b08      	ldr	r3, [sp, #32]
 8009a42:	4651      	mov	r1, sl
 8009a44:	b303      	cbz	r3, 8009a88 <_strtod_l+0x8c0>
 8009a46:	465a      	mov	r2, fp
 8009a48:	4b96      	ldr	r3, [pc, #600]	@ (8009ca4 <_strtod_l+0xadc>)
 8009a4a:	4013      	ands	r3, r2
 8009a4c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009a50:	f04f 32ff 	mov.w	r2, #4294967295
 8009a54:	d81b      	bhi.n	8009a8e <_strtod_l+0x8c6>
 8009a56:	0d1b      	lsrs	r3, r3, #20
 8009a58:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a60:	4299      	cmp	r1, r3
 8009a62:	d119      	bne.n	8009a98 <_strtod_l+0x8d0>
 8009a64:	4b90      	ldr	r3, [pc, #576]	@ (8009ca8 <_strtod_l+0xae0>)
 8009a66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d102      	bne.n	8009a72 <_strtod_l+0x8aa>
 8009a6c:	3101      	adds	r1, #1
 8009a6e:	f43f adc6 	beq.w	80095fe <_strtod_l+0x436>
 8009a72:	f04f 0a00 	mov.w	sl, #0
 8009a76:	4b8b      	ldr	r3, [pc, #556]	@ (8009ca4 <_strtod_l+0xadc>)
 8009a78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a7a:	401a      	ands	r2, r3
 8009a7c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009a80:	9b08      	ldr	r3, [sp, #32]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1b9      	bne.n	80099fa <_strtod_l+0x832>
 8009a86:	e5c5      	b.n	8009614 <_strtod_l+0x44c>
 8009a88:	f04f 33ff 	mov.w	r3, #4294967295
 8009a8c:	e7e8      	b.n	8009a60 <_strtod_l+0x898>
 8009a8e:	4613      	mov	r3, r2
 8009a90:	e7e6      	b.n	8009a60 <_strtod_l+0x898>
 8009a92:	ea53 030a 	orrs.w	r3, r3, sl
 8009a96:	d0a2      	beq.n	80099de <_strtod_l+0x816>
 8009a98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a9a:	b1db      	cbz	r3, 8009ad4 <_strtod_l+0x90c>
 8009a9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a9e:	4213      	tst	r3, r2
 8009aa0:	d0ee      	beq.n	8009a80 <_strtod_l+0x8b8>
 8009aa2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aa4:	4650      	mov	r0, sl
 8009aa6:	4659      	mov	r1, fp
 8009aa8:	9a08      	ldr	r2, [sp, #32]
 8009aaa:	b1bb      	cbz	r3, 8009adc <_strtod_l+0x914>
 8009aac:	f7ff fb68 	bl	8009180 <sulp>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ab8:	f7f6 fb58 	bl	800016c <__adddf3>
 8009abc:	4682      	mov	sl, r0
 8009abe:	468b      	mov	fp, r1
 8009ac0:	e7de      	b.n	8009a80 <_strtod_l+0x8b8>
 8009ac2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009ac6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009aca:	f04f 3aff 	mov.w	sl, #4294967295
 8009ace:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009ad2:	e7d5      	b.n	8009a80 <_strtod_l+0x8b8>
 8009ad4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ad6:	ea13 0f0a 	tst.w	r3, sl
 8009ada:	e7e1      	b.n	8009aa0 <_strtod_l+0x8d8>
 8009adc:	f7ff fb50 	bl	8009180 <sulp>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ae8:	f7f6 fb3e 	bl	8000168 <__aeabi_dsub>
 8009aec:	2200      	movs	r2, #0
 8009aee:	2300      	movs	r3, #0
 8009af0:	4682      	mov	sl, r0
 8009af2:	468b      	mov	fp, r1
 8009af4:	f7f6 ff58 	bl	80009a8 <__aeabi_dcmpeq>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	d0c1      	beq.n	8009a80 <_strtod_l+0x8b8>
 8009afc:	e615      	b.n	800972a <_strtod_l+0x562>
 8009afe:	4641      	mov	r1, r8
 8009b00:	4620      	mov	r0, r4
 8009b02:	f7ff fac9 	bl	8009098 <__ratio>
 8009b06:	2200      	movs	r2, #0
 8009b08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009b0c:	4606      	mov	r6, r0
 8009b0e:	460f      	mov	r7, r1
 8009b10:	f7f6 ff5e 	bl	80009d0 <__aeabi_dcmple>
 8009b14:	2800      	cmp	r0, #0
 8009b16:	d06d      	beq.n	8009bf4 <_strtod_l+0xa2c>
 8009b18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d178      	bne.n	8009c10 <_strtod_l+0xa48>
 8009b1e:	f1ba 0f00 	cmp.w	sl, #0
 8009b22:	d156      	bne.n	8009bd2 <_strtod_l+0xa0a>
 8009b24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d158      	bne.n	8009be0 <_strtod_l+0xa18>
 8009b2e:	2200      	movs	r2, #0
 8009b30:	4630      	mov	r0, r6
 8009b32:	4639      	mov	r1, r7
 8009b34:	4b5d      	ldr	r3, [pc, #372]	@ (8009cac <_strtod_l+0xae4>)
 8009b36:	f7f6 ff41 	bl	80009bc <__aeabi_dcmplt>
 8009b3a:	2800      	cmp	r0, #0
 8009b3c:	d157      	bne.n	8009bee <_strtod_l+0xa26>
 8009b3e:	4630      	mov	r0, r6
 8009b40:	4639      	mov	r1, r7
 8009b42:	2200      	movs	r2, #0
 8009b44:	4b5a      	ldr	r3, [pc, #360]	@ (8009cb0 <_strtod_l+0xae8>)
 8009b46:	f7f6 fcc7 	bl	80004d8 <__aeabi_dmul>
 8009b4a:	4606      	mov	r6, r0
 8009b4c:	460f      	mov	r7, r1
 8009b4e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009b52:	9606      	str	r6, [sp, #24]
 8009b54:	9307      	str	r3, [sp, #28]
 8009b56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b5a:	4d52      	ldr	r5, [pc, #328]	@ (8009ca4 <_strtod_l+0xadc>)
 8009b5c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009b60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b62:	401d      	ands	r5, r3
 8009b64:	4b53      	ldr	r3, [pc, #332]	@ (8009cb4 <_strtod_l+0xaec>)
 8009b66:	429d      	cmp	r5, r3
 8009b68:	f040 80aa 	bne.w	8009cc0 <_strtod_l+0xaf8>
 8009b6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b6e:	4650      	mov	r0, sl
 8009b70:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009b74:	4659      	mov	r1, fp
 8009b76:	f7ff f9cf 	bl	8008f18 <__ulp>
 8009b7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b7e:	f7f6 fcab 	bl	80004d8 <__aeabi_dmul>
 8009b82:	4652      	mov	r2, sl
 8009b84:	465b      	mov	r3, fp
 8009b86:	f7f6 faf1 	bl	800016c <__adddf3>
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	4945      	ldr	r1, [pc, #276]	@ (8009ca4 <_strtod_l+0xadc>)
 8009b8e:	4a4a      	ldr	r2, [pc, #296]	@ (8009cb8 <_strtod_l+0xaf0>)
 8009b90:	4019      	ands	r1, r3
 8009b92:	4291      	cmp	r1, r2
 8009b94:	4682      	mov	sl, r0
 8009b96:	d942      	bls.n	8009c1e <_strtod_l+0xa56>
 8009b98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b9a:	4b43      	ldr	r3, [pc, #268]	@ (8009ca8 <_strtod_l+0xae0>)
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d103      	bne.n	8009ba8 <_strtod_l+0x9e0>
 8009ba0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	f43f ad2b 	beq.w	80095fe <_strtod_l+0x436>
 8009ba8:	f04f 3aff 	mov.w	sl, #4294967295
 8009bac:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009ca8 <_strtod_l+0xae0>
 8009bb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009bb2:	9805      	ldr	r0, [sp, #20]
 8009bb4:	f7fe fe7e 	bl	80088b4 <_Bfree>
 8009bb8:	4649      	mov	r1, r9
 8009bba:	9805      	ldr	r0, [sp, #20]
 8009bbc:	f7fe fe7a 	bl	80088b4 <_Bfree>
 8009bc0:	4641      	mov	r1, r8
 8009bc2:	9805      	ldr	r0, [sp, #20]
 8009bc4:	f7fe fe76 	bl	80088b4 <_Bfree>
 8009bc8:	4621      	mov	r1, r4
 8009bca:	9805      	ldr	r0, [sp, #20]
 8009bcc:	f7fe fe72 	bl	80088b4 <_Bfree>
 8009bd0:	e618      	b.n	8009804 <_strtod_l+0x63c>
 8009bd2:	f1ba 0f01 	cmp.w	sl, #1
 8009bd6:	d103      	bne.n	8009be0 <_strtod_l+0xa18>
 8009bd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	f43f ada5 	beq.w	800972a <_strtod_l+0x562>
 8009be0:	2200      	movs	r2, #0
 8009be2:	4b36      	ldr	r3, [pc, #216]	@ (8009cbc <_strtod_l+0xaf4>)
 8009be4:	2600      	movs	r6, #0
 8009be6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009bea:	4f30      	ldr	r7, [pc, #192]	@ (8009cac <_strtod_l+0xae4>)
 8009bec:	e7b3      	b.n	8009b56 <_strtod_l+0x98e>
 8009bee:	2600      	movs	r6, #0
 8009bf0:	4f2f      	ldr	r7, [pc, #188]	@ (8009cb0 <_strtod_l+0xae8>)
 8009bf2:	e7ac      	b.n	8009b4e <_strtod_l+0x986>
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	4639      	mov	r1, r7
 8009bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8009cb0 <_strtod_l+0xae8>)
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f7f6 fc6c 	bl	80004d8 <__aeabi_dmul>
 8009c00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c02:	4606      	mov	r6, r0
 8009c04:	460f      	mov	r7, r1
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d0a1      	beq.n	8009b4e <_strtod_l+0x986>
 8009c0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009c0e:	e7a2      	b.n	8009b56 <_strtod_l+0x98e>
 8009c10:	2200      	movs	r2, #0
 8009c12:	4b26      	ldr	r3, [pc, #152]	@ (8009cac <_strtod_l+0xae4>)
 8009c14:	4616      	mov	r6, r2
 8009c16:	461f      	mov	r7, r3
 8009c18:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009c1c:	e79b      	b.n	8009b56 <_strtod_l+0x98e>
 8009c1e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009c22:	9b08      	ldr	r3, [sp, #32]
 8009c24:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d1c1      	bne.n	8009bb0 <_strtod_l+0x9e8>
 8009c2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009c30:	0d1b      	lsrs	r3, r3, #20
 8009c32:	051b      	lsls	r3, r3, #20
 8009c34:	429d      	cmp	r5, r3
 8009c36:	d1bb      	bne.n	8009bb0 <_strtod_l+0x9e8>
 8009c38:	4630      	mov	r0, r6
 8009c3a:	4639      	mov	r1, r7
 8009c3c:	f7f7 fa18 	bl	8001070 <__aeabi_d2lz>
 8009c40:	f7f6 fc1c 	bl	800047c <__aeabi_l2d>
 8009c44:	4602      	mov	r2, r0
 8009c46:	460b      	mov	r3, r1
 8009c48:	4630      	mov	r0, r6
 8009c4a:	4639      	mov	r1, r7
 8009c4c:	f7f6 fa8c 	bl	8000168 <__aeabi_dsub>
 8009c50:	460b      	mov	r3, r1
 8009c52:	4602      	mov	r2, r0
 8009c54:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009c58:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009c5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c5e:	ea46 060a 	orr.w	r6, r6, sl
 8009c62:	431e      	orrs	r6, r3
 8009c64:	d069      	beq.n	8009d3a <_strtod_l+0xb72>
 8009c66:	a30a      	add	r3, pc, #40	@ (adr r3, 8009c90 <_strtod_l+0xac8>)
 8009c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6c:	f7f6 fea6 	bl	80009bc <__aeabi_dcmplt>
 8009c70:	2800      	cmp	r0, #0
 8009c72:	f47f accf 	bne.w	8009614 <_strtod_l+0x44c>
 8009c76:	a308      	add	r3, pc, #32	@ (adr r3, 8009c98 <_strtod_l+0xad0>)
 8009c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c80:	f7f6 feba 	bl	80009f8 <__aeabi_dcmpgt>
 8009c84:	2800      	cmp	r0, #0
 8009c86:	d093      	beq.n	8009bb0 <_strtod_l+0x9e8>
 8009c88:	e4c4      	b.n	8009614 <_strtod_l+0x44c>
 8009c8a:	bf00      	nop
 8009c8c:	f3af 8000 	nop.w
 8009c90:	94a03595 	.word	0x94a03595
 8009c94:	3fdfffff 	.word	0x3fdfffff
 8009c98:	35afe535 	.word	0x35afe535
 8009c9c:	3fe00000 	.word	0x3fe00000
 8009ca0:	000fffff 	.word	0x000fffff
 8009ca4:	7ff00000 	.word	0x7ff00000
 8009ca8:	7fefffff 	.word	0x7fefffff
 8009cac:	3ff00000 	.word	0x3ff00000
 8009cb0:	3fe00000 	.word	0x3fe00000
 8009cb4:	7fe00000 	.word	0x7fe00000
 8009cb8:	7c9fffff 	.word	0x7c9fffff
 8009cbc:	bff00000 	.word	0xbff00000
 8009cc0:	9b08      	ldr	r3, [sp, #32]
 8009cc2:	b323      	cbz	r3, 8009d0e <_strtod_l+0xb46>
 8009cc4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009cc8:	d821      	bhi.n	8009d0e <_strtod_l+0xb46>
 8009cca:	a327      	add	r3, pc, #156	@ (adr r3, 8009d68 <_strtod_l+0xba0>)
 8009ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	4639      	mov	r1, r7
 8009cd4:	f7f6 fe7c 	bl	80009d0 <__aeabi_dcmple>
 8009cd8:	b1a0      	cbz	r0, 8009d04 <_strtod_l+0xb3c>
 8009cda:	4639      	mov	r1, r7
 8009cdc:	4630      	mov	r0, r6
 8009cde:	f7f6 fed3 	bl	8000a88 <__aeabi_d2uiz>
 8009ce2:	2801      	cmp	r0, #1
 8009ce4:	bf38      	it	cc
 8009ce6:	2001      	movcc	r0, #1
 8009ce8:	f7f6 fb7c 	bl	80003e4 <__aeabi_ui2d>
 8009cec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cee:	4606      	mov	r6, r0
 8009cf0:	460f      	mov	r7, r1
 8009cf2:	b9fb      	cbnz	r3, 8009d34 <_strtod_l+0xb6c>
 8009cf4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009cf8:	9014      	str	r0, [sp, #80]	@ 0x50
 8009cfa:	9315      	str	r3, [sp, #84]	@ 0x54
 8009cfc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009d00:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009d04:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009d06:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009d0a:	1b5b      	subs	r3, r3, r5
 8009d0c:	9311      	str	r3, [sp, #68]	@ 0x44
 8009d0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d12:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009d16:	f7ff f8ff 	bl	8008f18 <__ulp>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	4650      	mov	r0, sl
 8009d20:	4659      	mov	r1, fp
 8009d22:	f7f6 fbd9 	bl	80004d8 <__aeabi_dmul>
 8009d26:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009d2a:	f7f6 fa1f 	bl	800016c <__adddf3>
 8009d2e:	4682      	mov	sl, r0
 8009d30:	468b      	mov	fp, r1
 8009d32:	e776      	b.n	8009c22 <_strtod_l+0xa5a>
 8009d34:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009d38:	e7e0      	b.n	8009cfc <_strtod_l+0xb34>
 8009d3a:	a30d      	add	r3, pc, #52	@ (adr r3, 8009d70 <_strtod_l+0xba8>)
 8009d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d40:	f7f6 fe3c 	bl	80009bc <__aeabi_dcmplt>
 8009d44:	e79e      	b.n	8009c84 <_strtod_l+0xabc>
 8009d46:	2300      	movs	r3, #0
 8009d48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d4c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009d4e:	6013      	str	r3, [r2, #0]
 8009d50:	f7ff ba77 	b.w	8009242 <_strtod_l+0x7a>
 8009d54:	2a65      	cmp	r2, #101	@ 0x65
 8009d56:	f43f ab6e 	beq.w	8009436 <_strtod_l+0x26e>
 8009d5a:	2a45      	cmp	r2, #69	@ 0x45
 8009d5c:	f43f ab6b 	beq.w	8009436 <_strtod_l+0x26e>
 8009d60:	2301      	movs	r3, #1
 8009d62:	f7ff bba6 	b.w	80094b2 <_strtod_l+0x2ea>
 8009d66:	bf00      	nop
 8009d68:	ffc00000 	.word	0xffc00000
 8009d6c:	41dfffff 	.word	0x41dfffff
 8009d70:	94a03595 	.word	0x94a03595
 8009d74:	3fcfffff 	.word	0x3fcfffff

08009d78 <_strtod_r>:
 8009d78:	4b01      	ldr	r3, [pc, #4]	@ (8009d80 <_strtod_r+0x8>)
 8009d7a:	f7ff ba25 	b.w	80091c8 <_strtod_l>
 8009d7e:	bf00      	nop
 8009d80:	20000070 	.word	0x20000070

08009d84 <_strtol_l.constprop.0>:
 8009d84:	2b24      	cmp	r3, #36	@ 0x24
 8009d86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d8a:	4686      	mov	lr, r0
 8009d8c:	4690      	mov	r8, r2
 8009d8e:	d801      	bhi.n	8009d94 <_strtol_l.constprop.0+0x10>
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d106      	bne.n	8009da2 <_strtol_l.constprop.0+0x1e>
 8009d94:	f7fd fdb0 	bl	80078f8 <__errno>
 8009d98:	2316      	movs	r3, #22
 8009d9a:	6003      	str	r3, [r0, #0]
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009da2:	460d      	mov	r5, r1
 8009da4:	4833      	ldr	r0, [pc, #204]	@ (8009e74 <_strtol_l.constprop.0+0xf0>)
 8009da6:	462a      	mov	r2, r5
 8009da8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009dac:	5d06      	ldrb	r6, [r0, r4]
 8009dae:	f016 0608 	ands.w	r6, r6, #8
 8009db2:	d1f8      	bne.n	8009da6 <_strtol_l.constprop.0+0x22>
 8009db4:	2c2d      	cmp	r4, #45	@ 0x2d
 8009db6:	d12d      	bne.n	8009e14 <_strtol_l.constprop.0+0x90>
 8009db8:	2601      	movs	r6, #1
 8009dba:	782c      	ldrb	r4, [r5, #0]
 8009dbc:	1c95      	adds	r5, r2, #2
 8009dbe:	f033 0210 	bics.w	r2, r3, #16
 8009dc2:	d109      	bne.n	8009dd8 <_strtol_l.constprop.0+0x54>
 8009dc4:	2c30      	cmp	r4, #48	@ 0x30
 8009dc6:	d12a      	bne.n	8009e1e <_strtol_l.constprop.0+0x9a>
 8009dc8:	782a      	ldrb	r2, [r5, #0]
 8009dca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009dce:	2a58      	cmp	r2, #88	@ 0x58
 8009dd0:	d125      	bne.n	8009e1e <_strtol_l.constprop.0+0x9a>
 8009dd2:	2310      	movs	r3, #16
 8009dd4:	786c      	ldrb	r4, [r5, #1]
 8009dd6:	3502      	adds	r5, #2
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009dde:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009de2:	fbbc f9f3 	udiv	r9, ip, r3
 8009de6:	4610      	mov	r0, r2
 8009de8:	fb03 ca19 	mls	sl, r3, r9, ip
 8009dec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009df0:	2f09      	cmp	r7, #9
 8009df2:	d81b      	bhi.n	8009e2c <_strtol_l.constprop.0+0xa8>
 8009df4:	463c      	mov	r4, r7
 8009df6:	42a3      	cmp	r3, r4
 8009df8:	dd27      	ble.n	8009e4a <_strtol_l.constprop.0+0xc6>
 8009dfa:	1c57      	adds	r7, r2, #1
 8009dfc:	d007      	beq.n	8009e0e <_strtol_l.constprop.0+0x8a>
 8009dfe:	4581      	cmp	r9, r0
 8009e00:	d320      	bcc.n	8009e44 <_strtol_l.constprop.0+0xc0>
 8009e02:	d101      	bne.n	8009e08 <_strtol_l.constprop.0+0x84>
 8009e04:	45a2      	cmp	sl, r4
 8009e06:	db1d      	blt.n	8009e44 <_strtol_l.constprop.0+0xc0>
 8009e08:	2201      	movs	r2, #1
 8009e0a:	fb00 4003 	mla	r0, r0, r3, r4
 8009e0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e12:	e7eb      	b.n	8009dec <_strtol_l.constprop.0+0x68>
 8009e14:	2c2b      	cmp	r4, #43	@ 0x2b
 8009e16:	bf04      	itt	eq
 8009e18:	782c      	ldrbeq	r4, [r5, #0]
 8009e1a:	1c95      	addeq	r5, r2, #2
 8009e1c:	e7cf      	b.n	8009dbe <_strtol_l.constprop.0+0x3a>
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1da      	bne.n	8009dd8 <_strtol_l.constprop.0+0x54>
 8009e22:	2c30      	cmp	r4, #48	@ 0x30
 8009e24:	bf0c      	ite	eq
 8009e26:	2308      	moveq	r3, #8
 8009e28:	230a      	movne	r3, #10
 8009e2a:	e7d5      	b.n	8009dd8 <_strtol_l.constprop.0+0x54>
 8009e2c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009e30:	2f19      	cmp	r7, #25
 8009e32:	d801      	bhi.n	8009e38 <_strtol_l.constprop.0+0xb4>
 8009e34:	3c37      	subs	r4, #55	@ 0x37
 8009e36:	e7de      	b.n	8009df6 <_strtol_l.constprop.0+0x72>
 8009e38:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009e3c:	2f19      	cmp	r7, #25
 8009e3e:	d804      	bhi.n	8009e4a <_strtol_l.constprop.0+0xc6>
 8009e40:	3c57      	subs	r4, #87	@ 0x57
 8009e42:	e7d8      	b.n	8009df6 <_strtol_l.constprop.0+0x72>
 8009e44:	f04f 32ff 	mov.w	r2, #4294967295
 8009e48:	e7e1      	b.n	8009e0e <_strtol_l.constprop.0+0x8a>
 8009e4a:	1c53      	adds	r3, r2, #1
 8009e4c:	d108      	bne.n	8009e60 <_strtol_l.constprop.0+0xdc>
 8009e4e:	2322      	movs	r3, #34	@ 0x22
 8009e50:	4660      	mov	r0, ip
 8009e52:	f8ce 3000 	str.w	r3, [lr]
 8009e56:	f1b8 0f00 	cmp.w	r8, #0
 8009e5a:	d0a0      	beq.n	8009d9e <_strtol_l.constprop.0+0x1a>
 8009e5c:	1e69      	subs	r1, r5, #1
 8009e5e:	e006      	b.n	8009e6e <_strtol_l.constprop.0+0xea>
 8009e60:	b106      	cbz	r6, 8009e64 <_strtol_l.constprop.0+0xe0>
 8009e62:	4240      	negs	r0, r0
 8009e64:	f1b8 0f00 	cmp.w	r8, #0
 8009e68:	d099      	beq.n	8009d9e <_strtol_l.constprop.0+0x1a>
 8009e6a:	2a00      	cmp	r2, #0
 8009e6c:	d1f6      	bne.n	8009e5c <_strtol_l.constprop.0+0xd8>
 8009e6e:	f8c8 1000 	str.w	r1, [r8]
 8009e72:	e794      	b.n	8009d9e <_strtol_l.constprop.0+0x1a>
 8009e74:	0800db11 	.word	0x0800db11

08009e78 <_strtol_r>:
 8009e78:	f7ff bf84 	b.w	8009d84 <_strtol_l.constprop.0>

08009e7c <__ssputs_r>:
 8009e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e80:	461f      	mov	r7, r3
 8009e82:	688e      	ldr	r6, [r1, #8]
 8009e84:	4682      	mov	sl, r0
 8009e86:	42be      	cmp	r6, r7
 8009e88:	460c      	mov	r4, r1
 8009e8a:	4690      	mov	r8, r2
 8009e8c:	680b      	ldr	r3, [r1, #0]
 8009e8e:	d82d      	bhi.n	8009eec <__ssputs_r+0x70>
 8009e90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009e98:	d026      	beq.n	8009ee8 <__ssputs_r+0x6c>
 8009e9a:	6965      	ldr	r5, [r4, #20]
 8009e9c:	6909      	ldr	r1, [r1, #16]
 8009e9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ea2:	eba3 0901 	sub.w	r9, r3, r1
 8009ea6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009eaa:	1c7b      	adds	r3, r7, #1
 8009eac:	444b      	add	r3, r9
 8009eae:	106d      	asrs	r5, r5, #1
 8009eb0:	429d      	cmp	r5, r3
 8009eb2:	bf38      	it	cc
 8009eb4:	461d      	movcc	r5, r3
 8009eb6:	0553      	lsls	r3, r2, #21
 8009eb8:	d527      	bpl.n	8009f0a <__ssputs_r+0x8e>
 8009eba:	4629      	mov	r1, r5
 8009ebc:	f7fe fc2e 	bl	800871c <_malloc_r>
 8009ec0:	4606      	mov	r6, r0
 8009ec2:	b360      	cbz	r0, 8009f1e <__ssputs_r+0xa2>
 8009ec4:	464a      	mov	r2, r9
 8009ec6:	6921      	ldr	r1, [r4, #16]
 8009ec8:	f7fd fd51 	bl	800796e <memcpy>
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ed6:	81a3      	strh	r3, [r4, #12]
 8009ed8:	6126      	str	r6, [r4, #16]
 8009eda:	444e      	add	r6, r9
 8009edc:	6026      	str	r6, [r4, #0]
 8009ede:	463e      	mov	r6, r7
 8009ee0:	6165      	str	r5, [r4, #20]
 8009ee2:	eba5 0509 	sub.w	r5, r5, r9
 8009ee6:	60a5      	str	r5, [r4, #8]
 8009ee8:	42be      	cmp	r6, r7
 8009eea:	d900      	bls.n	8009eee <__ssputs_r+0x72>
 8009eec:	463e      	mov	r6, r7
 8009eee:	4632      	mov	r2, r6
 8009ef0:	4641      	mov	r1, r8
 8009ef2:	6820      	ldr	r0, [r4, #0]
 8009ef4:	f7fd fc93 	bl	800781e <memmove>
 8009ef8:	2000      	movs	r0, #0
 8009efa:	68a3      	ldr	r3, [r4, #8]
 8009efc:	1b9b      	subs	r3, r3, r6
 8009efe:	60a3      	str	r3, [r4, #8]
 8009f00:	6823      	ldr	r3, [r4, #0]
 8009f02:	4433      	add	r3, r6
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f0a:	462a      	mov	r2, r5
 8009f0c:	f000 fd5b 	bl	800a9c6 <_realloc_r>
 8009f10:	4606      	mov	r6, r0
 8009f12:	2800      	cmp	r0, #0
 8009f14:	d1e0      	bne.n	8009ed8 <__ssputs_r+0x5c>
 8009f16:	4650      	mov	r0, sl
 8009f18:	6921      	ldr	r1, [r4, #16]
 8009f1a:	f7fe fb8d 	bl	8008638 <_free_r>
 8009f1e:	230c      	movs	r3, #12
 8009f20:	f8ca 3000 	str.w	r3, [sl]
 8009f24:	89a3      	ldrh	r3, [r4, #12]
 8009f26:	f04f 30ff 	mov.w	r0, #4294967295
 8009f2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f2e:	81a3      	strh	r3, [r4, #12]
 8009f30:	e7e9      	b.n	8009f06 <__ssputs_r+0x8a>
	...

08009f34 <_svfiprintf_r>:
 8009f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f38:	4698      	mov	r8, r3
 8009f3a:	898b      	ldrh	r3, [r1, #12]
 8009f3c:	4607      	mov	r7, r0
 8009f3e:	061b      	lsls	r3, r3, #24
 8009f40:	460d      	mov	r5, r1
 8009f42:	4614      	mov	r4, r2
 8009f44:	b09d      	sub	sp, #116	@ 0x74
 8009f46:	d510      	bpl.n	8009f6a <_svfiprintf_r+0x36>
 8009f48:	690b      	ldr	r3, [r1, #16]
 8009f4a:	b973      	cbnz	r3, 8009f6a <_svfiprintf_r+0x36>
 8009f4c:	2140      	movs	r1, #64	@ 0x40
 8009f4e:	f7fe fbe5 	bl	800871c <_malloc_r>
 8009f52:	6028      	str	r0, [r5, #0]
 8009f54:	6128      	str	r0, [r5, #16]
 8009f56:	b930      	cbnz	r0, 8009f66 <_svfiprintf_r+0x32>
 8009f58:	230c      	movs	r3, #12
 8009f5a:	603b      	str	r3, [r7, #0]
 8009f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f60:	b01d      	add	sp, #116	@ 0x74
 8009f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f66:	2340      	movs	r3, #64	@ 0x40
 8009f68:	616b      	str	r3, [r5, #20]
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f6e:	2320      	movs	r3, #32
 8009f70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f74:	2330      	movs	r3, #48	@ 0x30
 8009f76:	f04f 0901 	mov.w	r9, #1
 8009f7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f7e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a118 <_svfiprintf_r+0x1e4>
 8009f82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f86:	4623      	mov	r3, r4
 8009f88:	469a      	mov	sl, r3
 8009f8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f8e:	b10a      	cbz	r2, 8009f94 <_svfiprintf_r+0x60>
 8009f90:	2a25      	cmp	r2, #37	@ 0x25
 8009f92:	d1f9      	bne.n	8009f88 <_svfiprintf_r+0x54>
 8009f94:	ebba 0b04 	subs.w	fp, sl, r4
 8009f98:	d00b      	beq.n	8009fb2 <_svfiprintf_r+0x7e>
 8009f9a:	465b      	mov	r3, fp
 8009f9c:	4622      	mov	r2, r4
 8009f9e:	4629      	mov	r1, r5
 8009fa0:	4638      	mov	r0, r7
 8009fa2:	f7ff ff6b 	bl	8009e7c <__ssputs_r>
 8009fa6:	3001      	adds	r0, #1
 8009fa8:	f000 80a7 	beq.w	800a0fa <_svfiprintf_r+0x1c6>
 8009fac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fae:	445a      	add	r2, fp
 8009fb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	f000 809f 	beq.w	800a0fa <_svfiprintf_r+0x1c6>
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8009fc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fc6:	f10a 0a01 	add.w	sl, sl, #1
 8009fca:	9304      	str	r3, [sp, #16]
 8009fcc:	9307      	str	r3, [sp, #28]
 8009fce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009fd2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fd4:	4654      	mov	r4, sl
 8009fd6:	2205      	movs	r2, #5
 8009fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fdc:	484e      	ldr	r0, [pc, #312]	@ (800a118 <_svfiprintf_r+0x1e4>)
 8009fde:	f7fd fcb8 	bl	8007952 <memchr>
 8009fe2:	9a04      	ldr	r2, [sp, #16]
 8009fe4:	b9d8      	cbnz	r0, 800a01e <_svfiprintf_r+0xea>
 8009fe6:	06d0      	lsls	r0, r2, #27
 8009fe8:	bf44      	itt	mi
 8009fea:	2320      	movmi	r3, #32
 8009fec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ff0:	0711      	lsls	r1, r2, #28
 8009ff2:	bf44      	itt	mi
 8009ff4:	232b      	movmi	r3, #43	@ 0x2b
 8009ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8009ffe:	2b2a      	cmp	r3, #42	@ 0x2a
 800a000:	d015      	beq.n	800a02e <_svfiprintf_r+0xfa>
 800a002:	4654      	mov	r4, sl
 800a004:	2000      	movs	r0, #0
 800a006:	f04f 0c0a 	mov.w	ip, #10
 800a00a:	9a07      	ldr	r2, [sp, #28]
 800a00c:	4621      	mov	r1, r4
 800a00e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a012:	3b30      	subs	r3, #48	@ 0x30
 800a014:	2b09      	cmp	r3, #9
 800a016:	d94b      	bls.n	800a0b0 <_svfiprintf_r+0x17c>
 800a018:	b1b0      	cbz	r0, 800a048 <_svfiprintf_r+0x114>
 800a01a:	9207      	str	r2, [sp, #28]
 800a01c:	e014      	b.n	800a048 <_svfiprintf_r+0x114>
 800a01e:	eba0 0308 	sub.w	r3, r0, r8
 800a022:	fa09 f303 	lsl.w	r3, r9, r3
 800a026:	4313      	orrs	r3, r2
 800a028:	46a2      	mov	sl, r4
 800a02a:	9304      	str	r3, [sp, #16]
 800a02c:	e7d2      	b.n	8009fd4 <_svfiprintf_r+0xa0>
 800a02e:	9b03      	ldr	r3, [sp, #12]
 800a030:	1d19      	adds	r1, r3, #4
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	9103      	str	r1, [sp, #12]
 800a036:	2b00      	cmp	r3, #0
 800a038:	bfbb      	ittet	lt
 800a03a:	425b      	neglt	r3, r3
 800a03c:	f042 0202 	orrlt.w	r2, r2, #2
 800a040:	9307      	strge	r3, [sp, #28]
 800a042:	9307      	strlt	r3, [sp, #28]
 800a044:	bfb8      	it	lt
 800a046:	9204      	strlt	r2, [sp, #16]
 800a048:	7823      	ldrb	r3, [r4, #0]
 800a04a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a04c:	d10a      	bne.n	800a064 <_svfiprintf_r+0x130>
 800a04e:	7863      	ldrb	r3, [r4, #1]
 800a050:	2b2a      	cmp	r3, #42	@ 0x2a
 800a052:	d132      	bne.n	800a0ba <_svfiprintf_r+0x186>
 800a054:	9b03      	ldr	r3, [sp, #12]
 800a056:	3402      	adds	r4, #2
 800a058:	1d1a      	adds	r2, r3, #4
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	9203      	str	r2, [sp, #12]
 800a05e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a062:	9305      	str	r3, [sp, #20]
 800a064:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a11c <_svfiprintf_r+0x1e8>
 800a068:	2203      	movs	r2, #3
 800a06a:	4650      	mov	r0, sl
 800a06c:	7821      	ldrb	r1, [r4, #0]
 800a06e:	f7fd fc70 	bl	8007952 <memchr>
 800a072:	b138      	cbz	r0, 800a084 <_svfiprintf_r+0x150>
 800a074:	2240      	movs	r2, #64	@ 0x40
 800a076:	9b04      	ldr	r3, [sp, #16]
 800a078:	eba0 000a 	sub.w	r0, r0, sl
 800a07c:	4082      	lsls	r2, r0
 800a07e:	4313      	orrs	r3, r2
 800a080:	3401      	adds	r4, #1
 800a082:	9304      	str	r3, [sp, #16]
 800a084:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a088:	2206      	movs	r2, #6
 800a08a:	4825      	ldr	r0, [pc, #148]	@ (800a120 <_svfiprintf_r+0x1ec>)
 800a08c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a090:	f7fd fc5f 	bl	8007952 <memchr>
 800a094:	2800      	cmp	r0, #0
 800a096:	d036      	beq.n	800a106 <_svfiprintf_r+0x1d2>
 800a098:	4b22      	ldr	r3, [pc, #136]	@ (800a124 <_svfiprintf_r+0x1f0>)
 800a09a:	bb1b      	cbnz	r3, 800a0e4 <_svfiprintf_r+0x1b0>
 800a09c:	9b03      	ldr	r3, [sp, #12]
 800a09e:	3307      	adds	r3, #7
 800a0a0:	f023 0307 	bic.w	r3, r3, #7
 800a0a4:	3308      	adds	r3, #8
 800a0a6:	9303      	str	r3, [sp, #12]
 800a0a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0aa:	4433      	add	r3, r6
 800a0ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0ae:	e76a      	b.n	8009f86 <_svfiprintf_r+0x52>
 800a0b0:	460c      	mov	r4, r1
 800a0b2:	2001      	movs	r0, #1
 800a0b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0b8:	e7a8      	b.n	800a00c <_svfiprintf_r+0xd8>
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	f04f 0c0a 	mov.w	ip, #10
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	3401      	adds	r4, #1
 800a0c4:	9305      	str	r3, [sp, #20]
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0cc:	3a30      	subs	r2, #48	@ 0x30
 800a0ce:	2a09      	cmp	r2, #9
 800a0d0:	d903      	bls.n	800a0da <_svfiprintf_r+0x1a6>
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d0c6      	beq.n	800a064 <_svfiprintf_r+0x130>
 800a0d6:	9105      	str	r1, [sp, #20]
 800a0d8:	e7c4      	b.n	800a064 <_svfiprintf_r+0x130>
 800a0da:	4604      	mov	r4, r0
 800a0dc:	2301      	movs	r3, #1
 800a0de:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0e2:	e7f0      	b.n	800a0c6 <_svfiprintf_r+0x192>
 800a0e4:	ab03      	add	r3, sp, #12
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	462a      	mov	r2, r5
 800a0ea:	4638      	mov	r0, r7
 800a0ec:	4b0e      	ldr	r3, [pc, #56]	@ (800a128 <_svfiprintf_r+0x1f4>)
 800a0ee:	a904      	add	r1, sp, #16
 800a0f0:	f7fc fc6e 	bl	80069d0 <_printf_float>
 800a0f4:	1c42      	adds	r2, r0, #1
 800a0f6:	4606      	mov	r6, r0
 800a0f8:	d1d6      	bne.n	800a0a8 <_svfiprintf_r+0x174>
 800a0fa:	89ab      	ldrh	r3, [r5, #12]
 800a0fc:	065b      	lsls	r3, r3, #25
 800a0fe:	f53f af2d 	bmi.w	8009f5c <_svfiprintf_r+0x28>
 800a102:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a104:	e72c      	b.n	8009f60 <_svfiprintf_r+0x2c>
 800a106:	ab03      	add	r3, sp, #12
 800a108:	9300      	str	r3, [sp, #0]
 800a10a:	462a      	mov	r2, r5
 800a10c:	4638      	mov	r0, r7
 800a10e:	4b06      	ldr	r3, [pc, #24]	@ (800a128 <_svfiprintf_r+0x1f4>)
 800a110:	a904      	add	r1, sp, #16
 800a112:	f7fc fefb 	bl	8006f0c <_printf_i>
 800a116:	e7ed      	b.n	800a0f4 <_svfiprintf_r+0x1c0>
 800a118:	0800dc11 	.word	0x0800dc11
 800a11c:	0800dc17 	.word	0x0800dc17
 800a120:	0800dc1b 	.word	0x0800dc1b
 800a124:	080069d1 	.word	0x080069d1
 800a128:	08009e7d 	.word	0x08009e7d

0800a12c <__sflush_r>:
 800a12c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a132:	0716      	lsls	r6, r2, #28
 800a134:	4605      	mov	r5, r0
 800a136:	460c      	mov	r4, r1
 800a138:	d454      	bmi.n	800a1e4 <__sflush_r+0xb8>
 800a13a:	684b      	ldr	r3, [r1, #4]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	dc02      	bgt.n	800a146 <__sflush_r+0x1a>
 800a140:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a142:	2b00      	cmp	r3, #0
 800a144:	dd48      	ble.n	800a1d8 <__sflush_r+0xac>
 800a146:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a148:	2e00      	cmp	r6, #0
 800a14a:	d045      	beq.n	800a1d8 <__sflush_r+0xac>
 800a14c:	2300      	movs	r3, #0
 800a14e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a152:	682f      	ldr	r7, [r5, #0]
 800a154:	6a21      	ldr	r1, [r4, #32]
 800a156:	602b      	str	r3, [r5, #0]
 800a158:	d030      	beq.n	800a1bc <__sflush_r+0x90>
 800a15a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a15c:	89a3      	ldrh	r3, [r4, #12]
 800a15e:	0759      	lsls	r1, r3, #29
 800a160:	d505      	bpl.n	800a16e <__sflush_r+0x42>
 800a162:	6863      	ldr	r3, [r4, #4]
 800a164:	1ad2      	subs	r2, r2, r3
 800a166:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a168:	b10b      	cbz	r3, 800a16e <__sflush_r+0x42>
 800a16a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a16c:	1ad2      	subs	r2, r2, r3
 800a16e:	2300      	movs	r3, #0
 800a170:	4628      	mov	r0, r5
 800a172:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a174:	6a21      	ldr	r1, [r4, #32]
 800a176:	47b0      	blx	r6
 800a178:	1c43      	adds	r3, r0, #1
 800a17a:	89a3      	ldrh	r3, [r4, #12]
 800a17c:	d106      	bne.n	800a18c <__sflush_r+0x60>
 800a17e:	6829      	ldr	r1, [r5, #0]
 800a180:	291d      	cmp	r1, #29
 800a182:	d82b      	bhi.n	800a1dc <__sflush_r+0xb0>
 800a184:	4a28      	ldr	r2, [pc, #160]	@ (800a228 <__sflush_r+0xfc>)
 800a186:	410a      	asrs	r2, r1
 800a188:	07d6      	lsls	r6, r2, #31
 800a18a:	d427      	bmi.n	800a1dc <__sflush_r+0xb0>
 800a18c:	2200      	movs	r2, #0
 800a18e:	6062      	str	r2, [r4, #4]
 800a190:	6922      	ldr	r2, [r4, #16]
 800a192:	04d9      	lsls	r1, r3, #19
 800a194:	6022      	str	r2, [r4, #0]
 800a196:	d504      	bpl.n	800a1a2 <__sflush_r+0x76>
 800a198:	1c42      	adds	r2, r0, #1
 800a19a:	d101      	bne.n	800a1a0 <__sflush_r+0x74>
 800a19c:	682b      	ldr	r3, [r5, #0]
 800a19e:	b903      	cbnz	r3, 800a1a2 <__sflush_r+0x76>
 800a1a0:	6560      	str	r0, [r4, #84]	@ 0x54
 800a1a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a1a4:	602f      	str	r7, [r5, #0]
 800a1a6:	b1b9      	cbz	r1, 800a1d8 <__sflush_r+0xac>
 800a1a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1ac:	4299      	cmp	r1, r3
 800a1ae:	d002      	beq.n	800a1b6 <__sflush_r+0x8a>
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	f7fe fa41 	bl	8008638 <_free_r>
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a1ba:	e00d      	b.n	800a1d8 <__sflush_r+0xac>
 800a1bc:	2301      	movs	r3, #1
 800a1be:	4628      	mov	r0, r5
 800a1c0:	47b0      	blx	r6
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	1c50      	adds	r0, r2, #1
 800a1c6:	d1c9      	bne.n	800a15c <__sflush_r+0x30>
 800a1c8:	682b      	ldr	r3, [r5, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d0c6      	beq.n	800a15c <__sflush_r+0x30>
 800a1ce:	2b1d      	cmp	r3, #29
 800a1d0:	d001      	beq.n	800a1d6 <__sflush_r+0xaa>
 800a1d2:	2b16      	cmp	r3, #22
 800a1d4:	d11d      	bne.n	800a212 <__sflush_r+0xe6>
 800a1d6:	602f      	str	r7, [r5, #0]
 800a1d8:	2000      	movs	r0, #0
 800a1da:	e021      	b.n	800a220 <__sflush_r+0xf4>
 800a1dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1e0:	b21b      	sxth	r3, r3
 800a1e2:	e01a      	b.n	800a21a <__sflush_r+0xee>
 800a1e4:	690f      	ldr	r7, [r1, #16]
 800a1e6:	2f00      	cmp	r7, #0
 800a1e8:	d0f6      	beq.n	800a1d8 <__sflush_r+0xac>
 800a1ea:	0793      	lsls	r3, r2, #30
 800a1ec:	bf18      	it	ne
 800a1ee:	2300      	movne	r3, #0
 800a1f0:	680e      	ldr	r6, [r1, #0]
 800a1f2:	bf08      	it	eq
 800a1f4:	694b      	ldreq	r3, [r1, #20]
 800a1f6:	1bf6      	subs	r6, r6, r7
 800a1f8:	600f      	str	r7, [r1, #0]
 800a1fa:	608b      	str	r3, [r1, #8]
 800a1fc:	2e00      	cmp	r6, #0
 800a1fe:	ddeb      	ble.n	800a1d8 <__sflush_r+0xac>
 800a200:	4633      	mov	r3, r6
 800a202:	463a      	mov	r2, r7
 800a204:	4628      	mov	r0, r5
 800a206:	6a21      	ldr	r1, [r4, #32]
 800a208:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a20c:	47e0      	blx	ip
 800a20e:	2800      	cmp	r0, #0
 800a210:	dc07      	bgt.n	800a222 <__sflush_r+0xf6>
 800a212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a21a:	f04f 30ff 	mov.w	r0, #4294967295
 800a21e:	81a3      	strh	r3, [r4, #12]
 800a220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a222:	4407      	add	r7, r0
 800a224:	1a36      	subs	r6, r6, r0
 800a226:	e7e9      	b.n	800a1fc <__sflush_r+0xd0>
 800a228:	dfbffffe 	.word	0xdfbffffe

0800a22c <_fflush_r>:
 800a22c:	b538      	push	{r3, r4, r5, lr}
 800a22e:	690b      	ldr	r3, [r1, #16]
 800a230:	4605      	mov	r5, r0
 800a232:	460c      	mov	r4, r1
 800a234:	b913      	cbnz	r3, 800a23c <_fflush_r+0x10>
 800a236:	2500      	movs	r5, #0
 800a238:	4628      	mov	r0, r5
 800a23a:	bd38      	pop	{r3, r4, r5, pc}
 800a23c:	b118      	cbz	r0, 800a246 <_fflush_r+0x1a>
 800a23e:	6a03      	ldr	r3, [r0, #32]
 800a240:	b90b      	cbnz	r3, 800a246 <_fflush_r+0x1a>
 800a242:	f7fd fa1f 	bl	8007684 <__sinit>
 800a246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d0f3      	beq.n	800a236 <_fflush_r+0xa>
 800a24e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a250:	07d0      	lsls	r0, r2, #31
 800a252:	d404      	bmi.n	800a25e <_fflush_r+0x32>
 800a254:	0599      	lsls	r1, r3, #22
 800a256:	d402      	bmi.n	800a25e <_fflush_r+0x32>
 800a258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a25a:	f7fd fb78 	bl	800794e <__retarget_lock_acquire_recursive>
 800a25e:	4628      	mov	r0, r5
 800a260:	4621      	mov	r1, r4
 800a262:	f7ff ff63 	bl	800a12c <__sflush_r>
 800a266:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a268:	4605      	mov	r5, r0
 800a26a:	07da      	lsls	r2, r3, #31
 800a26c:	d4e4      	bmi.n	800a238 <_fflush_r+0xc>
 800a26e:	89a3      	ldrh	r3, [r4, #12]
 800a270:	059b      	lsls	r3, r3, #22
 800a272:	d4e1      	bmi.n	800a238 <_fflush_r+0xc>
 800a274:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a276:	f7fd fb6b 	bl	8007950 <__retarget_lock_release_recursive>
 800a27a:	e7dd      	b.n	800a238 <_fflush_r+0xc>

0800a27c <strncmp>:
 800a27c:	b510      	push	{r4, lr}
 800a27e:	b16a      	cbz	r2, 800a29c <strncmp+0x20>
 800a280:	3901      	subs	r1, #1
 800a282:	1884      	adds	r4, r0, r2
 800a284:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a288:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d103      	bne.n	800a298 <strncmp+0x1c>
 800a290:	42a0      	cmp	r0, r4
 800a292:	d001      	beq.n	800a298 <strncmp+0x1c>
 800a294:	2a00      	cmp	r2, #0
 800a296:	d1f5      	bne.n	800a284 <strncmp+0x8>
 800a298:	1ad0      	subs	r0, r2, r3
 800a29a:	bd10      	pop	{r4, pc}
 800a29c:	4610      	mov	r0, r2
 800a29e:	e7fc      	b.n	800a29a <strncmp+0x1e>

0800a2a0 <_sbrk_r>:
 800a2a0:	b538      	push	{r3, r4, r5, lr}
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	4d05      	ldr	r5, [pc, #20]	@ (800a2bc <_sbrk_r+0x1c>)
 800a2a6:	4604      	mov	r4, r0
 800a2a8:	4608      	mov	r0, r1
 800a2aa:	602b      	str	r3, [r5, #0]
 800a2ac:	f7f9 f878 	bl	80033a0 <_sbrk>
 800a2b0:	1c43      	adds	r3, r0, #1
 800a2b2:	d102      	bne.n	800a2ba <_sbrk_r+0x1a>
 800a2b4:	682b      	ldr	r3, [r5, #0]
 800a2b6:	b103      	cbz	r3, 800a2ba <_sbrk_r+0x1a>
 800a2b8:	6023      	str	r3, [r4, #0]
 800a2ba:	bd38      	pop	{r3, r4, r5, pc}
 800a2bc:	200008b8 	.word	0x200008b8

0800a2c0 <nan>:
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	4901      	ldr	r1, [pc, #4]	@ (800a2c8 <nan+0x8>)
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop
 800a2c8:	7ff80000 	.word	0x7ff80000

0800a2cc <__assert_func>:
 800a2cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2ce:	4614      	mov	r4, r2
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	4b09      	ldr	r3, [pc, #36]	@ (800a2f8 <__assert_func+0x2c>)
 800a2d4:	4605      	mov	r5, r0
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	68d8      	ldr	r0, [r3, #12]
 800a2da:	b954      	cbnz	r4, 800a2f2 <__assert_func+0x26>
 800a2dc:	4b07      	ldr	r3, [pc, #28]	@ (800a2fc <__assert_func+0x30>)
 800a2de:	461c      	mov	r4, r3
 800a2e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2e4:	9100      	str	r1, [sp, #0]
 800a2e6:	462b      	mov	r3, r5
 800a2e8:	4905      	ldr	r1, [pc, #20]	@ (800a300 <__assert_func+0x34>)
 800a2ea:	f000 fba7 	bl	800aa3c <fiprintf>
 800a2ee:	f000 fbb7 	bl	800aa60 <abort>
 800a2f2:	4b04      	ldr	r3, [pc, #16]	@ (800a304 <__assert_func+0x38>)
 800a2f4:	e7f4      	b.n	800a2e0 <__assert_func+0x14>
 800a2f6:	bf00      	nop
 800a2f8:	20000020 	.word	0x20000020
 800a2fc:	0800dc65 	.word	0x0800dc65
 800a300:	0800dc37 	.word	0x0800dc37
 800a304:	0800dc2a 	.word	0x0800dc2a

0800a308 <_calloc_r>:
 800a308:	b570      	push	{r4, r5, r6, lr}
 800a30a:	fba1 5402 	umull	r5, r4, r1, r2
 800a30e:	b93c      	cbnz	r4, 800a320 <_calloc_r+0x18>
 800a310:	4629      	mov	r1, r5
 800a312:	f7fe fa03 	bl	800871c <_malloc_r>
 800a316:	4606      	mov	r6, r0
 800a318:	b928      	cbnz	r0, 800a326 <_calloc_r+0x1e>
 800a31a:	2600      	movs	r6, #0
 800a31c:	4630      	mov	r0, r6
 800a31e:	bd70      	pop	{r4, r5, r6, pc}
 800a320:	220c      	movs	r2, #12
 800a322:	6002      	str	r2, [r0, #0]
 800a324:	e7f9      	b.n	800a31a <_calloc_r+0x12>
 800a326:	462a      	mov	r2, r5
 800a328:	4621      	mov	r1, r4
 800a32a:	f7fd fa92 	bl	8007852 <memset>
 800a32e:	e7f5      	b.n	800a31c <_calloc_r+0x14>

0800a330 <rshift>:
 800a330:	6903      	ldr	r3, [r0, #16]
 800a332:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a336:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a33a:	f100 0414 	add.w	r4, r0, #20
 800a33e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a342:	dd46      	ble.n	800a3d2 <rshift+0xa2>
 800a344:	f011 011f 	ands.w	r1, r1, #31
 800a348:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a34c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a350:	d10c      	bne.n	800a36c <rshift+0x3c>
 800a352:	4629      	mov	r1, r5
 800a354:	f100 0710 	add.w	r7, r0, #16
 800a358:	42b1      	cmp	r1, r6
 800a35a:	d335      	bcc.n	800a3c8 <rshift+0x98>
 800a35c:	1a9b      	subs	r3, r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	1eea      	subs	r2, r5, #3
 800a362:	4296      	cmp	r6, r2
 800a364:	bf38      	it	cc
 800a366:	2300      	movcc	r3, #0
 800a368:	4423      	add	r3, r4
 800a36a:	e015      	b.n	800a398 <rshift+0x68>
 800a36c:	46a1      	mov	r9, r4
 800a36e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a372:	f1c1 0820 	rsb	r8, r1, #32
 800a376:	40cf      	lsrs	r7, r1
 800a378:	f105 0e04 	add.w	lr, r5, #4
 800a37c:	4576      	cmp	r6, lr
 800a37e:	46f4      	mov	ip, lr
 800a380:	d816      	bhi.n	800a3b0 <rshift+0x80>
 800a382:	1a9a      	subs	r2, r3, r2
 800a384:	0092      	lsls	r2, r2, #2
 800a386:	3a04      	subs	r2, #4
 800a388:	3501      	adds	r5, #1
 800a38a:	42ae      	cmp	r6, r5
 800a38c:	bf38      	it	cc
 800a38e:	2200      	movcc	r2, #0
 800a390:	18a3      	adds	r3, r4, r2
 800a392:	50a7      	str	r7, [r4, r2]
 800a394:	b107      	cbz	r7, 800a398 <rshift+0x68>
 800a396:	3304      	adds	r3, #4
 800a398:	42a3      	cmp	r3, r4
 800a39a:	eba3 0204 	sub.w	r2, r3, r4
 800a39e:	bf08      	it	eq
 800a3a0:	2300      	moveq	r3, #0
 800a3a2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a3a6:	6102      	str	r2, [r0, #16]
 800a3a8:	bf08      	it	eq
 800a3aa:	6143      	streq	r3, [r0, #20]
 800a3ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3b0:	f8dc c000 	ldr.w	ip, [ip]
 800a3b4:	fa0c fc08 	lsl.w	ip, ip, r8
 800a3b8:	ea4c 0707 	orr.w	r7, ip, r7
 800a3bc:	f849 7b04 	str.w	r7, [r9], #4
 800a3c0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a3c4:	40cf      	lsrs	r7, r1
 800a3c6:	e7d9      	b.n	800a37c <rshift+0x4c>
 800a3c8:	f851 cb04 	ldr.w	ip, [r1], #4
 800a3cc:	f847 cf04 	str.w	ip, [r7, #4]!
 800a3d0:	e7c2      	b.n	800a358 <rshift+0x28>
 800a3d2:	4623      	mov	r3, r4
 800a3d4:	e7e0      	b.n	800a398 <rshift+0x68>

0800a3d6 <__hexdig_fun>:
 800a3d6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a3da:	2b09      	cmp	r3, #9
 800a3dc:	d802      	bhi.n	800a3e4 <__hexdig_fun+0xe>
 800a3de:	3820      	subs	r0, #32
 800a3e0:	b2c0      	uxtb	r0, r0
 800a3e2:	4770      	bx	lr
 800a3e4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a3e8:	2b05      	cmp	r3, #5
 800a3ea:	d801      	bhi.n	800a3f0 <__hexdig_fun+0x1a>
 800a3ec:	3847      	subs	r0, #71	@ 0x47
 800a3ee:	e7f7      	b.n	800a3e0 <__hexdig_fun+0xa>
 800a3f0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a3f4:	2b05      	cmp	r3, #5
 800a3f6:	d801      	bhi.n	800a3fc <__hexdig_fun+0x26>
 800a3f8:	3827      	subs	r0, #39	@ 0x27
 800a3fa:	e7f1      	b.n	800a3e0 <__hexdig_fun+0xa>
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	4770      	bx	lr

0800a400 <__gethex>:
 800a400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a404:	468a      	mov	sl, r1
 800a406:	4690      	mov	r8, r2
 800a408:	b085      	sub	sp, #20
 800a40a:	9302      	str	r3, [sp, #8]
 800a40c:	680b      	ldr	r3, [r1, #0]
 800a40e:	9001      	str	r0, [sp, #4]
 800a410:	1c9c      	adds	r4, r3, #2
 800a412:	46a1      	mov	r9, r4
 800a414:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a418:	2830      	cmp	r0, #48	@ 0x30
 800a41a:	d0fa      	beq.n	800a412 <__gethex+0x12>
 800a41c:	eba9 0303 	sub.w	r3, r9, r3
 800a420:	f1a3 0b02 	sub.w	fp, r3, #2
 800a424:	f7ff ffd7 	bl	800a3d6 <__hexdig_fun>
 800a428:	4605      	mov	r5, r0
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d168      	bne.n	800a500 <__gethex+0x100>
 800a42e:	2201      	movs	r2, #1
 800a430:	4648      	mov	r0, r9
 800a432:	499f      	ldr	r1, [pc, #636]	@ (800a6b0 <__gethex+0x2b0>)
 800a434:	f7ff ff22 	bl	800a27c <strncmp>
 800a438:	4607      	mov	r7, r0
 800a43a:	2800      	cmp	r0, #0
 800a43c:	d167      	bne.n	800a50e <__gethex+0x10e>
 800a43e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a442:	4626      	mov	r6, r4
 800a444:	f7ff ffc7 	bl	800a3d6 <__hexdig_fun>
 800a448:	2800      	cmp	r0, #0
 800a44a:	d062      	beq.n	800a512 <__gethex+0x112>
 800a44c:	4623      	mov	r3, r4
 800a44e:	7818      	ldrb	r0, [r3, #0]
 800a450:	4699      	mov	r9, r3
 800a452:	2830      	cmp	r0, #48	@ 0x30
 800a454:	f103 0301 	add.w	r3, r3, #1
 800a458:	d0f9      	beq.n	800a44e <__gethex+0x4e>
 800a45a:	f7ff ffbc 	bl	800a3d6 <__hexdig_fun>
 800a45e:	fab0 f580 	clz	r5, r0
 800a462:	f04f 0b01 	mov.w	fp, #1
 800a466:	096d      	lsrs	r5, r5, #5
 800a468:	464a      	mov	r2, r9
 800a46a:	4616      	mov	r6, r2
 800a46c:	7830      	ldrb	r0, [r6, #0]
 800a46e:	3201      	adds	r2, #1
 800a470:	f7ff ffb1 	bl	800a3d6 <__hexdig_fun>
 800a474:	2800      	cmp	r0, #0
 800a476:	d1f8      	bne.n	800a46a <__gethex+0x6a>
 800a478:	2201      	movs	r2, #1
 800a47a:	4630      	mov	r0, r6
 800a47c:	498c      	ldr	r1, [pc, #560]	@ (800a6b0 <__gethex+0x2b0>)
 800a47e:	f7ff fefd 	bl	800a27c <strncmp>
 800a482:	2800      	cmp	r0, #0
 800a484:	d13f      	bne.n	800a506 <__gethex+0x106>
 800a486:	b944      	cbnz	r4, 800a49a <__gethex+0x9a>
 800a488:	1c74      	adds	r4, r6, #1
 800a48a:	4622      	mov	r2, r4
 800a48c:	4616      	mov	r6, r2
 800a48e:	7830      	ldrb	r0, [r6, #0]
 800a490:	3201      	adds	r2, #1
 800a492:	f7ff ffa0 	bl	800a3d6 <__hexdig_fun>
 800a496:	2800      	cmp	r0, #0
 800a498:	d1f8      	bne.n	800a48c <__gethex+0x8c>
 800a49a:	1ba4      	subs	r4, r4, r6
 800a49c:	00a7      	lsls	r7, r4, #2
 800a49e:	7833      	ldrb	r3, [r6, #0]
 800a4a0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a4a4:	2b50      	cmp	r3, #80	@ 0x50
 800a4a6:	d13e      	bne.n	800a526 <__gethex+0x126>
 800a4a8:	7873      	ldrb	r3, [r6, #1]
 800a4aa:	2b2b      	cmp	r3, #43	@ 0x2b
 800a4ac:	d033      	beq.n	800a516 <__gethex+0x116>
 800a4ae:	2b2d      	cmp	r3, #45	@ 0x2d
 800a4b0:	d034      	beq.n	800a51c <__gethex+0x11c>
 800a4b2:	2400      	movs	r4, #0
 800a4b4:	1c71      	adds	r1, r6, #1
 800a4b6:	7808      	ldrb	r0, [r1, #0]
 800a4b8:	f7ff ff8d 	bl	800a3d6 <__hexdig_fun>
 800a4bc:	1e43      	subs	r3, r0, #1
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	2b18      	cmp	r3, #24
 800a4c2:	d830      	bhi.n	800a526 <__gethex+0x126>
 800a4c4:	f1a0 0210 	sub.w	r2, r0, #16
 800a4c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a4cc:	f7ff ff83 	bl	800a3d6 <__hexdig_fun>
 800a4d0:	f100 3cff 	add.w	ip, r0, #4294967295
 800a4d4:	fa5f fc8c 	uxtb.w	ip, ip
 800a4d8:	f1bc 0f18 	cmp.w	ip, #24
 800a4dc:	f04f 030a 	mov.w	r3, #10
 800a4e0:	d91e      	bls.n	800a520 <__gethex+0x120>
 800a4e2:	b104      	cbz	r4, 800a4e6 <__gethex+0xe6>
 800a4e4:	4252      	negs	r2, r2
 800a4e6:	4417      	add	r7, r2
 800a4e8:	f8ca 1000 	str.w	r1, [sl]
 800a4ec:	b1ed      	cbz	r5, 800a52a <__gethex+0x12a>
 800a4ee:	f1bb 0f00 	cmp.w	fp, #0
 800a4f2:	bf0c      	ite	eq
 800a4f4:	2506      	moveq	r5, #6
 800a4f6:	2500      	movne	r5, #0
 800a4f8:	4628      	mov	r0, r5
 800a4fa:	b005      	add	sp, #20
 800a4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a500:	2500      	movs	r5, #0
 800a502:	462c      	mov	r4, r5
 800a504:	e7b0      	b.n	800a468 <__gethex+0x68>
 800a506:	2c00      	cmp	r4, #0
 800a508:	d1c7      	bne.n	800a49a <__gethex+0x9a>
 800a50a:	4627      	mov	r7, r4
 800a50c:	e7c7      	b.n	800a49e <__gethex+0x9e>
 800a50e:	464e      	mov	r6, r9
 800a510:	462f      	mov	r7, r5
 800a512:	2501      	movs	r5, #1
 800a514:	e7c3      	b.n	800a49e <__gethex+0x9e>
 800a516:	2400      	movs	r4, #0
 800a518:	1cb1      	adds	r1, r6, #2
 800a51a:	e7cc      	b.n	800a4b6 <__gethex+0xb6>
 800a51c:	2401      	movs	r4, #1
 800a51e:	e7fb      	b.n	800a518 <__gethex+0x118>
 800a520:	fb03 0002 	mla	r0, r3, r2, r0
 800a524:	e7ce      	b.n	800a4c4 <__gethex+0xc4>
 800a526:	4631      	mov	r1, r6
 800a528:	e7de      	b.n	800a4e8 <__gethex+0xe8>
 800a52a:	4629      	mov	r1, r5
 800a52c:	eba6 0309 	sub.w	r3, r6, r9
 800a530:	3b01      	subs	r3, #1
 800a532:	2b07      	cmp	r3, #7
 800a534:	dc0a      	bgt.n	800a54c <__gethex+0x14c>
 800a536:	9801      	ldr	r0, [sp, #4]
 800a538:	f7fe f97c 	bl	8008834 <_Balloc>
 800a53c:	4604      	mov	r4, r0
 800a53e:	b940      	cbnz	r0, 800a552 <__gethex+0x152>
 800a540:	4602      	mov	r2, r0
 800a542:	21e4      	movs	r1, #228	@ 0xe4
 800a544:	4b5b      	ldr	r3, [pc, #364]	@ (800a6b4 <__gethex+0x2b4>)
 800a546:	485c      	ldr	r0, [pc, #368]	@ (800a6b8 <__gethex+0x2b8>)
 800a548:	f7ff fec0 	bl	800a2cc <__assert_func>
 800a54c:	3101      	adds	r1, #1
 800a54e:	105b      	asrs	r3, r3, #1
 800a550:	e7ef      	b.n	800a532 <__gethex+0x132>
 800a552:	2300      	movs	r3, #0
 800a554:	f100 0a14 	add.w	sl, r0, #20
 800a558:	4655      	mov	r5, sl
 800a55a:	469b      	mov	fp, r3
 800a55c:	45b1      	cmp	r9, r6
 800a55e:	d337      	bcc.n	800a5d0 <__gethex+0x1d0>
 800a560:	f845 bb04 	str.w	fp, [r5], #4
 800a564:	eba5 050a 	sub.w	r5, r5, sl
 800a568:	10ad      	asrs	r5, r5, #2
 800a56a:	6125      	str	r5, [r4, #16]
 800a56c:	4658      	mov	r0, fp
 800a56e:	f7fe fa53 	bl	8008a18 <__hi0bits>
 800a572:	016d      	lsls	r5, r5, #5
 800a574:	f8d8 6000 	ldr.w	r6, [r8]
 800a578:	1a2d      	subs	r5, r5, r0
 800a57a:	42b5      	cmp	r5, r6
 800a57c:	dd54      	ble.n	800a628 <__gethex+0x228>
 800a57e:	1bad      	subs	r5, r5, r6
 800a580:	4629      	mov	r1, r5
 800a582:	4620      	mov	r0, r4
 800a584:	f7fe fddb 	bl	800913e <__any_on>
 800a588:	4681      	mov	r9, r0
 800a58a:	b178      	cbz	r0, 800a5ac <__gethex+0x1ac>
 800a58c:	f04f 0901 	mov.w	r9, #1
 800a590:	1e6b      	subs	r3, r5, #1
 800a592:	1159      	asrs	r1, r3, #5
 800a594:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a598:	f003 021f 	and.w	r2, r3, #31
 800a59c:	fa09 f202 	lsl.w	r2, r9, r2
 800a5a0:	420a      	tst	r2, r1
 800a5a2:	d003      	beq.n	800a5ac <__gethex+0x1ac>
 800a5a4:	454b      	cmp	r3, r9
 800a5a6:	dc36      	bgt.n	800a616 <__gethex+0x216>
 800a5a8:	f04f 0902 	mov.w	r9, #2
 800a5ac:	4629      	mov	r1, r5
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	f7ff febe 	bl	800a330 <rshift>
 800a5b4:	442f      	add	r7, r5
 800a5b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5ba:	42bb      	cmp	r3, r7
 800a5bc:	da42      	bge.n	800a644 <__gethex+0x244>
 800a5be:	4621      	mov	r1, r4
 800a5c0:	9801      	ldr	r0, [sp, #4]
 800a5c2:	f7fe f977 	bl	80088b4 <_Bfree>
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a5ca:	25a3      	movs	r5, #163	@ 0xa3
 800a5cc:	6013      	str	r3, [r2, #0]
 800a5ce:	e793      	b.n	800a4f8 <__gethex+0xf8>
 800a5d0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a5d4:	2a2e      	cmp	r2, #46	@ 0x2e
 800a5d6:	d012      	beq.n	800a5fe <__gethex+0x1fe>
 800a5d8:	2b20      	cmp	r3, #32
 800a5da:	d104      	bne.n	800a5e6 <__gethex+0x1e6>
 800a5dc:	f845 bb04 	str.w	fp, [r5], #4
 800a5e0:	f04f 0b00 	mov.w	fp, #0
 800a5e4:	465b      	mov	r3, fp
 800a5e6:	7830      	ldrb	r0, [r6, #0]
 800a5e8:	9303      	str	r3, [sp, #12]
 800a5ea:	f7ff fef4 	bl	800a3d6 <__hexdig_fun>
 800a5ee:	9b03      	ldr	r3, [sp, #12]
 800a5f0:	f000 000f 	and.w	r0, r0, #15
 800a5f4:	4098      	lsls	r0, r3
 800a5f6:	ea4b 0b00 	orr.w	fp, fp, r0
 800a5fa:	3304      	adds	r3, #4
 800a5fc:	e7ae      	b.n	800a55c <__gethex+0x15c>
 800a5fe:	45b1      	cmp	r9, r6
 800a600:	d8ea      	bhi.n	800a5d8 <__gethex+0x1d8>
 800a602:	2201      	movs	r2, #1
 800a604:	4630      	mov	r0, r6
 800a606:	492a      	ldr	r1, [pc, #168]	@ (800a6b0 <__gethex+0x2b0>)
 800a608:	9303      	str	r3, [sp, #12]
 800a60a:	f7ff fe37 	bl	800a27c <strncmp>
 800a60e:	9b03      	ldr	r3, [sp, #12]
 800a610:	2800      	cmp	r0, #0
 800a612:	d1e1      	bne.n	800a5d8 <__gethex+0x1d8>
 800a614:	e7a2      	b.n	800a55c <__gethex+0x15c>
 800a616:	4620      	mov	r0, r4
 800a618:	1ea9      	subs	r1, r5, #2
 800a61a:	f7fe fd90 	bl	800913e <__any_on>
 800a61e:	2800      	cmp	r0, #0
 800a620:	d0c2      	beq.n	800a5a8 <__gethex+0x1a8>
 800a622:	f04f 0903 	mov.w	r9, #3
 800a626:	e7c1      	b.n	800a5ac <__gethex+0x1ac>
 800a628:	da09      	bge.n	800a63e <__gethex+0x23e>
 800a62a:	1b75      	subs	r5, r6, r5
 800a62c:	4621      	mov	r1, r4
 800a62e:	462a      	mov	r2, r5
 800a630:	9801      	ldr	r0, [sp, #4]
 800a632:	f7fe fb55 	bl	8008ce0 <__lshift>
 800a636:	4604      	mov	r4, r0
 800a638:	1b7f      	subs	r7, r7, r5
 800a63a:	f100 0a14 	add.w	sl, r0, #20
 800a63e:	f04f 0900 	mov.w	r9, #0
 800a642:	e7b8      	b.n	800a5b6 <__gethex+0x1b6>
 800a644:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a648:	42bd      	cmp	r5, r7
 800a64a:	dd6f      	ble.n	800a72c <__gethex+0x32c>
 800a64c:	1bed      	subs	r5, r5, r7
 800a64e:	42ae      	cmp	r6, r5
 800a650:	dc34      	bgt.n	800a6bc <__gethex+0x2bc>
 800a652:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a656:	2b02      	cmp	r3, #2
 800a658:	d022      	beq.n	800a6a0 <__gethex+0x2a0>
 800a65a:	2b03      	cmp	r3, #3
 800a65c:	d024      	beq.n	800a6a8 <__gethex+0x2a8>
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d115      	bne.n	800a68e <__gethex+0x28e>
 800a662:	42ae      	cmp	r6, r5
 800a664:	d113      	bne.n	800a68e <__gethex+0x28e>
 800a666:	2e01      	cmp	r6, #1
 800a668:	d10b      	bne.n	800a682 <__gethex+0x282>
 800a66a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a66e:	9a02      	ldr	r2, [sp, #8]
 800a670:	2562      	movs	r5, #98	@ 0x62
 800a672:	6013      	str	r3, [r2, #0]
 800a674:	2301      	movs	r3, #1
 800a676:	6123      	str	r3, [r4, #16]
 800a678:	f8ca 3000 	str.w	r3, [sl]
 800a67c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a67e:	601c      	str	r4, [r3, #0]
 800a680:	e73a      	b.n	800a4f8 <__gethex+0xf8>
 800a682:	4620      	mov	r0, r4
 800a684:	1e71      	subs	r1, r6, #1
 800a686:	f7fe fd5a 	bl	800913e <__any_on>
 800a68a:	2800      	cmp	r0, #0
 800a68c:	d1ed      	bne.n	800a66a <__gethex+0x26a>
 800a68e:	4621      	mov	r1, r4
 800a690:	9801      	ldr	r0, [sp, #4]
 800a692:	f7fe f90f 	bl	80088b4 <_Bfree>
 800a696:	2300      	movs	r3, #0
 800a698:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a69a:	2550      	movs	r5, #80	@ 0x50
 800a69c:	6013      	str	r3, [r2, #0]
 800a69e:	e72b      	b.n	800a4f8 <__gethex+0xf8>
 800a6a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1f3      	bne.n	800a68e <__gethex+0x28e>
 800a6a6:	e7e0      	b.n	800a66a <__gethex+0x26a>
 800a6a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d1dd      	bne.n	800a66a <__gethex+0x26a>
 800a6ae:	e7ee      	b.n	800a68e <__gethex+0x28e>
 800a6b0:	0800dab8 	.word	0x0800dab8
 800a6b4:	0800d94f 	.word	0x0800d94f
 800a6b8:	0800dc66 	.word	0x0800dc66
 800a6bc:	1e6f      	subs	r7, r5, #1
 800a6be:	f1b9 0f00 	cmp.w	r9, #0
 800a6c2:	d130      	bne.n	800a726 <__gethex+0x326>
 800a6c4:	b127      	cbz	r7, 800a6d0 <__gethex+0x2d0>
 800a6c6:	4639      	mov	r1, r7
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	f7fe fd38 	bl	800913e <__any_on>
 800a6ce:	4681      	mov	r9, r0
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	4629      	mov	r1, r5
 800a6d4:	1b76      	subs	r6, r6, r5
 800a6d6:	2502      	movs	r5, #2
 800a6d8:	117a      	asrs	r2, r7, #5
 800a6da:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a6de:	f007 071f 	and.w	r7, r7, #31
 800a6e2:	40bb      	lsls	r3, r7
 800a6e4:	4213      	tst	r3, r2
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	bf18      	it	ne
 800a6ea:	f049 0902 	orrne.w	r9, r9, #2
 800a6ee:	f7ff fe1f 	bl	800a330 <rshift>
 800a6f2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a6f6:	f1b9 0f00 	cmp.w	r9, #0
 800a6fa:	d047      	beq.n	800a78c <__gethex+0x38c>
 800a6fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a700:	2b02      	cmp	r3, #2
 800a702:	d015      	beq.n	800a730 <__gethex+0x330>
 800a704:	2b03      	cmp	r3, #3
 800a706:	d017      	beq.n	800a738 <__gethex+0x338>
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d109      	bne.n	800a720 <__gethex+0x320>
 800a70c:	f019 0f02 	tst.w	r9, #2
 800a710:	d006      	beq.n	800a720 <__gethex+0x320>
 800a712:	f8da 3000 	ldr.w	r3, [sl]
 800a716:	ea49 0903 	orr.w	r9, r9, r3
 800a71a:	f019 0f01 	tst.w	r9, #1
 800a71e:	d10e      	bne.n	800a73e <__gethex+0x33e>
 800a720:	f045 0510 	orr.w	r5, r5, #16
 800a724:	e032      	b.n	800a78c <__gethex+0x38c>
 800a726:	f04f 0901 	mov.w	r9, #1
 800a72a:	e7d1      	b.n	800a6d0 <__gethex+0x2d0>
 800a72c:	2501      	movs	r5, #1
 800a72e:	e7e2      	b.n	800a6f6 <__gethex+0x2f6>
 800a730:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a732:	f1c3 0301 	rsb	r3, r3, #1
 800a736:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a738:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d0f0      	beq.n	800a720 <__gethex+0x320>
 800a73e:	f04f 0c00 	mov.w	ip, #0
 800a742:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a746:	f104 0314 	add.w	r3, r4, #20
 800a74a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a74e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a752:	4618      	mov	r0, r3
 800a754:	f853 2b04 	ldr.w	r2, [r3], #4
 800a758:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a75c:	d01b      	beq.n	800a796 <__gethex+0x396>
 800a75e:	3201      	adds	r2, #1
 800a760:	6002      	str	r2, [r0, #0]
 800a762:	2d02      	cmp	r5, #2
 800a764:	f104 0314 	add.w	r3, r4, #20
 800a768:	d13c      	bne.n	800a7e4 <__gethex+0x3e4>
 800a76a:	f8d8 2000 	ldr.w	r2, [r8]
 800a76e:	3a01      	subs	r2, #1
 800a770:	42b2      	cmp	r2, r6
 800a772:	d109      	bne.n	800a788 <__gethex+0x388>
 800a774:	2201      	movs	r2, #1
 800a776:	1171      	asrs	r1, r6, #5
 800a778:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a77c:	f006 061f 	and.w	r6, r6, #31
 800a780:	fa02 f606 	lsl.w	r6, r2, r6
 800a784:	421e      	tst	r6, r3
 800a786:	d13a      	bne.n	800a7fe <__gethex+0x3fe>
 800a788:	f045 0520 	orr.w	r5, r5, #32
 800a78c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a78e:	601c      	str	r4, [r3, #0]
 800a790:	9b02      	ldr	r3, [sp, #8]
 800a792:	601f      	str	r7, [r3, #0]
 800a794:	e6b0      	b.n	800a4f8 <__gethex+0xf8>
 800a796:	4299      	cmp	r1, r3
 800a798:	f843 cc04 	str.w	ip, [r3, #-4]
 800a79c:	d8d9      	bhi.n	800a752 <__gethex+0x352>
 800a79e:	68a3      	ldr	r3, [r4, #8]
 800a7a0:	459b      	cmp	fp, r3
 800a7a2:	db17      	blt.n	800a7d4 <__gethex+0x3d4>
 800a7a4:	6861      	ldr	r1, [r4, #4]
 800a7a6:	9801      	ldr	r0, [sp, #4]
 800a7a8:	3101      	adds	r1, #1
 800a7aa:	f7fe f843 	bl	8008834 <_Balloc>
 800a7ae:	4681      	mov	r9, r0
 800a7b0:	b918      	cbnz	r0, 800a7ba <__gethex+0x3ba>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	2184      	movs	r1, #132	@ 0x84
 800a7b6:	4b19      	ldr	r3, [pc, #100]	@ (800a81c <__gethex+0x41c>)
 800a7b8:	e6c5      	b.n	800a546 <__gethex+0x146>
 800a7ba:	6922      	ldr	r2, [r4, #16]
 800a7bc:	f104 010c 	add.w	r1, r4, #12
 800a7c0:	3202      	adds	r2, #2
 800a7c2:	0092      	lsls	r2, r2, #2
 800a7c4:	300c      	adds	r0, #12
 800a7c6:	f7fd f8d2 	bl	800796e <memcpy>
 800a7ca:	4621      	mov	r1, r4
 800a7cc:	9801      	ldr	r0, [sp, #4]
 800a7ce:	f7fe f871 	bl	80088b4 <_Bfree>
 800a7d2:	464c      	mov	r4, r9
 800a7d4:	6923      	ldr	r3, [r4, #16]
 800a7d6:	1c5a      	adds	r2, r3, #1
 800a7d8:	6122      	str	r2, [r4, #16]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a7e0:	615a      	str	r2, [r3, #20]
 800a7e2:	e7be      	b.n	800a762 <__gethex+0x362>
 800a7e4:	6922      	ldr	r2, [r4, #16]
 800a7e6:	455a      	cmp	r2, fp
 800a7e8:	dd0b      	ble.n	800a802 <__gethex+0x402>
 800a7ea:	2101      	movs	r1, #1
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f7ff fd9f 	bl	800a330 <rshift>
 800a7f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a7f6:	3701      	adds	r7, #1
 800a7f8:	42bb      	cmp	r3, r7
 800a7fa:	f6ff aee0 	blt.w	800a5be <__gethex+0x1be>
 800a7fe:	2501      	movs	r5, #1
 800a800:	e7c2      	b.n	800a788 <__gethex+0x388>
 800a802:	f016 061f 	ands.w	r6, r6, #31
 800a806:	d0fa      	beq.n	800a7fe <__gethex+0x3fe>
 800a808:	4453      	add	r3, sl
 800a80a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a80e:	f7fe f903 	bl	8008a18 <__hi0bits>
 800a812:	f1c6 0620 	rsb	r6, r6, #32
 800a816:	42b0      	cmp	r0, r6
 800a818:	dbe7      	blt.n	800a7ea <__gethex+0x3ea>
 800a81a:	e7f0      	b.n	800a7fe <__gethex+0x3fe>
 800a81c:	0800d94f 	.word	0x0800d94f

0800a820 <L_shift>:
 800a820:	f1c2 0208 	rsb	r2, r2, #8
 800a824:	0092      	lsls	r2, r2, #2
 800a826:	b570      	push	{r4, r5, r6, lr}
 800a828:	f1c2 0620 	rsb	r6, r2, #32
 800a82c:	6843      	ldr	r3, [r0, #4]
 800a82e:	6804      	ldr	r4, [r0, #0]
 800a830:	fa03 f506 	lsl.w	r5, r3, r6
 800a834:	432c      	orrs	r4, r5
 800a836:	40d3      	lsrs	r3, r2
 800a838:	6004      	str	r4, [r0, #0]
 800a83a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a83e:	4288      	cmp	r0, r1
 800a840:	d3f4      	bcc.n	800a82c <L_shift+0xc>
 800a842:	bd70      	pop	{r4, r5, r6, pc}

0800a844 <__match>:
 800a844:	b530      	push	{r4, r5, lr}
 800a846:	6803      	ldr	r3, [r0, #0]
 800a848:	3301      	adds	r3, #1
 800a84a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a84e:	b914      	cbnz	r4, 800a856 <__match+0x12>
 800a850:	6003      	str	r3, [r0, #0]
 800a852:	2001      	movs	r0, #1
 800a854:	bd30      	pop	{r4, r5, pc}
 800a856:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a85a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a85e:	2d19      	cmp	r5, #25
 800a860:	bf98      	it	ls
 800a862:	3220      	addls	r2, #32
 800a864:	42a2      	cmp	r2, r4
 800a866:	d0f0      	beq.n	800a84a <__match+0x6>
 800a868:	2000      	movs	r0, #0
 800a86a:	e7f3      	b.n	800a854 <__match+0x10>

0800a86c <__hexnan>:
 800a86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a870:	2500      	movs	r5, #0
 800a872:	680b      	ldr	r3, [r1, #0]
 800a874:	4682      	mov	sl, r0
 800a876:	115e      	asrs	r6, r3, #5
 800a878:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a87c:	f013 031f 	ands.w	r3, r3, #31
 800a880:	bf18      	it	ne
 800a882:	3604      	addne	r6, #4
 800a884:	1f37      	subs	r7, r6, #4
 800a886:	4690      	mov	r8, r2
 800a888:	46b9      	mov	r9, r7
 800a88a:	463c      	mov	r4, r7
 800a88c:	46ab      	mov	fp, r5
 800a88e:	b087      	sub	sp, #28
 800a890:	6801      	ldr	r1, [r0, #0]
 800a892:	9301      	str	r3, [sp, #4]
 800a894:	f846 5c04 	str.w	r5, [r6, #-4]
 800a898:	9502      	str	r5, [sp, #8]
 800a89a:	784a      	ldrb	r2, [r1, #1]
 800a89c:	1c4b      	adds	r3, r1, #1
 800a89e:	9303      	str	r3, [sp, #12]
 800a8a0:	b342      	cbz	r2, 800a8f4 <__hexnan+0x88>
 800a8a2:	4610      	mov	r0, r2
 800a8a4:	9105      	str	r1, [sp, #20]
 800a8a6:	9204      	str	r2, [sp, #16]
 800a8a8:	f7ff fd95 	bl	800a3d6 <__hexdig_fun>
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	d151      	bne.n	800a954 <__hexnan+0xe8>
 800a8b0:	9a04      	ldr	r2, [sp, #16]
 800a8b2:	9905      	ldr	r1, [sp, #20]
 800a8b4:	2a20      	cmp	r2, #32
 800a8b6:	d818      	bhi.n	800a8ea <__hexnan+0x7e>
 800a8b8:	9b02      	ldr	r3, [sp, #8]
 800a8ba:	459b      	cmp	fp, r3
 800a8bc:	dd13      	ble.n	800a8e6 <__hexnan+0x7a>
 800a8be:	454c      	cmp	r4, r9
 800a8c0:	d206      	bcs.n	800a8d0 <__hexnan+0x64>
 800a8c2:	2d07      	cmp	r5, #7
 800a8c4:	dc04      	bgt.n	800a8d0 <__hexnan+0x64>
 800a8c6:	462a      	mov	r2, r5
 800a8c8:	4649      	mov	r1, r9
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	f7ff ffa8 	bl	800a820 <L_shift>
 800a8d0:	4544      	cmp	r4, r8
 800a8d2:	d952      	bls.n	800a97a <__hexnan+0x10e>
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	f1a4 0904 	sub.w	r9, r4, #4
 800a8da:	f844 3c04 	str.w	r3, [r4, #-4]
 800a8de:	461d      	mov	r5, r3
 800a8e0:	464c      	mov	r4, r9
 800a8e2:	f8cd b008 	str.w	fp, [sp, #8]
 800a8e6:	9903      	ldr	r1, [sp, #12]
 800a8e8:	e7d7      	b.n	800a89a <__hexnan+0x2e>
 800a8ea:	2a29      	cmp	r2, #41	@ 0x29
 800a8ec:	d157      	bne.n	800a99e <__hexnan+0x132>
 800a8ee:	3102      	adds	r1, #2
 800a8f0:	f8ca 1000 	str.w	r1, [sl]
 800a8f4:	f1bb 0f00 	cmp.w	fp, #0
 800a8f8:	d051      	beq.n	800a99e <__hexnan+0x132>
 800a8fa:	454c      	cmp	r4, r9
 800a8fc:	d206      	bcs.n	800a90c <__hexnan+0xa0>
 800a8fe:	2d07      	cmp	r5, #7
 800a900:	dc04      	bgt.n	800a90c <__hexnan+0xa0>
 800a902:	462a      	mov	r2, r5
 800a904:	4649      	mov	r1, r9
 800a906:	4620      	mov	r0, r4
 800a908:	f7ff ff8a 	bl	800a820 <L_shift>
 800a90c:	4544      	cmp	r4, r8
 800a90e:	d936      	bls.n	800a97e <__hexnan+0x112>
 800a910:	4623      	mov	r3, r4
 800a912:	f1a8 0204 	sub.w	r2, r8, #4
 800a916:	f853 1b04 	ldr.w	r1, [r3], #4
 800a91a:	429f      	cmp	r7, r3
 800a91c:	f842 1f04 	str.w	r1, [r2, #4]!
 800a920:	d2f9      	bcs.n	800a916 <__hexnan+0xaa>
 800a922:	1b3b      	subs	r3, r7, r4
 800a924:	f023 0303 	bic.w	r3, r3, #3
 800a928:	3304      	adds	r3, #4
 800a92a:	3401      	adds	r4, #1
 800a92c:	3e03      	subs	r6, #3
 800a92e:	42b4      	cmp	r4, r6
 800a930:	bf88      	it	hi
 800a932:	2304      	movhi	r3, #4
 800a934:	2200      	movs	r2, #0
 800a936:	4443      	add	r3, r8
 800a938:	f843 2b04 	str.w	r2, [r3], #4
 800a93c:	429f      	cmp	r7, r3
 800a93e:	d2fb      	bcs.n	800a938 <__hexnan+0xcc>
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	b91b      	cbnz	r3, 800a94c <__hexnan+0xe0>
 800a944:	4547      	cmp	r7, r8
 800a946:	d128      	bne.n	800a99a <__hexnan+0x12e>
 800a948:	2301      	movs	r3, #1
 800a94a:	603b      	str	r3, [r7, #0]
 800a94c:	2005      	movs	r0, #5
 800a94e:	b007      	add	sp, #28
 800a950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a954:	3501      	adds	r5, #1
 800a956:	2d08      	cmp	r5, #8
 800a958:	f10b 0b01 	add.w	fp, fp, #1
 800a95c:	dd06      	ble.n	800a96c <__hexnan+0x100>
 800a95e:	4544      	cmp	r4, r8
 800a960:	d9c1      	bls.n	800a8e6 <__hexnan+0x7a>
 800a962:	2300      	movs	r3, #0
 800a964:	2501      	movs	r5, #1
 800a966:	f844 3c04 	str.w	r3, [r4, #-4]
 800a96a:	3c04      	subs	r4, #4
 800a96c:	6822      	ldr	r2, [r4, #0]
 800a96e:	f000 000f 	and.w	r0, r0, #15
 800a972:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a976:	6020      	str	r0, [r4, #0]
 800a978:	e7b5      	b.n	800a8e6 <__hexnan+0x7a>
 800a97a:	2508      	movs	r5, #8
 800a97c:	e7b3      	b.n	800a8e6 <__hexnan+0x7a>
 800a97e:	9b01      	ldr	r3, [sp, #4]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d0dd      	beq.n	800a940 <__hexnan+0xd4>
 800a984:	f04f 32ff 	mov.w	r2, #4294967295
 800a988:	f1c3 0320 	rsb	r3, r3, #32
 800a98c:	40da      	lsrs	r2, r3
 800a98e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a992:	4013      	ands	r3, r2
 800a994:	f846 3c04 	str.w	r3, [r6, #-4]
 800a998:	e7d2      	b.n	800a940 <__hexnan+0xd4>
 800a99a:	3f04      	subs	r7, #4
 800a99c:	e7d0      	b.n	800a940 <__hexnan+0xd4>
 800a99e:	2004      	movs	r0, #4
 800a9a0:	e7d5      	b.n	800a94e <__hexnan+0xe2>

0800a9a2 <__ascii_mbtowc>:
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	b901      	cbnz	r1, 800a9a8 <__ascii_mbtowc+0x6>
 800a9a6:	a901      	add	r1, sp, #4
 800a9a8:	b142      	cbz	r2, 800a9bc <__ascii_mbtowc+0x1a>
 800a9aa:	b14b      	cbz	r3, 800a9c0 <__ascii_mbtowc+0x1e>
 800a9ac:	7813      	ldrb	r3, [r2, #0]
 800a9ae:	600b      	str	r3, [r1, #0]
 800a9b0:	7812      	ldrb	r2, [r2, #0]
 800a9b2:	1e10      	subs	r0, r2, #0
 800a9b4:	bf18      	it	ne
 800a9b6:	2001      	movne	r0, #1
 800a9b8:	b002      	add	sp, #8
 800a9ba:	4770      	bx	lr
 800a9bc:	4610      	mov	r0, r2
 800a9be:	e7fb      	b.n	800a9b8 <__ascii_mbtowc+0x16>
 800a9c0:	f06f 0001 	mvn.w	r0, #1
 800a9c4:	e7f8      	b.n	800a9b8 <__ascii_mbtowc+0x16>

0800a9c6 <_realloc_r>:
 800a9c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ca:	4680      	mov	r8, r0
 800a9cc:	4615      	mov	r5, r2
 800a9ce:	460c      	mov	r4, r1
 800a9d0:	b921      	cbnz	r1, 800a9dc <_realloc_r+0x16>
 800a9d2:	4611      	mov	r1, r2
 800a9d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9d8:	f7fd bea0 	b.w	800871c <_malloc_r>
 800a9dc:	b92a      	cbnz	r2, 800a9ea <_realloc_r+0x24>
 800a9de:	f7fd fe2b 	bl	8008638 <_free_r>
 800a9e2:	2400      	movs	r4, #0
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9ea:	f000 f840 	bl	800aa6e <_malloc_usable_size_r>
 800a9ee:	4285      	cmp	r5, r0
 800a9f0:	4606      	mov	r6, r0
 800a9f2:	d802      	bhi.n	800a9fa <_realloc_r+0x34>
 800a9f4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a9f8:	d8f4      	bhi.n	800a9e4 <_realloc_r+0x1e>
 800a9fa:	4629      	mov	r1, r5
 800a9fc:	4640      	mov	r0, r8
 800a9fe:	f7fd fe8d 	bl	800871c <_malloc_r>
 800aa02:	4607      	mov	r7, r0
 800aa04:	2800      	cmp	r0, #0
 800aa06:	d0ec      	beq.n	800a9e2 <_realloc_r+0x1c>
 800aa08:	42b5      	cmp	r5, r6
 800aa0a:	462a      	mov	r2, r5
 800aa0c:	4621      	mov	r1, r4
 800aa0e:	bf28      	it	cs
 800aa10:	4632      	movcs	r2, r6
 800aa12:	f7fc ffac 	bl	800796e <memcpy>
 800aa16:	4621      	mov	r1, r4
 800aa18:	4640      	mov	r0, r8
 800aa1a:	f7fd fe0d 	bl	8008638 <_free_r>
 800aa1e:	463c      	mov	r4, r7
 800aa20:	e7e0      	b.n	800a9e4 <_realloc_r+0x1e>

0800aa22 <__ascii_wctomb>:
 800aa22:	4603      	mov	r3, r0
 800aa24:	4608      	mov	r0, r1
 800aa26:	b141      	cbz	r1, 800aa3a <__ascii_wctomb+0x18>
 800aa28:	2aff      	cmp	r2, #255	@ 0xff
 800aa2a:	d904      	bls.n	800aa36 <__ascii_wctomb+0x14>
 800aa2c:	228a      	movs	r2, #138	@ 0x8a
 800aa2e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa32:	601a      	str	r2, [r3, #0]
 800aa34:	4770      	bx	lr
 800aa36:	2001      	movs	r0, #1
 800aa38:	700a      	strb	r2, [r1, #0]
 800aa3a:	4770      	bx	lr

0800aa3c <fiprintf>:
 800aa3c:	b40e      	push	{r1, r2, r3}
 800aa3e:	b503      	push	{r0, r1, lr}
 800aa40:	4601      	mov	r1, r0
 800aa42:	ab03      	add	r3, sp, #12
 800aa44:	4805      	ldr	r0, [pc, #20]	@ (800aa5c <fiprintf+0x20>)
 800aa46:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa4a:	6800      	ldr	r0, [r0, #0]
 800aa4c:	9301      	str	r3, [sp, #4]
 800aa4e:	f000 f83d 	bl	800aacc <_vfiprintf_r>
 800aa52:	b002      	add	sp, #8
 800aa54:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa58:	b003      	add	sp, #12
 800aa5a:	4770      	bx	lr
 800aa5c:	20000020 	.word	0x20000020

0800aa60 <abort>:
 800aa60:	2006      	movs	r0, #6
 800aa62:	b508      	push	{r3, lr}
 800aa64:	f000 fa06 	bl	800ae74 <raise>
 800aa68:	2001      	movs	r0, #1
 800aa6a:	f7f8 fc24 	bl	80032b6 <_exit>

0800aa6e <_malloc_usable_size_r>:
 800aa6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa72:	1f18      	subs	r0, r3, #4
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	bfbc      	itt	lt
 800aa78:	580b      	ldrlt	r3, [r1, r0]
 800aa7a:	18c0      	addlt	r0, r0, r3
 800aa7c:	4770      	bx	lr

0800aa7e <__sfputc_r>:
 800aa7e:	6893      	ldr	r3, [r2, #8]
 800aa80:	b410      	push	{r4}
 800aa82:	3b01      	subs	r3, #1
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	6093      	str	r3, [r2, #8]
 800aa88:	da07      	bge.n	800aa9a <__sfputc_r+0x1c>
 800aa8a:	6994      	ldr	r4, [r2, #24]
 800aa8c:	42a3      	cmp	r3, r4
 800aa8e:	db01      	blt.n	800aa94 <__sfputc_r+0x16>
 800aa90:	290a      	cmp	r1, #10
 800aa92:	d102      	bne.n	800aa9a <__sfputc_r+0x1c>
 800aa94:	bc10      	pop	{r4}
 800aa96:	f000 b931 	b.w	800acfc <__swbuf_r>
 800aa9a:	6813      	ldr	r3, [r2, #0]
 800aa9c:	1c58      	adds	r0, r3, #1
 800aa9e:	6010      	str	r0, [r2, #0]
 800aaa0:	7019      	strb	r1, [r3, #0]
 800aaa2:	4608      	mov	r0, r1
 800aaa4:	bc10      	pop	{r4}
 800aaa6:	4770      	bx	lr

0800aaa8 <__sfputs_r>:
 800aaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaaa:	4606      	mov	r6, r0
 800aaac:	460f      	mov	r7, r1
 800aaae:	4614      	mov	r4, r2
 800aab0:	18d5      	adds	r5, r2, r3
 800aab2:	42ac      	cmp	r4, r5
 800aab4:	d101      	bne.n	800aaba <__sfputs_r+0x12>
 800aab6:	2000      	movs	r0, #0
 800aab8:	e007      	b.n	800aaca <__sfputs_r+0x22>
 800aaba:	463a      	mov	r2, r7
 800aabc:	4630      	mov	r0, r6
 800aabe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aac2:	f7ff ffdc 	bl	800aa7e <__sfputc_r>
 800aac6:	1c43      	adds	r3, r0, #1
 800aac8:	d1f3      	bne.n	800aab2 <__sfputs_r+0xa>
 800aaca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aacc <_vfiprintf_r>:
 800aacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aad0:	460d      	mov	r5, r1
 800aad2:	4614      	mov	r4, r2
 800aad4:	4698      	mov	r8, r3
 800aad6:	4606      	mov	r6, r0
 800aad8:	b09d      	sub	sp, #116	@ 0x74
 800aada:	b118      	cbz	r0, 800aae4 <_vfiprintf_r+0x18>
 800aadc:	6a03      	ldr	r3, [r0, #32]
 800aade:	b90b      	cbnz	r3, 800aae4 <_vfiprintf_r+0x18>
 800aae0:	f7fc fdd0 	bl	8007684 <__sinit>
 800aae4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aae6:	07d9      	lsls	r1, r3, #31
 800aae8:	d405      	bmi.n	800aaf6 <_vfiprintf_r+0x2a>
 800aaea:	89ab      	ldrh	r3, [r5, #12]
 800aaec:	059a      	lsls	r2, r3, #22
 800aaee:	d402      	bmi.n	800aaf6 <_vfiprintf_r+0x2a>
 800aaf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aaf2:	f7fc ff2c 	bl	800794e <__retarget_lock_acquire_recursive>
 800aaf6:	89ab      	ldrh	r3, [r5, #12]
 800aaf8:	071b      	lsls	r3, r3, #28
 800aafa:	d501      	bpl.n	800ab00 <_vfiprintf_r+0x34>
 800aafc:	692b      	ldr	r3, [r5, #16]
 800aafe:	b99b      	cbnz	r3, 800ab28 <_vfiprintf_r+0x5c>
 800ab00:	4629      	mov	r1, r5
 800ab02:	4630      	mov	r0, r6
 800ab04:	f000 f938 	bl	800ad78 <__swsetup_r>
 800ab08:	b170      	cbz	r0, 800ab28 <_vfiprintf_r+0x5c>
 800ab0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab0c:	07dc      	lsls	r4, r3, #31
 800ab0e:	d504      	bpl.n	800ab1a <_vfiprintf_r+0x4e>
 800ab10:	f04f 30ff 	mov.w	r0, #4294967295
 800ab14:	b01d      	add	sp, #116	@ 0x74
 800ab16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab1a:	89ab      	ldrh	r3, [r5, #12]
 800ab1c:	0598      	lsls	r0, r3, #22
 800ab1e:	d4f7      	bmi.n	800ab10 <_vfiprintf_r+0x44>
 800ab20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab22:	f7fc ff15 	bl	8007950 <__retarget_lock_release_recursive>
 800ab26:	e7f3      	b.n	800ab10 <_vfiprintf_r+0x44>
 800ab28:	2300      	movs	r3, #0
 800ab2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab2c:	2320      	movs	r3, #32
 800ab2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab32:	2330      	movs	r3, #48	@ 0x30
 800ab34:	f04f 0901 	mov.w	r9, #1
 800ab38:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab3c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ace8 <_vfiprintf_r+0x21c>
 800ab40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab44:	4623      	mov	r3, r4
 800ab46:	469a      	mov	sl, r3
 800ab48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab4c:	b10a      	cbz	r2, 800ab52 <_vfiprintf_r+0x86>
 800ab4e:	2a25      	cmp	r2, #37	@ 0x25
 800ab50:	d1f9      	bne.n	800ab46 <_vfiprintf_r+0x7a>
 800ab52:	ebba 0b04 	subs.w	fp, sl, r4
 800ab56:	d00b      	beq.n	800ab70 <_vfiprintf_r+0xa4>
 800ab58:	465b      	mov	r3, fp
 800ab5a:	4622      	mov	r2, r4
 800ab5c:	4629      	mov	r1, r5
 800ab5e:	4630      	mov	r0, r6
 800ab60:	f7ff ffa2 	bl	800aaa8 <__sfputs_r>
 800ab64:	3001      	adds	r0, #1
 800ab66:	f000 80a7 	beq.w	800acb8 <_vfiprintf_r+0x1ec>
 800ab6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab6c:	445a      	add	r2, fp
 800ab6e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab70:	f89a 3000 	ldrb.w	r3, [sl]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f000 809f 	beq.w	800acb8 <_vfiprintf_r+0x1ec>
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab84:	f10a 0a01 	add.w	sl, sl, #1
 800ab88:	9304      	str	r3, [sp, #16]
 800ab8a:	9307      	str	r3, [sp, #28]
 800ab8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab90:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab92:	4654      	mov	r4, sl
 800ab94:	2205      	movs	r2, #5
 800ab96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab9a:	4853      	ldr	r0, [pc, #332]	@ (800ace8 <_vfiprintf_r+0x21c>)
 800ab9c:	f7fc fed9 	bl	8007952 <memchr>
 800aba0:	9a04      	ldr	r2, [sp, #16]
 800aba2:	b9d8      	cbnz	r0, 800abdc <_vfiprintf_r+0x110>
 800aba4:	06d1      	lsls	r1, r2, #27
 800aba6:	bf44      	itt	mi
 800aba8:	2320      	movmi	r3, #32
 800abaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abae:	0713      	lsls	r3, r2, #28
 800abb0:	bf44      	itt	mi
 800abb2:	232b      	movmi	r3, #43	@ 0x2b
 800abb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abb8:	f89a 3000 	ldrb.w	r3, [sl]
 800abbc:	2b2a      	cmp	r3, #42	@ 0x2a
 800abbe:	d015      	beq.n	800abec <_vfiprintf_r+0x120>
 800abc0:	4654      	mov	r4, sl
 800abc2:	2000      	movs	r0, #0
 800abc4:	f04f 0c0a 	mov.w	ip, #10
 800abc8:	9a07      	ldr	r2, [sp, #28]
 800abca:	4621      	mov	r1, r4
 800abcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abd0:	3b30      	subs	r3, #48	@ 0x30
 800abd2:	2b09      	cmp	r3, #9
 800abd4:	d94b      	bls.n	800ac6e <_vfiprintf_r+0x1a2>
 800abd6:	b1b0      	cbz	r0, 800ac06 <_vfiprintf_r+0x13a>
 800abd8:	9207      	str	r2, [sp, #28]
 800abda:	e014      	b.n	800ac06 <_vfiprintf_r+0x13a>
 800abdc:	eba0 0308 	sub.w	r3, r0, r8
 800abe0:	fa09 f303 	lsl.w	r3, r9, r3
 800abe4:	4313      	orrs	r3, r2
 800abe6:	46a2      	mov	sl, r4
 800abe8:	9304      	str	r3, [sp, #16]
 800abea:	e7d2      	b.n	800ab92 <_vfiprintf_r+0xc6>
 800abec:	9b03      	ldr	r3, [sp, #12]
 800abee:	1d19      	adds	r1, r3, #4
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	9103      	str	r1, [sp, #12]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	bfbb      	ittet	lt
 800abf8:	425b      	neglt	r3, r3
 800abfa:	f042 0202 	orrlt.w	r2, r2, #2
 800abfe:	9307      	strge	r3, [sp, #28]
 800ac00:	9307      	strlt	r3, [sp, #28]
 800ac02:	bfb8      	it	lt
 800ac04:	9204      	strlt	r2, [sp, #16]
 800ac06:	7823      	ldrb	r3, [r4, #0]
 800ac08:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac0a:	d10a      	bne.n	800ac22 <_vfiprintf_r+0x156>
 800ac0c:	7863      	ldrb	r3, [r4, #1]
 800ac0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac10:	d132      	bne.n	800ac78 <_vfiprintf_r+0x1ac>
 800ac12:	9b03      	ldr	r3, [sp, #12]
 800ac14:	3402      	adds	r4, #2
 800ac16:	1d1a      	adds	r2, r3, #4
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	9203      	str	r2, [sp, #12]
 800ac1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac20:	9305      	str	r3, [sp, #20]
 800ac22:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800acec <_vfiprintf_r+0x220>
 800ac26:	2203      	movs	r2, #3
 800ac28:	4650      	mov	r0, sl
 800ac2a:	7821      	ldrb	r1, [r4, #0]
 800ac2c:	f7fc fe91 	bl	8007952 <memchr>
 800ac30:	b138      	cbz	r0, 800ac42 <_vfiprintf_r+0x176>
 800ac32:	2240      	movs	r2, #64	@ 0x40
 800ac34:	9b04      	ldr	r3, [sp, #16]
 800ac36:	eba0 000a 	sub.w	r0, r0, sl
 800ac3a:	4082      	lsls	r2, r0
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	3401      	adds	r4, #1
 800ac40:	9304      	str	r3, [sp, #16]
 800ac42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac46:	2206      	movs	r2, #6
 800ac48:	4829      	ldr	r0, [pc, #164]	@ (800acf0 <_vfiprintf_r+0x224>)
 800ac4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac4e:	f7fc fe80 	bl	8007952 <memchr>
 800ac52:	2800      	cmp	r0, #0
 800ac54:	d03f      	beq.n	800acd6 <_vfiprintf_r+0x20a>
 800ac56:	4b27      	ldr	r3, [pc, #156]	@ (800acf4 <_vfiprintf_r+0x228>)
 800ac58:	bb1b      	cbnz	r3, 800aca2 <_vfiprintf_r+0x1d6>
 800ac5a:	9b03      	ldr	r3, [sp, #12]
 800ac5c:	3307      	adds	r3, #7
 800ac5e:	f023 0307 	bic.w	r3, r3, #7
 800ac62:	3308      	adds	r3, #8
 800ac64:	9303      	str	r3, [sp, #12]
 800ac66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac68:	443b      	add	r3, r7
 800ac6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac6c:	e76a      	b.n	800ab44 <_vfiprintf_r+0x78>
 800ac6e:	460c      	mov	r4, r1
 800ac70:	2001      	movs	r0, #1
 800ac72:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac76:	e7a8      	b.n	800abca <_vfiprintf_r+0xfe>
 800ac78:	2300      	movs	r3, #0
 800ac7a:	f04f 0c0a 	mov.w	ip, #10
 800ac7e:	4619      	mov	r1, r3
 800ac80:	3401      	adds	r4, #1
 800ac82:	9305      	str	r3, [sp, #20]
 800ac84:	4620      	mov	r0, r4
 800ac86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac8a:	3a30      	subs	r2, #48	@ 0x30
 800ac8c:	2a09      	cmp	r2, #9
 800ac8e:	d903      	bls.n	800ac98 <_vfiprintf_r+0x1cc>
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d0c6      	beq.n	800ac22 <_vfiprintf_r+0x156>
 800ac94:	9105      	str	r1, [sp, #20]
 800ac96:	e7c4      	b.n	800ac22 <_vfiprintf_r+0x156>
 800ac98:	4604      	mov	r4, r0
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800aca0:	e7f0      	b.n	800ac84 <_vfiprintf_r+0x1b8>
 800aca2:	ab03      	add	r3, sp, #12
 800aca4:	9300      	str	r3, [sp, #0]
 800aca6:	462a      	mov	r2, r5
 800aca8:	4630      	mov	r0, r6
 800acaa:	4b13      	ldr	r3, [pc, #76]	@ (800acf8 <_vfiprintf_r+0x22c>)
 800acac:	a904      	add	r1, sp, #16
 800acae:	f7fb fe8f 	bl	80069d0 <_printf_float>
 800acb2:	4607      	mov	r7, r0
 800acb4:	1c78      	adds	r0, r7, #1
 800acb6:	d1d6      	bne.n	800ac66 <_vfiprintf_r+0x19a>
 800acb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800acba:	07d9      	lsls	r1, r3, #31
 800acbc:	d405      	bmi.n	800acca <_vfiprintf_r+0x1fe>
 800acbe:	89ab      	ldrh	r3, [r5, #12]
 800acc0:	059a      	lsls	r2, r3, #22
 800acc2:	d402      	bmi.n	800acca <_vfiprintf_r+0x1fe>
 800acc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800acc6:	f7fc fe43 	bl	8007950 <__retarget_lock_release_recursive>
 800acca:	89ab      	ldrh	r3, [r5, #12]
 800accc:	065b      	lsls	r3, r3, #25
 800acce:	f53f af1f 	bmi.w	800ab10 <_vfiprintf_r+0x44>
 800acd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800acd4:	e71e      	b.n	800ab14 <_vfiprintf_r+0x48>
 800acd6:	ab03      	add	r3, sp, #12
 800acd8:	9300      	str	r3, [sp, #0]
 800acda:	462a      	mov	r2, r5
 800acdc:	4630      	mov	r0, r6
 800acde:	4b06      	ldr	r3, [pc, #24]	@ (800acf8 <_vfiprintf_r+0x22c>)
 800ace0:	a904      	add	r1, sp, #16
 800ace2:	f7fc f913 	bl	8006f0c <_printf_i>
 800ace6:	e7e4      	b.n	800acb2 <_vfiprintf_r+0x1e6>
 800ace8:	0800dc11 	.word	0x0800dc11
 800acec:	0800dc17 	.word	0x0800dc17
 800acf0:	0800dc1b 	.word	0x0800dc1b
 800acf4:	080069d1 	.word	0x080069d1
 800acf8:	0800aaa9 	.word	0x0800aaa9

0800acfc <__swbuf_r>:
 800acfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acfe:	460e      	mov	r6, r1
 800ad00:	4614      	mov	r4, r2
 800ad02:	4605      	mov	r5, r0
 800ad04:	b118      	cbz	r0, 800ad0e <__swbuf_r+0x12>
 800ad06:	6a03      	ldr	r3, [r0, #32]
 800ad08:	b90b      	cbnz	r3, 800ad0e <__swbuf_r+0x12>
 800ad0a:	f7fc fcbb 	bl	8007684 <__sinit>
 800ad0e:	69a3      	ldr	r3, [r4, #24]
 800ad10:	60a3      	str	r3, [r4, #8]
 800ad12:	89a3      	ldrh	r3, [r4, #12]
 800ad14:	071a      	lsls	r2, r3, #28
 800ad16:	d501      	bpl.n	800ad1c <__swbuf_r+0x20>
 800ad18:	6923      	ldr	r3, [r4, #16]
 800ad1a:	b943      	cbnz	r3, 800ad2e <__swbuf_r+0x32>
 800ad1c:	4621      	mov	r1, r4
 800ad1e:	4628      	mov	r0, r5
 800ad20:	f000 f82a 	bl	800ad78 <__swsetup_r>
 800ad24:	b118      	cbz	r0, 800ad2e <__swbuf_r+0x32>
 800ad26:	f04f 37ff 	mov.w	r7, #4294967295
 800ad2a:	4638      	mov	r0, r7
 800ad2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad2e:	6823      	ldr	r3, [r4, #0]
 800ad30:	6922      	ldr	r2, [r4, #16]
 800ad32:	b2f6      	uxtb	r6, r6
 800ad34:	1a98      	subs	r0, r3, r2
 800ad36:	6963      	ldr	r3, [r4, #20]
 800ad38:	4637      	mov	r7, r6
 800ad3a:	4283      	cmp	r3, r0
 800ad3c:	dc05      	bgt.n	800ad4a <__swbuf_r+0x4e>
 800ad3e:	4621      	mov	r1, r4
 800ad40:	4628      	mov	r0, r5
 800ad42:	f7ff fa73 	bl	800a22c <_fflush_r>
 800ad46:	2800      	cmp	r0, #0
 800ad48:	d1ed      	bne.n	800ad26 <__swbuf_r+0x2a>
 800ad4a:	68a3      	ldr	r3, [r4, #8]
 800ad4c:	3b01      	subs	r3, #1
 800ad4e:	60a3      	str	r3, [r4, #8]
 800ad50:	6823      	ldr	r3, [r4, #0]
 800ad52:	1c5a      	adds	r2, r3, #1
 800ad54:	6022      	str	r2, [r4, #0]
 800ad56:	701e      	strb	r6, [r3, #0]
 800ad58:	6962      	ldr	r2, [r4, #20]
 800ad5a:	1c43      	adds	r3, r0, #1
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d004      	beq.n	800ad6a <__swbuf_r+0x6e>
 800ad60:	89a3      	ldrh	r3, [r4, #12]
 800ad62:	07db      	lsls	r3, r3, #31
 800ad64:	d5e1      	bpl.n	800ad2a <__swbuf_r+0x2e>
 800ad66:	2e0a      	cmp	r6, #10
 800ad68:	d1df      	bne.n	800ad2a <__swbuf_r+0x2e>
 800ad6a:	4621      	mov	r1, r4
 800ad6c:	4628      	mov	r0, r5
 800ad6e:	f7ff fa5d 	bl	800a22c <_fflush_r>
 800ad72:	2800      	cmp	r0, #0
 800ad74:	d0d9      	beq.n	800ad2a <__swbuf_r+0x2e>
 800ad76:	e7d6      	b.n	800ad26 <__swbuf_r+0x2a>

0800ad78 <__swsetup_r>:
 800ad78:	b538      	push	{r3, r4, r5, lr}
 800ad7a:	4b29      	ldr	r3, [pc, #164]	@ (800ae20 <__swsetup_r+0xa8>)
 800ad7c:	4605      	mov	r5, r0
 800ad7e:	6818      	ldr	r0, [r3, #0]
 800ad80:	460c      	mov	r4, r1
 800ad82:	b118      	cbz	r0, 800ad8c <__swsetup_r+0x14>
 800ad84:	6a03      	ldr	r3, [r0, #32]
 800ad86:	b90b      	cbnz	r3, 800ad8c <__swsetup_r+0x14>
 800ad88:	f7fc fc7c 	bl	8007684 <__sinit>
 800ad8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad90:	0719      	lsls	r1, r3, #28
 800ad92:	d422      	bmi.n	800adda <__swsetup_r+0x62>
 800ad94:	06da      	lsls	r2, r3, #27
 800ad96:	d407      	bmi.n	800ada8 <__swsetup_r+0x30>
 800ad98:	2209      	movs	r2, #9
 800ad9a:	602a      	str	r2, [r5, #0]
 800ad9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ada0:	f04f 30ff 	mov.w	r0, #4294967295
 800ada4:	81a3      	strh	r3, [r4, #12]
 800ada6:	e033      	b.n	800ae10 <__swsetup_r+0x98>
 800ada8:	0758      	lsls	r0, r3, #29
 800adaa:	d512      	bpl.n	800add2 <__swsetup_r+0x5a>
 800adac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800adae:	b141      	cbz	r1, 800adc2 <__swsetup_r+0x4a>
 800adb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800adb4:	4299      	cmp	r1, r3
 800adb6:	d002      	beq.n	800adbe <__swsetup_r+0x46>
 800adb8:	4628      	mov	r0, r5
 800adba:	f7fd fc3d 	bl	8008638 <_free_r>
 800adbe:	2300      	movs	r3, #0
 800adc0:	6363      	str	r3, [r4, #52]	@ 0x34
 800adc2:	89a3      	ldrh	r3, [r4, #12]
 800adc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800adc8:	81a3      	strh	r3, [r4, #12]
 800adca:	2300      	movs	r3, #0
 800adcc:	6063      	str	r3, [r4, #4]
 800adce:	6923      	ldr	r3, [r4, #16]
 800add0:	6023      	str	r3, [r4, #0]
 800add2:	89a3      	ldrh	r3, [r4, #12]
 800add4:	f043 0308 	orr.w	r3, r3, #8
 800add8:	81a3      	strh	r3, [r4, #12]
 800adda:	6923      	ldr	r3, [r4, #16]
 800addc:	b94b      	cbnz	r3, 800adf2 <__swsetup_r+0x7a>
 800adde:	89a3      	ldrh	r3, [r4, #12]
 800ade0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ade4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ade8:	d003      	beq.n	800adf2 <__swsetup_r+0x7a>
 800adea:	4621      	mov	r1, r4
 800adec:	4628      	mov	r0, r5
 800adee:	f000 f882 	bl	800aef6 <__smakebuf_r>
 800adf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adf6:	f013 0201 	ands.w	r2, r3, #1
 800adfa:	d00a      	beq.n	800ae12 <__swsetup_r+0x9a>
 800adfc:	2200      	movs	r2, #0
 800adfe:	60a2      	str	r2, [r4, #8]
 800ae00:	6962      	ldr	r2, [r4, #20]
 800ae02:	4252      	negs	r2, r2
 800ae04:	61a2      	str	r2, [r4, #24]
 800ae06:	6922      	ldr	r2, [r4, #16]
 800ae08:	b942      	cbnz	r2, 800ae1c <__swsetup_r+0xa4>
 800ae0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ae0e:	d1c5      	bne.n	800ad9c <__swsetup_r+0x24>
 800ae10:	bd38      	pop	{r3, r4, r5, pc}
 800ae12:	0799      	lsls	r1, r3, #30
 800ae14:	bf58      	it	pl
 800ae16:	6962      	ldrpl	r2, [r4, #20]
 800ae18:	60a2      	str	r2, [r4, #8]
 800ae1a:	e7f4      	b.n	800ae06 <__swsetup_r+0x8e>
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	e7f7      	b.n	800ae10 <__swsetup_r+0x98>
 800ae20:	20000020 	.word	0x20000020

0800ae24 <_raise_r>:
 800ae24:	291f      	cmp	r1, #31
 800ae26:	b538      	push	{r3, r4, r5, lr}
 800ae28:	4605      	mov	r5, r0
 800ae2a:	460c      	mov	r4, r1
 800ae2c:	d904      	bls.n	800ae38 <_raise_r+0x14>
 800ae2e:	2316      	movs	r3, #22
 800ae30:	6003      	str	r3, [r0, #0]
 800ae32:	f04f 30ff 	mov.w	r0, #4294967295
 800ae36:	bd38      	pop	{r3, r4, r5, pc}
 800ae38:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ae3a:	b112      	cbz	r2, 800ae42 <_raise_r+0x1e>
 800ae3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae40:	b94b      	cbnz	r3, 800ae56 <_raise_r+0x32>
 800ae42:	4628      	mov	r0, r5
 800ae44:	f000 f830 	bl	800aea8 <_getpid_r>
 800ae48:	4622      	mov	r2, r4
 800ae4a:	4601      	mov	r1, r0
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae52:	f000 b817 	b.w	800ae84 <_kill_r>
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d00a      	beq.n	800ae70 <_raise_r+0x4c>
 800ae5a:	1c59      	adds	r1, r3, #1
 800ae5c:	d103      	bne.n	800ae66 <_raise_r+0x42>
 800ae5e:	2316      	movs	r3, #22
 800ae60:	6003      	str	r3, [r0, #0]
 800ae62:	2001      	movs	r0, #1
 800ae64:	e7e7      	b.n	800ae36 <_raise_r+0x12>
 800ae66:	2100      	movs	r1, #0
 800ae68:	4620      	mov	r0, r4
 800ae6a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ae6e:	4798      	blx	r3
 800ae70:	2000      	movs	r0, #0
 800ae72:	e7e0      	b.n	800ae36 <_raise_r+0x12>

0800ae74 <raise>:
 800ae74:	4b02      	ldr	r3, [pc, #8]	@ (800ae80 <raise+0xc>)
 800ae76:	4601      	mov	r1, r0
 800ae78:	6818      	ldr	r0, [r3, #0]
 800ae7a:	f7ff bfd3 	b.w	800ae24 <_raise_r>
 800ae7e:	bf00      	nop
 800ae80:	20000020 	.word	0x20000020

0800ae84 <_kill_r>:
 800ae84:	b538      	push	{r3, r4, r5, lr}
 800ae86:	2300      	movs	r3, #0
 800ae88:	4d06      	ldr	r5, [pc, #24]	@ (800aea4 <_kill_r+0x20>)
 800ae8a:	4604      	mov	r4, r0
 800ae8c:	4608      	mov	r0, r1
 800ae8e:	4611      	mov	r1, r2
 800ae90:	602b      	str	r3, [r5, #0]
 800ae92:	f7f8 fa00 	bl	8003296 <_kill>
 800ae96:	1c43      	adds	r3, r0, #1
 800ae98:	d102      	bne.n	800aea0 <_kill_r+0x1c>
 800ae9a:	682b      	ldr	r3, [r5, #0]
 800ae9c:	b103      	cbz	r3, 800aea0 <_kill_r+0x1c>
 800ae9e:	6023      	str	r3, [r4, #0]
 800aea0:	bd38      	pop	{r3, r4, r5, pc}
 800aea2:	bf00      	nop
 800aea4:	200008b8 	.word	0x200008b8

0800aea8 <_getpid_r>:
 800aea8:	f7f8 b9ee 	b.w	8003288 <_getpid>

0800aeac <__swhatbuf_r>:
 800aeac:	b570      	push	{r4, r5, r6, lr}
 800aeae:	460c      	mov	r4, r1
 800aeb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeb4:	4615      	mov	r5, r2
 800aeb6:	2900      	cmp	r1, #0
 800aeb8:	461e      	mov	r6, r3
 800aeba:	b096      	sub	sp, #88	@ 0x58
 800aebc:	da0c      	bge.n	800aed8 <__swhatbuf_r+0x2c>
 800aebe:	89a3      	ldrh	r3, [r4, #12]
 800aec0:	2100      	movs	r1, #0
 800aec2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aec6:	bf14      	ite	ne
 800aec8:	2340      	movne	r3, #64	@ 0x40
 800aeca:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aece:	2000      	movs	r0, #0
 800aed0:	6031      	str	r1, [r6, #0]
 800aed2:	602b      	str	r3, [r5, #0]
 800aed4:	b016      	add	sp, #88	@ 0x58
 800aed6:	bd70      	pop	{r4, r5, r6, pc}
 800aed8:	466a      	mov	r2, sp
 800aeda:	f000 f849 	bl	800af70 <_fstat_r>
 800aede:	2800      	cmp	r0, #0
 800aee0:	dbed      	blt.n	800aebe <__swhatbuf_r+0x12>
 800aee2:	9901      	ldr	r1, [sp, #4]
 800aee4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aee8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aeec:	4259      	negs	r1, r3
 800aeee:	4159      	adcs	r1, r3
 800aef0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aef4:	e7eb      	b.n	800aece <__swhatbuf_r+0x22>

0800aef6 <__smakebuf_r>:
 800aef6:	898b      	ldrh	r3, [r1, #12]
 800aef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aefa:	079d      	lsls	r5, r3, #30
 800aefc:	4606      	mov	r6, r0
 800aefe:	460c      	mov	r4, r1
 800af00:	d507      	bpl.n	800af12 <__smakebuf_r+0x1c>
 800af02:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800af06:	6023      	str	r3, [r4, #0]
 800af08:	6123      	str	r3, [r4, #16]
 800af0a:	2301      	movs	r3, #1
 800af0c:	6163      	str	r3, [r4, #20]
 800af0e:	b003      	add	sp, #12
 800af10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af12:	466a      	mov	r2, sp
 800af14:	ab01      	add	r3, sp, #4
 800af16:	f7ff ffc9 	bl	800aeac <__swhatbuf_r>
 800af1a:	9f00      	ldr	r7, [sp, #0]
 800af1c:	4605      	mov	r5, r0
 800af1e:	4639      	mov	r1, r7
 800af20:	4630      	mov	r0, r6
 800af22:	f7fd fbfb 	bl	800871c <_malloc_r>
 800af26:	b948      	cbnz	r0, 800af3c <__smakebuf_r+0x46>
 800af28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af2c:	059a      	lsls	r2, r3, #22
 800af2e:	d4ee      	bmi.n	800af0e <__smakebuf_r+0x18>
 800af30:	f023 0303 	bic.w	r3, r3, #3
 800af34:	f043 0302 	orr.w	r3, r3, #2
 800af38:	81a3      	strh	r3, [r4, #12]
 800af3a:	e7e2      	b.n	800af02 <__smakebuf_r+0xc>
 800af3c:	89a3      	ldrh	r3, [r4, #12]
 800af3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af46:	81a3      	strh	r3, [r4, #12]
 800af48:	9b01      	ldr	r3, [sp, #4]
 800af4a:	6020      	str	r0, [r4, #0]
 800af4c:	b15b      	cbz	r3, 800af66 <__smakebuf_r+0x70>
 800af4e:	4630      	mov	r0, r6
 800af50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af54:	f000 f81e 	bl	800af94 <_isatty_r>
 800af58:	b128      	cbz	r0, 800af66 <__smakebuf_r+0x70>
 800af5a:	89a3      	ldrh	r3, [r4, #12]
 800af5c:	f023 0303 	bic.w	r3, r3, #3
 800af60:	f043 0301 	orr.w	r3, r3, #1
 800af64:	81a3      	strh	r3, [r4, #12]
 800af66:	89a3      	ldrh	r3, [r4, #12]
 800af68:	431d      	orrs	r5, r3
 800af6a:	81a5      	strh	r5, [r4, #12]
 800af6c:	e7cf      	b.n	800af0e <__smakebuf_r+0x18>
	...

0800af70 <_fstat_r>:
 800af70:	b538      	push	{r3, r4, r5, lr}
 800af72:	2300      	movs	r3, #0
 800af74:	4d06      	ldr	r5, [pc, #24]	@ (800af90 <_fstat_r+0x20>)
 800af76:	4604      	mov	r4, r0
 800af78:	4608      	mov	r0, r1
 800af7a:	4611      	mov	r1, r2
 800af7c:	602b      	str	r3, [r5, #0]
 800af7e:	f7f8 f9e9 	bl	8003354 <_fstat>
 800af82:	1c43      	adds	r3, r0, #1
 800af84:	d102      	bne.n	800af8c <_fstat_r+0x1c>
 800af86:	682b      	ldr	r3, [r5, #0]
 800af88:	b103      	cbz	r3, 800af8c <_fstat_r+0x1c>
 800af8a:	6023      	str	r3, [r4, #0]
 800af8c:	bd38      	pop	{r3, r4, r5, pc}
 800af8e:	bf00      	nop
 800af90:	200008b8 	.word	0x200008b8

0800af94 <_isatty_r>:
 800af94:	b538      	push	{r3, r4, r5, lr}
 800af96:	2300      	movs	r3, #0
 800af98:	4d05      	ldr	r5, [pc, #20]	@ (800afb0 <_isatty_r+0x1c>)
 800af9a:	4604      	mov	r4, r0
 800af9c:	4608      	mov	r0, r1
 800af9e:	602b      	str	r3, [r5, #0]
 800afa0:	f7f8 f9e7 	bl	8003372 <_isatty>
 800afa4:	1c43      	adds	r3, r0, #1
 800afa6:	d102      	bne.n	800afae <_isatty_r+0x1a>
 800afa8:	682b      	ldr	r3, [r5, #0]
 800afaa:	b103      	cbz	r3, 800afae <_isatty_r+0x1a>
 800afac:	6023      	str	r3, [r4, #0]
 800afae:	bd38      	pop	{r3, r4, r5, pc}
 800afb0:	200008b8 	.word	0x200008b8

0800afb4 <_init>:
 800afb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afb6:	bf00      	nop
 800afb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afba:	bc08      	pop	{r3}
 800afbc:	469e      	mov	lr, r3
 800afbe:	4770      	bx	lr

0800afc0 <_fini>:
 800afc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afc2:	bf00      	nop
 800afc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afc6:	bc08      	pop	{r3}
 800afc8:	469e      	mov	lr, r3
 800afca:	4770      	bx	lr
