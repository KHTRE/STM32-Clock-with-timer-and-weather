
STM32F103C8T6-Clock-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5a4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000032f0  0800a6b8  0800a6b8  0000b6b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9a8  0800d9a8  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9a8  0800d9a8  0000e9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9b0  0800d9b0  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9b0  0800d9b0  0000e9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d9b4  0800d9b4  0000e9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800d9b8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e8  200001d8  0800db90  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008c0  0800db90  0000f8c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efe8  00000000  00000000  0000f201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002851  00000000  00000000  0001e1e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  00020a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000caf  00000000  00000000  00021aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197df  00000000  00000000  0002274f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001530e  00000000  00000000  0003bf2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008faa0  00000000  00000000  0005123c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0cdc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059f8  00000000  00000000  000e0d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000e6718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a69c 	.word	0x0800a69c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800a69c 	.word	0x0800a69c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_d2lz>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	2200      	movs	r2, #0
 8000d88:	2300      	movs	r3, #0
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	460d      	mov	r5, r1
 8000d8e:	f7ff fe15 	bl	80009bc <__aeabi_dcmplt>
 8000d92:	b928      	cbnz	r0, 8000da0 <__aeabi_d2lz+0x1c>
 8000d94:	4620      	mov	r0, r4
 8000d96:	4629      	mov	r1, r5
 8000d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d9c:	f000 b80a 	b.w	8000db4 <__aeabi_d2ulz>
 8000da0:	4620      	mov	r0, r4
 8000da2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000da6:	f000 f805 	bl	8000db4 <__aeabi_d2ulz>
 8000daa:	4240      	negs	r0, r0
 8000dac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db0:	bd38      	pop	{r3, r4, r5, pc}
 8000db2:	bf00      	nop

08000db4 <__aeabi_d2ulz>:
 8000db4:	b5d0      	push	{r4, r6, r7, lr}
 8000db6:	2200      	movs	r2, #0
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <__aeabi_d2ulz+0x34>)
 8000dba:	4606      	mov	r6, r0
 8000dbc:	460f      	mov	r7, r1
 8000dbe:	f7ff fb8b 	bl	80004d8 <__aeabi_dmul>
 8000dc2:	f7ff fe61 	bl	8000a88 <__aeabi_d2uiz>
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	f7ff fb0c 	bl	80003e4 <__aeabi_ui2d>
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <__aeabi_d2ulz+0x38>)
 8000dd0:	f7ff fb82 	bl	80004d8 <__aeabi_dmul>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	4630      	mov	r0, r6
 8000dda:	4639      	mov	r1, r7
 8000ddc:	f7ff f9c4 	bl	8000168 <__aeabi_dsub>
 8000de0:	f7ff fe52 	bl	8000a88 <__aeabi_d2uiz>
 8000de4:	4621      	mov	r1, r4
 8000de6:	bdd0      	pop	{r4, r6, r7, pc}
 8000de8:	3df00000 	.word	0x3df00000
 8000dec:	41f00000 	.word	0x41f00000

08000df0 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08c      	sub	sp, #48	@ 0x30
 8000df4:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfa:	9302      	str	r3, [sp, #8]
 8000dfc:	2319      	movs	r3, #25
 8000dfe:	9301      	str	r3, [sp, #4]
 8000e00:	463b      	mov	r3, r7
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2301      	movs	r3, #1
 8000e06:	2288      	movs	r2, #136	@ 0x88
 8000e08:	21ec      	movs	r1, #236	@ 0xec
 8000e0a:	4857      	ldr	r0, [pc, #348]	@ (8000f68 <TrimRead+0x178>)
 8000e0c:	f002 fc76 	bl	80036fc <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8000e10:	463b      	mov	r3, r7
 8000e12:	3319      	adds	r3, #25
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295
 8000e18:	9202      	str	r2, [sp, #8]
 8000e1a:	2207      	movs	r2, #7
 8000e1c:	9201      	str	r2, [sp, #4]
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	2301      	movs	r3, #1
 8000e22:	22e1      	movs	r2, #225	@ 0xe1
 8000e24:	21ec      	movs	r1, #236	@ 0xec
 8000e26:	4850      	ldr	r0, [pc, #320]	@ (8000f68 <TrimRead+0x178>)
 8000e28:	f002 fc68 	bl	80036fc <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8000e2c:	787b      	ldrb	r3, [r7, #1]
 8000e2e:	021b      	lsls	r3, r3, #8
 8000e30:	b21a      	sxth	r2, r3
 8000e32:	783b      	ldrb	r3, [r7, #0]
 8000e34:	b21b      	sxth	r3, r3
 8000e36:	4313      	orrs	r3, r2
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	4b4b      	ldr	r3, [pc, #300]	@ (8000f6c <TrimRead+0x17c>)
 8000e3e:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8000e40:	78fb      	ldrb	r3, [r7, #3]
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	b21a      	sxth	r2, r3
 8000e46:	78bb      	ldrb	r3, [r7, #2]
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b21a      	sxth	r2, r3
 8000e4e:	4b48      	ldr	r3, [pc, #288]	@ (8000f70 <TrimRead+0x180>)
 8000e50:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8000e52:	797b      	ldrb	r3, [r7, #5]
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	b21a      	sxth	r2, r3
 8000e58:	793b      	ldrb	r3, [r7, #4]
 8000e5a:	b21b      	sxth	r3, r3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b21a      	sxth	r2, r3
 8000e60:	4b44      	ldr	r3, [pc, #272]	@ (8000f74 <TrimRead+0x184>)
 8000e62:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	021b      	lsls	r3, r3, #8
 8000e68:	b21a      	sxth	r2, r3
 8000e6a:	797b      	ldrb	r3, [r7, #5]
 8000e6c:	b21b      	sxth	r3, r3
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	b21b      	sxth	r3, r3
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	4b40      	ldr	r3, [pc, #256]	@ (8000f78 <TrimRead+0x188>)
 8000e76:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8000e78:	7a7b      	ldrb	r3, [r7, #9]
 8000e7a:	021b      	lsls	r3, r3, #8
 8000e7c:	b21a      	sxth	r2, r3
 8000e7e:	79bb      	ldrb	r3, [r7, #6]
 8000e80:	b21b      	sxth	r3, r3
 8000e82:	4313      	orrs	r3, r2
 8000e84:	b21a      	sxth	r2, r3
 8000e86:	4b3d      	ldr	r3, [pc, #244]	@ (8000f7c <TrimRead+0x18c>)
 8000e88:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8000e8a:	7afb      	ldrb	r3, [r7, #11]
 8000e8c:	021b      	lsls	r3, r3, #8
 8000e8e:	b21a      	sxth	r2, r3
 8000e90:	7abb      	ldrb	r3, [r7, #10]
 8000e92:	b21b      	sxth	r3, r3
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b21a      	sxth	r2, r3
 8000e98:	4b39      	ldr	r3, [pc, #228]	@ (8000f80 <TrimRead+0x190>)
 8000e9a:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8000e9c:	7b7b      	ldrb	r3, [r7, #13]
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	b21a      	sxth	r2, r3
 8000ea2:	7b3b      	ldrb	r3, [r7, #12]
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	b21a      	sxth	r2, r3
 8000eaa:	4b36      	ldr	r3, [pc, #216]	@ (8000f84 <TrimRead+0x194>)
 8000eac:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	021b      	lsls	r3, r3, #8
 8000eb2:	b21a      	sxth	r2, r3
 8000eb4:	7bbb      	ldrb	r3, [r7, #14]
 8000eb6:	b21b      	sxth	r3, r3
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	4b32      	ldr	r3, [pc, #200]	@ (8000f88 <TrimRead+0x198>)
 8000ebe:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8000ec0:	7c7b      	ldrb	r3, [r7, #17]
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	b21a      	sxth	r2, r3
 8000ec6:	7c3b      	ldrb	r3, [r7, #16]
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	b21a      	sxth	r2, r3
 8000ece:	4b2f      	ldr	r3, [pc, #188]	@ (8000f8c <TrimRead+0x19c>)
 8000ed0:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8000ed2:	7cfb      	ldrb	r3, [r7, #19]
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	b21a      	sxth	r2, r3
 8000ed8:	7cbb      	ldrb	r3, [r7, #18]
 8000eda:	b21b      	sxth	r3, r3
 8000edc:	4313      	orrs	r3, r2
 8000ede:	b21a      	sxth	r2, r3
 8000ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f90 <TrimRead+0x1a0>)
 8000ee2:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8000ee4:	7d7b      	ldrb	r3, [r7, #21]
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	b21a      	sxth	r2, r3
 8000eea:	7d3b      	ldrb	r3, [r7, #20]
 8000eec:	b21b      	sxth	r3, r3
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	b21a      	sxth	r2, r3
 8000ef2:	4b28      	ldr	r3, [pc, #160]	@ (8000f94 <TrimRead+0x1a4>)
 8000ef4:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8000ef6:	7dfb      	ldrb	r3, [r7, #23]
 8000ef8:	021b      	lsls	r3, r3, #8
 8000efa:	b21a      	sxth	r2, r3
 8000efc:	7dbb      	ldrb	r3, [r7, #22]
 8000efe:	b21b      	sxth	r3, r3
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b21a      	sxth	r2, r3
 8000f04:	4b24      	ldr	r3, [pc, #144]	@ (8000f98 <TrimRead+0x1a8>)
 8000f06:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8000f08:	7e3b      	ldrb	r3, [r7, #24]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	4b23      	ldr	r3, [pc, #140]	@ (8000f9c <TrimRead+0x1ac>)
 8000f0e:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8000f10:	7ebb      	ldrb	r3, [r7, #26]
 8000f12:	021b      	lsls	r3, r3, #8
 8000f14:	b21a      	sxth	r2, r3
 8000f16:	7e7b      	ldrb	r3, [r7, #25]
 8000f18:	b21b      	sxth	r3, r3
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	b21a      	sxth	r2, r3
 8000f1e:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <TrimRead+0x1b0>)
 8000f20:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8000f22:	7efb      	ldrb	r3, [r7, #27]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa4 <TrimRead+0x1b4>)
 8000f28:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8000f2a:	7f3b      	ldrb	r3, [r7, #28]
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	b21a      	sxth	r2, r3
 8000f30:	7f7b      	ldrb	r3, [r7, #29]
 8000f32:	b21b      	sxth	r3, r3
 8000f34:	f003 030f 	and.w	r3, r3, #15
 8000f38:	b21b      	sxth	r3, r3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b21a      	sxth	r2, r3
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <TrimRead+0x1b8>)
 8000f40:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8000f42:	7fbb      	ldrb	r3, [r7, #30]
 8000f44:	011b      	lsls	r3, r3, #4
 8000f46:	b21a      	sxth	r2, r3
 8000f48:	7f7b      	ldrb	r3, [r7, #29]
 8000f4a:	091b      	lsrs	r3, r3, #4
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	b21b      	sxth	r3, r3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	b21a      	sxth	r2, r3
 8000f54:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <TrimRead+0x1bc>)
 8000f56:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8000f58:	7ffb      	ldrb	r3, [r7, #31]
 8000f5a:	b21a      	sxth	r2, r3
 8000f5c:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <TrimRead+0x1c0>)
 8000f5e:	801a      	strh	r2, [r3, #0]
}
 8000f60:	bf00      	nop
 8000f62:	3720      	adds	r7, #32
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000280 	.word	0x20000280
 8000f6c:	20000204 	.word	0x20000204
 8000f70:	2000020c 	.word	0x2000020c
 8000f74:	2000020e 	.word	0x2000020e
 8000f78:	20000206 	.word	0x20000206
 8000f7c:	20000210 	.word	0x20000210
 8000f80:	20000212 	.word	0x20000212
 8000f84:	20000214 	.word	0x20000214
 8000f88:	20000216 	.word	0x20000216
 8000f8c:	20000218 	.word	0x20000218
 8000f90:	2000021a 	.word	0x2000021a
 8000f94:	2000021c 	.word	0x2000021c
 8000f98:	2000021e 	.word	0x2000021e
 8000f9c:	20000208 	.word	0x20000208
 8000fa0:	20000220 	.word	0x20000220
 8000fa4:	2000020a 	.word	0x2000020a
 8000fa8:	20000222 	.word	0x20000222
 8000fac:	20000224 	.word	0x20000224
 8000fb0:	20000226 	.word	0x20000226

08000fb4 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b089      	sub	sp, #36	@ 0x24
 8000fb8:	af04      	add	r7, sp, #16
 8000fba:	4604      	mov	r4, r0
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4623      	mov	r3, r4
 8000fc4:	71fb      	strb	r3, [r7, #7]
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71bb      	strb	r3, [r7, #6]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	717b      	strb	r3, [r7, #5]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8000fd2:	f7ff ff0d 	bl	8000df0 <TrimRead>


	uint8_t datatowrite = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8000fde:	23b6      	movs	r3, #182	@ 0xb6
 8000fe0:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000fe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe6:	9302      	str	r3, [sp, #8]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	f107 030f 	add.w	r3, r7, #15
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	22e0      	movs	r2, #224	@ 0xe0
 8000ff6:	21ec      	movs	r1, #236	@ 0xec
 8000ff8:	4858      	ldr	r0, [pc, #352]	@ (800115c <BME280_Config+0x1a8>)
 8000ffa:	f002 fa85 	bl	8003508 <HAL_I2C_Mem_Write>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d002      	beq.n	800100a <BME280_Config+0x56>
	{
		return -1;
 8001004:	f04f 33ff 	mov.w	r3, #4294967295
 8001008:	e0a3      	b.n	8001152 <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 800100a:	2064      	movs	r0, #100	@ 0x64
 800100c:	f001 fe38 	bl	8002c80 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8001010:	797b      	ldrb	r3, [r7, #5]
 8001012:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001014:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001018:	9302      	str	r3, [sp, #8]
 800101a:	2301      	movs	r3, #1
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	f107 030f 	add.w	r3, r7, #15
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2301      	movs	r3, #1
 8001026:	22f2      	movs	r2, #242	@ 0xf2
 8001028:	21ec      	movs	r1, #236	@ 0xec
 800102a:	484c      	ldr	r0, [pc, #304]	@ (800115c <BME280_Config+0x1a8>)
 800102c:	f002 fa6c 	bl	8003508 <HAL_I2C_Mem_Write>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d002      	beq.n	800103c <BME280_Config+0x88>
	{
		return -1;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
 800103a:	e08a      	b.n	8001152 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 800103c:	2064      	movs	r0, #100	@ 0x64
 800103e:	f001 fe1f 	bl	8002c80 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 8001042:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	2301      	movs	r3, #1
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	f107 030e 	add.w	r3, r7, #14
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	22f2      	movs	r2, #242	@ 0xf2
 8001056:	21ec      	movs	r1, #236	@ 0xec
 8001058:	4840      	ldr	r0, [pc, #256]	@ (800115c <BME280_Config+0x1a8>)
 800105a:	f002 fb4f 	bl	80036fc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800105e:	7bba      	ldrb	r2, [r7, #14]
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	429a      	cmp	r2, r3
 8001064:	d002      	beq.n	800106c <BME280_Config+0xb8>
	{
		return -1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	e072      	b.n	8001152 <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 800106c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001070:	015b      	lsls	r3, r3, #5
 8001072:	b25a      	sxtb	r2, r3
 8001074:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	b25b      	sxtb	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b25b      	sxtb	r3, r3
 8001080:	b2db      	uxtb	r3, r3
 8001082:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001084:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	2301      	movs	r3, #1
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	f107 030f 	add.w	r3, r7, #15
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	22f5      	movs	r2, #245	@ 0xf5
 8001098:	21ec      	movs	r1, #236	@ 0xec
 800109a:	4830      	ldr	r0, [pc, #192]	@ (800115c <BME280_Config+0x1a8>)
 800109c:	f002 fa34 	bl	8003508 <HAL_I2C_Mem_Write>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d002      	beq.n	80010ac <BME280_Config+0xf8>
	{
		return -1;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	e052      	b.n	8001152 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80010ac:	2064      	movs	r0, #100	@ 0x64
 80010ae:	f001 fde7 	bl	8002c80 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 80010b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b6:	9302      	str	r3, [sp, #8]
 80010b8:	2301      	movs	r3, #1
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	f107 030e 	add.w	r3, r7, #14
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2301      	movs	r3, #1
 80010c4:	22f5      	movs	r2, #245	@ 0xf5
 80010c6:	21ec      	movs	r1, #236	@ 0xec
 80010c8:	4824      	ldr	r0, [pc, #144]	@ (800115c <BME280_Config+0x1a8>)
 80010ca:	f002 fb17 	bl	80036fc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80010ce:	7bba      	ldrb	r2, [r7, #14]
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d002      	beq.n	80010dc <BME280_Config+0x128>
	{
		return -1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	e03a      	b.n	8001152 <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	015b      	lsls	r3, r3, #5
 80010e0:	b25a      	sxtb	r2, r3
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b25a      	sxtb	r2, r3
 80010ec:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80010f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010fc:	9302      	str	r3, [sp, #8]
 80010fe:	2301      	movs	r3, #1
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	f107 030f 	add.w	r3, r7, #15
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2301      	movs	r3, #1
 800110a:	22f4      	movs	r2, #244	@ 0xf4
 800110c:	21ec      	movs	r1, #236	@ 0xec
 800110e:	4813      	ldr	r0, [pc, #76]	@ (800115c <BME280_Config+0x1a8>)
 8001110:	f002 f9fa 	bl	8003508 <HAL_I2C_Mem_Write>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <BME280_Config+0x16c>
	{
		return -1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	e018      	b.n	8001152 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001120:	2064      	movs	r0, #100	@ 0x64
 8001122:	f001 fdad 	bl	8002c80 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8001126:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800112a:	9302      	str	r3, [sp, #8]
 800112c:	2301      	movs	r3, #1
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	f107 030e 	add.w	r3, r7, #14
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2301      	movs	r3, #1
 8001138:	22f4      	movs	r2, #244	@ 0xf4
 800113a:	21ec      	movs	r1, #236	@ 0xec
 800113c:	4807      	ldr	r0, [pc, #28]	@ (800115c <BME280_Config+0x1a8>)
 800113e:	f002 fadd 	bl	80036fc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001142:	7bba      	ldrb	r2, [r7, #14]
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	429a      	cmp	r2, r3
 8001148:	d002      	beq.n	8001150 <BME280_Config+0x19c>
	{
		return -1;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295
 800114e:	e000      	b.n	8001152 <BME280_Config+0x19e>
	}

	return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	bd90      	pop	{r4, r7, pc}
 800115a:	bf00      	nop
 800115c:	20000280 	.word	0x20000280

08001160 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c2, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 8001166:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800116a:	9302      	str	r3, [sp, #8]
 800116c:	2301      	movs	r3, #1
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	4b1e      	ldr	r3, [pc, #120]	@ (80011ec <BMEReadRaw+0x8c>)
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2301      	movs	r3, #1
 8001176:	22d0      	movs	r2, #208	@ 0xd0
 8001178:	21ec      	movs	r1, #236	@ 0xec
 800117a:	481d      	ldr	r0, [pc, #116]	@ (80011f0 <BMEReadRaw+0x90>)
 800117c:	f002 fabe 	bl	80036fc <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001180:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <BMEReadRaw+0x8c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b60      	cmp	r3, #96	@ 0x60
 8001186:	d12a      	bne.n	80011de <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	2308      	movs	r3, #8
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	463b      	mov	r3, r7
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2301      	movs	r3, #1
 8001198:	22f7      	movs	r2, #247	@ 0xf7
 800119a:	21ec      	movs	r1, #236	@ 0xec
 800119c:	4814      	ldr	r0, [pc, #80]	@ (80011f0 <BMEReadRaw+0x90>)
 800119e:	f002 faad 	bl	80036fc <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80011a2:	783b      	ldrb	r3, [r7, #0]
 80011a4:	031a      	lsls	r2, r3, #12
 80011a6:	787b      	ldrb	r3, [r7, #1]
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	4313      	orrs	r3, r2
 80011ac:	78ba      	ldrb	r2, [r7, #2]
 80011ae:	0912      	lsrs	r2, r2, #4
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	4313      	orrs	r3, r2
 80011b4:	4a0f      	ldr	r2, [pc, #60]	@ (80011f4 <BMEReadRaw+0x94>)
 80011b6:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80011b8:	78fb      	ldrb	r3, [r7, #3]
 80011ba:	031a      	lsls	r2, r3, #12
 80011bc:	793b      	ldrb	r3, [r7, #4]
 80011be:	011b      	lsls	r3, r3, #4
 80011c0:	4313      	orrs	r3, r2
 80011c2:	797a      	ldrb	r2, [r7, #5]
 80011c4:	0912      	lsrs	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	4313      	orrs	r3, r2
 80011ca:	4a0b      	ldr	r2, [pc, #44]	@ (80011f8 <BMEReadRaw+0x98>)
 80011cc:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 80011ce:	79bb      	ldrb	r3, [r7, #6]
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	79fa      	ldrb	r2, [r7, #7]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	4a09      	ldr	r2, [pc, #36]	@ (80011fc <BMEReadRaw+0x9c>)
 80011d8:	6013      	str	r3, [r2, #0]

		return 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	e001      	b.n	80011e2 <BMEReadRaw+0x82>
	}

	else return -1;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200001f4 	.word	0x200001f4
 80011f0:	20000280 	.word	0x20000280
 80011f4:	200001fc 	.word	0x200001fc
 80011f8:	200001f8 	.word	0x200001f8
 80011fc:	20000200 	.word	0x20000200

08001200 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001200:	b480      	push	{r7}
 8001202:	b087      	sub	sp, #28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	10da      	asrs	r2, r3, #3
 800120c:	4b18      	ldr	r3, [pc, #96]	@ (8001270 <BME280_compensate_T_int32+0x70>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	4a17      	ldr	r2, [pc, #92]	@ (8001274 <BME280_compensate_T_int32+0x74>)
 8001216:	f9b2 2000 	ldrsh.w	r2, [r2]
 800121a:	fb02 f303 	mul.w	r3, r2, r3
 800121e:	12db      	asrs	r3, r3, #11
 8001220:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	111b      	asrs	r3, r3, #4
 8001226:	4a12      	ldr	r2, [pc, #72]	@ (8001270 <BME280_compensate_T_int32+0x70>)
 8001228:	8812      	ldrh	r2, [r2, #0]
 800122a:	1a9b      	subs	r3, r3, r2
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	1112      	asrs	r2, r2, #4
 8001230:	490f      	ldr	r1, [pc, #60]	@ (8001270 <BME280_compensate_T_int32+0x70>)
 8001232:	8809      	ldrh	r1, [r1, #0]
 8001234:	1a52      	subs	r2, r2, r1
 8001236:	fb02 f303 	mul.w	r3, r2, r3
 800123a:	131b      	asrs	r3, r3, #12
 800123c:	4a0e      	ldr	r2, [pc, #56]	@ (8001278 <BME280_compensate_T_int32+0x78>)
 800123e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001242:	fb02 f303 	mul.w	r3, r2, r3
 8001246:	139b      	asrs	r3, r3, #14
 8001248:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	4413      	add	r3, r2
 8001250:	4a0a      	ldr	r2, [pc, #40]	@ (800127c <BME280_compensate_T_int32+0x7c>)
 8001252:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001254:	4b09      	ldr	r3, [pc, #36]	@ (800127c <BME280_compensate_T_int32+0x7c>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	3380      	adds	r3, #128	@ 0x80
 8001260:	121b      	asrs	r3, r3, #8
 8001262:	60fb      	str	r3, [r7, #12]
	return T;
 8001264:	68fb      	ldr	r3, [r7, #12]
}
 8001266:	4618      	mov	r0, r3
 8001268:	371c      	adds	r7, #28
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	20000204 	.word	0x20000204
 8001274:	2000020c 	.word	0x2000020c
 8001278:	2000020e 	.word	0x2000020e
 800127c:	20000228 	.word	0x20000228

08001280 <BME280_compensate_P_int32>:
}

#elif SUPPORT_32BIT
// Returns pressure in Pa as unsigned 32 bit integer. Output value of “96386” equals 96386 Pa = 963.86 hPa
uint32_t BME280_compensate_P_int32(int32_t adc_P)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	int32_t var1, var2;
	uint32_t p;
	var1 = (((int32_t)t_fine)>>1) - (int32_t)64000;
 8001288:	4b49      	ldr	r3, [pc, #292]	@ (80013b0 <BME280_compensate_P_int32+0x130>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	105b      	asrs	r3, r3, #1
 800128e:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 8001292:	613b      	str	r3, [r7, #16]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)dig_P6);
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	109b      	asrs	r3, r3, #2
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	1092      	asrs	r2, r2, #2
 800129c:	fb02 f303 	mul.w	r3, r2, r3
 80012a0:	12db      	asrs	r3, r3, #11
 80012a2:	4a44      	ldr	r2, [pc, #272]	@ (80013b4 <BME280_compensate_P_int32+0x134>)
 80012a4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012a8:	fb02 f303 	mul.w	r3, r2, r3
 80012ac:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1*((int32_t)dig_P5))<<1);
 80012ae:	4b42      	ldr	r3, [pc, #264]	@ (80013b8 <BME280_compensate_P_int32+0x138>)
 80012b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b4:	461a      	mov	r2, r3
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	fb02 f303 	mul.w	r3, r2, r3
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	4413      	add	r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]
	var2 = (var2>>2)+(((int32_t)dig_P4)<<16);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	109a      	asrs	r2, r3, #2
 80012c8:	4b3c      	ldr	r3, [pc, #240]	@ (80013bc <BME280_compensate_P_int32+0x13c>)
 80012ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ce:	041b      	lsls	r3, r3, #16
 80012d0:	4413      	add	r3, r2
 80012d2:	60fb      	str	r3, [r7, #12]
	var1 = (((dig_P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)dig_P2) *var1)>>1))>>18;
 80012d4:	4b3a      	ldr	r3, [pc, #232]	@ (80013c0 <BME280_compensate_P_int32+0x140>)
 80012d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012da:	4619      	mov	r1, r3
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	109b      	asrs	r3, r3, #2
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	1092      	asrs	r2, r2, #2
 80012e4:	fb02 f303 	mul.w	r3, r2, r3
 80012e8:	135b      	asrs	r3, r3, #13
 80012ea:	fb01 f303 	mul.w	r3, r1, r3
 80012ee:	10da      	asrs	r2, r3, #3
 80012f0:	4b34      	ldr	r3, [pc, #208]	@ (80013c4 <BME280_compensate_P_int32+0x144>)
 80012f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f6:	4619      	mov	r1, r3
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	fb01 f303 	mul.w	r3, r1, r3
 80012fe:	105b      	asrs	r3, r3, #1
 8001300:	4413      	add	r3, r2
 8001302:	149b      	asrs	r3, r3, #18
 8001304:	613b      	str	r3, [r7, #16]
	var1 =((((32768+var1))*((int32_t)dig_P1))>>15);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800130c:	4a2e      	ldr	r2, [pc, #184]	@ (80013c8 <BME280_compensate_P_int32+0x148>)
 800130e:	8812      	ldrh	r2, [r2, #0]
 8001310:	fb02 f303 	mul.w	r3, r2, r3
 8001314:	13db      	asrs	r3, r3, #15
 8001316:	613b      	str	r3, [r7, #16]
	if (var1 == 0)
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <BME280_compensate_P_int32+0xa2>
	{
		return 0; // avoid exception caused by division by zero
 800131e:	2300      	movs	r3, #0
 8001320:	e041      	b.n	80013a6 <BME280_compensate_P_int32+0x126>
	}
	p = (((uint32_t)(((int32_t)1048576)-adc_P)-(var2>>12)))*3125;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	131b      	asrs	r3, r3, #12
 8001326:	461a      	mov	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4413      	add	r3, r2
 800132c:	4a27      	ldr	r2, [pc, #156]	@ (80013cc <BME280_compensate_P_int32+0x14c>)
 800132e:	fb02 f303 	mul.w	r3, r2, r3
 8001332:	f103 4343 	add.w	r3, r3, #3271557120	@ 0xc3000000
 8001336:	f503 03a0 	add.w	r3, r3, #5242880	@ 0x500000
 800133a:	617b      	str	r3, [r7, #20]
	if (p < 0x80000000)
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	2b00      	cmp	r3, #0
 8001340:	db06      	blt.n	8001350 <BME280_compensate_P_int32+0xd0>
	{
		p = (p << 1) / ((uint32_t)var1);
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	005a      	lsls	r2, r3, #1
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	fbb2 f3f3 	udiv	r3, r2, r3
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	e005      	b.n	800135c <BME280_compensate_P_int32+0xdc>
	}
	else
	{
		p = (p / (uint32_t)var1) * 2;
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	fbb2 f3f3 	udiv	r3, r2, r3
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	617b      	str	r3, [r7, #20]
	}
	var1 = (((int32_t)dig_P9) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 800135c:	4b1c      	ldr	r3, [pc, #112]	@ (80013d0 <BME280_compensate_P_int32+0x150>)
 800135e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001362:	4619      	mov	r1, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	08db      	lsrs	r3, r3, #3
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	08d2      	lsrs	r2, r2, #3
 800136c:	fb02 f303 	mul.w	r3, r2, r3
 8001370:	0b5b      	lsrs	r3, r3, #13
 8001372:	fb01 f303 	mul.w	r3, r1, r3
 8001376:	131b      	asrs	r3, r3, #12
 8001378:	613b      	str	r3, [r7, #16]
	var2 = (((int32_t)(p>>2)) * ((int32_t)dig_P8))>>13;
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	461a      	mov	r2, r3
 8001380:	4b14      	ldr	r3, [pc, #80]	@ (80013d4 <BME280_compensate_P_int32+0x154>)
 8001382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001386:	fb02 f303 	mul.w	r3, r2, r3
 800138a:	135b      	asrs	r3, r3, #13
 800138c:	60fb      	str	r3, [r7, #12]
	p = (uint32_t)((int32_t)p + ((var1 + var2 + dig_P7) >> 4));
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4413      	add	r3, r2
 8001394:	4a10      	ldr	r2, [pc, #64]	@ (80013d8 <BME280_compensate_P_int32+0x158>)
 8001396:	f9b2 2000 	ldrsh.w	r2, [r2]
 800139a:	4413      	add	r3, r2
 800139c:	111a      	asrs	r2, r3, #4
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	4413      	add	r3, r2
 80013a2:	617b      	str	r3, [r7, #20]
	return p;
 80013a4:	697b      	ldr	r3, [r7, #20]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	371c      	adds	r7, #28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	20000228 	.word	0x20000228
 80013b4:	20000218 	.word	0x20000218
 80013b8:	20000216 	.word	0x20000216
 80013bc:	20000214 	.word	0x20000214
 80013c0:	20000212 	.word	0x20000212
 80013c4:	20000210 	.word	0x20000210
 80013c8:	20000206 	.word	0x20000206
 80013cc:	fffff3cb 	.word	0xfffff3cb
 80013d0:	2000021e 	.word	0x2000021e
 80013d4:	2000021c 	.word	0x2000021c
 80013d8:	2000021a 	.word	0x2000021a

080013dc <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 80013e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001498 <bme280_compensate_H_int32+0xbc>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 80013ec:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	039a      	lsls	r2, r3, #14
 80013f2:	4b2a      	ldr	r3, [pc, #168]	@ (800149c <bme280_compensate_H_int32+0xc0>)
 80013f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f8:	051b      	lsls	r3, r3, #20
 80013fa:	1ad2      	subs	r2, r2, r3
 80013fc:	4b28      	ldr	r3, [pc, #160]	@ (80014a0 <bme280_compensate_H_int32+0xc4>)
 80013fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001402:	4619      	mov	r1, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	fb01 f303 	mul.w	r3, r1, r3
 800140a:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 800140c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001410:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001412:	4a24      	ldr	r2, [pc, #144]	@ (80014a4 <bme280_compensate_H_int32+0xc8>)
 8001414:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001418:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001420:	1292      	asrs	r2, r2, #10
 8001422:	4921      	ldr	r1, [pc, #132]	@ (80014a8 <bme280_compensate_H_int32+0xcc>)
 8001424:	8809      	ldrh	r1, [r1, #0]
 8001426:	4608      	mov	r0, r1
 8001428:	68f9      	ldr	r1, [r7, #12]
 800142a:	fb00 f101 	mul.w	r1, r0, r1
 800142e:	12c9      	asrs	r1, r1, #11
 8001430:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001434:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001438:	1292      	asrs	r2, r2, #10
 800143a:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800143e:	491b      	ldr	r1, [pc, #108]	@ (80014ac <bme280_compensate_H_int32+0xd0>)
 8001440:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001444:	fb01 f202 	mul.w	r2, r1, r2
 8001448:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
					8192) >> 14));
 800144c:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	13db      	asrs	r3, r3, #15
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	13d2      	asrs	r2, r2, #15
 800145c:	fb02 f303 	mul.w	r3, r2, r3
 8001460:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001462:	4a13      	ldr	r2, [pc, #76]	@ (80014b0 <bme280_compensate_H_int32+0xd4>)
 8001464:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001466:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 800146a:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001478:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001480:	bfa8      	it	ge
 8001482:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001486:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	131b      	asrs	r3, r3, #12
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20000228 	.word	0x20000228
 800149c:	20000222 	.word	0x20000222
 80014a0:	20000224 	.word	0x20000224
 80014a4:	20000226 	.word	0x20000226
 80014a8:	2000020a 	.word	0x2000020a
 80014ac:	20000220 	.word	0x20000220
 80014b0:	20000208 	.word	0x20000208

080014b4 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 80014b8:	f7ff fe52 	bl	8001160 <BMEReadRaw>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d158      	bne.n	8001574 <BME280_Measure+0xc0>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 80014c2:	4b33      	ldr	r3, [pc, #204]	@ (8001590 <BME280_Measure+0xdc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80014ca:	d104      	bne.n	80014d6 <BME280_Measure+0x22>
 80014cc:	4b31      	ldr	r3, [pc, #196]	@ (8001594 <BME280_Measure+0xe0>)
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	e016      	b.n	8001504 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 80014d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001590 <BME280_Measure+0xdc>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fe90 	bl	8001200 <BME280_compensate_T_int32>
 80014e0:	4603      	mov	r3, r0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7fe ff8e 	bl	8000404 <__aeabi_i2d>
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <BME280_Measure+0xe4>)
 80014ee:	f7ff f91d 	bl	800072c <__aeabi_ddiv>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4610      	mov	r0, r2
 80014f8:	4619      	mov	r1, r3
 80014fa:	f7ff fae5 	bl	8000ac8 <__aeabi_d2f>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a24      	ldr	r2, [pc, #144]	@ (8001594 <BME280_Measure+0xe0>)
 8001502:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001504:	4b25      	ldr	r3, [pc, #148]	@ (800159c <BME280_Measure+0xe8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800150c:	d104      	bne.n	8001518 <BME280_Measure+0x64>
 800150e:	4b24      	ldr	r3, [pc, #144]	@ (80015a0 <BME280_Measure+0xec>)
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	e00b      	b.n	8001530 <BME280_Measure+0x7c>
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256

#elif SUPPORT_32BIT
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa
 8001518:	4b20      	ldr	r3, [pc, #128]	@ (800159c <BME280_Measure+0xe8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff feaf 	bl	8001280 <BME280_compensate_P_int32>
 8001522:	4603      	mov	r3, r0
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fbd5 	bl	8000cd4 <__aeabi_ui2f>
 800152a:	4603      	mov	r3, r0
 800152c:	4a1c      	ldr	r2, [pc, #112]	@ (80015a0 <BME280_Measure+0xec>)
 800152e:	6013      	str	r3, [r2, #0]

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001530:	4b1c      	ldr	r3, [pc, #112]	@ (80015a4 <BME280_Measure+0xf0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001538:	d104      	bne.n	8001544 <BME280_Measure+0x90>
 800153a:	4b1b      	ldr	r3, [pc, #108]	@ (80015a8 <BME280_Measure+0xf4>)
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001542:	e023      	b.n	800158c <BME280_Measure+0xd8>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001544:	4b17      	ldr	r3, [pc, #92]	@ (80015a4 <BME280_Measure+0xf0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff47 	bl	80013dc <bme280_compensate_H_int32>
 800154e:	4603      	mov	r3, r0
 8001550:	4618      	mov	r0, r3
 8001552:	f7fe ff47 	bl	80003e4 <__aeabi_ui2d>
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	4b14      	ldr	r3, [pc, #80]	@ (80015ac <BME280_Measure+0xf8>)
 800155c:	f7ff f8e6 	bl	800072c <__aeabi_ddiv>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff faae 	bl	8000ac8 <__aeabi_d2f>
 800156c:	4603      	mov	r3, r0
 800156e:	4a0e      	ldr	r2, [pc, #56]	@ (80015a8 <BME280_Measure+0xf4>)
 8001570:	6013      	str	r3, [r2, #0]
}
 8001572:	e00b      	b.n	800158c <BME280_Measure+0xd8>
		Temperature = Pressure = Humidity = 0;
 8001574:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <BME280_Measure+0xf4>)
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <BME280_Measure+0xf4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a07      	ldr	r2, [pc, #28]	@ (80015a0 <BME280_Measure+0xec>)
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <BME280_Measure+0xec>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a02      	ldr	r2, [pc, #8]	@ (8001594 <BME280_Measure+0xe0>)
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200001f8 	.word	0x200001f8
 8001594:	20000330 	.word	0x20000330
 8001598:	40590000 	.word	0x40590000
 800159c:	200001fc 	.word	0x200001fc
 80015a0:	20000334 	.word	0x20000334
 80015a4:	20000200 	.word	0x20000200
 80015a8:	20000338 	.word	0x20000338
 80015ac:	40900000 	.word	0x40900000

080015b0 <checkShouldGoToTimer.1>:
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);


  //  Not sure I need it
  void checkShouldGoToTimer()
  {
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	f8c7 c004 	str.w	ip, [r7, #4]
	uint8_t rawCounter = __HAL_TIM_GET_COUNTER(&htim2);
 80015ba:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <checkShouldGoToTimer.1+0x34>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c0:	73fb      	strb	r3, [r7, #15]

	if (rawCounter != prevCounter)
 80015c2:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <checkShouldGoToTimer.1+0x38>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	7bfa      	ldrb	r2, [r7, #15]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d006      	beq.n	80015da <checkShouldGoToTimer.1+0x2a>
	{
		activeScreen = screenTimer;
 80015cc:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <checkShouldGoToTimer.1+0x3c>)
 80015ce:	781a      	ldrb	r2, [r3, #0]
 80015d0:	4b07      	ldr	r3, [pc, #28]	@ (80015f0 <checkShouldGoToTimer.1+0x40>)
 80015d2:	701a      	strb	r2, [r3, #0]
		prevCounter = rawCounter;
 80015d4:	4a04      	ldr	r2, [pc, #16]	@ (80015e8 <checkShouldGoToTimer.1+0x38>)
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	7013      	strb	r3, [r2, #0]
	}
  }
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	200002e8 	.word	0x200002e8
 80015e8:	20000344 	.word	0x20000344
 80015ec:	20000001 	.word	0x20000001
 80015f0:	2000033f 	.word	0x2000033f

080015f4 <main>:
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af02      	add	r7, sp, #8
int main(void)
 80015fa:	f107 0310 	add.w	r3, r7, #16
 80015fe:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8001600:	f001 fadc 	bl	8002bbc <HAL_Init>
  SystemClock_Config();
 8001604:	f000 fac4 	bl	8001b90 <SystemClock_Config>
  MX_GPIO_Init();
 8001608:	f000 fc2e 	bl	8001e68 <MX_GPIO_Init>
  MX_I2C1_Init();
 800160c:	f000 fb1e 	bl	8001c4c <MX_I2C1_Init>
  MX_RTC_Init();
 8001610:	f000 fb78 	bl	8001d04 <MX_RTC_Init>
  MX_TIM2_Init();
 8001614:	f000 fbd6 	bl	8001dc4 <MX_TIM2_Init>
  MX_I2C2_Init();
 8001618:	f000 fb46 	bl	8001ca8 <MX_I2C2_Init>
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 800161c:	2304      	movs	r3, #4
 800161e:	9301      	str	r3, [sp, #4]
 8001620:	2300      	movs	r3, #0
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	2303      	movs	r3, #3
 8001626:	2201      	movs	r2, #1
 8001628:	2105      	movs	r1, #5
 800162a:	2002      	movs	r0, #2
 800162c:	f7ff fcc2 	bl	8000fb4 <BME280_Config>
  ssd1306_Init();
 8001630:	f000 fe12 	bl	8002258 <ssd1306_Init>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001634:	213c      	movs	r1, #60	@ 0x3c
 8001636:	481c      	ldr	r0, [pc, #112]	@ (80016a8 <main+0xb4>)
 8001638:	f004 fb30 	bl	8005c9c <HAL_TIM_Encoder_Start>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  ssd1306_Fill(Black);
 800163c:	2000      	movs	r0, #0
 800163e:	f000 fe75 	bl	800232c <ssd1306_Fill>


	  if (activeScreen == screenTime)
 8001642:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <main+0xb8>)
 8001644:	781a      	ldrb	r2, [r3, #0]
 8001646:	4b1a      	ldr	r3, [pc, #104]	@ (80016b0 <main+0xbc>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d104      	bne.n	8001658 <main+0x64>
	  {
		  printTimeScreen();
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	469c      	mov	ip, r3
 8001652:	f000 f84f 	bl	80016f4 <printTimeScreen.0>
 8001656:	e01f      	b.n	8001698 <main+0xa4>
//		  if (encoderState != encoderPrevState)
//		  {
//			  activeScreen = screenTimer;
//			  encoderPrevState = encoderState;
//		  }
	  } else if (activeScreen == screenWeather)
 8001658:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <main+0xb8>)
 800165a:	781a      	ldrb	r2, [r3, #0]
 800165c:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <main+0xc0>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	429a      	cmp	r2, r3
 8001662:	d104      	bne.n	800166e <main+0x7a>
	  {
		  printWeatherScreen();
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	469c      	mov	ip, r3
 8001668:	f000 f8c6 	bl	80017f8 <printWeatherScreen.3>
 800166c:	e014      	b.n	8001698 <main+0xa4>
	  } else if (activeScreen == screenTimer)
 800166e:	4b0f      	ldr	r3, [pc, #60]	@ (80016ac <main+0xb8>)
 8001670:	781a      	ldrb	r2, [r3, #0]
 8001672:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <main+0xc4>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d104      	bne.n	8001684 <main+0x90>
	  {
		  printTimerScreen();
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	469c      	mov	ip, r3
 800167e:	f000 f931 	bl	80018e4 <printTimerScreen.4>
 8001682:	e009      	b.n	8001698 <main+0xa4>
	  } else if (activeScreen == screenMenu)
 8001684:	4b09      	ldr	r3, [pc, #36]	@ (80016ac <main+0xb8>)
 8001686:	781a      	ldrb	r2, [r3, #0]
 8001688:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <main+0xc8>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d103      	bne.n	8001698 <main+0xa4>
	  {
		  printMenuScreen();
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	469c      	mov	ip, r3
 8001694:	f000 f9d6 	bl	8001a44 <printMenuScreen.5>
	  }


	  ssd1306_UpdateScreen();
 8001698:	f000 fe60 	bl	800235c <ssd1306_UpdateScreen>

	  checkAlarm();
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	469c      	mov	ip, r3
 80016a0:	f000 fa4c 	bl	8001b3c <checkAlarm.6>
	  ssd1306_Fill(Black);
 80016a4:	e7ca      	b.n	800163c <main+0x48>
 80016a6:	bf00      	nop
 80016a8:	200002e8 	.word	0x200002e8
 80016ac:	2000033f 	.word	0x2000033f
 80016b0:	20000340 	.word	0x20000340
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20000001 	.word	0x20000001
 80016bc:	20000002 	.word	0x20000002

080016c0 <BCD_to_Decimal.2>:
  uint8_t BCD_to_Decimal(uint8_t bcd) {
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
 80016ca:	f8c7 c000 	str.w	ip, [r7]
     return ((bcd >> 4) * 10) + (bcd & 0x0F);
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	091b      	lsrs	r3, r3, #4
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	461a      	mov	r2, r3
 80016d6:	0092      	lsls	r2, r2, #2
 80016d8:	4413      	add	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f003 030f 	and.w	r3, r3, #15
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	4413      	add	r3, r2
 80016e8:	b2db      	uxtb	r3, r3
  }
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <printTimeScreen.0>:
  {
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b089      	sub	sp, #36	@ 0x24
 80016f8:	af02      	add	r7, sp, #8
 80016fa:	4664      	mov	r4, ip
 80016fc:	f8c7 c004 	str.w	ip, [r7, #4]
	  checkShouldGoToTimer();
 8001700:	46a4      	mov	ip, r4
 8001702:	f7ff ff55 	bl	80015b0 <checkShouldGoToTimer.1>
	  HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BCD);
 8001706:	2201      	movs	r2, #1
 8001708:	4934      	ldr	r1, [pc, #208]	@ (80017dc <printTimeScreen.0+0xe8>)
 800170a:	4835      	ldr	r0, [pc, #212]	@ (80017e0 <printTimeScreen.0+0xec>)
 800170c:	f003 fcbe 	bl	800508c <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &DateToUpdate, FORMAT_BCD);
 8001710:	2201      	movs	r2, #1
 8001712:	4934      	ldr	r1, [pc, #208]	@ (80017e4 <printTimeScreen.0+0xf0>)
 8001714:	4832      	ldr	r0, [pc, #200]	@ (80017e0 <printTimeScreen.0+0xec>)
 8001716:	f003 fe47 	bl	80053a8 <HAL_RTC_GetDate>
	  uint8_t time_Hours = BCD_to_Decimal(sTime.Hours);
 800171a:	4b30      	ldr	r3, [pc, #192]	@ (80017dc <printTimeScreen.0+0xe8>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	46a4      	mov	ip, r4
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ffcd 	bl	80016c0 <BCD_to_Decimal.2>
 8001726:	4603      	mov	r3, r0
 8001728:	75fb      	strb	r3, [r7, #23]
	  uint8_t time_Minutes = BCD_to_Decimal(sTime.Minutes);
 800172a:	4b2c      	ldr	r3, [pc, #176]	@ (80017dc <printTimeScreen.0+0xe8>)
 800172c:	785b      	ldrb	r3, [r3, #1]
 800172e:	46a4      	mov	ip, r4
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ffc5 	bl	80016c0 <BCD_to_Decimal.2>
 8001736:	4603      	mov	r3, r0
 8001738:	75bb      	strb	r3, [r7, #22]
	  uint8_t time_Seconds = BCD_to_Decimal(sTime.Seconds);
 800173a:	4b28      	ldr	r3, [pc, #160]	@ (80017dc <printTimeScreen.0+0xe8>)
 800173c:	789b      	ldrb	r3, [r3, #2]
 800173e:	46a4      	mov	ip, r4
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ffbd 	bl	80016c0 <BCD_to_Decimal.2>
 8001746:	4603      	mov	r3, r0
 8001748:	757b      	strb	r3, [r7, #21]
	  sprintf(buffer_hours, "%02d", time_Hours);
 800174a:	7dfa      	ldrb	r2, [r7, #23]
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	4925      	ldr	r1, [pc, #148]	@ (80017e8 <printTimeScreen.0+0xf4>)
 8001752:	4618      	mov	r0, r3
 8001754:	f005 fb76 	bl	8006e44 <siprintf>
	  sprintf(buffer_min, "%02d", time_Minutes);
 8001758:	7dba      	ldrb	r2, [r7, #22]
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	4922      	ldr	r1, [pc, #136]	@ (80017e8 <printTimeScreen.0+0xf4>)
 8001760:	4618      	mov	r0, r3
 8001762:	f005 fb6f 	bl	8006e44 <siprintf>
	  sprintf(buffer_sec, "%02d", time_Seconds);
 8001766:	7d7a      	ldrb	r2, [r7, #21]
 8001768:	f107 0308 	add.w	r3, r7, #8
 800176c:	491e      	ldr	r1, [pc, #120]	@ (80017e8 <printTimeScreen.0+0xf4>)
 800176e:	4618      	mov	r0, r3
 8001770:	f005 fb68 	bl	8006e44 <siprintf>
	  ssd1306_SetCursor(0, 0);
 8001774:	2100      	movs	r1, #0
 8001776:	2000      	movs	r0, #0
 8001778:	f000 ff20 	bl	80025bc <ssd1306_SetCursor>
	  ssd1306_WriteString(buffer_hours, Font_16x26, White);
 800177c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ec <printTimeScreen.0+0xf8>)
 800177e:	f107 0010 	add.w	r0, r7, #16
 8001782:	2201      	movs	r2, #1
 8001784:	9200      	str	r2, [sp, #0]
 8001786:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001788:	f000 fef2 	bl	8002570 <ssd1306_WriteString>
	  ssd1306_SetCursor(35, 0);
 800178c:	2100      	movs	r1, #0
 800178e:	2023      	movs	r0, #35	@ 0x23
 8001790:	f000 ff14 	bl	80025bc <ssd1306_SetCursor>
	  ssd1306_WriteString(":", Font_16x26, White);
 8001794:	4b15      	ldr	r3, [pc, #84]	@ (80017ec <printTimeScreen.0+0xf8>)
 8001796:	2201      	movs	r2, #1
 8001798:	9200      	str	r2, [sp, #0]
 800179a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800179c:	4814      	ldr	r0, [pc, #80]	@ (80017f0 <printTimeScreen.0+0xfc>)
 800179e:	f000 fee7 	bl	8002570 <ssd1306_WriteString>
	  ssd1306_SetCursor(55, 0);
 80017a2:	2100      	movs	r1, #0
 80017a4:	2037      	movs	r0, #55	@ 0x37
 80017a6:	f000 ff09 	bl	80025bc <ssd1306_SetCursor>
	  ssd1306_WriteString(buffer_min, Font_16x26, White);
 80017aa:	4b10      	ldr	r3, [pc, #64]	@ (80017ec <printTimeScreen.0+0xf8>)
 80017ac:	f107 000c 	add.w	r0, r7, #12
 80017b0:	2201      	movs	r2, #1
 80017b2:	9200      	str	r2, [sp, #0]
 80017b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017b6:	f000 fedb 	bl	8002570 <ssd1306_WriteString>
	  ssd1306_SetCursor(95, 0);
 80017ba:	2100      	movs	r1, #0
 80017bc:	205f      	movs	r0, #95	@ 0x5f
 80017be:	f000 fefd 	bl	80025bc <ssd1306_SetCursor>
	  ssd1306_WriteString(buffer_sec, Font_7x10, White);
 80017c2:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <printTimeScreen.0+0x100>)
 80017c4:	f107 0008 	add.w	r0, r7, #8
 80017c8:	2201      	movs	r2, #1
 80017ca:	9200      	str	r2, [sp, #0]
 80017cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017ce:	f000 fecf 	bl	8002570 <ssd1306_WriteString>
  }
 80017d2:	bf00      	nop
 80017d4:	371c      	adds	r7, #28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd90      	pop	{r4, r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000348 	.word	0x20000348
 80017e0:	200002d4 	.word	0x200002d4
 80017e4:	2000034c 	.word	0x2000034c
 80017e8:	0800a6b8 	.word	0x0800a6b8
 80017ec:	0800d530 	.word	0x0800d530
 80017f0:	0800a6c0 	.word	0x0800a6c0
 80017f4:	0800d518 	.word	0x0800d518

080017f8 <printWeatherScreen.3>:
  {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08e      	sub	sp, #56	@ 0x38
 80017fc:	af02      	add	r7, sp, #8
 80017fe:	f8c7 c004 	str.w	ip, [r7, #4]
	  BME280_Measure();
 8001802:	f7ff fe57 	bl	80014b4 <BME280_Measure>
	  HAL_Delay(100);
 8001806:	2064      	movs	r0, #100	@ 0x64
 8001808:	f001 fa3a 	bl	8002c80 <HAL_Delay>
	  snprintf(bufferTemp, sizeof(bufferTemp), "%05.2f C", Temperature);
 800180c:	4b2e      	ldr	r3, [pc, #184]	@ (80018c8 <printWeatherScreen.3+0xd0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fe09 	bl	8000428 <__aeabi_f2d>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800181e:	e9cd 2300 	strd	r2, r3, [sp]
 8001822:	4a2a      	ldr	r2, [pc, #168]	@ (80018cc <printWeatherScreen.3+0xd4>)
 8001824:	210a      	movs	r1, #10
 8001826:	f005 fad9 	bl	8006ddc <sniprintf>
	  snprintf(bufferPres, sizeof(bufferPres), "%06.2f mm p.c.", Pressure / 133.322);
 800182a:	4b29      	ldr	r3, [pc, #164]	@ (80018d0 <printWeatherScreen.3+0xd8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fdfa 	bl	8000428 <__aeabi_f2d>
 8001834:	a322      	add	r3, pc, #136	@ (adr r3, 80018c0 <printWeatherScreen.3+0xc8>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	f7fe ff77 	bl	800072c <__aeabi_ddiv>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	f107 0014 	add.w	r0, r7, #20
 8001846:	e9cd 2300 	strd	r2, r3, [sp]
 800184a:	4a22      	ldr	r2, [pc, #136]	@ (80018d4 <printWeatherScreen.3+0xdc>)
 800184c:	210f      	movs	r1, #15
 800184e:	f005 fac5 	bl	8006ddc <sniprintf>
	  snprintf(bufferHum, sizeof(bufferHum), "%05.2f %%", Humidity);
 8001852:	4b21      	ldr	r3, [pc, #132]	@ (80018d8 <printWeatherScreen.3+0xe0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fde6 	bl	8000428 <__aeabi_f2d>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	f107 0008 	add.w	r0, r7, #8
 8001864:	e9cd 2300 	strd	r2, r3, [sp]
 8001868:	4a1c      	ldr	r2, [pc, #112]	@ (80018dc <printWeatherScreen.3+0xe4>)
 800186a:	210a      	movs	r1, #10
 800186c:	f005 fab6 	bl	8006ddc <sniprintf>
	  ssd1306_SetCursor(0, 0);
 8001870:	2100      	movs	r1, #0
 8001872:	2000      	movs	r0, #0
 8001874:	f000 fea2 	bl	80025bc <ssd1306_SetCursor>
	  ssd1306_WriteString(bufferTemp, Font_11x18, White);
 8001878:	4b19      	ldr	r3, [pc, #100]	@ (80018e0 <printWeatherScreen.3+0xe8>)
 800187a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800187e:	2201      	movs	r2, #1
 8001880:	9200      	str	r2, [sp, #0]
 8001882:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001884:	f000 fe74 	bl	8002570 <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 20);
 8001888:	2114      	movs	r1, #20
 800188a:	2000      	movs	r0, #0
 800188c:	f000 fe96 	bl	80025bc <ssd1306_SetCursor>
	  ssd1306_WriteString(bufferHum, Font_11x18, White);
 8001890:	4b13      	ldr	r3, [pc, #76]	@ (80018e0 <printWeatherScreen.3+0xe8>)
 8001892:	f107 0008 	add.w	r0, r7, #8
 8001896:	2201      	movs	r2, #1
 8001898:	9200      	str	r2, [sp, #0]
 800189a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800189c:	f000 fe68 	bl	8002570 <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 40);
 80018a0:	2128      	movs	r1, #40	@ 0x28
 80018a2:	2000      	movs	r0, #0
 80018a4:	f000 fe8a 	bl	80025bc <ssd1306_SetCursor>
	  ssd1306_WriteString(bufferPres, Font_11x18, White);
 80018a8:	4b0d      	ldr	r3, [pc, #52]	@ (80018e0 <printWeatherScreen.3+0xe8>)
 80018aa:	f107 0014 	add.w	r0, r7, #20
 80018ae:	2201      	movs	r2, #1
 80018b0:	9200      	str	r2, [sp, #0]
 80018b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018b4:	f000 fe5c 	bl	8002570 <ssd1306_WriteString>
  }
 80018b8:	bf00      	nop
 80018ba:	3730      	adds	r7, #48	@ 0x30
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80018c4:	4060aa4d 	.word	0x4060aa4d
 80018c8:	20000330 	.word	0x20000330
 80018cc:	0800a6c4 	.word	0x0800a6c4
 80018d0:	20000334 	.word	0x20000334
 80018d4:	0800a6d0 	.word	0x0800a6d0
 80018d8:	20000338 	.word	0x20000338
 80018dc:	0800a6e0 	.word	0x0800a6e0
 80018e0:	0800d524 	.word	0x0800d524

080018e4 <printTimerScreen.4>:
  {
 80018e4:	b590      	push	{r4, r7, lr}
 80018e6:	b08d      	sub	sp, #52	@ 0x34
 80018e8:	af02      	add	r7, sp, #8
 80018ea:	4664      	mov	r4, ip
 80018ec:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BCD);
 80018f0:	2201      	movs	r2, #1
 80018f2:	4949      	ldr	r1, [pc, #292]	@ (8001a18 <printTimerScreen.4+0x134>)
 80018f4:	4849      	ldr	r0, [pc, #292]	@ (8001a1c <printTimerScreen.4+0x138>)
 80018f6:	f003 fbc9 	bl	800508c <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &DateToUpdate, FORMAT_BCD);
 80018fa:	2201      	movs	r2, #1
 80018fc:	4948      	ldr	r1, [pc, #288]	@ (8001a20 <printTimerScreen.4+0x13c>)
 80018fe:	4847      	ldr	r0, [pc, #284]	@ (8001a1c <printTimerScreen.4+0x138>)
 8001900:	f003 fd52 	bl	80053a8 <HAL_RTC_GetDate>
	  uint8_t time_Seconds = BCD_to_Decimal(sTime.Seconds);
 8001904:	4b44      	ldr	r3, [pc, #272]	@ (8001a18 <printTimerScreen.4+0x134>)
 8001906:	789b      	ldrb	r3, [r3, #2]
 8001908:	46a4      	mov	ip, r4
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fed8 	bl	80016c0 <BCD_to_Decimal.2>
 8001910:	4603      	mov	r3, r0
 8001912:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  uint32_t rawCounter = __HAL_TIM_GET_COUNTER(&htim2);
 8001916:	4b43      	ldr	r3, [pc, #268]	@ (8001a24 <printTimerScreen.4+0x140>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191c:	623b      	str	r3, [r7, #32]
	  if (counterMode == 0) {
 800191e:	4b42      	ldr	r3, [pc, #264]	@ (8001a28 <printTimerScreen.4+0x144>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d104      	bne.n	8001930 <printTimerScreen.4+0x4c>
		counter = rawCounter;
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4b40      	ldr	r3, [pc, #256]	@ (8001a2c <printTimerScreen.4+0x148>)
 800192c:	701a      	strb	r2, [r3, #0]
 800192e:	e01f      	b.n	8001970 <printTimerScreen.4+0x8c>
		if (rawCounter == 13) {
 8001930:	6a3b      	ldr	r3, [r7, #32]
 8001932:	2b0d      	cmp	r3, #13
 8001934:	d107      	bne.n	8001946 <printTimerScreen.4+0x62>
			__HAL_TIM_SET_COUNTER(&htim2, 1); // 12 * 5 = 60
 8001936:	4b3b      	ldr	r3, [pc, #236]	@ (8001a24 <printTimerScreen.4+0x140>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2201      	movs	r2, #1
 800193c:	625a      	str	r2, [r3, #36]	@ 0x24
			counter = 0;
 800193e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a2c <printTimerScreen.4+0x148>)
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
 8001944:	e014      	b.n	8001970 <printTimerScreen.4+0x8c>
		} else if (rawCounter == 0) {
 8001946:	6a3b      	ldr	r3, [r7, #32]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d107      	bne.n	800195c <printTimerScreen.4+0x78>
			__HAL_TIM_SET_COUNTER(&htim2, 12); // 11 * 5 = 55
 800194c:	4b35      	ldr	r3, [pc, #212]	@ (8001a24 <printTimerScreen.4+0x140>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	220c      	movs	r2, #12
 8001952:	625a      	str	r2, [r3, #36]	@ 0x24
			counter = 55;
 8001954:	4b35      	ldr	r3, [pc, #212]	@ (8001a2c <printTimerScreen.4+0x148>)
 8001956:	2237      	movs	r2, #55	@ 0x37
 8001958:	701a      	strb	r2, [r3, #0]
 800195a:	e009      	b.n	8001970 <printTimerScreen.4+0x8c>
			counter = (rawCounter - 1) * 5;
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	0092      	lsls	r2, r2, #2
 8001964:	4413      	add	r3, r2
 8001966:	b2db      	uxtb	r3, r3
 8001968:	3b05      	subs	r3, #5
 800196a:	b2da      	uxtb	r2, r3
 800196c:	4b2f      	ldr	r3, [pc, #188]	@ (8001a2c <printTimerScreen.4+0x148>)
 800196e:	701a      	strb	r2, [r3, #0]
	  sprintf(bufferEncoder, "%02d", counter);
 8001970:	4b2e      	ldr	r3, [pc, #184]	@ (8001a2c <printTimerScreen.4+0x148>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	f107 0318 	add.w	r3, r7, #24
 800197a:	492d      	ldr	r1, [pc, #180]	@ (8001a30 <printTimerScreen.4+0x14c>)
 800197c:	4618      	mov	r0, r3
 800197e:	f005 fa61 	bl	8006e44 <siprintf>
	  ssd1306_SetCursor(20, 0);
 8001982:	2100      	movs	r1, #0
 8001984:	2014      	movs	r0, #20
 8001986:	f000 fe19 	bl	80025bc <ssd1306_SetCursor>
	  ssd1306_WriteString(bufferEncoder, Font_16x26, White);
 800198a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a34 <printTimerScreen.4+0x150>)
 800198c:	f107 0018 	add.w	r0, r7, #24
 8001990:	2201      	movs	r2, #1
 8001992:	9200      	str	r2, [sp, #0]
 8001994:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001996:	f000 fdeb 	bl	8002570 <ssd1306_WriteString>
	  uint8_t timer_Seconds = BCD_to_Decimal(sAlarm.AlarmTime.Seconds);
 800199a:	4b27      	ldr	r3, [pc, #156]	@ (8001a38 <printTimerScreen.4+0x154>)
 800199c:	789b      	ldrb	r3, [r3, #2]
 800199e:	46a4      	mov	ip, r4
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fe8d 	bl	80016c0 <BCD_to_Decimal.2>
 80019a6:	4603      	mov	r3, r0
 80019a8:	77fb      	strb	r3, [r7, #31]
	  sprintf(bufferTest, "%02d", timer_Seconds);
 80019aa:	7ffa      	ldrb	r2, [r7, #31]
 80019ac:	f107 0310 	add.w	r3, r7, #16
 80019b0:	491f      	ldr	r1, [pc, #124]	@ (8001a30 <printTimerScreen.4+0x14c>)
 80019b2:	4618      	mov	r0, r3
 80019b4:	f005 fa46 	bl	8006e44 <siprintf>
	  sprintf(bufferTest2, "%02d", time_Seconds);
 80019b8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80019bc:	f107 0308 	add.w	r3, r7, #8
 80019c0:	491b      	ldr	r1, [pc, #108]	@ (8001a30 <printTimerScreen.4+0x14c>)
 80019c2:	4618      	mov	r0, r3
 80019c4:	f005 fa3e 	bl	8006e44 <siprintf>
	  ssd1306_SetCursor(0, 30);
 80019c8:	211e      	movs	r1, #30
 80019ca:	2000      	movs	r0, #0
 80019cc:	f000 fdf6 	bl	80025bc <ssd1306_SetCursor>
	  ssd1306_WriteString(bufferTest, Font_6x8, White);
 80019d0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a3c <printTimerScreen.4+0x158>)
 80019d2:	f107 0010 	add.w	r0, r7, #16
 80019d6:	2201      	movs	r2, #1
 80019d8:	9200      	str	r2, [sp, #0]
 80019da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019dc:	f000 fdc8 	bl	8002570 <ssd1306_WriteString>
	  ssd1306_SetCursor(60, 30);
 80019e0:	211e      	movs	r1, #30
 80019e2:	203c      	movs	r0, #60	@ 0x3c
 80019e4:	f000 fdea 	bl	80025bc <ssd1306_SetCursor>
	  ssd1306_WriteString(bufferTest2, Font_6x8, White);
 80019e8:	4b14      	ldr	r3, [pc, #80]	@ (8001a3c <printTimerScreen.4+0x158>)
 80019ea:	f107 0008 	add.w	r0, r7, #8
 80019ee:	2201      	movs	r2, #1
 80019f0:	9200      	str	r2, [sp, #0]
 80019f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019f4:	f000 fdbc 	bl	8002570 <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 40);
 80019f8:	2128      	movs	r1, #40	@ 0x28
 80019fa:	2000      	movs	r0, #0
 80019fc:	f000 fdde 	bl	80025bc <ssd1306_SetCursor>
	  ssd1306_WriteString("end", Font_6x8, White);
 8001a00:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <printTimerScreen.4+0x158>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	9200      	str	r2, [sp, #0]
 8001a06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a08:	480d      	ldr	r0, [pc, #52]	@ (8001a40 <printTimerScreen.4+0x15c>)
 8001a0a:	f000 fdb1 	bl	8002570 <ssd1306_WriteString>
  }
 8001a0e:	bf00      	nop
 8001a10:	372c      	adds	r7, #44	@ 0x2c
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd90      	pop	{r4, r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000348 	.word	0x20000348
 8001a1c:	200002d4 	.word	0x200002d4
 8001a20:	2000034c 	.word	0x2000034c
 8001a24:	200002e8 	.word	0x200002e8
 8001a28:	2000033c 	.word	0x2000033c
 8001a2c:	20000343 	.word	0x20000343
 8001a30:	0800a6b8 	.word	0x0800a6b8
 8001a34:	0800d530 	.word	0x0800d530
 8001a38:	20000350 	.word	0x20000350
 8001a3c:	0800d50c 	.word	0x0800d50c
 8001a40:	0800a6ec 	.word	0x0800a6ec

08001a44 <printMenuScreen.5>:
  {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	f8c7 c004 	str.w	ip, [r7, #4]
		uint8_t rawCounter = __HAL_TIM_GET_COUNTER(&htim2);
 8001a4e:	4b33      	ldr	r3, [pc, #204]	@ (8001b1c <printMenuScreen.5+0xd8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a54:	73fb      	strb	r3, [r7, #15]
		if (rawCounter != prevCounter)
 8001a56:	4b32      	ldr	r3, [pc, #200]	@ (8001b20 <printMenuScreen.5+0xdc>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	7bfa      	ldrb	r2, [r7, #15]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d011      	beq.n	8001a84 <printMenuScreen.5+0x40>
			if (activeMenuOption == menuSetTime)
 8001a60:	4b30      	ldr	r3, [pc, #192]	@ (8001b24 <printMenuScreen.5+0xe0>)
 8001a62:	781a      	ldrb	r2, [r3, #0]
 8001a64:	4b30      	ldr	r3, [pc, #192]	@ (8001b28 <printMenuScreen.5+0xe4>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d104      	bne.n	8001a76 <printMenuScreen.5+0x32>
				activeMenuOption = menuSetDate;
 8001a6c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b2c <printMenuScreen.5+0xe8>)
 8001a6e:	781a      	ldrb	r2, [r3, #0]
 8001a70:	4b2c      	ldr	r3, [pc, #176]	@ (8001b24 <printMenuScreen.5+0xe0>)
 8001a72:	701a      	strb	r2, [r3, #0]
 8001a74:	e003      	b.n	8001a7e <printMenuScreen.5+0x3a>
				activeMenuOption = menuSetTime;
 8001a76:	4b2c      	ldr	r3, [pc, #176]	@ (8001b28 <printMenuScreen.5+0xe4>)
 8001a78:	781a      	ldrb	r2, [r3, #0]
 8001a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b24 <printMenuScreen.5+0xe0>)
 8001a7c:	701a      	strb	r2, [r3, #0]
			prevCounter = rawCounter;
 8001a7e:	4a28      	ldr	r2, [pc, #160]	@ (8001b20 <printMenuScreen.5+0xdc>)
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	7013      	strb	r3, [r2, #0]
  	  ssd1306_SetCursor(0, 0);
 8001a84:	2100      	movs	r1, #0
 8001a86:	2000      	movs	r0, #0
 8001a88:	f000 fd98 	bl	80025bc <ssd1306_SetCursor>
  	  ssd1306_FillRectangle(0, 0, 128, 20, activeMenuOption == menuSetTime ? White : Black);
 8001a8c:	4b25      	ldr	r3, [pc, #148]	@ (8001b24 <printMenuScreen.5+0xe0>)
 8001a8e:	781a      	ldrb	r2, [r3, #0]
 8001a90:	4b25      	ldr	r3, [pc, #148]	@ (8001b28 <printMenuScreen.5+0xe4>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	bf0c      	ite	eq
 8001a98:	2301      	moveq	r3, #1
 8001a9a:	2300      	movne	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	2314      	movs	r3, #20
 8001aa2:	2280      	movs	r2, #128	@ 0x80
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f000 fda0 	bl	80025ec <ssd1306_FillRectangle>
  	  ssd1306_WriteString("Set Time", Font_11x18, activeMenuOption == menuSetTime ? Black : White);
 8001aac:	4b1d      	ldr	r3, [pc, #116]	@ (8001b24 <printMenuScreen.5+0xe0>)
 8001aae:	781a      	ldrb	r2, [r3, #0]
 8001ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b28 <printMenuScreen.5+0xe4>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	bf14      	ite	ne
 8001ab8:	2301      	movne	r3, #1
 8001aba:	2300      	moveq	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b30 <printMenuScreen.5+0xec>)
 8001ac2:	9200      	str	r2, [sp, #0]
 8001ac4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ac6:	481b      	ldr	r0, [pc, #108]	@ (8001b34 <printMenuScreen.5+0xf0>)
 8001ac8:	f000 fd52 	bl	8002570 <ssd1306_WriteString>
  	  ssd1306_SetCursor(0, 25);
 8001acc:	2119      	movs	r1, #25
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f000 fd74 	bl	80025bc <ssd1306_SetCursor>
  	  ssd1306_FillRectangle(0, 25, 128, 20, activeMenuOption == menuSetDate ? White : Black);
 8001ad4:	4b13      	ldr	r3, [pc, #76]	@ (8001b24 <printMenuScreen.5+0xe0>)
 8001ad6:	781a      	ldrb	r2, [r3, #0]
 8001ad8:	4b14      	ldr	r3, [pc, #80]	@ (8001b2c <printMenuScreen.5+0xe8>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	bf0c      	ite	eq
 8001ae0:	2301      	moveq	r3, #1
 8001ae2:	2300      	movne	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	2314      	movs	r3, #20
 8001aea:	2280      	movs	r2, #128	@ 0x80
 8001aec:	2119      	movs	r1, #25
 8001aee:	2000      	movs	r0, #0
 8001af0:	f000 fd7c 	bl	80025ec <ssd1306_FillRectangle>
  	  ssd1306_WriteString("Set Date", Font_11x18, activeMenuOption == menuSetDate ? Black : White);
 8001af4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b24 <printMenuScreen.5+0xe0>)
 8001af6:	781a      	ldrb	r2, [r3, #0]
 8001af8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <printMenuScreen.5+0xe8>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	bf14      	ite	ne
 8001b00:	2301      	movne	r3, #1
 8001b02:	2300      	moveq	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	461a      	mov	r2, r3
 8001b08:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <printMenuScreen.5+0xec>)
 8001b0a:	9200      	str	r2, [sp, #0]
 8001b0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b0e:	480a      	ldr	r0, [pc, #40]	@ (8001b38 <printMenuScreen.5+0xf4>)
 8001b10:	f000 fd2e 	bl	8002570 <ssd1306_WriteString>
  }
 8001b14:	bf00      	nop
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	200002e8 	.word	0x200002e8
 8001b20:	20000344 	.word	0x20000344
 8001b24:	20000341 	.word	0x20000341
 8001b28:	20000342 	.word	0x20000342
 8001b2c:	20000003 	.word	0x20000003
 8001b30:	0800d524 	.word	0x0800d524
 8001b34:	0800a6f0 	.word	0x0800a6f0
 8001b38:	0800a6fc 	.word	0x0800a6fc

08001b3c <checkAlarm.6>:
  {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	f8c7 c004 	str.w	ip, [r7, #4]
	  if (isAlarm == 1)
 8001b46:	4b0f      	ldr	r3, [pc, #60]	@ (8001b84 <checkAlarm.6+0x48>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d111      	bne.n	8001b72 <checkAlarm.6+0x36>
		 alarmIterations++;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b88 <checkAlarm.6+0x4c>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	3301      	adds	r3, #1
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4b0c      	ldr	r3, [pc, #48]	@ (8001b88 <checkAlarm.6+0x4c>)
 8001b58:	701a      	strb	r2, [r3, #0]
		 if ((alarmIterations % 2) == 0)
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b88 <checkAlarm.6+0x4c>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d109      	bne.n	8001b7c <checkAlarm.6+0x40>
  			 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8001b68:	2102      	movs	r1, #2
 8001b6a:	4808      	ldr	r0, [pc, #32]	@ (8001b8c <checkAlarm.6+0x50>)
 8001b6c:	f001 fb56 	bl	800321c <HAL_GPIO_TogglePin>
  }
 8001b70:	e004      	b.n	8001b7c <checkAlarm.6+0x40>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2102      	movs	r1, #2
 8001b76:	4805      	ldr	r0, [pc, #20]	@ (8001b8c <checkAlarm.6+0x50>)
 8001b78:	f001 fb38 	bl	80031ec <HAL_GPIO_WritePin>
  }
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	2000033d 	.word	0x2000033d
 8001b88:	20000345 	.word	0x20000345
 8001b8c:	40010800 	.word	0x40010800

08001b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b094      	sub	sp, #80	@ 0x50
 8001b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b9a:	2228      	movs	r2, #40	@ 0x28
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f005 f9cd 	bl	8006f3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001bc0:	2305      	movs	r3, #5
 8001bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bc4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bde:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001be0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001be4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fbae 	bl	800434c <HAL_RCC_OscConfig>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001bf6:	f000 faf1 	bl	80021dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bfa:	230f      	movs	r3, #15
 8001bfc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c0a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	2102      	movs	r1, #2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f002 fe1a 	bl	8004850 <HAL_RCC_ClockConfig>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001c22:	f000 fadb 	bl	80021dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c26:	2301      	movs	r3, #1
 8001c28:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c2e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	4618      	mov	r0, r3
 8001c34:	f002 ff9a 	bl	8004b6c <HAL_RCCEx_PeriphCLKConfig>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001c3e:	f000 facd 	bl	80021dc <Error_Handler>
  }
}
 8001c42:	bf00      	nop
 8001c44:	3750      	adds	r7, #80	@ 0x50
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c50:	4b12      	ldr	r3, [pc, #72]	@ (8001c9c <MX_I2C1_Init+0x50>)
 8001c52:	4a13      	ldr	r2, [pc, #76]	@ (8001ca0 <MX_I2C1_Init+0x54>)
 8001c54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001c56:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <MX_I2C1_Init+0x50>)
 8001c58:	4a12      	ldr	r2, [pc, #72]	@ (8001ca4 <MX_I2C1_Init+0x58>)
 8001c5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c9c <MX_I2C1_Init+0x50>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c62:	4b0e      	ldr	r3, [pc, #56]	@ (8001c9c <MX_I2C1_Init+0x50>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c68:	4b0c      	ldr	r3, [pc, #48]	@ (8001c9c <MX_I2C1_Init+0x50>)
 8001c6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c70:	4b0a      	ldr	r3, [pc, #40]	@ (8001c9c <MX_I2C1_Init+0x50>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c76:	4b09      	ldr	r3, [pc, #36]	@ (8001c9c <MX_I2C1_Init+0x50>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c7c:	4b07      	ldr	r3, [pc, #28]	@ (8001c9c <MX_I2C1_Init+0x50>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c82:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <MX_I2C1_Init+0x50>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c88:	4804      	ldr	r0, [pc, #16]	@ (8001c9c <MX_I2C1_Init+0x50>)
 8001c8a:	f001 faf9 	bl	8003280 <HAL_I2C_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c94:	f000 faa2 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	2000022c 	.word	0x2000022c
 8001ca0:	40005400 	.word	0x40005400
 8001ca4:	00061a80 	.word	0x00061a80

08001ca8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001cac:	4b12      	ldr	r3, [pc, #72]	@ (8001cf8 <MX_I2C2_Init+0x50>)
 8001cae:	4a13      	ldr	r2, [pc, #76]	@ (8001cfc <MX_I2C2_Init+0x54>)
 8001cb0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001cb2:	4b11      	ldr	r3, [pc, #68]	@ (8001cf8 <MX_I2C2_Init+0x50>)
 8001cb4:	4a12      	ldr	r2, [pc, #72]	@ (8001d00 <MX_I2C2_Init+0x58>)
 8001cb6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf8 <MX_I2C2_Init+0x50>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf8 <MX_I2C2_Init+0x50>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf8 <MX_I2C2_Init+0x50>)
 8001cc6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf8 <MX_I2C2_Init+0x50>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001cd2:	4b09      	ldr	r3, [pc, #36]	@ (8001cf8 <MX_I2C2_Init+0x50>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cd8:	4b07      	ldr	r3, [pc, #28]	@ (8001cf8 <MX_I2C2_Init+0x50>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cde:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <MX_I2C2_Init+0x50>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ce4:	4804      	ldr	r0, [pc, #16]	@ (8001cf8 <MX_I2C2_Init+0x50>)
 8001ce6:	f001 facb 	bl	8003280 <HAL_I2C_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001cf0:	f000 fa74 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000280 	.word	0x20000280
 8001cfc:	40005800 	.word	0x40005800
 8001d00:	00061a80 	.word	0x00061a80

08001d04 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d08:	4b29      	ldr	r3, [pc, #164]	@ (8001db0 <MX_RTC_Init+0xac>)
 8001d0a:	4a2a      	ldr	r2, [pc, #168]	@ (8001db4 <MX_RTC_Init+0xb0>)
 8001d0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001d0e:	4b28      	ldr	r3, [pc, #160]	@ (8001db0 <MX_RTC_Init+0xac>)
 8001d10:	f04f 32ff 	mov.w	r2, #4294967295
 8001d14:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001d16:	4b26      	ldr	r3, [pc, #152]	@ (8001db0 <MX_RTC_Init+0xac>)
 8001d18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d1c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d1e:	4824      	ldr	r0, [pc, #144]	@ (8001db0 <MX_RTC_Init+0xac>)
 8001d20:	f003 f890 	bl	8004e44 <HAL_RTC_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8001d2a:	f000 fa57 	bl	80021dc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001d2e:	4b22      	ldr	r3, [pc, #136]	@ (8001db8 <MX_RTC_Init+0xb4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8001d34:	4b20      	ldr	r3, [pc, #128]	@ (8001db8 <MX_RTC_Init+0xb4>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8001d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001db8 <MX_RTC_Init+0xb4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	709a      	strb	r2, [r3, #2]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d40:	2201      	movs	r2, #1
 8001d42:	491d      	ldr	r1, [pc, #116]	@ (8001db8 <MX_RTC_Init+0xb4>)
 8001d44:	481a      	ldr	r0, [pc, #104]	@ (8001db0 <MX_RTC_Init+0xac>)
 8001d46:	f003 f909 	bl	8004f5c <HAL_RTC_SetTime>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_RTC_Init+0x50>
  {
    Error_Handler();
 8001d50:	f000 fa44 	bl	80021dc <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d54:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <MX_RTC_Init+0xb8>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	701a      	strb	r2, [r3, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001d5a:	4b18      	ldr	r3, [pc, #96]	@ (8001dbc <MX_RTC_Init+0xb8>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	705a      	strb	r2, [r3, #1]
  DateToUpdate.Date = 0x1;
 8001d60:	4b16      	ldr	r3, [pc, #88]	@ (8001dbc <MX_RTC_Init+0xb8>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	709a      	strb	r2, [r3, #2]
  DateToUpdate.Year = 0x0;
 8001d66:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <MX_RTC_Init+0xb8>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4913      	ldr	r1, [pc, #76]	@ (8001dbc <MX_RTC_Init+0xb8>)
 8001d70:	480f      	ldr	r0, [pc, #60]	@ (8001db0 <MX_RTC_Init+0xac>)
 8001d72:	f003 fa63 	bl	800523c <HAL_RTC_SetDate>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001d7c:	f000 fa2e 	bl	80021dc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001d80:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc0 <MX_RTC_Init+0xbc>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001d86:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc0 <MX_RTC_Init+0xbc>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc0 <MX_RTC_Init+0xbc>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	709a      	strb	r2, [r3, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d92:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc0 <MX_RTC_Init+0xbc>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	605a      	str	r2, [r3, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4909      	ldr	r1, [pc, #36]	@ (8001dc0 <MX_RTC_Init+0xbc>)
 8001d9c:	4804      	ldr	r0, [pc, #16]	@ (8001db0 <MX_RTC_Init+0xac>)
 8001d9e:	f003 fb57 	bl	8005450 <HAL_RTC_SetAlarm_IT>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001da8:	f000 fa18 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	200002d4 	.word	0x200002d4
 8001db4:	40002800 	.word	0x40002800
 8001db8:	20000348 	.word	0x20000348
 8001dbc:	2000034c 	.word	0x2000034c
 8001dc0:	20000350 	.word	0x20000350

08001dc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08c      	sub	sp, #48	@ 0x30
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dca:	f107 030c 	add.w	r3, r7, #12
 8001dce:	2224      	movs	r2, #36	@ 0x24
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f005 f8b3 	bl	8006f3e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd8:	1d3b      	adds	r3, r7, #4
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001de0:	4b20      	ldr	r3, [pc, #128]	@ (8001e64 <MX_TIM2_Init+0xa0>)
 8001de2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001de6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001de8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e64 <MX_TIM2_Init+0xa0>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dee:	4b1d      	ldr	r3, [pc, #116]	@ (8001e64 <MX_TIM2_Init+0xa0>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59;
 8001df4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <MX_TIM2_Init+0xa0>)
 8001df6:	223b      	movs	r2, #59	@ 0x3b
 8001df8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8001e64 <MX_TIM2_Init+0xa0>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e00:	4b18      	ldr	r3, [pc, #96]	@ (8001e64 <MX_TIM2_Init+0xa0>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e06:	2301      	movs	r3, #1
 8001e08:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e22:	2300      	movs	r3, #0
 8001e24:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001e2a:	f107 030c 	add.w	r3, r7, #12
 8001e2e:	4619      	mov	r1, r3
 8001e30:	480c      	ldr	r0, [pc, #48]	@ (8001e64 <MX_TIM2_Init+0xa0>)
 8001e32:	f003 fe91 	bl	8005b58 <HAL_TIM_Encoder_Init>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001e3c:	f000 f9ce 	bl	80021dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e40:	2300      	movs	r3, #0
 8001e42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4805      	ldr	r0, [pc, #20]	@ (8001e64 <MX_TIM2_Init+0xa0>)
 8001e4e:	f004 f839 	bl	8005ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001e58:	f000 f9c0 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e5c:	bf00      	nop
 8001e5e:	3730      	adds	r7, #48	@ 0x30
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	200002e8 	.word	0x200002e8

08001e68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6e:	f107 0310 	add.w	r3, r7, #16
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	609a      	str	r2, [r3, #8]
 8001e7a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7c:	4b37      	ldr	r3, [pc, #220]	@ (8001f5c <MX_GPIO_Init+0xf4>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	4a36      	ldr	r2, [pc, #216]	@ (8001f5c <MX_GPIO_Init+0xf4>)
 8001e82:	f043 0310 	orr.w	r3, r3, #16
 8001e86:	6193      	str	r3, [r2, #24]
 8001e88:	4b34      	ldr	r3, [pc, #208]	@ (8001f5c <MX_GPIO_Init+0xf4>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e94:	4b31      	ldr	r3, [pc, #196]	@ (8001f5c <MX_GPIO_Init+0xf4>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	4a30      	ldr	r2, [pc, #192]	@ (8001f5c <MX_GPIO_Init+0xf4>)
 8001e9a:	f043 0320 	orr.w	r3, r3, #32
 8001e9e:	6193      	str	r3, [r2, #24]
 8001ea0:	4b2e      	ldr	r3, [pc, #184]	@ (8001f5c <MX_GPIO_Init+0xf4>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f003 0320 	and.w	r3, r3, #32
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eac:	4b2b      	ldr	r3, [pc, #172]	@ (8001f5c <MX_GPIO_Init+0xf4>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8001f5c <MX_GPIO_Init+0xf4>)
 8001eb2:	f043 0304 	orr.w	r3, r3, #4
 8001eb6:	6193      	str	r3, [r2, #24]
 8001eb8:	4b28      	ldr	r3, [pc, #160]	@ (8001f5c <MX_GPIO_Init+0xf4>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec4:	4b25      	ldr	r3, [pc, #148]	@ (8001f5c <MX_GPIO_Init+0xf4>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a24      	ldr	r2, [pc, #144]	@ (8001f5c <MX_GPIO_Init+0xf4>)
 8001eca:	f043 0308 	orr.w	r3, r3, #8
 8001ece:	6193      	str	r3, [r2, #24]
 8001ed0:	4b22      	ldr	r3, [pc, #136]	@ (8001f5c <MX_GPIO_Init+0xf4>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	603b      	str	r3, [r7, #0]
 8001eda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Alarm_Led_GPIO_Port, Alarm_Led_Pin, GPIO_PIN_RESET);
 8001edc:	2200      	movs	r2, #0
 8001ede:	2102      	movs	r1, #2
 8001ee0:	481f      	ldr	r0, [pc, #124]	@ (8001f60 <MX_GPIO_Init+0xf8>)
 8001ee2:	f001 f983 	bl	80031ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Alarm_Led_Pin */
  GPIO_InitStruct.Pin = Alarm_Led_Pin;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eea:	2301      	movs	r3, #1
 8001eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Alarm_Led_GPIO_Port, &GPIO_InitStruct);
 8001ef6:	f107 0310 	add.w	r3, r7, #16
 8001efa:	4619      	mov	r1, r3
 8001efc:	4818      	ldr	r0, [pc, #96]	@ (8001f60 <MX_GPIO_Init+0xf8>)
 8001efe:	f000 fff1 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f02:	2308      	movs	r3, #8
 8001f04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f06:	4b17      	ldr	r3, [pc, #92]	@ (8001f64 <MX_GPIO_Init+0xfc>)
 8001f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0e:	f107 0310 	add.w	r3, r7, #16
 8001f12:	4619      	mov	r1, r3
 8001f14:	4812      	ldr	r0, [pc, #72]	@ (8001f60 <MX_GPIO_Init+0xf8>)
 8001f16:	f000 ffe5 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f1e:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <MX_GPIO_Init+0xfc>)
 8001f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f26:	f107 0310 	add.w	r3, r7, #16
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	480e      	ldr	r0, [pc, #56]	@ (8001f68 <MX_GPIO_Init+0x100>)
 8001f2e:	f000 ffd9 	bl	8002ee4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2100      	movs	r1, #0
 8001f36:	2007      	movs	r0, #7
 8001f38:	f000 ff9d 	bl	8002e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001f3c:	2007      	movs	r0, #7
 8001f3e:	f000 ffb6 	bl	8002eae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2100      	movs	r1, #0
 8001f46:	2009      	movs	r0, #9
 8001f48:	f000 ff95 	bl	8002e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001f4c:	2009      	movs	r0, #9
 8001f4e:	f000 ffae 	bl	8002eae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f52:	bf00      	nop
 8001f54:	3720      	adds	r7, #32
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40010800 	.word	0x40010800
 8001f64:	10110000 	.word	0x10110000
 8001f68:	40010c00 	.word	0x40010c00

08001f6c <Set_RTC_Alarm>:

/* USER CODE BEGIN 4 */

void Set_RTC_Alarm(uint32_t seconds)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
    // Get the current time and date
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001f74:	2200      	movs	r2, #0
 8001f76:	492e      	ldr	r1, [pc, #184]	@ (8002030 <Set_RTC_Alarm+0xc4>)
 8001f78:	482e      	ldr	r0, [pc, #184]	@ (8002034 <Set_RTC_Alarm+0xc8>)
 8001f7a:	f003 f887 	bl	800508c <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // Needed to read date as well due to a quirk
 8001f7e:	2200      	movs	r2, #0
 8001f80:	492d      	ldr	r1, [pc, #180]	@ (8002038 <Set_RTC_Alarm+0xcc>)
 8001f82:	482c      	ldr	r0, [pc, #176]	@ (8002034 <Set_RTC_Alarm+0xc8>)
 8001f84:	f003 fa10 	bl	80053a8 <HAL_RTC_GetDate>

    // Calculate the new alarm time
    uint32_t total_seconds = sTime.Seconds + seconds;
 8001f88:	4b29      	ldr	r3, [pc, #164]	@ (8002030 <Set_RTC_Alarm+0xc4>)
 8001f8a:	789b      	ldrb	r3, [r3, #2]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	61fb      	str	r3, [r7, #28]
    uint32_t new_seconds = total_seconds % 60;
 8001f94:	69fa      	ldr	r2, [r7, #28]
 8001f96:	4b29      	ldr	r3, [pc, #164]	@ (800203c <Set_RTC_Alarm+0xd0>)
 8001f98:	fba3 1302 	umull	r1, r3, r3, r2
 8001f9c:	0959      	lsrs	r1, r3, #5
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	1a5b      	subs	r3, r3, r1
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	61bb      	str	r3, [r7, #24]
    uint32_t minutes = sTime.Minutes + (total_seconds / 60);
 8001faa:	4b21      	ldr	r3, [pc, #132]	@ (8002030 <Set_RTC_Alarm+0xc4>)
 8001fac:	785b      	ldrb	r3, [r3, #1]
 8001fae:	4619      	mov	r1, r3
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	4a22      	ldr	r2, [pc, #136]	@ (800203c <Set_RTC_Alarm+0xd0>)
 8001fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb8:	095b      	lsrs	r3, r3, #5
 8001fba:	440b      	add	r3, r1
 8001fbc:	617b      	str	r3, [r7, #20]
    uint32_t new_minutes = minutes % 60;
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	4b1e      	ldr	r3, [pc, #120]	@ (800203c <Set_RTC_Alarm+0xd0>)
 8001fc2:	fba3 1302 	umull	r1, r3, r3, r2
 8001fc6:	0959      	lsrs	r1, r3, #5
 8001fc8:	460b      	mov	r3, r1
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	1a5b      	subs	r3, r3, r1
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	613b      	str	r3, [r7, #16]
    uint32_t new_hours = (sTime.Hours + (minutes / 60)) % 24;
 8001fd4:	4b16      	ldr	r3, [pc, #88]	@ (8002030 <Set_RTC_Alarm+0xc4>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	4a17      	ldr	r2, [pc, #92]	@ (800203c <Set_RTC_Alarm+0xd0>)
 8001fde:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	18ca      	adds	r2, r1, r3
 8001fe6:	4b16      	ldr	r3, [pc, #88]	@ (8002040 <Set_RTC_Alarm+0xd4>)
 8001fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8001fec:	0919      	lsrs	r1, r3, #4
 8001fee:	460b      	mov	r3, r1
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	440b      	add	r3, r1
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	60fb      	str	r3, [r7, #12]

    sAlarm.AlarmTime.Hours = new_hours;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4b11      	ldr	r3, [pc, #68]	@ (8002044 <Set_RTC_Alarm+0xd8>)
 8002000:	701a      	strb	r2, [r3, #0]
    sAlarm.AlarmTime.Minutes = new_minutes;
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	b2da      	uxtb	r2, r3
 8002006:	4b0f      	ldr	r3, [pc, #60]	@ (8002044 <Set_RTC_Alarm+0xd8>)
 8002008:	705a      	strb	r2, [r3, #1]
    sAlarm.AlarmTime.Seconds = new_seconds;
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	b2da      	uxtb	r2, r3
 800200e:	4b0d      	ldr	r3, [pc, #52]	@ (8002044 <Set_RTC_Alarm+0xd8>)
 8002010:	709a      	strb	r2, [r3, #2]
    // Set the alarm
    if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002012:	2200      	movs	r2, #0
 8002014:	490b      	ldr	r1, [pc, #44]	@ (8002044 <Set_RTC_Alarm+0xd8>)
 8002016:	4807      	ldr	r0, [pc, #28]	@ (8002034 <Set_RTC_Alarm+0xc8>)
 8002018:	f003 fa1a 	bl	8005450 <HAL_RTC_SetAlarm_IT>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <Set_RTC_Alarm+0xba>
    {
        // Initialization Error
        Error_Handler();
 8002022:	f000 f8db 	bl	80021dc <Error_Handler>
    }
}
 8002026:	bf00      	nop
 8002028:	3720      	adds	r7, #32
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000348 	.word	0x20000348
 8002034:	200002d4 	.word	0x200002d4
 8002038:	20000358 	.word	0x20000358
 800203c:	88888889 	.word	0x88888889
 8002040:	aaaaaaab 	.word	0xaaaaaaab
 8002044:	20000350 	.word	0x20000350

08002048 <Clear_RTC_Alarm>:

void Clear_RTC_Alarm()
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800204c:	2200      	movs	r2, #0
 800204e:	490c      	ldr	r1, [pc, #48]	@ (8002080 <Clear_RTC_Alarm+0x38>)
 8002050:	480c      	ldr	r0, [pc, #48]	@ (8002084 <Clear_RTC_Alarm+0x3c>)
 8002052:	f003 f81b 	bl	800508c <HAL_RTC_GetTime>

	sAlarm.AlarmTime.Hours = sTime.Hours;
 8002056:	4b0a      	ldr	r3, [pc, #40]	@ (8002080 <Clear_RTC_Alarm+0x38>)
 8002058:	781a      	ldrb	r2, [r3, #0]
 800205a:	4b0b      	ldr	r3, [pc, #44]	@ (8002088 <Clear_RTC_Alarm+0x40>)
 800205c:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmTime.Minutes = sTime.Minutes;
 800205e:	4b08      	ldr	r3, [pc, #32]	@ (8002080 <Clear_RTC_Alarm+0x38>)
 8002060:	785a      	ldrb	r2, [r3, #1]
 8002062:	4b09      	ldr	r3, [pc, #36]	@ (8002088 <Clear_RTC_Alarm+0x40>)
 8002064:	705a      	strb	r2, [r3, #1]
	sAlarm.AlarmTime.Seconds = sTime.Seconds;
 8002066:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <Clear_RTC_Alarm+0x38>)
 8002068:	789a      	ldrb	r2, [r3, #2]
 800206a:	4b07      	ldr	r3, [pc, #28]	@ (8002088 <Clear_RTC_Alarm+0x40>)
 800206c:	709a      	strb	r2, [r3, #2]

	isAlarm = 0;
 800206e:	4b07      	ldr	r3, [pc, #28]	@ (800208c <Clear_RTC_Alarm+0x44>)
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
	alarmIsSet = 0;
 8002074:	4b06      	ldr	r3, [pc, #24]	@ (8002090 <Clear_RTC_Alarm+0x48>)
 8002076:	2200      	movs	r2, #0
 8002078:	701a      	strb	r2, [r3, #0]
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000348 	.word	0x20000348
 8002084:	200002d4 	.word	0x200002d4
 8002088:	20000350 	.word	0x20000350
 800208c:	2000033d 	.word	0x2000033d
 8002090:	2000033e 	.word	0x2000033e

08002094 <HAL_GPIO_EXTI_Callback>:

volatile uint32_t lastInterruptTime1 = 0;
volatile uint32_t lastInterruptTime3 = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	80fb      	strh	r3, [r7, #6]

	if (isAlarm == 1) {
 800209e:	4b39      	ldr	r3, [pc, #228]	@ (8002184 <HAL_GPIO_EXTI_Callback+0xf0>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d102      	bne.n	80020ac <HAL_GPIO_EXTI_Callback+0x18>
		Clear_RTC_Alarm();
 80020a6:	f7ff ffcf 	bl	8002048 <Clear_RTC_Alarm>

				lastInterruptTime1 = currentTime;
			}
		}
	}
}
 80020aa:	e067      	b.n	800217c <HAL_GPIO_EXTI_Callback+0xe8>
		uint32_t currentTime = HAL_GetTick();
 80020ac:	f000 fdde 	bl	8002c6c <HAL_GetTick>
 80020b0:	60f8      	str	r0, [r7, #12]
		if (GPIO_Pin == GPIO_PIN_3)
 80020b2:	88fb      	ldrh	r3, [r7, #6]
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d134      	bne.n	8002122 <HAL_GPIO_EXTI_Callback+0x8e>
			if (currentTime - lastInterruptTime3 > 300)
 80020b8:	4b33      	ldr	r3, [pc, #204]	@ (8002188 <HAL_GPIO_EXTI_Callback+0xf4>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80020c4:	d92d      	bls.n	8002122 <HAL_GPIO_EXTI_Callback+0x8e>
				if (activeScreen == screenTimer)
 80020c6:	4b31      	ldr	r3, [pc, #196]	@ (800218c <HAL_GPIO_EXTI_Callback+0xf8>)
 80020c8:	781a      	ldrb	r2, [r3, #0]
 80020ca:	4b31      	ldr	r3, [pc, #196]	@ (8002190 <HAL_GPIO_EXTI_Callback+0xfc>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d115      	bne.n	80020fe <HAL_GPIO_EXTI_Callback+0x6a>
					uint8_t rawCounter = __HAL_TIM_GET_COUNTER(&htim2);
 80020d2:	4b30      	ldr	r3, [pc, #192]	@ (8002194 <HAL_GPIO_EXTI_Callback+0x100>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d8:	72fb      	strb	r3, [r7, #11]
					if (rawCounter != 0) {
 80020da:	7afb      	ldrb	r3, [r7, #11]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d01d      	beq.n	800211c <HAL_GPIO_EXTI_Callback+0x88>
						if (alarmIsSet == 1) {
 80020e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002198 <HAL_GPIO_EXTI_Callback+0x104>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d102      	bne.n	80020ee <HAL_GPIO_EXTI_Callback+0x5a>
							Clear_RTC_Alarm();
 80020e8:	f7ff ffae 	bl	8002048 <Clear_RTC_Alarm>
 80020ec:	e016      	b.n	800211c <HAL_GPIO_EXTI_Callback+0x88>
							Set_RTC_Alarm(rawCounter);
 80020ee:	7afb      	ldrb	r3, [r7, #11]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff3b 	bl	8001f6c <Set_RTC_Alarm>
							alarmIsSet = 1;
 80020f6:	4b28      	ldr	r3, [pc, #160]	@ (8002198 <HAL_GPIO_EXTI_Callback+0x104>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
 80020fc:	e00e      	b.n	800211c <HAL_GPIO_EXTI_Callback+0x88>
					if (activeScreen != screenMenu) {
 80020fe:	4b23      	ldr	r3, [pc, #140]	@ (800218c <HAL_GPIO_EXTI_Callback+0xf8>)
 8002100:	781a      	ldrb	r2, [r3, #0]
 8002102:	4b26      	ldr	r3, [pc, #152]	@ (800219c <HAL_GPIO_EXTI_Callback+0x108>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d004      	beq.n	8002114 <HAL_GPIO_EXTI_Callback+0x80>
						activeScreen = screenMenu;
 800210a:	4b24      	ldr	r3, [pc, #144]	@ (800219c <HAL_GPIO_EXTI_Callback+0x108>)
 800210c:	781a      	ldrb	r2, [r3, #0]
 800210e:	4b1f      	ldr	r3, [pc, #124]	@ (800218c <HAL_GPIO_EXTI_Callback+0xf8>)
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	e003      	b.n	800211c <HAL_GPIO_EXTI_Callback+0x88>
						activeScreen = screenTime;
 8002114:	4b22      	ldr	r3, [pc, #136]	@ (80021a0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8002116:	781a      	ldrb	r2, [r3, #0]
 8002118:	4b1c      	ldr	r3, [pc, #112]	@ (800218c <HAL_GPIO_EXTI_Callback+0xf8>)
 800211a:	701a      	strb	r2, [r3, #0]
				lastInterruptTime3 = currentTime;
 800211c:	4a1a      	ldr	r2, [pc, #104]	@ (8002188 <HAL_GPIO_EXTI_Callback+0xf4>)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6013      	str	r3, [r2, #0]
		if (GPIO_Pin == GPIO_PIN_1)
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d129      	bne.n	800217c <HAL_GPIO_EXTI_Callback+0xe8>
			if (currentTime - lastInterruptTime1 > 300)
 8002128:	4b1e      	ldr	r3, [pc, #120]	@ (80021a4 <HAL_GPIO_EXTI_Callback+0x110>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002134:	d922      	bls.n	800217c <HAL_GPIO_EXTI_Callback+0xe8>
				if (activeScreen == screenTimer)
 8002136:	4b15      	ldr	r3, [pc, #84]	@ (800218c <HAL_GPIO_EXTI_Callback+0xf8>)
 8002138:	781a      	ldrb	r2, [r3, #0]
 800213a:	4b15      	ldr	r3, [pc, #84]	@ (8002190 <HAL_GPIO_EXTI_Callback+0xfc>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d104      	bne.n	800214c <HAL_GPIO_EXTI_Callback+0xb8>
					activeScreen = screenTime;
 8002142:	4b17      	ldr	r3, [pc, #92]	@ (80021a0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8002144:	781a      	ldrb	r2, [r3, #0]
 8002146:	4b11      	ldr	r3, [pc, #68]	@ (800218c <HAL_GPIO_EXTI_Callback+0xf8>)
 8002148:	701a      	strb	r2, [r3, #0]
 800214a:	e014      	b.n	8002176 <HAL_GPIO_EXTI_Callback+0xe2>
				} else if (activeScreen == screenWeather)
 800214c:	4b0f      	ldr	r3, [pc, #60]	@ (800218c <HAL_GPIO_EXTI_Callback+0xf8>)
 800214e:	781a      	ldrb	r2, [r3, #0]
 8002150:	4b15      	ldr	r3, [pc, #84]	@ (80021a8 <HAL_GPIO_EXTI_Callback+0x114>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d104      	bne.n	8002162 <HAL_GPIO_EXTI_Callback+0xce>
					activeScreen = screenTimer;
 8002158:	4b0d      	ldr	r3, [pc, #52]	@ (8002190 <HAL_GPIO_EXTI_Callback+0xfc>)
 800215a:	781a      	ldrb	r2, [r3, #0]
 800215c:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <HAL_GPIO_EXTI_Callback+0xf8>)
 800215e:	701a      	strb	r2, [r3, #0]
 8002160:	e009      	b.n	8002176 <HAL_GPIO_EXTI_Callback+0xe2>
				} else if (activeScreen == screenTime)
 8002162:	4b0a      	ldr	r3, [pc, #40]	@ (800218c <HAL_GPIO_EXTI_Callback+0xf8>)
 8002164:	781a      	ldrb	r2, [r3, #0]
 8002166:	4b0e      	ldr	r3, [pc, #56]	@ (80021a0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d103      	bne.n	8002176 <HAL_GPIO_EXTI_Callback+0xe2>
					activeScreen = screenWeather;
 800216e:	4b0e      	ldr	r3, [pc, #56]	@ (80021a8 <HAL_GPIO_EXTI_Callback+0x114>)
 8002170:	781a      	ldrb	r2, [r3, #0]
 8002172:	4b06      	ldr	r3, [pc, #24]	@ (800218c <HAL_GPIO_EXTI_Callback+0xf8>)
 8002174:	701a      	strb	r2, [r3, #0]
				lastInterruptTime1 = currentTime;
 8002176:	4a0b      	ldr	r2, [pc, #44]	@ (80021a4 <HAL_GPIO_EXTI_Callback+0x110>)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6013      	str	r3, [r2, #0]
}
 800217c:	bf00      	nop
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	2000033d 	.word	0x2000033d
 8002188:	20000360 	.word	0x20000360
 800218c:	2000033f 	.word	0x2000033f
 8002190:	20000001 	.word	0x20000001
 8002194:	200002e8 	.word	0x200002e8
 8002198:	2000033e 	.word	0x2000033e
 800219c:	20000002 	.word	0x20000002
 80021a0:	20000340 	.word	0x20000340
 80021a4:	2000035c 	.word	0x2000035c
 80021a8:	20000000 	.word	0x20000000

080021ac <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	if (alarmIsSet == 1) {
 80021b4:	4b07      	ldr	r3, [pc, #28]	@ (80021d4 <HAL_RTC_AlarmAEventCallback+0x28>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d105      	bne.n	80021c8 <HAL_RTC_AlarmAEventCallback+0x1c>
		isAlarm = 1;
 80021bc:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <HAL_RTC_AlarmAEventCallback+0x2c>)
 80021be:	2201      	movs	r2, #1
 80021c0:	701a      	strb	r2, [r3, #0]
		alarmIsSet = 0;
 80021c2:	4b04      	ldr	r3, [pc, #16]	@ (80021d4 <HAL_RTC_AlarmAEventCallback+0x28>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
	}
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	2000033e 	.word	0x2000033e
 80021d8:	2000033d 	.word	0x2000033d

080021dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021e0:	b672      	cpsid	i
}
 80021e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021e4:	bf00      	nop
 80021e6:	e7fd      	b.n	80021e4 <Error_Handler+0x8>

080021e8 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af04      	add	r7, sp, #16
 80021fa:	4603      	mov	r3, r0
 80021fc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002202:	9302      	str	r3, [sp, #8]
 8002204:	2301      	movs	r3, #1
 8002206:	9301      	str	r3, [sp, #4]
 8002208:	1dfb      	adds	r3, r7, #7
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2301      	movs	r3, #1
 800220e:	2200      	movs	r2, #0
 8002210:	2178      	movs	r1, #120	@ 0x78
 8002212:	4803      	ldr	r0, [pc, #12]	@ (8002220 <ssd1306_WriteCommand+0x2c>)
 8002214:	f001 f978 	bl	8003508 <HAL_I2C_Mem_Write>
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	2000022c 	.word	0x2000022c

08002224 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af04      	add	r7, sp, #16
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	b29b      	uxth	r3, r3
 8002232:	f04f 32ff 	mov.w	r2, #4294967295
 8002236:	9202      	str	r2, [sp, #8]
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2301      	movs	r3, #1
 8002240:	2240      	movs	r2, #64	@ 0x40
 8002242:	2178      	movs	r1, #120	@ 0x78
 8002244:	4803      	ldr	r0, [pc, #12]	@ (8002254 <ssd1306_WriteData+0x30>)
 8002246:	f001 f95f 	bl	8003508 <HAL_I2C_Mem_Write>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	2000022c 	.word	0x2000022c

08002258 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800225c:	f7ff ffc4 	bl	80021e8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002260:	2064      	movs	r0, #100	@ 0x64
 8002262:	f000 fd0d 	bl	8002c80 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002266:	2000      	movs	r0, #0
 8002268:	f000 fa22 	bl	80026b0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800226c:	2020      	movs	r0, #32
 800226e:	f7ff ffc1 	bl	80021f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002272:	2000      	movs	r0, #0
 8002274:	f7ff ffbe 	bl	80021f4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002278:	20b0      	movs	r0, #176	@ 0xb0
 800227a:	f7ff ffbb 	bl	80021f4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800227e:	20c8      	movs	r0, #200	@ 0xc8
 8002280:	f7ff ffb8 	bl	80021f4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002284:	2000      	movs	r0, #0
 8002286:	f7ff ffb5 	bl	80021f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800228a:	2010      	movs	r0, #16
 800228c:	f7ff ffb2 	bl	80021f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002290:	2040      	movs	r0, #64	@ 0x40
 8002292:	f7ff ffaf 	bl	80021f4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002296:	20ff      	movs	r0, #255	@ 0xff
 8002298:	f000 f9f6 	bl	8002688 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800229c:	20a1      	movs	r0, #161	@ 0xa1
 800229e:	f7ff ffa9 	bl	80021f4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80022a2:	20a6      	movs	r0, #166	@ 0xa6
 80022a4:	f7ff ffa6 	bl	80021f4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80022a8:	20a8      	movs	r0, #168	@ 0xa8
 80022aa:	f7ff ffa3 	bl	80021f4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80022ae:	203f      	movs	r0, #63	@ 0x3f
 80022b0:	f7ff ffa0 	bl	80021f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80022b4:	20a4      	movs	r0, #164	@ 0xa4
 80022b6:	f7ff ff9d 	bl	80021f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80022ba:	20d3      	movs	r0, #211	@ 0xd3
 80022bc:	f7ff ff9a 	bl	80021f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80022c0:	2000      	movs	r0, #0
 80022c2:	f7ff ff97 	bl	80021f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80022c6:	20d5      	movs	r0, #213	@ 0xd5
 80022c8:	f7ff ff94 	bl	80021f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80022cc:	20f0      	movs	r0, #240	@ 0xf0
 80022ce:	f7ff ff91 	bl	80021f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80022d2:	20d9      	movs	r0, #217	@ 0xd9
 80022d4:	f7ff ff8e 	bl	80021f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80022d8:	2022      	movs	r0, #34	@ 0x22
 80022da:	f7ff ff8b 	bl	80021f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80022de:	20da      	movs	r0, #218	@ 0xda
 80022e0:	f7ff ff88 	bl	80021f4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80022e4:	2012      	movs	r0, #18
 80022e6:	f7ff ff85 	bl	80021f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80022ea:	20db      	movs	r0, #219	@ 0xdb
 80022ec:	f7ff ff82 	bl	80021f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80022f0:	2020      	movs	r0, #32
 80022f2:	f7ff ff7f 	bl	80021f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80022f6:	208d      	movs	r0, #141	@ 0x8d
 80022f8:	f7ff ff7c 	bl	80021f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80022fc:	2014      	movs	r0, #20
 80022fe:	f7ff ff79 	bl	80021f4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002302:	2001      	movs	r0, #1
 8002304:	f000 f9d4 	bl	80026b0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002308:	2000      	movs	r0, #0
 800230a:	f000 f80f 	bl	800232c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800230e:	f000 f825 	bl	800235c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002312:	4b05      	ldr	r3, [pc, #20]	@ (8002328 <ssd1306_Init+0xd0>)
 8002314:	2200      	movs	r2, #0
 8002316:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002318:	4b03      	ldr	r3, [pc, #12]	@ (8002328 <ssd1306_Init+0xd0>)
 800231a:	2200      	movs	r2, #0
 800231c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800231e:	4b02      	ldr	r3, [pc, #8]	@ (8002328 <ssd1306_Init+0xd0>)
 8002320:	2201      	movs	r2, #1
 8002322:	711a      	strb	r2, [r3, #4]
}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000764 	.word	0x20000764

0800232c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <ssd1306_Fill+0x14>
 800233c:	2300      	movs	r3, #0
 800233e:	e000      	b.n	8002342 <ssd1306_Fill+0x16>
 8002340:	23ff      	movs	r3, #255	@ 0xff
 8002342:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002346:	4619      	mov	r1, r3
 8002348:	4803      	ldr	r0, [pc, #12]	@ (8002358 <ssd1306_Fill+0x2c>)
 800234a:	f004 fdf8 	bl	8006f3e <memset>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000364 	.word	0x20000364

0800235c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002362:	2300      	movs	r3, #0
 8002364:	71fb      	strb	r3, [r7, #7]
 8002366:	e016      	b.n	8002396 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	3b50      	subs	r3, #80	@ 0x50
 800236c:	b2db      	uxtb	r3, r3
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ff40 	bl	80021f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002374:	2000      	movs	r0, #0
 8002376:	f7ff ff3d 	bl	80021f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800237a:	2010      	movs	r0, #16
 800237c:	f7ff ff3a 	bl	80021f4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	01db      	lsls	r3, r3, #7
 8002384:	4a08      	ldr	r2, [pc, #32]	@ (80023a8 <ssd1306_UpdateScreen+0x4c>)
 8002386:	4413      	add	r3, r2
 8002388:	2180      	movs	r1, #128	@ 0x80
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff ff4a 	bl	8002224 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	3301      	adds	r3, #1
 8002394:	71fb      	strb	r3, [r7, #7]
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	2b07      	cmp	r3, #7
 800239a:	d9e5      	bls.n	8002368 <ssd1306_UpdateScreen+0xc>
    }
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000364 	.word	0x20000364

080023ac <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	71fb      	strb	r3, [r7, #7]
 80023b6:	460b      	mov	r3, r1
 80023b8:	71bb      	strb	r3, [r7, #6]
 80023ba:	4613      	mov	r3, r2
 80023bc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	db3d      	blt.n	8002442 <ssd1306_DrawPixel+0x96>
 80023c6:	79bb      	ldrb	r3, [r7, #6]
 80023c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80023ca:	d83a      	bhi.n	8002442 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80023cc:	797b      	ldrb	r3, [r7, #5]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d11a      	bne.n	8002408 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80023d2:	79fa      	ldrb	r2, [r7, #7]
 80023d4:	79bb      	ldrb	r3, [r7, #6]
 80023d6:	08db      	lsrs	r3, r3, #3
 80023d8:	b2d8      	uxtb	r0, r3
 80023da:	4603      	mov	r3, r0
 80023dc:	01db      	lsls	r3, r3, #7
 80023de:	4413      	add	r3, r2
 80023e0:	4a1a      	ldr	r2, [pc, #104]	@ (800244c <ssd1306_DrawPixel+0xa0>)
 80023e2:	5cd3      	ldrb	r3, [r2, r3]
 80023e4:	b25a      	sxtb	r2, r3
 80023e6:	79bb      	ldrb	r3, [r7, #6]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	2101      	movs	r1, #1
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
 80023f2:	b25b      	sxtb	r3, r3
 80023f4:	4313      	orrs	r3, r2
 80023f6:	b259      	sxtb	r1, r3
 80023f8:	79fa      	ldrb	r2, [r7, #7]
 80023fa:	4603      	mov	r3, r0
 80023fc:	01db      	lsls	r3, r3, #7
 80023fe:	4413      	add	r3, r2
 8002400:	b2c9      	uxtb	r1, r1
 8002402:	4a12      	ldr	r2, [pc, #72]	@ (800244c <ssd1306_DrawPixel+0xa0>)
 8002404:	54d1      	strb	r1, [r2, r3]
 8002406:	e01d      	b.n	8002444 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002408:	79fa      	ldrb	r2, [r7, #7]
 800240a:	79bb      	ldrb	r3, [r7, #6]
 800240c:	08db      	lsrs	r3, r3, #3
 800240e:	b2d8      	uxtb	r0, r3
 8002410:	4603      	mov	r3, r0
 8002412:	01db      	lsls	r3, r3, #7
 8002414:	4413      	add	r3, r2
 8002416:	4a0d      	ldr	r2, [pc, #52]	@ (800244c <ssd1306_DrawPixel+0xa0>)
 8002418:	5cd3      	ldrb	r3, [r2, r3]
 800241a:	b25a      	sxtb	r2, r3
 800241c:	79bb      	ldrb	r3, [r7, #6]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	2101      	movs	r1, #1
 8002424:	fa01 f303 	lsl.w	r3, r1, r3
 8002428:	b25b      	sxtb	r3, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	b25b      	sxtb	r3, r3
 800242e:	4013      	ands	r3, r2
 8002430:	b259      	sxtb	r1, r3
 8002432:	79fa      	ldrb	r2, [r7, #7]
 8002434:	4603      	mov	r3, r0
 8002436:	01db      	lsls	r3, r3, #7
 8002438:	4413      	add	r3, r2
 800243a:	b2c9      	uxtb	r1, r1
 800243c:	4a03      	ldr	r2, [pc, #12]	@ (800244c <ssd1306_DrawPixel+0xa0>)
 800243e:	54d1      	strb	r1, [r2, r3]
 8002440:	e000      	b.n	8002444 <ssd1306_DrawPixel+0x98>
        return;
 8002442:	bf00      	nop
    }
}
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	20000364 	.word	0x20000364

08002450 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002450:	b590      	push	{r4, r7, lr}
 8002452:	b089      	sub	sp, #36	@ 0x24
 8002454:	af00      	add	r7, sp, #0
 8002456:	4604      	mov	r4, r0
 8002458:	4638      	mov	r0, r7
 800245a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800245e:	4623      	mov	r3, r4
 8002460:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	2b1f      	cmp	r3, #31
 8002466:	d902      	bls.n	800246e <ssd1306_WriteChar+0x1e>
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	2b7e      	cmp	r3, #126	@ 0x7e
 800246c:	d901      	bls.n	8002472 <ssd1306_WriteChar+0x22>
        return 0;
 800246e:	2300      	movs	r3, #0
 8002470:	e077      	b.n	8002562 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002472:	4b3e      	ldr	r3, [pc, #248]	@ (800256c <ssd1306_WriteChar+0x11c>)
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	783b      	ldrb	r3, [r7, #0]
 800247a:	4413      	add	r3, r2
 800247c:	2b80      	cmp	r3, #128	@ 0x80
 800247e:	dc06      	bgt.n	800248e <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002480:	4b3a      	ldr	r3, [pc, #232]	@ (800256c <ssd1306_WriteChar+0x11c>)
 8002482:	885b      	ldrh	r3, [r3, #2]
 8002484:	461a      	mov	r2, r3
 8002486:	787b      	ldrb	r3, [r7, #1]
 8002488:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800248a:	2b40      	cmp	r3, #64	@ 0x40
 800248c:	dd01      	ble.n	8002492 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800248e:	2300      	movs	r3, #0
 8002490:	e067      	b.n	8002562 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	e04e      	b.n	8002536 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	3b20      	subs	r3, #32
 800249e:	7879      	ldrb	r1, [r7, #1]
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4619      	mov	r1, r3
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	440b      	add	r3, r1
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	4413      	add	r3, r2
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80024b2:	2300      	movs	r3, #0
 80024b4:	61bb      	str	r3, [r7, #24]
 80024b6:	e036      	b.n	8002526 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d013      	beq.n	80024f0 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80024c8:	4b28      	ldr	r3, [pc, #160]	@ (800256c <ssd1306_WriteChar+0x11c>)
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	b2d8      	uxtb	r0, r3
 80024d6:	4b25      	ldr	r3, [pc, #148]	@ (800256c <ssd1306_WriteChar+0x11c>)
 80024d8:	885b      	ldrh	r3, [r3, #2]
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80024e8:	4619      	mov	r1, r3
 80024ea:	f7ff ff5f 	bl	80023ac <ssd1306_DrawPixel>
 80024ee:	e017      	b.n	8002520 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80024f0:	4b1e      	ldr	r3, [pc, #120]	@ (800256c <ssd1306_WriteChar+0x11c>)
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	b2d8      	uxtb	r0, r3
 80024fe:	4b1b      	ldr	r3, [pc, #108]	@ (800256c <ssd1306_WriteChar+0x11c>)
 8002500:	885b      	ldrh	r3, [r3, #2]
 8002502:	b2da      	uxtb	r2, r3
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	4413      	add	r3, r2
 800250a:	b2d9      	uxtb	r1, r3
 800250c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002510:	2b00      	cmp	r3, #0
 8002512:	bf0c      	ite	eq
 8002514:	2301      	moveq	r3, #1
 8002516:	2300      	movne	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	f7ff ff46 	bl	80023ac <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	3301      	adds	r3, #1
 8002524:	61bb      	str	r3, [r7, #24]
 8002526:	783b      	ldrb	r3, [r7, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	4293      	cmp	r3, r2
 800252e:	d3c3      	bcc.n	80024b8 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	3301      	adds	r3, #1
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	787b      	ldrb	r3, [r7, #1]
 8002538:	461a      	mov	r2, r3
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	4293      	cmp	r3, r2
 800253e:	d3ab      	bcc.n	8002498 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8002540:	4b0a      	ldr	r3, [pc, #40]	@ (800256c <ssd1306_WriteChar+0x11c>)
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	2a00      	cmp	r2, #0
 8002548:	d005      	beq.n	8002556 <ssd1306_WriteChar+0x106>
 800254a:	68b9      	ldr	r1, [r7, #8]
 800254c:	7bfa      	ldrb	r2, [r7, #15]
 800254e:	3a20      	subs	r2, #32
 8002550:	440a      	add	r2, r1
 8002552:	7812      	ldrb	r2, [r2, #0]
 8002554:	e000      	b.n	8002558 <ssd1306_WriteChar+0x108>
 8002556:	783a      	ldrb	r2, [r7, #0]
 8002558:	4413      	add	r3, r2
 800255a:	b29a      	uxth	r2, r3
 800255c:	4b03      	ldr	r3, [pc, #12]	@ (800256c <ssd1306_WriteChar+0x11c>)
 800255e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002560:	7bfb      	ldrb	r3, [r7, #15]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3724      	adds	r7, #36	@ 0x24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd90      	pop	{r4, r7, pc}
 800256a:	bf00      	nop
 800256c:	20000764 	.word	0x20000764

08002570 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af02      	add	r7, sp, #8
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	4638      	mov	r0, r7
 800257a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800257e:	e013      	b.n	80025a8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	7818      	ldrb	r0, [r3, #0]
 8002584:	7e3b      	ldrb	r3, [r7, #24]
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	463b      	mov	r3, r7
 800258a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800258c:	f7ff ff60 	bl	8002450 <ssd1306_WriteChar>
 8002590:	4603      	mov	r3, r0
 8002592:	461a      	mov	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d002      	beq.n	80025a2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	e008      	b.n	80025b4 <ssd1306_WriteString+0x44>
        }
        str++;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	3301      	adds	r3, #1
 80025a6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1e7      	bne.n	8002580 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	781b      	ldrb	r3, [r3, #0]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	460a      	mov	r2, r1
 80025c6:	71fb      	strb	r3, [r7, #7]
 80025c8:	4613      	mov	r3, r2
 80025ca:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	4b05      	ldr	r3, [pc, #20]	@ (80025e8 <ssd1306_SetCursor+0x2c>)
 80025d2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80025d4:	79bb      	ldrb	r3, [r7, #6]
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	4b03      	ldr	r3, [pc, #12]	@ (80025e8 <ssd1306_SetCursor+0x2c>)
 80025da:	805a      	strh	r2, [r3, #2]
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20000764 	.word	0x20000764

080025ec <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4604      	mov	r4, r0
 80025f4:	4608      	mov	r0, r1
 80025f6:	4611      	mov	r1, r2
 80025f8:	461a      	mov	r2, r3
 80025fa:	4623      	mov	r3, r4
 80025fc:	71fb      	strb	r3, [r7, #7]
 80025fe:	4603      	mov	r3, r0
 8002600:	71bb      	strb	r3, [r7, #6]
 8002602:	460b      	mov	r3, r1
 8002604:	717b      	strb	r3, [r7, #5]
 8002606:	4613      	mov	r3, r2
 8002608:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 800260a:	79fa      	ldrb	r2, [r7, #7]
 800260c:	797b      	ldrb	r3, [r7, #5]
 800260e:	4293      	cmp	r3, r2
 8002610:	bf28      	it	cs
 8002612:	4613      	movcs	r3, r2
 8002614:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8002616:	797a      	ldrb	r2, [r7, #5]
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	4293      	cmp	r3, r2
 800261c:	bf38      	it	cc
 800261e:	4613      	movcc	r3, r2
 8002620:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8002622:	79ba      	ldrb	r2, [r7, #6]
 8002624:	793b      	ldrb	r3, [r7, #4]
 8002626:	4293      	cmp	r3, r2
 8002628:	bf28      	it	cs
 800262a:	4613      	movcs	r3, r2
 800262c:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 800262e:	793a      	ldrb	r2, [r7, #4]
 8002630:	79bb      	ldrb	r3, [r7, #6]
 8002632:	4293      	cmp	r3, r2
 8002634:	bf38      	it	cc
 8002636:	4613      	movcc	r3, r2
 8002638:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800263a:	7afb      	ldrb	r3, [r7, #11]
 800263c:	73fb      	strb	r3, [r7, #15]
 800263e:	e017      	b.n	8002670 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002640:	7b7b      	ldrb	r3, [r7, #13]
 8002642:	73bb      	strb	r3, [r7, #14]
 8002644:	e009      	b.n	800265a <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8002646:	f897 2020 	ldrb.w	r2, [r7, #32]
 800264a:	7bf9      	ldrb	r1, [r7, #15]
 800264c:	7bbb      	ldrb	r3, [r7, #14]
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff feac 	bl	80023ac <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002654:	7bbb      	ldrb	r3, [r7, #14]
 8002656:	3301      	adds	r3, #1
 8002658:	73bb      	strb	r3, [r7, #14]
 800265a:	7bba      	ldrb	r2, [r7, #14]
 800265c:	7b3b      	ldrb	r3, [r7, #12]
 800265e:	429a      	cmp	r2, r3
 8002660:	d803      	bhi.n	800266a <ssd1306_FillRectangle+0x7e>
 8002662:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002666:	2b00      	cmp	r3, #0
 8002668:	daed      	bge.n	8002646 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800266a:	7bfb      	ldrb	r3, [r7, #15]
 800266c:	3301      	adds	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
 8002670:	7bfa      	ldrb	r2, [r7, #15]
 8002672:	7abb      	ldrb	r3, [r7, #10]
 8002674:	429a      	cmp	r2, r3
 8002676:	d803      	bhi.n	8002680 <ssd1306_FillRectangle+0x94>
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	2b3f      	cmp	r3, #63	@ 0x3f
 800267c:	d9e0      	bls.n	8002640 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 800267e:	bf00      	nop
 8002680:	bf00      	nop
}
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	bd90      	pop	{r4, r7, pc}

08002688 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002692:	2381      	movs	r3, #129	@ 0x81
 8002694:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff fdab 	bl	80021f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fda7 	bl	80021f4 <ssd1306_WriteCommand>
}
 80026a6:	bf00      	nop
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80026c0:	23af      	movs	r3, #175	@ 0xaf
 80026c2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80026c4:	4b08      	ldr	r3, [pc, #32]	@ (80026e8 <ssd1306_SetDisplayOn+0x38>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	715a      	strb	r2, [r3, #5]
 80026ca:	e004      	b.n	80026d6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80026cc:	23ae      	movs	r3, #174	@ 0xae
 80026ce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80026d0:	4b05      	ldr	r3, [pc, #20]	@ (80026e8 <ssd1306_SetDisplayOn+0x38>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff fd8b 	bl	80021f4 <ssd1306_WriteCommand>
}
 80026de:	bf00      	nop
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000764 	.word	0x20000764

080026ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026f2:	4b15      	ldr	r3, [pc, #84]	@ (8002748 <HAL_MspInit+0x5c>)
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	4a14      	ldr	r2, [pc, #80]	@ (8002748 <HAL_MspInit+0x5c>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	6193      	str	r3, [r2, #24]
 80026fe:	4b12      	ldr	r3, [pc, #72]	@ (8002748 <HAL_MspInit+0x5c>)
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800270a:	4b0f      	ldr	r3, [pc, #60]	@ (8002748 <HAL_MspInit+0x5c>)
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	4a0e      	ldr	r2, [pc, #56]	@ (8002748 <HAL_MspInit+0x5c>)
 8002710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002714:	61d3      	str	r3, [r2, #28]
 8002716:	4b0c      	ldr	r3, [pc, #48]	@ (8002748 <HAL_MspInit+0x5c>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800271e:	607b      	str	r3, [r7, #4]
 8002720:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002722:	4b0a      	ldr	r3, [pc, #40]	@ (800274c <HAL_MspInit+0x60>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	4a04      	ldr	r2, [pc, #16]	@ (800274c <HAL_MspInit+0x60>)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr
 8002748:	40021000 	.word	0x40021000
 800274c:	40010000 	.word	0x40010000

08002750 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08a      	sub	sp, #40	@ 0x28
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 0318 	add.w	r3, r7, #24
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a2b      	ldr	r2, [pc, #172]	@ (8002818 <HAL_I2C_MspInit+0xc8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d124      	bne.n	80027ba <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002770:	4b2a      	ldr	r3, [pc, #168]	@ (800281c <HAL_I2C_MspInit+0xcc>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	4a29      	ldr	r2, [pc, #164]	@ (800281c <HAL_I2C_MspInit+0xcc>)
 8002776:	f043 0308 	orr.w	r3, r3, #8
 800277a:	6193      	str	r3, [r2, #24]
 800277c:	4b27      	ldr	r3, [pc, #156]	@ (800281c <HAL_I2C_MspInit+0xcc>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002788:	23c0      	movs	r3, #192	@ 0xc0
 800278a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800278c:	2312      	movs	r3, #18
 800278e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002790:	2303      	movs	r3, #3
 8002792:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002794:	f107 0318 	add.w	r3, r7, #24
 8002798:	4619      	mov	r1, r3
 800279a:	4821      	ldr	r0, [pc, #132]	@ (8002820 <HAL_I2C_MspInit+0xd0>)
 800279c:	f000 fba2 	bl	8002ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027a0:	4b1e      	ldr	r3, [pc, #120]	@ (800281c <HAL_I2C_MspInit+0xcc>)
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	4a1d      	ldr	r2, [pc, #116]	@ (800281c <HAL_I2C_MspInit+0xcc>)
 80027a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027aa:	61d3      	str	r3, [r2, #28]
 80027ac:	4b1b      	ldr	r3, [pc, #108]	@ (800281c <HAL_I2C_MspInit+0xcc>)
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80027b8:	e029      	b.n	800280e <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a19      	ldr	r2, [pc, #100]	@ (8002824 <HAL_I2C_MspInit+0xd4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d124      	bne.n	800280e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c4:	4b15      	ldr	r3, [pc, #84]	@ (800281c <HAL_I2C_MspInit+0xcc>)
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	4a14      	ldr	r2, [pc, #80]	@ (800281c <HAL_I2C_MspInit+0xcc>)
 80027ca:	f043 0308 	orr.w	r3, r3, #8
 80027ce:	6193      	str	r3, [r2, #24]
 80027d0:	4b12      	ldr	r3, [pc, #72]	@ (800281c <HAL_I2C_MspInit+0xcc>)
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027dc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80027e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027e2:	2312      	movs	r3, #18
 80027e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027e6:	2303      	movs	r3, #3
 80027e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ea:	f107 0318 	add.w	r3, r7, #24
 80027ee:	4619      	mov	r1, r3
 80027f0:	480b      	ldr	r0, [pc, #44]	@ (8002820 <HAL_I2C_MspInit+0xd0>)
 80027f2:	f000 fb77 	bl	8002ee4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80027f6:	4b09      	ldr	r3, [pc, #36]	@ (800281c <HAL_I2C_MspInit+0xcc>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	4a08      	ldr	r2, [pc, #32]	@ (800281c <HAL_I2C_MspInit+0xcc>)
 80027fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002800:	61d3      	str	r3, [r2, #28]
 8002802:	4b06      	ldr	r3, [pc, #24]	@ (800281c <HAL_I2C_MspInit+0xcc>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800280a:	60bb      	str	r3, [r7, #8]
 800280c:	68bb      	ldr	r3, [r7, #8]
}
 800280e:	bf00      	nop
 8002810:	3728      	adds	r7, #40	@ 0x28
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40005400 	.word	0x40005400
 800281c:	40021000 	.word	0x40021000
 8002820:	40010c00 	.word	0x40010c00
 8002824:	40005800 	.word	0x40005800

08002828 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a0f      	ldr	r2, [pc, #60]	@ (8002874 <HAL_RTC_MspInit+0x4c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d118      	bne.n	800286c <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800283a:	f001 fd7b 	bl	8004334 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800283e:	4b0e      	ldr	r3, [pc, #56]	@ (8002878 <HAL_RTC_MspInit+0x50>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	4a0d      	ldr	r2, [pc, #52]	@ (8002878 <HAL_RTC_MspInit+0x50>)
 8002844:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002848:	61d3      	str	r3, [r2, #28]
 800284a:	4b0b      	ldr	r3, [pc, #44]	@ (8002878 <HAL_RTC_MspInit+0x50>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002856:	4b09      	ldr	r3, [pc, #36]	@ (800287c <HAL_RTC_MspInit+0x54>)
 8002858:	2201      	movs	r2, #1
 800285a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800285c:	2200      	movs	r2, #0
 800285e:	2100      	movs	r1, #0
 8002860:	2029      	movs	r0, #41	@ 0x29
 8002862:	f000 fb08 	bl	8002e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002866:	2029      	movs	r0, #41	@ 0x29
 8002868:	f000 fb21 	bl	8002eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800286c:	bf00      	nop
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40002800 	.word	0x40002800
 8002878:	40021000 	.word	0x40021000
 800287c:	4242043c 	.word	0x4242043c

08002880 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08a      	sub	sp, #40	@ 0x28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800289e:	d14e      	bne.n	800293e <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028a0:	4b29      	ldr	r3, [pc, #164]	@ (8002948 <HAL_TIM_Encoder_MspInit+0xc8>)
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	4a28      	ldr	r2, [pc, #160]	@ (8002948 <HAL_TIM_Encoder_MspInit+0xc8>)
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	61d3      	str	r3, [r2, #28]
 80028ac:	4b26      	ldr	r3, [pc, #152]	@ (8002948 <HAL_TIM_Encoder_MspInit+0xc8>)
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b8:	4b23      	ldr	r3, [pc, #140]	@ (8002948 <HAL_TIM_Encoder_MspInit+0xc8>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	4a22      	ldr	r2, [pc, #136]	@ (8002948 <HAL_TIM_Encoder_MspInit+0xc8>)
 80028be:	f043 0304 	orr.w	r3, r3, #4
 80028c2:	6193      	str	r3, [r2, #24]
 80028c4:	4b20      	ldr	r3, [pc, #128]	@ (8002948 <HAL_TIM_Encoder_MspInit+0xc8>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002948 <HAL_TIM_Encoder_MspInit+0xc8>)
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002948 <HAL_TIM_Encoder_MspInit+0xc8>)
 80028d6:	f043 0308 	orr.w	r3, r3, #8
 80028da:	6193      	str	r3, [r2, #24]
 80028dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002948 <HAL_TIM_Encoder_MspInit+0xc8>)
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80028e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f6:	f107 0314 	add.w	r3, r7, #20
 80028fa:	4619      	mov	r1, r3
 80028fc:	4813      	ldr	r0, [pc, #76]	@ (800294c <HAL_TIM_Encoder_MspInit+0xcc>)
 80028fe:	f000 faf1 	bl	8002ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002902:	2308      	movs	r3, #8
 8002904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800290e:	f107 0314 	add.w	r3, r7, #20
 8002912:	4619      	mov	r1, r3
 8002914:	480e      	ldr	r0, [pc, #56]	@ (8002950 <HAL_TIM_Encoder_MspInit+0xd0>)
 8002916:	f000 fae5 	bl	8002ee4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800291a:	4b0e      	ldr	r3, [pc, #56]	@ (8002954 <HAL_TIM_Encoder_MspInit+0xd4>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002926:	627b      	str	r3, [r7, #36]	@ 0x24
 8002928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800292e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002936:	627b      	str	r3, [r7, #36]	@ 0x24
 8002938:	4a06      	ldr	r2, [pc, #24]	@ (8002954 <HAL_TIM_Encoder_MspInit+0xd4>)
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800293e:	bf00      	nop
 8002940:	3728      	adds	r7, #40	@ 0x28
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000
 800294c:	40010800 	.word	0x40010800
 8002950:	40010c00 	.word	0x40010c00
 8002954:	40010000 	.word	0x40010000

08002958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800295c:	bf00      	nop
 800295e:	e7fd      	b.n	800295c <NMI_Handler+0x4>

08002960 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002964:	bf00      	nop
 8002966:	e7fd      	b.n	8002964 <HardFault_Handler+0x4>

08002968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800296c:	bf00      	nop
 800296e:	e7fd      	b.n	800296c <MemManage_Handler+0x4>

08002970 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002974:	bf00      	nop
 8002976:	e7fd      	b.n	8002974 <BusFault_Handler+0x4>

08002978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800297c:	bf00      	nop
 800297e:	e7fd      	b.n	800297c <UsageFault_Handler+0x4>

08002980 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002990:	bf00      	nop
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029a8:	f000 f94e 	bl	8002c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029ac:	bf00      	nop
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80029b4:	2002      	movs	r0, #2
 80029b6:	f000 fc4b 	bl	8003250 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}

080029be <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80029c2:	2008      	movs	r0, #8
 80029c4:	f000 fc44 	bl	8003250 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80029c8:	bf00      	nop
 80029ca:	bd80      	pop	{r7, pc}

080029cc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80029d0:	4802      	ldr	r0, [pc, #8]	@ (80029dc <RTC_Alarm_IRQHandler+0x10>)
 80029d2:	f002 fdf5 	bl	80055c0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	200002d4 	.word	0x200002d4

080029e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return 1;
 80029e4:	2301      	movs	r3, #1
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr

080029ee <_kill>:

int _kill(int pid, int sig)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029f8:	f004 faf4 	bl	8006fe4 <__errno>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2216      	movs	r2, #22
 8002a00:	601a      	str	r2, [r3, #0]
  return -1;
 8002a02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <_exit>:

void _exit (int status)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a16:	f04f 31ff 	mov.w	r1, #4294967295
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff ffe7 	bl	80029ee <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a20:	bf00      	nop
 8002a22:	e7fd      	b.n	8002a20 <_exit+0x12>

08002a24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	e00a      	b.n	8002a4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a36:	f3af 8000 	nop.w
 8002a3a:	4601      	mov	r1, r0
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	60ba      	str	r2, [r7, #8]
 8002a42:	b2ca      	uxtb	r2, r1
 8002a44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	dbf0      	blt.n	8002a36 <_read+0x12>
  }

  return len;
 8002a54:	687b      	ldr	r3, [r7, #4]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b086      	sub	sp, #24
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	e009      	b.n	8002a84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	60ba      	str	r2, [r7, #8]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	3301      	adds	r3, #1
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	dbf1      	blt.n	8002a70 <_write+0x12>
  }
  return len;
 8002a8c:	687b      	ldr	r3, [r7, #4]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <_close>:

int _close(int file)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002abc:	605a      	str	r2, [r3, #4]
  return 0;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr

08002aca <_isatty>:

int _isatty(int file)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ad2:	2301      	movs	r3, #1
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr

08002ade <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b085      	sub	sp, #20
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr
	...

08002af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b00:	4a14      	ldr	r2, [pc, #80]	@ (8002b54 <_sbrk+0x5c>)
 8002b02:	4b15      	ldr	r3, [pc, #84]	@ (8002b58 <_sbrk+0x60>)
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b0c:	4b13      	ldr	r3, [pc, #76]	@ (8002b5c <_sbrk+0x64>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d102      	bne.n	8002b1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b14:	4b11      	ldr	r3, [pc, #68]	@ (8002b5c <_sbrk+0x64>)
 8002b16:	4a12      	ldr	r2, [pc, #72]	@ (8002b60 <_sbrk+0x68>)
 8002b18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b1a:	4b10      	ldr	r3, [pc, #64]	@ (8002b5c <_sbrk+0x64>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4413      	add	r3, r2
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d207      	bcs.n	8002b38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b28:	f004 fa5c 	bl	8006fe4 <__errno>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	220c      	movs	r2, #12
 8002b30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295
 8002b36:	e009      	b.n	8002b4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b38:	4b08      	ldr	r3, [pc, #32]	@ (8002b5c <_sbrk+0x64>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b3e:	4b07      	ldr	r3, [pc, #28]	@ (8002b5c <_sbrk+0x64>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	4a05      	ldr	r2, [pc, #20]	@ (8002b5c <_sbrk+0x64>)
 8002b48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20005000 	.word	0x20005000
 8002b58:	00000400 	.word	0x00000400
 8002b5c:	2000076c 	.word	0x2000076c
 8002b60:	200008c0 	.word	0x200008c0

08002b64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b70:	f7ff fff8 	bl	8002b64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b74:	480b      	ldr	r0, [pc, #44]	@ (8002ba4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b76:	490c      	ldr	r1, [pc, #48]	@ (8002ba8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b78:	4a0c      	ldr	r2, [pc, #48]	@ (8002bac <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b7c:	e002      	b.n	8002b84 <LoopCopyDataInit>

08002b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b82:	3304      	adds	r3, #4

08002b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b88:	d3f9      	bcc.n	8002b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b8a:	4a09      	ldr	r2, [pc, #36]	@ (8002bb0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b8c:	4c09      	ldr	r4, [pc, #36]	@ (8002bb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b90:	e001      	b.n	8002b96 <LoopFillZerobss>

08002b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b94:	3204      	adds	r2, #4

08002b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b98:	d3fb      	bcc.n	8002b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b9a:	f004 fa29 	bl	8006ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b9e:	f7fe fd29 	bl	80015f4 <main>
  bx lr
 8002ba2:	4770      	bx	lr
  ldr r0, =_sdata
 8002ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ba8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002bac:	0800d9b8 	.word	0x0800d9b8
  ldr r2, =_sbss
 8002bb0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002bb4:	200008c0 	.word	0x200008c0

08002bb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bb8:	e7fe      	b.n	8002bb8 <ADC1_2_IRQHandler>
	...

08002bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bc0:	4b08      	ldr	r3, [pc, #32]	@ (8002be4 <HAL_Init+0x28>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a07      	ldr	r2, [pc, #28]	@ (8002be4 <HAL_Init+0x28>)
 8002bc6:	f043 0310 	orr.w	r3, r3, #16
 8002bca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bcc:	2003      	movs	r0, #3
 8002bce:	f000 f947 	bl	8002e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bd2:	200f      	movs	r0, #15
 8002bd4:	f000 f808 	bl	8002be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bd8:	f7ff fd88 	bl	80026ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40022000 	.word	0x40022000

08002be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bf0:	4b12      	ldr	r3, [pc, #72]	@ (8002c3c <HAL_InitTick+0x54>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	4b12      	ldr	r3, [pc, #72]	@ (8002c40 <HAL_InitTick+0x58>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 f95f 	bl	8002eca <HAL_SYSTICK_Config>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e00e      	b.n	8002c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b0f      	cmp	r3, #15
 8002c1a:	d80a      	bhi.n	8002c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	f04f 30ff 	mov.w	r0, #4294967295
 8002c24:	f000 f927 	bl	8002e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c28:	4a06      	ldr	r2, [pc, #24]	@ (8002c44 <HAL_InitTick+0x5c>)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e000      	b.n	8002c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000004 	.word	0x20000004
 8002c40:	2000000c 	.word	0x2000000c
 8002c44:	20000008 	.word	0x20000008

08002c48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c4c:	4b05      	ldr	r3, [pc, #20]	@ (8002c64 <HAL_IncTick+0x1c>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	4b05      	ldr	r3, [pc, #20]	@ (8002c68 <HAL_IncTick+0x20>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4413      	add	r3, r2
 8002c58:	4a03      	ldr	r2, [pc, #12]	@ (8002c68 <HAL_IncTick+0x20>)
 8002c5a:	6013      	str	r3, [r2, #0]
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr
 8002c64:	2000000c 	.word	0x2000000c
 8002c68:	20000770 	.word	0x20000770

08002c6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c70:	4b02      	ldr	r3, [pc, #8]	@ (8002c7c <HAL_GetTick+0x10>)
 8002c72:	681b      	ldr	r3, [r3, #0]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr
 8002c7c:	20000770 	.word	0x20000770

08002c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c88:	f7ff fff0 	bl	8002c6c <HAL_GetTick>
 8002c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d005      	beq.n	8002ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc4 <HAL_Delay+0x44>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ca6:	bf00      	nop
 8002ca8:	f7ff ffe0 	bl	8002c6c <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d8f7      	bhi.n	8002ca8 <HAL_Delay+0x28>
  {
  }
}
 8002cb8:	bf00      	nop
 8002cba:	bf00      	nop
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	2000000c 	.word	0x2000000c

08002cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d0c <__NVIC_SetPriorityGrouping+0x44>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cfa:	4a04      	ldr	r2, [pc, #16]	@ (8002d0c <__NVIC_SetPriorityGrouping+0x44>)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	60d3      	str	r3, [r2, #12]
}
 8002d00:	bf00      	nop
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d14:	4b04      	ldr	r3, [pc, #16]	@ (8002d28 <__NVIC_GetPriorityGrouping+0x18>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	0a1b      	lsrs	r3, r3, #8
 8002d1a:	f003 0307 	and.w	r3, r3, #7
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	db0b      	blt.n	8002d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
 8002d40:	f003 021f 	and.w	r2, r3, #31
 8002d44:	4906      	ldr	r1, [pc, #24]	@ (8002d60 <__NVIC_EnableIRQ+0x34>)
 8002d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr
 8002d60:	e000e100 	.word	0xe000e100

08002d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	6039      	str	r1, [r7, #0]
 8002d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	db0a      	blt.n	8002d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	490c      	ldr	r1, [pc, #48]	@ (8002db0 <__NVIC_SetPriority+0x4c>)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	0112      	lsls	r2, r2, #4
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	440b      	add	r3, r1
 8002d88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d8c:	e00a      	b.n	8002da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	4908      	ldr	r1, [pc, #32]	@ (8002db4 <__NVIC_SetPriority+0x50>)
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	3b04      	subs	r3, #4
 8002d9c:	0112      	lsls	r2, r2, #4
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	440b      	add	r3, r1
 8002da2:	761a      	strb	r2, [r3, #24]
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	e000e100 	.word	0xe000e100
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b089      	sub	sp, #36	@ 0x24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f1c3 0307 	rsb	r3, r3, #7
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	bf28      	it	cs
 8002dd6:	2304      	movcs	r3, #4
 8002dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	2b06      	cmp	r3, #6
 8002de0:	d902      	bls.n	8002de8 <NVIC_EncodePriority+0x30>
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3b03      	subs	r3, #3
 8002de6:	e000      	b.n	8002dea <NVIC_EncodePriority+0x32>
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dec:	f04f 32ff 	mov.w	r2, #4294967295
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43da      	mvns	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e00:	f04f 31ff 	mov.w	r1, #4294967295
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	43d9      	mvns	r1, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e10:	4313      	orrs	r3, r2
         );
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3724      	adds	r7, #36	@ 0x24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e2c:	d301      	bcc.n	8002e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e00f      	b.n	8002e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e32:	4a0a      	ldr	r2, [pc, #40]	@ (8002e5c <SysTick_Config+0x40>)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e3a:	210f      	movs	r1, #15
 8002e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e40:	f7ff ff90 	bl	8002d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e44:	4b05      	ldr	r3, [pc, #20]	@ (8002e5c <SysTick_Config+0x40>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e4a:	4b04      	ldr	r3, [pc, #16]	@ (8002e5c <SysTick_Config+0x40>)
 8002e4c:	2207      	movs	r2, #7
 8002e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	e000e010 	.word	0xe000e010

08002e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff ff2d 	bl	8002cc8 <__NVIC_SetPriorityGrouping>
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b086      	sub	sp, #24
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	607a      	str	r2, [r7, #4]
 8002e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e88:	f7ff ff42 	bl	8002d10 <__NVIC_GetPriorityGrouping>
 8002e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	68b9      	ldr	r1, [r7, #8]
 8002e92:	6978      	ldr	r0, [r7, #20]
 8002e94:	f7ff ff90 	bl	8002db8 <NVIC_EncodePriority>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ff5f 	bl	8002d64 <__NVIC_SetPriority>
}
 8002ea6:	bf00      	nop
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff35 	bl	8002d2c <__NVIC_EnableIRQ>
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7ff ffa2 	bl	8002e1c <SysTick_Config>
 8002ed8:	4603      	mov	r3, r0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b08b      	sub	sp, #44	@ 0x2c
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ef6:	e169      	b.n	80031cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ef8:	2201      	movs	r2, #1
 8002efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	69fa      	ldr	r2, [r7, #28]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	f040 8158 	bne.w	80031c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4a9a      	ldr	r2, [pc, #616]	@ (8003184 <HAL_GPIO_Init+0x2a0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d05e      	beq.n	8002fde <HAL_GPIO_Init+0xfa>
 8002f20:	4a98      	ldr	r2, [pc, #608]	@ (8003184 <HAL_GPIO_Init+0x2a0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d875      	bhi.n	8003012 <HAL_GPIO_Init+0x12e>
 8002f26:	4a98      	ldr	r2, [pc, #608]	@ (8003188 <HAL_GPIO_Init+0x2a4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d058      	beq.n	8002fde <HAL_GPIO_Init+0xfa>
 8002f2c:	4a96      	ldr	r2, [pc, #600]	@ (8003188 <HAL_GPIO_Init+0x2a4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d86f      	bhi.n	8003012 <HAL_GPIO_Init+0x12e>
 8002f32:	4a96      	ldr	r2, [pc, #600]	@ (800318c <HAL_GPIO_Init+0x2a8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d052      	beq.n	8002fde <HAL_GPIO_Init+0xfa>
 8002f38:	4a94      	ldr	r2, [pc, #592]	@ (800318c <HAL_GPIO_Init+0x2a8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d869      	bhi.n	8003012 <HAL_GPIO_Init+0x12e>
 8002f3e:	4a94      	ldr	r2, [pc, #592]	@ (8003190 <HAL_GPIO_Init+0x2ac>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d04c      	beq.n	8002fde <HAL_GPIO_Init+0xfa>
 8002f44:	4a92      	ldr	r2, [pc, #584]	@ (8003190 <HAL_GPIO_Init+0x2ac>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d863      	bhi.n	8003012 <HAL_GPIO_Init+0x12e>
 8002f4a:	4a92      	ldr	r2, [pc, #584]	@ (8003194 <HAL_GPIO_Init+0x2b0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d046      	beq.n	8002fde <HAL_GPIO_Init+0xfa>
 8002f50:	4a90      	ldr	r2, [pc, #576]	@ (8003194 <HAL_GPIO_Init+0x2b0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d85d      	bhi.n	8003012 <HAL_GPIO_Init+0x12e>
 8002f56:	2b12      	cmp	r3, #18
 8002f58:	d82a      	bhi.n	8002fb0 <HAL_GPIO_Init+0xcc>
 8002f5a:	2b12      	cmp	r3, #18
 8002f5c:	d859      	bhi.n	8003012 <HAL_GPIO_Init+0x12e>
 8002f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f64 <HAL_GPIO_Init+0x80>)
 8002f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f64:	08002fdf 	.word	0x08002fdf
 8002f68:	08002fb9 	.word	0x08002fb9
 8002f6c:	08002fcb 	.word	0x08002fcb
 8002f70:	0800300d 	.word	0x0800300d
 8002f74:	08003013 	.word	0x08003013
 8002f78:	08003013 	.word	0x08003013
 8002f7c:	08003013 	.word	0x08003013
 8002f80:	08003013 	.word	0x08003013
 8002f84:	08003013 	.word	0x08003013
 8002f88:	08003013 	.word	0x08003013
 8002f8c:	08003013 	.word	0x08003013
 8002f90:	08003013 	.word	0x08003013
 8002f94:	08003013 	.word	0x08003013
 8002f98:	08003013 	.word	0x08003013
 8002f9c:	08003013 	.word	0x08003013
 8002fa0:	08003013 	.word	0x08003013
 8002fa4:	08003013 	.word	0x08003013
 8002fa8:	08002fc1 	.word	0x08002fc1
 8002fac:	08002fd5 	.word	0x08002fd5
 8002fb0:	4a79      	ldr	r2, [pc, #484]	@ (8003198 <HAL_GPIO_Init+0x2b4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d013      	beq.n	8002fde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002fb6:	e02c      	b.n	8003012 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	623b      	str	r3, [r7, #32]
          break;
 8002fbe:	e029      	b.n	8003014 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	623b      	str	r3, [r7, #32]
          break;
 8002fc8:	e024      	b.n	8003014 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	3308      	adds	r3, #8
 8002fd0:	623b      	str	r3, [r7, #32]
          break;
 8002fd2:	e01f      	b.n	8003014 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	330c      	adds	r3, #12
 8002fda:	623b      	str	r3, [r7, #32]
          break;
 8002fdc:	e01a      	b.n	8003014 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d102      	bne.n	8002fec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fe6:	2304      	movs	r3, #4
 8002fe8:	623b      	str	r3, [r7, #32]
          break;
 8002fea:	e013      	b.n	8003014 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d105      	bne.n	8003000 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ff4:	2308      	movs	r3, #8
 8002ff6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	611a      	str	r2, [r3, #16]
          break;
 8002ffe:	e009      	b.n	8003014 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003000:	2308      	movs	r3, #8
 8003002:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69fa      	ldr	r2, [r7, #28]
 8003008:	615a      	str	r2, [r3, #20]
          break;
 800300a:	e003      	b.n	8003014 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800300c:	2300      	movs	r3, #0
 800300e:	623b      	str	r3, [r7, #32]
          break;
 8003010:	e000      	b.n	8003014 <HAL_GPIO_Init+0x130>
          break;
 8003012:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	2bff      	cmp	r3, #255	@ 0xff
 8003018:	d801      	bhi.n	800301e <HAL_GPIO_Init+0x13a>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	e001      	b.n	8003022 <HAL_GPIO_Init+0x13e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3304      	adds	r3, #4
 8003022:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	2bff      	cmp	r3, #255	@ 0xff
 8003028:	d802      	bhi.n	8003030 <HAL_GPIO_Init+0x14c>
 800302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	e002      	b.n	8003036 <HAL_GPIO_Init+0x152>
 8003030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003032:	3b08      	subs	r3, #8
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	210f      	movs	r1, #15
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	fa01 f303 	lsl.w	r3, r1, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	401a      	ands	r2, r3
 8003048:	6a39      	ldr	r1, [r7, #32]
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	fa01 f303 	lsl.w	r3, r1, r3
 8003050:	431a      	orrs	r2, r3
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 80b1 	beq.w	80031c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003064:	4b4d      	ldr	r3, [pc, #308]	@ (800319c <HAL_GPIO_Init+0x2b8>)
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	4a4c      	ldr	r2, [pc, #304]	@ (800319c <HAL_GPIO_Init+0x2b8>)
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	6193      	str	r3, [r2, #24]
 8003070:	4b4a      	ldr	r3, [pc, #296]	@ (800319c <HAL_GPIO_Init+0x2b8>)
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800307c:	4a48      	ldr	r2, [pc, #288]	@ (80031a0 <HAL_GPIO_Init+0x2bc>)
 800307e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003080:	089b      	lsrs	r3, r3, #2
 8003082:	3302      	adds	r3, #2
 8003084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003088:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800308a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	220f      	movs	r2, #15
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	4013      	ands	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a40      	ldr	r2, [pc, #256]	@ (80031a4 <HAL_GPIO_Init+0x2c0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d013      	beq.n	80030d0 <HAL_GPIO_Init+0x1ec>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a3f      	ldr	r2, [pc, #252]	@ (80031a8 <HAL_GPIO_Init+0x2c4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d00d      	beq.n	80030cc <HAL_GPIO_Init+0x1e8>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a3e      	ldr	r2, [pc, #248]	@ (80031ac <HAL_GPIO_Init+0x2c8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d007      	beq.n	80030c8 <HAL_GPIO_Init+0x1e4>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a3d      	ldr	r2, [pc, #244]	@ (80031b0 <HAL_GPIO_Init+0x2cc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d101      	bne.n	80030c4 <HAL_GPIO_Init+0x1e0>
 80030c0:	2303      	movs	r3, #3
 80030c2:	e006      	b.n	80030d2 <HAL_GPIO_Init+0x1ee>
 80030c4:	2304      	movs	r3, #4
 80030c6:	e004      	b.n	80030d2 <HAL_GPIO_Init+0x1ee>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e002      	b.n	80030d2 <HAL_GPIO_Init+0x1ee>
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <HAL_GPIO_Init+0x1ee>
 80030d0:	2300      	movs	r3, #0
 80030d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030d4:	f002 0203 	and.w	r2, r2, #3
 80030d8:	0092      	lsls	r2, r2, #2
 80030da:	4093      	lsls	r3, r2
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030e2:	492f      	ldr	r1, [pc, #188]	@ (80031a0 <HAL_GPIO_Init+0x2bc>)
 80030e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e6:	089b      	lsrs	r3, r3, #2
 80030e8:	3302      	adds	r3, #2
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d006      	beq.n	800310a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030fc:	4b2d      	ldr	r3, [pc, #180]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	492c      	ldr	r1, [pc, #176]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	4313      	orrs	r3, r2
 8003106:	608b      	str	r3, [r1, #8]
 8003108:	e006      	b.n	8003118 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800310a:	4b2a      	ldr	r3, [pc, #168]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	43db      	mvns	r3, r3
 8003112:	4928      	ldr	r1, [pc, #160]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 8003114:	4013      	ands	r3, r2
 8003116:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d006      	beq.n	8003132 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003124:	4b23      	ldr	r3, [pc, #140]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	4922      	ldr	r1, [pc, #136]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	4313      	orrs	r3, r2
 800312e:	60cb      	str	r3, [r1, #12]
 8003130:	e006      	b.n	8003140 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003132:	4b20      	ldr	r3, [pc, #128]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	43db      	mvns	r3, r3
 800313a:	491e      	ldr	r1, [pc, #120]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 800313c:	4013      	ands	r3, r2
 800313e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d006      	beq.n	800315a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800314c:	4b19      	ldr	r3, [pc, #100]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	4918      	ldr	r1, [pc, #96]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	4313      	orrs	r3, r2
 8003156:	604b      	str	r3, [r1, #4]
 8003158:	e006      	b.n	8003168 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800315a:	4b16      	ldr	r3, [pc, #88]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	43db      	mvns	r3, r3
 8003162:	4914      	ldr	r1, [pc, #80]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 8003164:	4013      	ands	r3, r2
 8003166:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d021      	beq.n	80031b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003174:	4b0f      	ldr	r3, [pc, #60]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	490e      	ldr	r1, [pc, #56]	@ (80031b4 <HAL_GPIO_Init+0x2d0>)
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	4313      	orrs	r3, r2
 800317e:	600b      	str	r3, [r1, #0]
 8003180:	e021      	b.n	80031c6 <HAL_GPIO_Init+0x2e2>
 8003182:	bf00      	nop
 8003184:	10320000 	.word	0x10320000
 8003188:	10310000 	.word	0x10310000
 800318c:	10220000 	.word	0x10220000
 8003190:	10210000 	.word	0x10210000
 8003194:	10120000 	.word	0x10120000
 8003198:	10110000 	.word	0x10110000
 800319c:	40021000 	.word	0x40021000
 80031a0:	40010000 	.word	0x40010000
 80031a4:	40010800 	.word	0x40010800
 80031a8:	40010c00 	.word	0x40010c00
 80031ac:	40011000 	.word	0x40011000
 80031b0:	40011400 	.word	0x40011400
 80031b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031b8:	4b0b      	ldr	r3, [pc, #44]	@ (80031e8 <HAL_GPIO_Init+0x304>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	43db      	mvns	r3, r3
 80031c0:	4909      	ldr	r1, [pc, #36]	@ (80031e8 <HAL_GPIO_Init+0x304>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	3301      	adds	r3, #1
 80031ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d2:	fa22 f303 	lsr.w	r3, r2, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f47f ae8e 	bne.w	8002ef8 <HAL_GPIO_Init+0x14>
  }
}
 80031dc:	bf00      	nop
 80031de:	bf00      	nop
 80031e0:	372c      	adds	r7, #44	@ 0x2c
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr
 80031e8:	40010400 	.word	0x40010400

080031ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	807b      	strh	r3, [r7, #2]
 80031f8:	4613      	mov	r3, r2
 80031fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031fc:	787b      	ldrb	r3, [r7, #1]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003202:	887a      	ldrh	r2, [r7, #2]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003208:	e003      	b.n	8003212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800320a:	887b      	ldrh	r3, [r7, #2]
 800320c:	041a      	lsls	r2, r3, #16
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	611a      	str	r2, [r3, #16]
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800322e:	887a      	ldrh	r2, [r7, #2]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4013      	ands	r3, r2
 8003234:	041a      	lsls	r2, r3, #16
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	43d9      	mvns	r1, r3
 800323a:	887b      	ldrh	r3, [r7, #2]
 800323c:	400b      	ands	r3, r1
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	611a      	str	r2, [r3, #16]
}
 8003244:	bf00      	nop
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr
	...

08003250 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800325a:	4b08      	ldr	r3, [pc, #32]	@ (800327c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	88fb      	ldrh	r3, [r7, #6]
 8003260:	4013      	ands	r3, r2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d006      	beq.n	8003274 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003266:	4a05      	ldr	r2, [pc, #20]	@ (800327c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003268:	88fb      	ldrh	r3, [r7, #6]
 800326a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800326c:	88fb      	ldrh	r3, [r7, #6]
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe ff10 	bl	8002094 <HAL_GPIO_EXTI_Callback>
  }
}
 8003274:	bf00      	nop
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40010400 	.word	0x40010400

08003280 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e12b      	b.n	80034ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d106      	bne.n	80032ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff fa52 	bl	8002750 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2224      	movs	r2, #36	@ 0x24
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0201 	bic.w	r2, r2, #1
 80032c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032e4:	f001 fbfc 	bl	8004ae0 <HAL_RCC_GetPCLK1Freq>
 80032e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	4a81      	ldr	r2, [pc, #516]	@ (80034f4 <HAL_I2C_Init+0x274>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d807      	bhi.n	8003304 <HAL_I2C_Init+0x84>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4a80      	ldr	r2, [pc, #512]	@ (80034f8 <HAL_I2C_Init+0x278>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	bf94      	ite	ls
 80032fc:	2301      	movls	r3, #1
 80032fe:	2300      	movhi	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	e006      	b.n	8003312 <HAL_I2C_Init+0x92>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4a7d      	ldr	r2, [pc, #500]	@ (80034fc <HAL_I2C_Init+0x27c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	bf94      	ite	ls
 800330c:	2301      	movls	r3, #1
 800330e:	2300      	movhi	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e0e7      	b.n	80034ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4a78      	ldr	r2, [pc, #480]	@ (8003500 <HAL_I2C_Init+0x280>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	0c9b      	lsrs	r3, r3, #18
 8003324:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	430a      	orrs	r2, r1
 8003338:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	4a6a      	ldr	r2, [pc, #424]	@ (80034f4 <HAL_I2C_Init+0x274>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d802      	bhi.n	8003354 <HAL_I2C_Init+0xd4>
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	3301      	adds	r3, #1
 8003352:	e009      	b.n	8003368 <HAL_I2C_Init+0xe8>
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800335a:	fb02 f303 	mul.w	r3, r2, r3
 800335e:	4a69      	ldr	r2, [pc, #420]	@ (8003504 <HAL_I2C_Init+0x284>)
 8003360:	fba2 2303 	umull	r2, r3, r2, r3
 8003364:	099b      	lsrs	r3, r3, #6
 8003366:	3301      	adds	r3, #1
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	430b      	orrs	r3, r1
 800336e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800337a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	495c      	ldr	r1, [pc, #368]	@ (80034f4 <HAL_I2C_Init+0x274>)
 8003384:	428b      	cmp	r3, r1
 8003386:	d819      	bhi.n	80033bc <HAL_I2C_Init+0x13c>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	1e59      	subs	r1, r3, #1
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	fbb1 f3f3 	udiv	r3, r1, r3
 8003396:	1c59      	adds	r1, r3, #1
 8003398:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800339c:	400b      	ands	r3, r1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <HAL_I2C_Init+0x138>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	1e59      	subs	r1, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80033b0:	3301      	adds	r3, #1
 80033b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b6:	e051      	b.n	800345c <HAL_I2C_Init+0x1dc>
 80033b8:	2304      	movs	r3, #4
 80033ba:	e04f      	b.n	800345c <HAL_I2C_Init+0x1dc>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d111      	bne.n	80033e8 <HAL_I2C_Init+0x168>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	1e58      	subs	r0, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6859      	ldr	r1, [r3, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	440b      	add	r3, r1
 80033d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033d6:	3301      	adds	r3, #1
 80033d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033dc:	2b00      	cmp	r3, #0
 80033de:	bf0c      	ite	eq
 80033e0:	2301      	moveq	r3, #1
 80033e2:	2300      	movne	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	e012      	b.n	800340e <HAL_I2C_Init+0x18e>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	1e58      	subs	r0, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6859      	ldr	r1, [r3, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	0099      	lsls	r1, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80033fe:	3301      	adds	r3, #1
 8003400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003404:	2b00      	cmp	r3, #0
 8003406:	bf0c      	ite	eq
 8003408:	2301      	moveq	r3, #1
 800340a:	2300      	movne	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_I2C_Init+0x196>
 8003412:	2301      	movs	r3, #1
 8003414:	e022      	b.n	800345c <HAL_I2C_Init+0x1dc>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10e      	bne.n	800343c <HAL_I2C_Init+0x1bc>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	1e58      	subs	r0, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6859      	ldr	r1, [r3, #4]
 8003426:	460b      	mov	r3, r1
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	440b      	add	r3, r1
 800342c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003430:	3301      	adds	r3, #1
 8003432:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003436:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800343a:	e00f      	b.n	800345c <HAL_I2C_Init+0x1dc>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	1e58      	subs	r0, r3, #1
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6859      	ldr	r1, [r3, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	0099      	lsls	r1, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003452:	3301      	adds	r3, #1
 8003454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003458:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	6809      	ldr	r1, [r1, #0]
 8003460:	4313      	orrs	r3, r2
 8003462:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69da      	ldr	r2, [r3, #28]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800348a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6911      	ldr	r1, [r2, #16]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	68d2      	ldr	r2, [r2, #12]
 8003496:	4311      	orrs	r1, r2
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6812      	ldr	r2, [r2, #0]
 800349c:	430b      	orrs	r3, r1
 800349e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695a      	ldr	r2, [r3, #20]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	000186a0 	.word	0x000186a0
 80034f8:	001e847f 	.word	0x001e847f
 80034fc:	003d08ff 	.word	0x003d08ff
 8003500:	431bde83 	.word	0x431bde83
 8003504:	10624dd3 	.word	0x10624dd3

08003508 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af02      	add	r7, sp, #8
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	4608      	mov	r0, r1
 8003512:	4611      	mov	r1, r2
 8003514:	461a      	mov	r2, r3
 8003516:	4603      	mov	r3, r0
 8003518:	817b      	strh	r3, [r7, #10]
 800351a:	460b      	mov	r3, r1
 800351c:	813b      	strh	r3, [r7, #8]
 800351e:	4613      	mov	r3, r2
 8003520:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003522:	f7ff fba3 	bl	8002c6c <HAL_GetTick>
 8003526:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b20      	cmp	r3, #32
 8003532:	f040 80d9 	bne.w	80036e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	2319      	movs	r3, #25
 800353c:	2201      	movs	r2, #1
 800353e:	496d      	ldr	r1, [pc, #436]	@ (80036f4 <HAL_I2C_Mem_Write+0x1ec>)
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 fcc1 	bl	8003ec8 <I2C_WaitOnFlagUntilTimeout>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800354c:	2302      	movs	r3, #2
 800354e:	e0cc      	b.n	80036ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_I2C_Mem_Write+0x56>
 800355a:	2302      	movs	r3, #2
 800355c:	e0c5      	b.n	80036ea <HAL_I2C_Mem_Write+0x1e2>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b01      	cmp	r3, #1
 8003572:	d007      	beq.n	8003584 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003592:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2221      	movs	r2, #33	@ 0x21
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2240      	movs	r2, #64	@ 0x40
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6a3a      	ldr	r2, [r7, #32]
 80035ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80035b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4a4d      	ldr	r2, [pc, #308]	@ (80036f8 <HAL_I2C_Mem_Write+0x1f0>)
 80035c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035c6:	88f8      	ldrh	r0, [r7, #6]
 80035c8:	893a      	ldrh	r2, [r7, #8]
 80035ca:	8979      	ldrh	r1, [r7, #10]
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	9301      	str	r3, [sp, #4]
 80035d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	4603      	mov	r3, r0
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 faf8 	bl	8003bcc <I2C_RequestMemoryWrite>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d052      	beq.n	8003688 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e081      	b.n	80036ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 fd86 	bl	80040fc <I2C_WaitOnTXEFlagUntilTimeout>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00d      	beq.n	8003612 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d107      	bne.n	800360e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800360c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e06b      	b.n	80036ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003616:	781a      	ldrb	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003638:	b29b      	uxth	r3, r3
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b04      	cmp	r3, #4
 800364e:	d11b      	bne.n	8003688 <HAL_I2C_Mem_Write+0x180>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003654:	2b00      	cmp	r3, #0
 8003656:	d017      	beq.n	8003688 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365c:	781a      	ldrb	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003668:	1c5a      	adds	r2, r3, #1
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003672:	3b01      	subs	r3, #1
 8003674:	b29a      	uxth	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1aa      	bne.n	80035e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 fd79 	bl	800418c <I2C_WaitOnBTFFlagUntilTimeout>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00d      	beq.n	80036bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d107      	bne.n	80036b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e016      	b.n	80036ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	e000      	b.n	80036ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80036e8:	2302      	movs	r3, #2
  }
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	00100002 	.word	0x00100002
 80036f8:	ffff0000 	.word	0xffff0000

080036fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08c      	sub	sp, #48	@ 0x30
 8003700:	af02      	add	r7, sp, #8
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	4608      	mov	r0, r1
 8003706:	4611      	mov	r1, r2
 8003708:	461a      	mov	r2, r3
 800370a:	4603      	mov	r3, r0
 800370c:	817b      	strh	r3, [r7, #10]
 800370e:	460b      	mov	r3, r1
 8003710:	813b      	strh	r3, [r7, #8]
 8003712:	4613      	mov	r3, r2
 8003714:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003716:	2300      	movs	r3, #0
 8003718:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800371a:	f7ff faa7 	bl	8002c6c <HAL_GetTick>
 800371e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b20      	cmp	r3, #32
 800372a:	f040 8244 	bne.w	8003bb6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800372e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	2319      	movs	r3, #25
 8003734:	2201      	movs	r2, #1
 8003736:	4982      	ldr	r1, [pc, #520]	@ (8003940 <HAL_I2C_Mem_Read+0x244>)
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 fbc5 	bl	8003ec8 <I2C_WaitOnFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003744:	2302      	movs	r3, #2
 8003746:	e237      	b.n	8003bb8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <HAL_I2C_Mem_Read+0x5a>
 8003752:	2302      	movs	r3, #2
 8003754:	e230      	b.n	8003bb8 <HAL_I2C_Mem_Read+0x4bc>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b01      	cmp	r3, #1
 800376a:	d007      	beq.n	800377c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800378a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2222      	movs	r2, #34	@ 0x22
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2240      	movs	r2, #64	@ 0x40
 8003798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80037ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4a62      	ldr	r2, [pc, #392]	@ (8003944 <HAL_I2C_Mem_Read+0x248>)
 80037bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037be:	88f8      	ldrh	r0, [r7, #6]
 80037c0:	893a      	ldrh	r2, [r7, #8]
 80037c2:	8979      	ldrh	r1, [r7, #10]
 80037c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c6:	9301      	str	r3, [sp, #4]
 80037c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	4603      	mov	r3, r0
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 fa92 	bl	8003cf8 <I2C_RequestMemoryRead>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e1ec      	b.n	8003bb8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d113      	bne.n	800380e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	61fb      	str	r3, [r7, #28]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	61fb      	str	r3, [r7, #28]
 80037fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	e1c0      	b.n	8003b90 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003812:	2b01      	cmp	r3, #1
 8003814:	d11e      	bne.n	8003854 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003824:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003826:	b672      	cpsid	i
}
 8003828:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800382a:	2300      	movs	r3, #0
 800382c:	61bb      	str	r3, [r7, #24]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	61bb      	str	r3, [r7, #24]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	61bb      	str	r3, [r7, #24]
 800383e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800384e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003850:	b662      	cpsie	i
}
 8003852:	e035      	b.n	80038c0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003858:	2b02      	cmp	r3, #2
 800385a:	d11e      	bne.n	800389a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800386a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800386c:	b672      	cpsid	i
}
 800386e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003894:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003896:	b662      	cpsie	i
}
 8003898:	e012      	b.n	80038c0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038a8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038aa:	2300      	movs	r3, #0
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	613b      	str	r3, [r7, #16]
 80038be:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80038c0:	e166      	b.n	8003b90 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	f200 811f 	bhi.w	8003b0a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d123      	bne.n	800391c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 fc9f 	bl	800421c <I2C_WaitOnRXNEFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e167      	b.n	8003bb8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691a      	ldr	r2, [r3, #16]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800391a:	e139      	b.n	8003b90 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003920:	2b02      	cmp	r3, #2
 8003922:	d152      	bne.n	80039ca <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800392a:	2200      	movs	r2, #0
 800392c:	4906      	ldr	r1, [pc, #24]	@ (8003948 <HAL_I2C_Mem_Read+0x24c>)
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 faca 	bl	8003ec8 <I2C_WaitOnFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d008      	beq.n	800394c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e13c      	b.n	8003bb8 <HAL_I2C_Mem_Read+0x4bc>
 800393e:	bf00      	nop
 8003940:	00100002 	.word	0x00100002
 8003944:	ffff0000 	.word	0xffff0000
 8003948:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800394c:	b672      	cpsid	i
}
 800394e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800395e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691a      	ldr	r2, [r3, #16]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003988:	b29b      	uxth	r3, r3
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003992:	b662      	cpsie	i
}
 8003994:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039be:	b29b      	uxth	r3, r3
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039c8:	e0e2      	b.n	8003b90 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039d0:	2200      	movs	r2, #0
 80039d2:	497b      	ldr	r1, [pc, #492]	@ (8003bc0 <HAL_I2C_Mem_Read+0x4c4>)
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 fa77 	bl	8003ec8 <I2C_WaitOnFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e0e9      	b.n	8003bb8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039f4:	b672      	cpsid	i
}
 80039f6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	691a      	ldr	r2, [r3, #16]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a2a:	4b66      	ldr	r3, [pc, #408]	@ (8003bc4 <HAL_I2C_Mem_Read+0x4c8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	08db      	lsrs	r3, r3, #3
 8003a30:	4a65      	ldr	r2, [pc, #404]	@ (8003bc8 <HAL_I2C_Mem_Read+0x4cc>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	0a1a      	lsrs	r2, r3, #8
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	00da      	lsls	r2, r3, #3
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d118      	bne.n	8003a82 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6a:	f043 0220 	orr.w	r2, r3, #32
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003a72:	b662      	cpsie	i
}
 8003a74:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e09a      	b.n	8003bb8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d1d9      	bne.n	8003a44 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003ad2:	b662      	cpsie	i
}
 8003ad4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b08:	e042      	b.n	8003b90 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b0c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 fb84 	bl	800421c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e04c      	b.n	8003bb8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d118      	bne.n	8003b90 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f47f ae94 	bne.w	80038c2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e000      	b.n	8003bb8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003bb6:	2302      	movs	r3, #2
  }
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3728      	adds	r7, #40	@ 0x28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	00010004 	.word	0x00010004
 8003bc4:	20000004 	.word	0x20000004
 8003bc8:	14f8b589 	.word	0x14f8b589

08003bcc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af02      	add	r7, sp, #8
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	4608      	mov	r0, r1
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4603      	mov	r3, r0
 8003bdc:	817b      	strh	r3, [r7, #10]
 8003bde:	460b      	mov	r3, r1
 8003be0:	813b      	strh	r3, [r7, #8]
 8003be2:	4613      	mov	r3, r2
 8003be4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bf4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 f960 	bl	8003ec8 <I2C_WaitOnFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00d      	beq.n	8003c2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c1c:	d103      	bne.n	8003c26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e05f      	b.n	8003cea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c2a:	897b      	ldrh	r3, [r7, #10]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3c:	6a3a      	ldr	r2, [r7, #32]
 8003c3e:	492d      	ldr	r1, [pc, #180]	@ (8003cf4 <I2C_RequestMemoryWrite+0x128>)
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f9bb 	bl	8003fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e04c      	b.n	8003cea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c50:	2300      	movs	r3, #0
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c68:	6a39      	ldr	r1, [r7, #32]
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fa46 	bl	80040fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00d      	beq.n	8003c92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d107      	bne.n	8003c8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e02b      	b.n	8003cea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c92:	88fb      	ldrh	r3, [r7, #6]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d105      	bne.n	8003ca4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c98:	893b      	ldrh	r3, [r7, #8]
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	611a      	str	r2, [r3, #16]
 8003ca2:	e021      	b.n	8003ce8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ca4:	893b      	ldrh	r3, [r7, #8]
 8003ca6:	0a1b      	lsrs	r3, r3, #8
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cb4:	6a39      	ldr	r1, [r7, #32]
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 fa20 	bl	80040fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00d      	beq.n	8003cde <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d107      	bne.n	8003cda <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e005      	b.n	8003cea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cde:	893b      	ldrh	r3, [r7, #8]
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	00010002 	.word	0x00010002

08003cf8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af02      	add	r7, sp, #8
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	4608      	mov	r0, r1
 8003d02:	4611      	mov	r1, r2
 8003d04:	461a      	mov	r2, r3
 8003d06:	4603      	mov	r3, r0
 8003d08:	817b      	strh	r3, [r7, #10]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	813b      	strh	r3, [r7, #8]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f8c2 	bl	8003ec8 <I2C_WaitOnFlagUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00d      	beq.n	8003d66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d58:	d103      	bne.n	8003d62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e0aa      	b.n	8003ebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d66:	897b      	ldrh	r3, [r7, #10]
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d78:	6a3a      	ldr	r2, [r7, #32]
 8003d7a:	4952      	ldr	r1, [pc, #328]	@ (8003ec4 <I2C_RequestMemoryRead+0x1cc>)
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f91d 	bl	8003fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e097      	b.n	8003ebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003da4:	6a39      	ldr	r1, [r7, #32]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 f9a8 	bl	80040fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00d      	beq.n	8003dce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d107      	bne.n	8003dca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e076      	b.n	8003ebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dce:	88fb      	ldrh	r3, [r7, #6]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d105      	bne.n	8003de0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dd4:	893b      	ldrh	r3, [r7, #8]
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	611a      	str	r2, [r3, #16]
 8003dde:	e021      	b.n	8003e24 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003de0:	893b      	ldrh	r3, [r7, #8]
 8003de2:	0a1b      	lsrs	r3, r3, #8
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003df0:	6a39      	ldr	r1, [r7, #32]
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 f982 	bl	80040fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00d      	beq.n	8003e1a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d107      	bne.n	8003e16 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e050      	b.n	8003ebc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e1a:	893b      	ldrh	r3, [r7, #8]
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e26:	6a39      	ldr	r1, [r7, #32]
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 f967 	bl	80040fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00d      	beq.n	8003e50 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d107      	bne.n	8003e4c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e035      	b.n	8003ebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e5e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 f82b 	bl	8003ec8 <I2C_WaitOnFlagUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00d      	beq.n	8003e94 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e86:	d103      	bne.n	8003e90 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e013      	b.n	8003ebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e94:	897b      	ldrh	r3, [r7, #10]
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea6:	6a3a      	ldr	r2, [r7, #32]
 8003ea8:	4906      	ldr	r1, [pc, #24]	@ (8003ec4 <I2C_RequestMemoryRead+0x1cc>)
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f886 	bl	8003fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	00010002 	.word	0x00010002

08003ec8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	603b      	str	r3, [r7, #0]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ed8:	e048      	b.n	8003f6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee0:	d044      	beq.n	8003f6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee2:	f7fe fec3 	bl	8002c6c <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d302      	bcc.n	8003ef8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d139      	bne.n	8003f6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	0c1b      	lsrs	r3, r3, #16
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d10d      	bne.n	8003f1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	43da      	mvns	r2, r3
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	bf0c      	ite	eq
 8003f14:	2301      	moveq	r3, #1
 8003f16:	2300      	movne	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	e00c      	b.n	8003f38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	43da      	mvns	r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf0c      	ite	eq
 8003f30:	2301      	moveq	r3, #1
 8003f32:	2300      	movne	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	461a      	mov	r2, r3
 8003f38:	79fb      	ldrb	r3, [r7, #7]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d116      	bne.n	8003f6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f58:	f043 0220 	orr.w	r2, r3, #32
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e023      	b.n	8003fb4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	0c1b      	lsrs	r3, r3, #16
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d10d      	bne.n	8003f92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	43da      	mvns	r2, r3
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	4013      	ands	r3, r2
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	bf0c      	ite	eq
 8003f88:	2301      	moveq	r3, #1
 8003f8a:	2300      	movne	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	461a      	mov	r2, r3
 8003f90:	e00c      	b.n	8003fac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	43da      	mvns	r2, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bf0c      	ite	eq
 8003fa4:	2301      	moveq	r3, #1
 8003fa6:	2300      	movne	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	461a      	mov	r2, r3
 8003fac:	79fb      	ldrb	r3, [r7, #7]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d093      	beq.n	8003eda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fca:	e071      	b.n	80040b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fda:	d123      	bne.n	8004024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ff4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004010:	f043 0204 	orr.w	r2, r3, #4
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e067      	b.n	80040f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402a:	d041      	beq.n	80040b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800402c:	f7fe fe1e 	bl	8002c6c <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	429a      	cmp	r2, r3
 800403a:	d302      	bcc.n	8004042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d136      	bne.n	80040b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	0c1b      	lsrs	r3, r3, #16
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b01      	cmp	r3, #1
 800404a:	d10c      	bne.n	8004066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	43da      	mvns	r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	4013      	ands	r3, r2
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	bf14      	ite	ne
 800405e:	2301      	movne	r3, #1
 8004060:	2300      	moveq	r3, #0
 8004062:	b2db      	uxtb	r3, r3
 8004064:	e00b      	b.n	800407e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	43da      	mvns	r2, r3
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	4013      	ands	r3, r2
 8004072:	b29b      	uxth	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	bf14      	ite	ne
 8004078:	2301      	movne	r3, #1
 800407a:	2300      	moveq	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d016      	beq.n	80040b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409c:	f043 0220 	orr.w	r2, r3, #32
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e021      	b.n	80040f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	0c1b      	lsrs	r3, r3, #16
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d10c      	bne.n	80040d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	43da      	mvns	r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	4013      	ands	r3, r2
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	bf14      	ite	ne
 80040cc:	2301      	movne	r3, #1
 80040ce:	2300      	moveq	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	e00b      	b.n	80040ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	43da      	mvns	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	4013      	ands	r3, r2
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	bf14      	ite	ne
 80040e6:	2301      	movne	r3, #1
 80040e8:	2300      	moveq	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f47f af6d 	bne.w	8003fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004108:	e034      	b.n	8004174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 f8e3 	bl	80042d6 <I2C_IsAcknowledgeFailed>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e034      	b.n	8004184 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004120:	d028      	beq.n	8004174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004122:	f7fe fda3 	bl	8002c6c <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	429a      	cmp	r2, r3
 8004130:	d302      	bcc.n	8004138 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d11d      	bne.n	8004174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004142:	2b80      	cmp	r3, #128	@ 0x80
 8004144:	d016      	beq.n	8004174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004160:	f043 0220 	orr.w	r2, r3, #32
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e007      	b.n	8004184 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800417e:	2b80      	cmp	r3, #128	@ 0x80
 8004180:	d1c3      	bne.n	800410a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004198:	e034      	b.n	8004204 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f89b 	bl	80042d6 <I2C_IsAcknowledgeFailed>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e034      	b.n	8004214 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b0:	d028      	beq.n	8004204 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b2:	f7fe fd5b 	bl	8002c6c <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d302      	bcc.n	80041c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d11d      	bne.n	8004204 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	f003 0304 	and.w	r3, r3, #4
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d016      	beq.n	8004204 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f0:	f043 0220 	orr.w	r2, r3, #32
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e007      	b.n	8004214 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b04      	cmp	r3, #4
 8004210:	d1c3      	bne.n	800419a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004228:	e049      	b.n	80042be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	2b10      	cmp	r3, #16
 8004236:	d119      	bne.n	800426c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f06f 0210 	mvn.w	r2, #16
 8004240:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e030      	b.n	80042ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800426c:	f7fe fcfe 	bl	8002c6c <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	429a      	cmp	r2, r3
 800427a:	d302      	bcc.n	8004282 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d11d      	bne.n	80042be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800428c:	2b40      	cmp	r3, #64	@ 0x40
 800428e:	d016      	beq.n	80042be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042aa:	f043 0220 	orr.w	r2, r3, #32
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e007      	b.n	80042ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042c8:	2b40      	cmp	r3, #64	@ 0x40
 80042ca:	d1ae      	bne.n	800422a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042ec:	d11b      	bne.n	8004326 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80042f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004312:	f043 0204 	orr.w	r2, r3, #4
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	bc80      	pop	{r7}
 8004330:	4770      	bx	lr
	...

08004334 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004338:	4b03      	ldr	r3, [pc, #12]	@ (8004348 <HAL_PWR_EnableBkUpAccess+0x14>)
 800433a:	2201      	movs	r2, #1
 800433c:	601a      	str	r2, [r3, #0]
}
 800433e:	bf00      	nop
 8004340:	46bd      	mov	sp, r7
 8004342:	bc80      	pop	{r7}
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	420e0020 	.word	0x420e0020

0800434c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e272      	b.n	8004844 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 8087 	beq.w	800447a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800436c:	4b92      	ldr	r3, [pc, #584]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f003 030c 	and.w	r3, r3, #12
 8004374:	2b04      	cmp	r3, #4
 8004376:	d00c      	beq.n	8004392 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004378:	4b8f      	ldr	r3, [pc, #572]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f003 030c 	and.w	r3, r3, #12
 8004380:	2b08      	cmp	r3, #8
 8004382:	d112      	bne.n	80043aa <HAL_RCC_OscConfig+0x5e>
 8004384:	4b8c      	ldr	r3, [pc, #560]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800438c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004390:	d10b      	bne.n	80043aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004392:	4b89      	ldr	r3, [pc, #548]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d06c      	beq.n	8004478 <HAL_RCC_OscConfig+0x12c>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d168      	bne.n	8004478 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e24c      	b.n	8004844 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043b2:	d106      	bne.n	80043c2 <HAL_RCC_OscConfig+0x76>
 80043b4:	4b80      	ldr	r3, [pc, #512]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a7f      	ldr	r2, [pc, #508]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 80043ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043be:	6013      	str	r3, [r2, #0]
 80043c0:	e02e      	b.n	8004420 <HAL_RCC_OscConfig+0xd4>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10c      	bne.n	80043e4 <HAL_RCC_OscConfig+0x98>
 80043ca:	4b7b      	ldr	r3, [pc, #492]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a7a      	ldr	r2, [pc, #488]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 80043d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	4b78      	ldr	r3, [pc, #480]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a77      	ldr	r2, [pc, #476]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 80043dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	e01d      	b.n	8004420 <HAL_RCC_OscConfig+0xd4>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043ec:	d10c      	bne.n	8004408 <HAL_RCC_OscConfig+0xbc>
 80043ee:	4b72      	ldr	r3, [pc, #456]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a71      	ldr	r2, [pc, #452]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 80043f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	4b6f      	ldr	r3, [pc, #444]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a6e      	ldr	r2, [pc, #440]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	e00b      	b.n	8004420 <HAL_RCC_OscConfig+0xd4>
 8004408:	4b6b      	ldr	r3, [pc, #428]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a6a      	ldr	r2, [pc, #424]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 800440e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	4b68      	ldr	r3, [pc, #416]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a67      	ldr	r2, [pc, #412]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 800441a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800441e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d013      	beq.n	8004450 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004428:	f7fe fc20 	bl	8002c6c <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004430:	f7fe fc1c 	bl	8002c6c <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b64      	cmp	r3, #100	@ 0x64
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e200      	b.n	8004844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004442:	4b5d      	ldr	r3, [pc, #372]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0xe4>
 800444e:	e014      	b.n	800447a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004450:	f7fe fc0c 	bl	8002c6c <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004458:	f7fe fc08 	bl	8002c6c <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	@ 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e1ec      	b.n	8004844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800446a:	4b53      	ldr	r3, [pc, #332]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0x10c>
 8004476:	e000      	b.n	800447a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d063      	beq.n	800454e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004486:	4b4c      	ldr	r3, [pc, #304]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f003 030c 	and.w	r3, r3, #12
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00b      	beq.n	80044aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004492:	4b49      	ldr	r3, [pc, #292]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f003 030c 	and.w	r3, r3, #12
 800449a:	2b08      	cmp	r3, #8
 800449c:	d11c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x18c>
 800449e:	4b46      	ldr	r3, [pc, #280]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d116      	bne.n	80044d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044aa:	4b43      	ldr	r3, [pc, #268]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <HAL_RCC_OscConfig+0x176>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d001      	beq.n	80044c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e1c0      	b.n	8004844 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c2:	4b3d      	ldr	r3, [pc, #244]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	4939      	ldr	r1, [pc, #228]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d6:	e03a      	b.n	800454e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d020      	beq.n	8004522 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044e0:	4b36      	ldr	r3, [pc, #216]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 80044e2:	2201      	movs	r2, #1
 80044e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e6:	f7fe fbc1 	bl	8002c6c <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ee:	f7fe fbbd 	bl	8002c6c <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e1a1      	b.n	8004844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004500:	4b2d      	ldr	r3, [pc, #180]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0f0      	beq.n	80044ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800450c:	4b2a      	ldr	r3, [pc, #168]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	4927      	ldr	r1, [pc, #156]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 800451c:	4313      	orrs	r3, r2
 800451e:	600b      	str	r3, [r1, #0]
 8004520:	e015      	b.n	800454e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004522:	4b26      	ldr	r3, [pc, #152]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004528:	f7fe fba0 	bl	8002c6c <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004530:	f7fe fb9c 	bl	8002c6c <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e180      	b.n	8004844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004542:	4b1d      	ldr	r3, [pc, #116]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f0      	bne.n	8004530 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d03a      	beq.n	80045d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d019      	beq.n	8004596 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004562:	4b17      	ldr	r3, [pc, #92]	@ (80045c0 <HAL_RCC_OscConfig+0x274>)
 8004564:	2201      	movs	r2, #1
 8004566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004568:	f7fe fb80 	bl	8002c6c <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004570:	f7fe fb7c 	bl	8002c6c <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e160      	b.n	8004844 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004582:	4b0d      	ldr	r3, [pc, #52]	@ (80045b8 <HAL_RCC_OscConfig+0x26c>)
 8004584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800458e:	2001      	movs	r0, #1
 8004590:	f000 face 	bl	8004b30 <RCC_Delay>
 8004594:	e01c      	b.n	80045d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004596:	4b0a      	ldr	r3, [pc, #40]	@ (80045c0 <HAL_RCC_OscConfig+0x274>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800459c:	f7fe fb66 	bl	8002c6c <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a2:	e00f      	b.n	80045c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045a4:	f7fe fb62 	bl	8002c6c <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d908      	bls.n	80045c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e146      	b.n	8004844 <HAL_RCC_OscConfig+0x4f8>
 80045b6:	bf00      	nop
 80045b8:	40021000 	.word	0x40021000
 80045bc:	42420000 	.word	0x42420000
 80045c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c4:	4b92      	ldr	r3, [pc, #584]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 80045c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e9      	bne.n	80045a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 80a6 	beq.w	800472a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045de:	2300      	movs	r3, #0
 80045e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045e2:	4b8b      	ldr	r3, [pc, #556]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10d      	bne.n	800460a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ee:	4b88      	ldr	r3, [pc, #544]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	4a87      	ldr	r2, [pc, #540]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 80045f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045f8:	61d3      	str	r3, [r2, #28]
 80045fa:	4b85      	ldr	r3, [pc, #532]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004602:	60bb      	str	r3, [r7, #8]
 8004604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004606:	2301      	movs	r3, #1
 8004608:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460a:	4b82      	ldr	r3, [pc, #520]	@ (8004814 <HAL_RCC_OscConfig+0x4c8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004612:	2b00      	cmp	r3, #0
 8004614:	d118      	bne.n	8004648 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004616:	4b7f      	ldr	r3, [pc, #508]	@ (8004814 <HAL_RCC_OscConfig+0x4c8>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a7e      	ldr	r2, [pc, #504]	@ (8004814 <HAL_RCC_OscConfig+0x4c8>)
 800461c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004622:	f7fe fb23 	bl	8002c6c <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800462a:	f7fe fb1f 	bl	8002c6c <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b64      	cmp	r3, #100	@ 0x64
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e103      	b.n	8004844 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463c:	4b75      	ldr	r3, [pc, #468]	@ (8004814 <HAL_RCC_OscConfig+0x4c8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0f0      	beq.n	800462a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d106      	bne.n	800465e <HAL_RCC_OscConfig+0x312>
 8004650:	4b6f      	ldr	r3, [pc, #444]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	4a6e      	ldr	r2, [pc, #440]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	6213      	str	r3, [r2, #32]
 800465c:	e02d      	b.n	80046ba <HAL_RCC_OscConfig+0x36e>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10c      	bne.n	8004680 <HAL_RCC_OscConfig+0x334>
 8004666:	4b6a      	ldr	r3, [pc, #424]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	4a69      	ldr	r2, [pc, #420]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 800466c:	f023 0301 	bic.w	r3, r3, #1
 8004670:	6213      	str	r3, [r2, #32]
 8004672:	4b67      	ldr	r3, [pc, #412]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	4a66      	ldr	r2, [pc, #408]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 8004678:	f023 0304 	bic.w	r3, r3, #4
 800467c:	6213      	str	r3, [r2, #32]
 800467e:	e01c      	b.n	80046ba <HAL_RCC_OscConfig+0x36e>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	2b05      	cmp	r3, #5
 8004686:	d10c      	bne.n	80046a2 <HAL_RCC_OscConfig+0x356>
 8004688:	4b61      	ldr	r3, [pc, #388]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	4a60      	ldr	r2, [pc, #384]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 800468e:	f043 0304 	orr.w	r3, r3, #4
 8004692:	6213      	str	r3, [r2, #32]
 8004694:	4b5e      	ldr	r3, [pc, #376]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	4a5d      	ldr	r2, [pc, #372]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 800469a:	f043 0301 	orr.w	r3, r3, #1
 800469e:	6213      	str	r3, [r2, #32]
 80046a0:	e00b      	b.n	80046ba <HAL_RCC_OscConfig+0x36e>
 80046a2:	4b5b      	ldr	r3, [pc, #364]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	4a5a      	ldr	r2, [pc, #360]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 80046a8:	f023 0301 	bic.w	r3, r3, #1
 80046ac:	6213      	str	r3, [r2, #32]
 80046ae:	4b58      	ldr	r3, [pc, #352]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	4a57      	ldr	r2, [pc, #348]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 80046b4:	f023 0304 	bic.w	r3, r3, #4
 80046b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d015      	beq.n	80046ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c2:	f7fe fad3 	bl	8002c6c <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c8:	e00a      	b.n	80046e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ca:	f7fe facf 	bl	8002c6c <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046d8:	4293      	cmp	r3, r2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e0b1      	b.n	8004844 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e0:	4b4b      	ldr	r3, [pc, #300]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0ee      	beq.n	80046ca <HAL_RCC_OscConfig+0x37e>
 80046ec:	e014      	b.n	8004718 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ee:	f7fe fabd 	bl	8002c6c <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f4:	e00a      	b.n	800470c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f6:	f7fe fab9 	bl	8002c6c <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004704:	4293      	cmp	r3, r2
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e09b      	b.n	8004844 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800470c:	4b40      	ldr	r3, [pc, #256]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1ee      	bne.n	80046f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004718:	7dfb      	ldrb	r3, [r7, #23]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d105      	bne.n	800472a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800471e:	4b3c      	ldr	r3, [pc, #240]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	4a3b      	ldr	r2, [pc, #236]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 8004724:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004728:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 8087 	beq.w	8004842 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004734:	4b36      	ldr	r3, [pc, #216]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f003 030c 	and.w	r3, r3, #12
 800473c:	2b08      	cmp	r3, #8
 800473e:	d061      	beq.n	8004804 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	2b02      	cmp	r3, #2
 8004746:	d146      	bne.n	80047d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004748:	4b33      	ldr	r3, [pc, #204]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 800474a:	2200      	movs	r2, #0
 800474c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474e:	f7fe fa8d 	bl	8002c6c <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004756:	f7fe fa89 	bl	8002c6c <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e06d      	b.n	8004844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004768:	4b29      	ldr	r3, [pc, #164]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1f0      	bne.n	8004756 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800477c:	d108      	bne.n	8004790 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800477e:	4b24      	ldr	r3, [pc, #144]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	4921      	ldr	r1, [pc, #132]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 800478c:	4313      	orrs	r3, r2
 800478e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004790:	4b1f      	ldr	r3, [pc, #124]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a19      	ldr	r1, [r3, #32]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a0:	430b      	orrs	r3, r1
 80047a2:	491b      	ldr	r1, [pc, #108]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 80047aa:	2201      	movs	r2, #1
 80047ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ae:	f7fe fa5d 	bl	8002c6c <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b6:	f7fe fa59 	bl	8002c6c <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e03d      	b.n	8004844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047c8:	4b11      	ldr	r3, [pc, #68]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d0f0      	beq.n	80047b6 <HAL_RCC_OscConfig+0x46a>
 80047d4:	e035      	b.n	8004842 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d6:	4b10      	ldr	r3, [pc, #64]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047dc:	f7fe fa46 	bl	8002c6c <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e4:	f7fe fa42 	bl	8002c6c <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e026      	b.n	8004844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047f6:	4b06      	ldr	r3, [pc, #24]	@ (8004810 <HAL_RCC_OscConfig+0x4c4>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f0      	bne.n	80047e4 <HAL_RCC_OscConfig+0x498>
 8004802:	e01e      	b.n	8004842 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d107      	bne.n	800481c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e019      	b.n	8004844 <HAL_RCC_OscConfig+0x4f8>
 8004810:	40021000 	.word	0x40021000
 8004814:	40007000 	.word	0x40007000
 8004818:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800481c:	4b0b      	ldr	r3, [pc, #44]	@ (800484c <HAL_RCC_OscConfig+0x500>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	429a      	cmp	r2, r3
 800482e:	d106      	bne.n	800483e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800483a:	429a      	cmp	r2, r3
 800483c:	d001      	beq.n	8004842 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40021000 	.word	0x40021000

08004850 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0d0      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004864:	4b6a      	ldr	r3, [pc, #424]	@ (8004a10 <HAL_RCC_ClockConfig+0x1c0>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	429a      	cmp	r2, r3
 8004870:	d910      	bls.n	8004894 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004872:	4b67      	ldr	r3, [pc, #412]	@ (8004a10 <HAL_RCC_ClockConfig+0x1c0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f023 0207 	bic.w	r2, r3, #7
 800487a:	4965      	ldr	r1, [pc, #404]	@ (8004a10 <HAL_RCC_ClockConfig+0x1c0>)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	4313      	orrs	r3, r2
 8004880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004882:	4b63      	ldr	r3, [pc, #396]	@ (8004a10 <HAL_RCC_ClockConfig+0x1c0>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d001      	beq.n	8004894 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e0b8      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d020      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d005      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048ac:	4b59      	ldr	r3, [pc, #356]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	4a58      	ldr	r2, [pc, #352]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 80048b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80048b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0308 	and.w	r3, r3, #8
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d005      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048c4:	4b53      	ldr	r3, [pc, #332]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	4a52      	ldr	r2, [pc, #328]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 80048ca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80048ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d0:	4b50      	ldr	r3, [pc, #320]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	494d      	ldr	r1, [pc, #308]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d040      	beq.n	8004970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d107      	bne.n	8004906 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f6:	4b47      	ldr	r3, [pc, #284]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d115      	bne.n	800492e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e07f      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b02      	cmp	r3, #2
 800490c:	d107      	bne.n	800491e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800490e:	4b41      	ldr	r3, [pc, #260]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d109      	bne.n	800492e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e073      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800491e:	4b3d      	ldr	r3, [pc, #244]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e06b      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800492e:	4b39      	ldr	r3, [pc, #228]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f023 0203 	bic.w	r2, r3, #3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	4936      	ldr	r1, [pc, #216]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 800493c:	4313      	orrs	r3, r2
 800493e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004940:	f7fe f994 	bl	8002c6c <HAL_GetTick>
 8004944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004946:	e00a      	b.n	800495e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004948:	f7fe f990 	bl	8002c6c <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004956:	4293      	cmp	r3, r2
 8004958:	d901      	bls.n	800495e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e053      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495e:	4b2d      	ldr	r3, [pc, #180]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f003 020c 	and.w	r2, r3, #12
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	429a      	cmp	r2, r3
 800496e:	d1eb      	bne.n	8004948 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004970:	4b27      	ldr	r3, [pc, #156]	@ (8004a10 <HAL_RCC_ClockConfig+0x1c0>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d210      	bcs.n	80049a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497e:	4b24      	ldr	r3, [pc, #144]	@ (8004a10 <HAL_RCC_ClockConfig+0x1c0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f023 0207 	bic.w	r2, r3, #7
 8004986:	4922      	ldr	r1, [pc, #136]	@ (8004a10 <HAL_RCC_ClockConfig+0x1c0>)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	4313      	orrs	r3, r2
 800498c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800498e:	4b20      	ldr	r3, [pc, #128]	@ (8004a10 <HAL_RCC_ClockConfig+0x1c0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	429a      	cmp	r2, r3
 800499a:	d001      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e032      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d008      	beq.n	80049be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049ac:	4b19      	ldr	r3, [pc, #100]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	4916      	ldr	r1, [pc, #88]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d009      	beq.n	80049de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049ca:	4b12      	ldr	r3, [pc, #72]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	490e      	ldr	r1, [pc, #56]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049de:	f000 f821 	bl	8004a24 <HAL_RCC_GetSysClockFreq>
 80049e2:	4602      	mov	r2, r0
 80049e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	091b      	lsrs	r3, r3, #4
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	490a      	ldr	r1, [pc, #40]	@ (8004a18 <HAL_RCC_ClockConfig+0x1c8>)
 80049f0:	5ccb      	ldrb	r3, [r1, r3]
 80049f2:	fa22 f303 	lsr.w	r3, r2, r3
 80049f6:	4a09      	ldr	r2, [pc, #36]	@ (8004a1c <HAL_RCC_ClockConfig+0x1cc>)
 80049f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049fa:	4b09      	ldr	r3, [pc, #36]	@ (8004a20 <HAL_RCC_ClockConfig+0x1d0>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fe f8f2 	bl	8002be8 <HAL_InitTick>

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40022000 	.word	0x40022000
 8004a14:	40021000 	.word	0x40021000
 8004a18:	0800d53c 	.word	0x0800d53c
 8004a1c:	20000004 	.word	0x20000004
 8004a20:	20000008 	.word	0x20000008

08004a24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60bb      	str	r3, [r7, #8]
 8004a32:	2300      	movs	r3, #0
 8004a34:	617b      	str	r3, [r7, #20]
 8004a36:	2300      	movs	r3, #0
 8004a38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f003 030c 	and.w	r3, r3, #12
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d002      	beq.n	8004a54 <HAL_RCC_GetSysClockFreq+0x30>
 8004a4e:	2b08      	cmp	r3, #8
 8004a50:	d003      	beq.n	8004a5a <HAL_RCC_GetSysClockFreq+0x36>
 8004a52:	e027      	b.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a54:	4b19      	ldr	r3, [pc, #100]	@ (8004abc <HAL_RCC_GetSysClockFreq+0x98>)
 8004a56:	613b      	str	r3, [r7, #16]
      break;
 8004a58:	e027      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	0c9b      	lsrs	r3, r3, #18
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	4a17      	ldr	r2, [pc, #92]	@ (8004ac0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004a64:	5cd3      	ldrb	r3, [r2, r3]
 8004a66:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d010      	beq.n	8004a94 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a72:	4b11      	ldr	r3, [pc, #68]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	0c5b      	lsrs	r3, r3, #17
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	4a11      	ldr	r2, [pc, #68]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004a7e:	5cd3      	ldrb	r3, [r2, r3]
 8004a80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a0d      	ldr	r2, [pc, #52]	@ (8004abc <HAL_RCC_GetSysClockFreq+0x98>)
 8004a86:	fb03 f202 	mul.w	r2, r3, r2
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a90:	617b      	str	r3, [r7, #20]
 8004a92:	e004      	b.n	8004a9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a0c      	ldr	r2, [pc, #48]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a98:	fb02 f303 	mul.w	r3, r2, r3
 8004a9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	613b      	str	r3, [r7, #16]
      break;
 8004aa2:	e002      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004aa4:	4b05      	ldr	r3, [pc, #20]	@ (8004abc <HAL_RCC_GetSysClockFreq+0x98>)
 8004aa6:	613b      	str	r3, [r7, #16]
      break;
 8004aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aaa:	693b      	ldr	r3, [r7, #16]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	371c      	adds	r7, #28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bc80      	pop	{r7}
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	007a1200 	.word	0x007a1200
 8004ac0:	0800d554 	.word	0x0800d554
 8004ac4:	0800d564 	.word	0x0800d564
 8004ac8:	003d0900 	.word	0x003d0900

08004acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ad0:	4b02      	ldr	r3, [pc, #8]	@ (8004adc <HAL_RCC_GetHCLKFreq+0x10>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr
 8004adc:	20000004 	.word	0x20000004

08004ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ae4:	f7ff fff2 	bl	8004acc <HAL_RCC_GetHCLKFreq>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	4b05      	ldr	r3, [pc, #20]	@ (8004b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	0a1b      	lsrs	r3, r3, #8
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	4903      	ldr	r1, [pc, #12]	@ (8004b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004af6:	5ccb      	ldrb	r3, [r1, r3]
 8004af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40021000 	.word	0x40021000
 8004b04:	0800d54c 	.word	0x0800d54c

08004b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b0c:	f7ff ffde 	bl	8004acc <HAL_RCC_GetHCLKFreq>
 8004b10:	4602      	mov	r2, r0
 8004b12:	4b05      	ldr	r3, [pc, #20]	@ (8004b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	0adb      	lsrs	r3, r3, #11
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	4903      	ldr	r1, [pc, #12]	@ (8004b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b1e:	5ccb      	ldrb	r3, [r1, r3]
 8004b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	0800d54c 	.word	0x0800d54c

08004b30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b38:	4b0a      	ldr	r3, [pc, #40]	@ (8004b64 <RCC_Delay+0x34>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8004b68 <RCC_Delay+0x38>)
 8004b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b42:	0a5b      	lsrs	r3, r3, #9
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	fb02 f303 	mul.w	r3, r2, r3
 8004b4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b4c:	bf00      	nop
  }
  while (Delay --);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	1e5a      	subs	r2, r3, #1
 8004b52:	60fa      	str	r2, [r7, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1f9      	bne.n	8004b4c <RCC_Delay+0x1c>
}
 8004b58:	bf00      	nop
 8004b5a:	bf00      	nop
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bc80      	pop	{r7}
 8004b62:	4770      	bx	lr
 8004b64:	20000004 	.word	0x20000004
 8004b68:	10624dd3 	.word	0x10624dd3

08004b6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	613b      	str	r3, [r7, #16]
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d07d      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b8c:	4b4f      	ldr	r3, [pc, #316]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10d      	bne.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b98:	4b4c      	ldr	r3, [pc, #304]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	4a4b      	ldr	r2, [pc, #300]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ba2:	61d3      	str	r3, [r2, #28]
 8004ba4:	4b49      	ldr	r3, [pc, #292]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bac:	60bb      	str	r3, [r7, #8]
 8004bae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb4:	4b46      	ldr	r3, [pc, #280]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d118      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bc0:	4b43      	ldr	r3, [pc, #268]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a42      	ldr	r2, [pc, #264]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bcc:	f7fe f84e 	bl	8002c6c <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd2:	e008      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bd4:	f7fe f84a 	bl	8002c6c <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b64      	cmp	r3, #100	@ 0x64
 8004be0:	d901      	bls.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e06d      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be6:	4b3a      	ldr	r3, [pc, #232]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0f0      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bf2:	4b36      	ldr	r3, [pc, #216]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bfa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d02e      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d027      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c10:	4b2e      	ldr	r3, [pc, #184]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c1a:	4b2e      	ldr	r3, [pc, #184]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c20:	4b2c      	ldr	r3, [pc, #176]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c26:	4a29      	ldr	r2, [pc, #164]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d014      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c36:	f7fe f819 	bl	8002c6c <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c3c:	e00a      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c3e:	f7fe f815 	bl	8002c6c <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e036      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c54:	4b1d      	ldr	r3, [pc, #116]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0ee      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c60:	4b1a      	ldr	r3, [pc, #104]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	4917      	ldr	r1, [pc, #92]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c72:	7dfb      	ldrb	r3, [r7, #23]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d105      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c78:	4b14      	ldr	r3, [pc, #80]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	4a13      	ldr	r2, [pc, #76]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d008      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c90:	4b0e      	ldr	r3, [pc, #56]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	490b      	ldr	r1, [pc, #44]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0310 	and.w	r3, r3, #16
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d008      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cae:	4b07      	ldr	r3, [pc, #28]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	4904      	ldr	r1, [pc, #16]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	40007000 	.word	0x40007000
 8004cd4:	42420440 	.word	0x42420440

08004cd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b088      	sub	sp, #32
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	61fb      	str	r3, [r7, #28]
 8004ce8:	2300      	movs	r3, #0
 8004cea:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b10      	cmp	r3, #16
 8004cf8:	d00a      	beq.n	8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b10      	cmp	r3, #16
 8004cfe:	f200 808a 	bhi.w	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d045      	beq.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d075      	beq.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004d0e:	e082      	b.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004d10:	4b46      	ldr	r3, [pc, #280]	@ (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004d16:	4b45      	ldr	r3, [pc, #276]	@ (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d07b      	beq.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	0c9b      	lsrs	r3, r3, #18
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	4a41      	ldr	r2, [pc, #260]	@ (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004d2c:	5cd3      	ldrb	r3, [r2, r3]
 8004d2e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d015      	beq.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d3a:	4b3c      	ldr	r3, [pc, #240]	@ (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	0c5b      	lsrs	r3, r3, #17
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	4a3b      	ldr	r2, [pc, #236]	@ (8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004d46:	5cd3      	ldrb	r3, [r2, r3]
 8004d48:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00d      	beq.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004d54:	4a38      	ldr	r2, [pc, #224]	@ (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	fb02 f303 	mul.w	r3, r2, r3
 8004d62:	61fb      	str	r3, [r7, #28]
 8004d64:	e004      	b.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	4a34      	ldr	r2, [pc, #208]	@ (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004d6a:	fb02 f303 	mul.w	r3, r2, r3
 8004d6e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004d70:	4b2e      	ldr	r3, [pc, #184]	@ (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d7c:	d102      	bne.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	61bb      	str	r3, [r7, #24]
      break;
 8004d82:	e04a      	b.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	4a2d      	ldr	r2, [pc, #180]	@ (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8e:	085b      	lsrs	r3, r3, #1
 8004d90:	61bb      	str	r3, [r7, #24]
      break;
 8004d92:	e042      	b.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004d94:	4b25      	ldr	r3, [pc, #148]	@ (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004da0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004da4:	d108      	bne.n	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004db0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004db4:	61bb      	str	r3, [r7, #24]
 8004db6:	e01f      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dc2:	d109      	bne.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004dc4:	4b19      	ldr	r3, [pc, #100]	@ (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004dd0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004dd4:	61bb      	str	r3, [r7, #24]
 8004dd6:	e00f      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004de2:	d11c      	bne.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004de4:	4b11      	ldr	r3, [pc, #68]	@ (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d016      	beq.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004df0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004df4:	61bb      	str	r3, [r7, #24]
      break;
 8004df6:	e012      	b.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004df8:	e011      	b.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004dfa:	f7ff fe85 	bl	8004b08 <HAL_RCC_GetPCLK2Freq>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	4b0a      	ldr	r3, [pc, #40]	@ (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	0b9b      	lsrs	r3, r3, #14
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e12:	61bb      	str	r3, [r7, #24]
      break;
 8004e14:	e004      	b.n	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004e16:	bf00      	nop
 8004e18:	e002      	b.n	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004e1a:	bf00      	nop
 8004e1c:	e000      	b.n	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004e1e:	bf00      	nop
    }
  }
  return (frequency);
 8004e20:	69bb      	ldr	r3, [r7, #24]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3720      	adds	r7, #32
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	0800d568 	.word	0x0800d568
 8004e34:	0800d578 	.word	0x0800d578
 8004e38:	007a1200 	.word	0x007a1200
 8004e3c:	003d0900 	.word	0x003d0900
 8004e40:	aaaaaaab 	.word	0xaaaaaaab

08004e44 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e07a      	b.n	8004f50 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	7c5b      	ldrb	r3, [r3, #17]
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d105      	bne.n	8004e70 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7fd fcdc 	bl	8002828 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fbcc 	bl	8005614 <HAL_RTC_WaitForSynchro>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d004      	beq.n	8004e8c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2204      	movs	r2, #4
 8004e86:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e061      	b.n	8004f50 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fc85 	bl	800579c <RTC_EnterInitMode>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d004      	beq.n	8004ea2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2204      	movs	r2, #4
 8004e9c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e056      	b.n	8004f50 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0207 	bic.w	r2, r2, #7
 8004eb0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d005      	beq.n	8004ec6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004eba:	4b27      	ldr	r3, [pc, #156]	@ (8004f58 <HAL_RTC_Init+0x114>)
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ebe:	4a26      	ldr	r2, [pc, #152]	@ (8004f58 <HAL_RTC_Init+0x114>)
 8004ec0:	f023 0301 	bic.w	r3, r3, #1
 8004ec4:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004ec6:	4b24      	ldr	r3, [pc, #144]	@ (8004f58 <HAL_RTC_Init+0x114>)
 8004ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eca:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	4921      	ldr	r1, [pc, #132]	@ (8004f58 <HAL_RTC_Init+0x114>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee0:	d003      	beq.n	8004eea <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	e00e      	b.n	8004f08 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004eea:	2001      	movs	r0, #1
 8004eec:	f7ff fef4 	bl	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ef0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d104      	bne.n	8004f02 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2204      	movs	r2, #4
 8004efc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e026      	b.n	8004f50 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	3b01      	subs	r3, #1
 8004f06:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	0c1a      	lsrs	r2, r3, #16
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f002 020f 	and.w	r2, r2, #15
 8004f14:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	b292      	uxth	r2, r2
 8004f1e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 fc63 	bl	80057ec <RTC_ExitInitMode>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d004      	beq.n	8004f36 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2204      	movs	r2, #4
 8004f30:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e00c      	b.n	8004f50 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
  }
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40006c00 	.word	0x40006c00

08004f5c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004f5c:	b590      	push	{r4, r7, lr}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d002      	beq.n	8004f7c <HAL_RTC_SetTime+0x20>
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e080      	b.n	8005082 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	7c1b      	ldrb	r3, [r3, #16]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_RTC_SetTime+0x30>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e07a      	b.n	8005082 <HAL_RTC_SetTime+0x126>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2202      	movs	r2, #2
 8004f96:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d113      	bne.n	8004fc6 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8004fa8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	785b      	ldrb	r3, [r3, #1]
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	1a5b      	subs	r3, r3, r1
 8004fb8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004fba:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004fc0:	4413      	add	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	e01e      	b.n	8005004 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 fc53 	bl	8005876 <RTC_Bcd2ToByte>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8004fd8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	785b      	ldrb	r3, [r3, #1]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 fc48 	bl	8005876 <RTC_Bcd2ToByte>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	461a      	mov	r2, r3
 8004fea:	4613      	mov	r3, r2
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	1a9b      	subs	r3, r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004ff2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	789b      	ldrb	r3, [r3, #2]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 fc3c 	bl	8005876 <RTC_Bcd2ToByte>
 8004ffe:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005000:	4423      	add	r3, r4
 8005002:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005004:	6979      	ldr	r1, [r7, #20]
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 fb61 	bl	80056ce <RTC_WriteTimeCounter>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d007      	beq.n	8005022 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2204      	movs	r2, #4
 8005016:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e02f      	b.n	8005082 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0205 	bic.w	r2, r2, #5
 8005030:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 fb72 	bl	800571c <RTC_ReadAlarmCounter>
 8005038:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005040:	d018      	beq.n	8005074 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	429a      	cmp	r2, r3
 8005048:	d214      	bcs.n	8005074 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8005050:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005054:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005056:	6939      	ldr	r1, [r7, #16]
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 fb78 	bl	800574e <RTC_WriteAlarmCounter>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d007      	beq.n	8005074 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2204      	movs	r2, #4
 8005068:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e006      	b.n	8005082 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2201      	movs	r2, #1
 8005078:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005080:	2300      	movs	r3, #0
  }
}
 8005082:	4618      	mov	r0, r3
 8005084:	371c      	adds	r7, #28
 8005086:	46bd      	mov	sp, r7
 8005088:	bd90      	pop	{r4, r7, pc}
	...

0800508c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	61bb      	str	r3, [r7, #24]
 800509c:	2300      	movs	r3, #0
 800509e:	61fb      	str	r3, [r7, #28]
 80050a0:	2300      	movs	r3, #0
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	2300      	movs	r3, #0
 80050a6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d002      	beq.n	80050b4 <HAL_RTC_GetTime+0x28>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e0b5      	b.n	8005224 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e0ac      	b.n	8005224 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 facf 	bl	800566e <RTC_ReadTimeCounter>
 80050d0:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	4a55      	ldr	r2, [pc, #340]	@ (800522c <HAL_RTC_GetTime+0x1a0>)
 80050d6:	fba2 2303 	umull	r2, r3, r2, r3
 80050da:	0adb      	lsrs	r3, r3, #11
 80050dc:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	4b52      	ldr	r3, [pc, #328]	@ (800522c <HAL_RTC_GetTime+0x1a0>)
 80050e2:	fba3 1302 	umull	r1, r3, r3, r2
 80050e6:	0adb      	lsrs	r3, r3, #11
 80050e8:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80050ec:	fb01 f303 	mul.w	r3, r1, r3
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	4a4f      	ldr	r2, [pc, #316]	@ (8005230 <HAL_RTC_GetTime+0x1a4>)
 80050f4:	fba2 2303 	umull	r2, r3, r2, r3
 80050f8:	095b      	lsrs	r3, r3, #5
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	4a4a      	ldr	r2, [pc, #296]	@ (800522c <HAL_RTC_GetTime+0x1a0>)
 8005104:	fba2 1203 	umull	r1, r2, r2, r3
 8005108:	0ad2      	lsrs	r2, r2, #11
 800510a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800510e:	fb01 f202 	mul.w	r2, r1, r2
 8005112:	1a9a      	subs	r2, r3, r2
 8005114:	4b46      	ldr	r3, [pc, #280]	@ (8005230 <HAL_RTC_GetTime+0x1a4>)
 8005116:	fba3 1302 	umull	r1, r3, r3, r2
 800511a:	0959      	lsrs	r1, r3, #5
 800511c:	460b      	mov	r3, r1
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	1a5b      	subs	r3, r3, r1
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	1ad1      	subs	r1, r2, r3
 8005126:	b2ca      	uxtb	r2, r1
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	2b17      	cmp	r3, #23
 8005130:	d955      	bls.n	80051de <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	4a3f      	ldr	r2, [pc, #252]	@ (8005234 <HAL_RTC_GetTime+0x1a8>)
 8005136:	fba2 2303 	umull	r2, r3, r2, r3
 800513a:	091b      	lsrs	r3, r3, #4
 800513c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800513e:	6939      	ldr	r1, [r7, #16]
 8005140:	4b3c      	ldr	r3, [pc, #240]	@ (8005234 <HAL_RTC_GetTime+0x1a8>)
 8005142:	fba3 2301 	umull	r2, r3, r3, r1
 8005146:	091a      	lsrs	r2, r3, #4
 8005148:	4613      	mov	r3, r2
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	4413      	add	r3, r2
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	1aca      	subs	r2, r1, r3
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 fadf 	bl	800571c <RTC_ReadAlarmCounter>
 800515e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005166:	d008      	beq.n	800517a <HAL_RTC_GetTime+0xee>
 8005168:	69fa      	ldr	r2, [r7, #28]
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	429a      	cmp	r2, r3
 800516e:	d904      	bls.n	800517a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8005170:	69fa      	ldr	r2, [r7, #28]
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	61fb      	str	r3, [r7, #28]
 8005178:	e002      	b.n	8005180 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800517a:	f04f 33ff 	mov.w	r3, #4294967295
 800517e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	4a2d      	ldr	r2, [pc, #180]	@ (8005238 <HAL_RTC_GetTime+0x1ac>)
 8005184:	fb02 f303 	mul.w	r3, r2, r3
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800518e:	69b9      	ldr	r1, [r7, #24]
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 fa9c 	bl	80056ce <RTC_WriteTimeCounter>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e041      	b.n	8005224 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a6:	d00c      	beq.n	80051c2 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80051a8:	69fa      	ldr	r2, [r7, #28]
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	4413      	add	r3, r2
 80051ae:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80051b0:	69f9      	ldr	r1, [r7, #28]
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 facb 	bl	800574e <RTC_WriteAlarmCounter>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e030      	b.n	8005224 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80051c2:	69f9      	ldr	r1, [r7, #28]
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 fac2 	bl	800574e <RTC_WriteAlarmCounter>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e027      	b.n	8005224 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80051d4:	6979      	ldr	r1, [r7, #20]
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f000 fb6a 	bl	80058b0 <RTC_DateUpdate>
 80051dc:	e003      	b.n	80051e6 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d01a      	beq.n	8005222 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 fb23 	bl	800583c <RTC_ByteToBcd2>
 80051f6:	4603      	mov	r3, r0
 80051f8:	461a      	mov	r2, r3
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	785b      	ldrb	r3, [r3, #1]
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fb1a 	bl	800583c <RTC_ByteToBcd2>
 8005208:	4603      	mov	r3, r0
 800520a:	461a      	mov	r2, r3
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	789b      	ldrb	r3, [r3, #2]
 8005214:	4618      	mov	r0, r3
 8005216:	f000 fb11 	bl	800583c <RTC_ByteToBcd2>
 800521a:	4603      	mov	r3, r0
 800521c:	461a      	mov	r2, r3
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3720      	adds	r7, #32
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	91a2b3c5 	.word	0x91a2b3c5
 8005230:	88888889 	.word	0x88888889
 8005234:	aaaaaaab 	.word	0xaaaaaaab
 8005238:	00015180 	.word	0x00015180

0800523c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	61fb      	str	r3, [r7, #28]
 800524c:	2300      	movs	r3, #0
 800524e:	61bb      	str	r3, [r7, #24]
 8005250:	2300      	movs	r3, #0
 8005252:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d002      	beq.n	8005260 <HAL_RTC_SetDate+0x24>
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e097      	b.n	8005394 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	7c1b      	ldrb	r3, [r3, #16]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d101      	bne.n	8005270 <HAL_RTC_SetDate+0x34>
 800526c:	2302      	movs	r3, #2
 800526e:	e091      	b.n	8005394 <HAL_RTC_SetDate+0x158>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2201      	movs	r2, #1
 8005274:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2202      	movs	r2, #2
 800527a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10c      	bne.n	800529c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	78da      	ldrb	r2, [r3, #3]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	785a      	ldrb	r2, [r3, #1]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	789a      	ldrb	r2, [r3, #2]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	739a      	strb	r2, [r3, #14]
 800529a:	e01a      	b.n	80052d2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	78db      	ldrb	r3, [r3, #3]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fae8 	bl	8005876 <RTC_Bcd2ToByte>
 80052a6:	4603      	mov	r3, r0
 80052a8:	461a      	mov	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	785b      	ldrb	r3, [r3, #1]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fadf 	bl	8005876 <RTC_Bcd2ToByte>
 80052b8:	4603      	mov	r3, r0
 80052ba:	461a      	mov	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	789b      	ldrb	r3, [r3, #2]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 fad6 	bl	8005876 <RTC_Bcd2ToByte>
 80052ca:	4603      	mov	r3, r0
 80052cc:	461a      	mov	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	7bdb      	ldrb	r3, [r3, #15]
 80052d6:	4618      	mov	r0, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	7b59      	ldrb	r1, [r3, #13]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	7b9b      	ldrb	r3, [r3, #14]
 80052e0:	461a      	mov	r2, r3
 80052e2:	f000 fbc1 	bl	8005a68 <RTC_WeekDayNum>
 80052e6:	4603      	mov	r3, r0
 80052e8:	461a      	mov	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	7b1a      	ldrb	r2, [r3, #12]
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 f9b9 	bl	800566e <RTC_ReadTimeCounter>
 80052fc:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	4a26      	ldr	r2, [pc, #152]	@ (800539c <HAL_RTC_SetDate+0x160>)
 8005302:	fba2 2303 	umull	r2, r3, r2, r3
 8005306:	0adb      	lsrs	r3, r3, #11
 8005308:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2b18      	cmp	r3, #24
 800530e:	d93a      	bls.n	8005386 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	4a23      	ldr	r2, [pc, #140]	@ (80053a0 <HAL_RTC_SetDate+0x164>)
 8005314:	fba2 2303 	umull	r2, r3, r2, r3
 8005318:	091b      	lsrs	r3, r3, #4
 800531a:	4a22      	ldr	r2, [pc, #136]	@ (80053a4 <HAL_RTC_SetDate+0x168>)
 800531c:	fb02 f303 	mul.w	r3, r2, r3
 8005320:	69fa      	ldr	r2, [r7, #28]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005326:	69f9      	ldr	r1, [r7, #28]
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 f9d0 	bl	80056ce <RTC_WriteTimeCounter>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d007      	beq.n	8005344 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2204      	movs	r2, #4
 8005338:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e027      	b.n	8005394 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 f9e9 	bl	800571c <RTC_ReadAlarmCounter>
 800534a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005352:	d018      	beq.n	8005386 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	429a      	cmp	r2, r3
 800535a:	d214      	bcs.n	8005386 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8005362:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005366:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005368:	69b9      	ldr	r1, [r7, #24]
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 f9ef 	bl	800574e <RTC_WriteAlarmCounter>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d007      	beq.n	8005386 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2204      	movs	r2, #4
 800537a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e006      	b.n	8005394 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2201      	movs	r2, #1
 800538a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3720      	adds	r7, #32
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	91a2b3c5 	.word	0x91a2b3c5
 80053a0:	aaaaaaab 	.word	0xaaaaaaab
 80053a4:	00015180 	.word	0x00015180

080053a8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80053b4:	f107 0314 	add.w	r3, r7, #20
 80053b8:	2100      	movs	r1, #0
 80053ba:	460a      	mov	r2, r1
 80053bc:	801a      	strh	r2, [r3, #0]
 80053be:	460a      	mov	r2, r1
 80053c0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <HAL_RTC_GetDate+0x26>
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e03a      	b.n	8005448 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80053d2:	f107 0314 	add.w	r3, r7, #20
 80053d6:	2200      	movs	r2, #0
 80053d8:	4619      	mov	r1, r3
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f7ff fe56 	bl	800508c <HAL_RTC_GetTime>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e02e      	b.n	8005448 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	7b1a      	ldrb	r2, [r3, #12]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	7bda      	ldrb	r2, [r3, #15]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	7b5a      	ldrb	r2, [r3, #13]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	7b9a      	ldrb	r2, [r3, #14]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d01a      	beq.n	8005446 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	78db      	ldrb	r3, [r3, #3]
 8005414:	4618      	mov	r0, r3
 8005416:	f000 fa11 	bl	800583c <RTC_ByteToBcd2>
 800541a:	4603      	mov	r3, r0
 800541c:	461a      	mov	r2, r3
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	785b      	ldrb	r3, [r3, #1]
 8005426:	4618      	mov	r0, r3
 8005428:	f000 fa08 	bl	800583c <RTC_ByteToBcd2>
 800542c:	4603      	mov	r3, r0
 800542e:	461a      	mov	r2, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	789b      	ldrb	r3, [r3, #2]
 8005438:	4618      	mov	r0, r3
 800543a:	f000 f9ff 	bl	800583c <RTC_ByteToBcd2>
 800543e:	4603      	mov	r3, r0
 8005440:	461a      	mov	r2, r3
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005450:	b590      	push	{r4, r7, lr}
 8005452:	b089      	sub	sp, #36	@ 0x24
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 800545c:	2300      	movs	r3, #0
 800545e:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8005460:	f107 0314 	add.w	r3, r7, #20
 8005464:	2100      	movs	r1, #0
 8005466:	460a      	mov	r2, r1
 8005468:	801a      	strh	r2, [r3, #0]
 800546a:	460a      	mov	r2, r1
 800546c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <HAL_RTC_SetAlarm_IT+0x2a>
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e099      	b.n	80055b2 <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	7c1b      	ldrb	r3, [r3, #16]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d101      	bne.n	800548a <HAL_RTC_SetAlarm_IT+0x3a>
 8005486:	2302      	movs	r3, #2
 8005488:	e093      	b.n	80055b2 <HAL_RTC_SetAlarm_IT+0x162>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2201      	movs	r2, #1
 800548e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2202      	movs	r2, #2
 8005494:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8005496:	f107 0314 	add.w	r3, r7, #20
 800549a:	2200      	movs	r2, #0
 800549c:	4619      	mov	r1, r3
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f7ff fdf4 	bl	800508c <HAL_RTC_GetTime>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e081      	b.n	80055b2 <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80054ae:	7d3b      	ldrb	r3, [r7, #20]
 80054b0:	461a      	mov	r2, r3
 80054b2:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80054b6:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 80054ba:	7d7b      	ldrb	r3, [r7, #21]
 80054bc:	4619      	mov	r1, r3
 80054be:	460b      	mov	r3, r1
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	1a5b      	subs	r3, r3, r1
 80054c4:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80054c6:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 80054c8:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80054ca:	4413      	add	r3, r2
 80054cc:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d113      	bne.n	80054fc <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	461a      	mov	r2, r3
 80054da:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80054de:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	785b      	ldrb	r3, [r3, #1]
 80054e6:	4619      	mov	r1, r3
 80054e8:	460b      	mov	r3, r1
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	1a5b      	subs	r3, r3, r1
 80054ee:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80054f0:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80054f6:	4413      	add	r3, r2
 80054f8:	61fb      	str	r3, [r7, #28]
 80054fa:	e01e      	b.n	800553a <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	4618      	mov	r0, r3
 8005502:	f000 f9b8 	bl	8005876 <RTC_Bcd2ToByte>
 8005506:	4603      	mov	r3, r0
 8005508:	461a      	mov	r2, r3
 800550a:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800550e:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	785b      	ldrb	r3, [r3, #1]
 8005516:	4618      	mov	r0, r3
 8005518:	f000 f9ad 	bl	8005876 <RTC_Bcd2ToByte>
 800551c:	4603      	mov	r3, r0
 800551e:	461a      	mov	r2, r3
 8005520:	4613      	mov	r3, r2
 8005522:	011b      	lsls	r3, r3, #4
 8005524:	1a9b      	subs	r3, r3, r2
 8005526:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005528:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	789b      	ldrb	r3, [r3, #2]
 800552e:	4618      	mov	r0, r3
 8005530:	f000 f9a1 	bl	8005876 <RTC_Bcd2ToByte>
 8005534:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005536:	4423      	add	r3, r4
 8005538:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 800553a:	69fa      	ldr	r2, [r7, #28]
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	429a      	cmp	r2, r3
 8005540:	d205      	bcs.n	800554e <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8005548:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800554c:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800554e:	69f9      	ldr	r1, [r7, #28]
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 f8fc 	bl	800574e <RTC_WriteAlarmCounter>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d007      	beq.n	800556c <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2204      	movs	r2, #4
 8005560:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e022      	b.n	80055b2 <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0202 	bic.w	r2, r2, #2
 800557a:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0202 	orr.w	r2, r2, #2
 800558a:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800558c:	4b0b      	ldr	r3, [pc, #44]	@ (80055bc <HAL_RTC_SetAlarm_IT+0x16c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a0a      	ldr	r2, [pc, #40]	@ (80055bc <HAL_RTC_SetAlarm_IT+0x16c>)
 8005592:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005596:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005598:	4b08      	ldr	r3, [pc, #32]	@ (80055bc <HAL_RTC_SetAlarm_IT+0x16c>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	4a07      	ldr	r2, [pc, #28]	@ (80055bc <HAL_RTC_SetAlarm_IT+0x16c>)
 800559e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055a2:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2201      	movs	r2, #1
 80055a8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80055b0:	2300      	movs	r3, #0
  }
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3724      	adds	r7, #36	@ 0x24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd90      	pop	{r4, r7, pc}
 80055ba:	bf00      	nop
 80055bc:	40010400 	.word	0x40010400

080055c0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d011      	beq.n	80055fa <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7fc fde1 	bl	80021ac <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 0202 	bic.w	r2, r2, #2
 80055f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80055fa:	4b05      	ldr	r3, [pc, #20]	@ (8005610 <HAL_RTC_AlarmIRQHandler+0x50>)
 80055fc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005600:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	745a      	strb	r2, [r3, #17]
}
 8005608:	bf00      	nop
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40010400 	.word	0x40010400

08005614 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800561c:	2300      	movs	r3, #0
 800561e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e01d      	b.n	8005666 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0208 	bic.w	r2, r2, #8
 8005638:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800563a:	f7fd fb17 	bl	8002c6c <HAL_GetTick>
 800563e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005640:	e009      	b.n	8005656 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005642:	f7fd fb13 	bl	8002c6c <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005650:	d901      	bls.n	8005656 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e007      	b.n	8005666 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f003 0308 	and.w	r3, r3, #8
 8005660:	2b00      	cmp	r3, #0
 8005662:	d0ee      	beq.n	8005642 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800566e:	b480      	push	{r7}
 8005670:	b087      	sub	sp, #28
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	827b      	strh	r3, [r7, #18]
 800567a:	2300      	movs	r3, #0
 800567c:	823b      	strh	r3, [r7, #16]
 800567e:	2300      	movs	r3, #0
 8005680:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005682:	2300      	movs	r3, #0
 8005684:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800569e:	8a7a      	ldrh	r2, [r7, #18]
 80056a0:	8a3b      	ldrh	r3, [r7, #16]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d008      	beq.n	80056b8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80056a6:	8a3b      	ldrh	r3, [r7, #16]
 80056a8:	041a      	lsls	r2, r3, #16
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	4313      	orrs	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]
 80056b6:	e004      	b.n	80056c2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80056b8:	8a7b      	ldrh	r3, [r7, #18]
 80056ba:	041a      	lsls	r2, r3, #16
 80056bc:	89fb      	ldrh	r3, [r7, #14]
 80056be:	4313      	orrs	r3, r2
 80056c0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80056c2:	697b      	ldr	r3, [r7, #20]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	371c      	adds	r7, #28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bc80      	pop	{r7}
 80056cc:	4770      	bx	lr

080056ce <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b084      	sub	sp, #16
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056d8:	2300      	movs	r3, #0
 80056da:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f85d 	bl	800579c <RTC_EnterInitMode>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d002      	beq.n	80056ee <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	73fb      	strb	r3, [r7, #15]
 80056ec:	e011      	b.n	8005712 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	0c12      	lsrs	r2, r2, #16
 80056f6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	b292      	uxth	r2, r2
 8005700:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f872 	bl	80057ec <RTC_ExitInitMode>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005712:	7bfb      	ldrb	r3, [r7, #15]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005724:	2300      	movs	r3, #0
 8005726:	81fb      	strh	r3, [r7, #14]
 8005728:	2300      	movs	r3, #0
 800572a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800573a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800573c:	89fb      	ldrh	r3, [r7, #14]
 800573e:	041a      	lsls	r2, r3, #16
 8005740:	89bb      	ldrh	r3, [r7, #12]
 8005742:	4313      	orrs	r3, r2
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	bc80      	pop	{r7}
 800574c:	4770      	bx	lr

0800574e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b084      	sub	sp, #16
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
 8005756:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005758:	2300      	movs	r3, #0
 800575a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f81d 	bl	800579c <RTC_EnterInitMode>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	73fb      	strb	r3, [r7, #15]
 800576c:	e011      	b.n	8005792 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	0c12      	lsrs	r2, r2, #16
 8005776:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	b292      	uxth	r2, r2
 8005780:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f832 	bl	80057ec <RTC_ExitInitMode>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005792:	7bfb      	ldrb	r3, [r7, #15]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80057a8:	f7fd fa60 	bl	8002c6c <HAL_GetTick>
 80057ac:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80057ae:	e009      	b.n	80057c4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80057b0:	f7fd fa5c 	bl	8002c6c <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80057be:	d901      	bls.n	80057c4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e00f      	b.n	80057e4 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f003 0320 	and.w	r3, r3, #32
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0ee      	beq.n	80057b0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f042 0210 	orr.w	r2, r2, #16
 80057e0:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0210 	bic.w	r2, r2, #16
 8005806:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005808:	f7fd fa30 	bl	8002c6c <HAL_GetTick>
 800580c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800580e:	e009      	b.n	8005824 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005810:	f7fd fa2c 	bl	8002c6c <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800581e:	d901      	bls.n	8005824 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e007      	b.n	8005834 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f003 0320 	and.w	r3, r3, #32
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0ee      	beq.n	8005810 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	4603      	mov	r3, r0
 8005844:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800584a:	e005      	b.n	8005858 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	3301      	adds	r3, #1
 8005850:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	3b0a      	subs	r3, #10
 8005856:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005858:	79fb      	ldrb	r3, [r7, #7]
 800585a:	2b09      	cmp	r3, #9
 800585c:	d8f6      	bhi.n	800584c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	b2db      	uxtb	r3, r3
 8005862:	011b      	lsls	r3, r3, #4
 8005864:	b2da      	uxtb	r2, r3
 8005866:	79fb      	ldrb	r3, [r7, #7]
 8005868:	4313      	orrs	r3, r2
 800586a:	b2db      	uxtb	r3, r3
}
 800586c:	4618      	mov	r0, r3
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	bc80      	pop	{r7}
 8005874:	4770      	bx	lr

08005876 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005876:	b480      	push	{r7}
 8005878:	b085      	sub	sp, #20
 800587a:	af00      	add	r7, sp, #0
 800587c:	4603      	mov	r3, r0
 800587e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	091b      	lsrs	r3, r3, #4
 8005888:	b2db      	uxtb	r3, r3
 800588a:	461a      	mov	r2, r3
 800588c:	4613      	mov	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005896:	79fb      	ldrb	r3, [r7, #7]
 8005898:	f003 030f 	and.w	r3, r3, #15
 800589c:	b2da      	uxtb	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	4413      	add	r3, r2
 80058a4:	b2db      	uxtb	r3, r3
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bc80      	pop	{r7}
 80058ae:	4770      	bx	lr

080058b0 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	617b      	str	r3, [r7, #20]
 80058be:	2300      	movs	r3, #0
 80058c0:	613b      	str	r3, [r7, #16]
 80058c2:	2300      	movs	r3, #0
 80058c4:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	7bdb      	ldrb	r3, [r3, #15]
 80058ce:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	7b5b      	ldrb	r3, [r3, #13]
 80058d4:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	7b9b      	ldrb	r3, [r3, #14]
 80058da:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80058dc:	2300      	movs	r3, #0
 80058de:	60bb      	str	r3, [r7, #8]
 80058e0:	e06f      	b.n	80059c2 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d011      	beq.n	800590c <RTC_DateUpdate+0x5c>
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	2b03      	cmp	r3, #3
 80058ec:	d00e      	beq.n	800590c <RTC_DateUpdate+0x5c>
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	2b05      	cmp	r3, #5
 80058f2:	d00b      	beq.n	800590c <RTC_DateUpdate+0x5c>
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	2b07      	cmp	r3, #7
 80058f8:	d008      	beq.n	800590c <RTC_DateUpdate+0x5c>
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	2b08      	cmp	r3, #8
 80058fe:	d005      	beq.n	800590c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	2b0a      	cmp	r3, #10
 8005904:	d002      	beq.n	800590c <RTC_DateUpdate+0x5c>
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	2b0c      	cmp	r3, #12
 800590a:	d117      	bne.n	800593c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2b1e      	cmp	r3, #30
 8005910:	d803      	bhi.n	800591a <RTC_DateUpdate+0x6a>
      {
        day++;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	3301      	adds	r3, #1
 8005916:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005918:	e050      	b.n	80059bc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	2b0c      	cmp	r3, #12
 800591e:	d005      	beq.n	800592c <RTC_DateUpdate+0x7c>
        {
          month++;
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	3301      	adds	r3, #1
 8005924:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005926:	2301      	movs	r3, #1
 8005928:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800592a:	e047      	b.n	80059bc <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800592c:	2301      	movs	r3, #1
 800592e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005930:	2301      	movs	r3, #1
 8005932:	60fb      	str	r3, [r7, #12]
          year++;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	3301      	adds	r3, #1
 8005938:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800593a:	e03f      	b.n	80059bc <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	2b04      	cmp	r3, #4
 8005940:	d008      	beq.n	8005954 <RTC_DateUpdate+0xa4>
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	2b06      	cmp	r3, #6
 8005946:	d005      	beq.n	8005954 <RTC_DateUpdate+0xa4>
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	2b09      	cmp	r3, #9
 800594c:	d002      	beq.n	8005954 <RTC_DateUpdate+0xa4>
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	2b0b      	cmp	r3, #11
 8005952:	d10c      	bne.n	800596e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2b1d      	cmp	r3, #29
 8005958:	d803      	bhi.n	8005962 <RTC_DateUpdate+0xb2>
      {
        day++;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	3301      	adds	r3, #1
 800595e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005960:	e02c      	b.n	80059bc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	3301      	adds	r3, #1
 8005966:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005968:	2301      	movs	r3, #1
 800596a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800596c:	e026      	b.n	80059bc <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	2b02      	cmp	r3, #2
 8005972:	d123      	bne.n	80059bc <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2b1b      	cmp	r3, #27
 8005978:	d803      	bhi.n	8005982 <RTC_DateUpdate+0xd2>
      {
        day++;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3301      	adds	r3, #1
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	e01c      	b.n	80059bc <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b1c      	cmp	r3, #28
 8005986:	d111      	bne.n	80059ac <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	b29b      	uxth	r3, r3
 800598c:	4618      	mov	r0, r3
 800598e:	f000 f839 	bl	8005a04 <RTC_IsLeapYear>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <RTC_DateUpdate+0xf0>
        {
          day++;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	3301      	adds	r3, #1
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	e00d      	b.n	80059bc <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	3301      	adds	r3, #1
 80059a4:	613b      	str	r3, [r7, #16]
          day = 1U;
 80059a6:	2301      	movs	r3, #1
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	e007      	b.n	80059bc <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2b1d      	cmp	r3, #29
 80059b0:	d104      	bne.n	80059bc <RTC_DateUpdate+0x10c>
      {
        month++;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	3301      	adds	r3, #1
 80059b6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80059b8:	2301      	movs	r3, #1
 80059ba:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	3301      	adds	r3, #1
 80059c0:	60bb      	str	r3, [r7, #8]
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d38b      	bcc.n	80058e2 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	4619      	mov	r1, r3
 80059ec:	6978      	ldr	r0, [r7, #20]
 80059ee:	f000 f83b 	bl	8005a68 <RTC_WeekDayNum>
 80059f2:	4603      	mov	r3, r0
 80059f4:	461a      	mov	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	731a      	strb	r2, [r3, #12]
}
 80059fa:	bf00      	nop
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
	...

08005a04 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005a0e:	88fb      	ldrh	r3, [r7, #6]
 8005a10:	f003 0303 	and.w	r3, r3, #3
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	e01d      	b.n	8005a5a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005a1e:	88fb      	ldrh	r3, [r7, #6]
 8005a20:	4a10      	ldr	r2, [pc, #64]	@ (8005a64 <RTC_IsLeapYear+0x60>)
 8005a22:	fba2 1203 	umull	r1, r2, r2, r3
 8005a26:	0952      	lsrs	r2, r2, #5
 8005a28:	2164      	movs	r1, #100	@ 0x64
 8005a2a:	fb01 f202 	mul.w	r2, r1, r2
 8005a2e:	1a9b      	subs	r3, r3, r2
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e00f      	b.n	8005a5a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	4a09      	ldr	r2, [pc, #36]	@ (8005a64 <RTC_IsLeapYear+0x60>)
 8005a3e:	fba2 1203 	umull	r1, r2, r2, r3
 8005a42:	09d2      	lsrs	r2, r2, #7
 8005a44:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005a48:	fb01 f202 	mul.w	r2, r1, r2
 8005a4c:	1a9b      	subs	r3, r3, r2
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e000      	b.n	8005a5a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005a58:	2300      	movs	r3, #0
  }
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bc80      	pop	{r7}
 8005a62:	4770      	bx	lr
 8005a64:	51eb851f 	.word	0x51eb851f

08005a68 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	70fb      	strb	r3, [r7, #3]
 8005a74:	4613      	mov	r3, r2
 8005a76:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	60bb      	str	r3, [r7, #8]
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8005a86:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005a88:	78fb      	ldrb	r3, [r7, #3]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d82d      	bhi.n	8005aea <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005a8e:	78fa      	ldrb	r2, [r7, #3]
 8005a90:	4613      	mov	r3, r2
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	4413      	add	r3, r2
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	1a9b      	subs	r3, r3, r2
 8005a9a:	4a2c      	ldr	r2, [pc, #176]	@ (8005b4c <RTC_WeekDayNum+0xe4>)
 8005a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa0:	085a      	lsrs	r2, r3, #1
 8005aa2:	78bb      	ldrb	r3, [r7, #2]
 8005aa4:	441a      	add	r2, r3
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	441a      	add	r2, r3
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	3b01      	subs	r3, #1
 8005aae:	089b      	lsrs	r3, r3, #2
 8005ab0:	441a      	add	r2, r3
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	4926      	ldr	r1, [pc, #152]	@ (8005b50 <RTC_WeekDayNum+0xe8>)
 8005ab8:	fba1 1303 	umull	r1, r3, r1, r3
 8005abc:	095b      	lsrs	r3, r3, #5
 8005abe:	1ad2      	subs	r2, r2, r3
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	4922      	ldr	r1, [pc, #136]	@ (8005b50 <RTC_WeekDayNum+0xe8>)
 8005ac6:	fba1 1303 	umull	r1, r3, r1, r3
 8005aca:	09db      	lsrs	r3, r3, #7
 8005acc:	4413      	add	r3, r2
 8005ace:	1d1a      	adds	r2, r3, #4
 8005ad0:	4b20      	ldr	r3, [pc, #128]	@ (8005b54 <RTC_WeekDayNum+0xec>)
 8005ad2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ad6:	1ad1      	subs	r1, r2, r3
 8005ad8:	0849      	lsrs	r1, r1, #1
 8005ada:	440b      	add	r3, r1
 8005adc:	0899      	lsrs	r1, r3, #2
 8005ade:	460b      	mov	r3, r1
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	1a5b      	subs	r3, r3, r1
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	e029      	b.n	8005b3e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005aea:	78fa      	ldrb	r2, [r7, #3]
 8005aec:	4613      	mov	r3, r2
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	4413      	add	r3, r2
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	1a9b      	subs	r3, r3, r2
 8005af6:	4a15      	ldr	r2, [pc, #84]	@ (8005b4c <RTC_WeekDayNum+0xe4>)
 8005af8:	fba2 2303 	umull	r2, r3, r2, r3
 8005afc:	085a      	lsrs	r2, r3, #1
 8005afe:	78bb      	ldrb	r3, [r7, #2]
 8005b00:	441a      	add	r2, r3
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	441a      	add	r2, r3
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	089b      	lsrs	r3, r3, #2
 8005b0a:	441a      	add	r2, r3
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	4910      	ldr	r1, [pc, #64]	@ (8005b50 <RTC_WeekDayNum+0xe8>)
 8005b10:	fba1 1303 	umull	r1, r3, r1, r3
 8005b14:	095b      	lsrs	r3, r3, #5
 8005b16:	1ad2      	subs	r2, r2, r3
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	490d      	ldr	r1, [pc, #52]	@ (8005b50 <RTC_WeekDayNum+0xe8>)
 8005b1c:	fba1 1303 	umull	r1, r3, r1, r3
 8005b20:	09db      	lsrs	r3, r3, #7
 8005b22:	4413      	add	r3, r2
 8005b24:	1c9a      	adds	r2, r3, #2
 8005b26:	4b0b      	ldr	r3, [pc, #44]	@ (8005b54 <RTC_WeekDayNum+0xec>)
 8005b28:	fba3 1302 	umull	r1, r3, r3, r2
 8005b2c:	1ad1      	subs	r1, r2, r3
 8005b2e:	0849      	lsrs	r1, r1, #1
 8005b30:	440b      	add	r3, r1
 8005b32:	0899      	lsrs	r1, r3, #2
 8005b34:	460b      	mov	r3, r1
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	1a5b      	subs	r3, r3, r1
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	b2db      	uxtb	r3, r3
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bc80      	pop	{r7}
 8005b4a:	4770      	bx	lr
 8005b4c:	38e38e39 	.word	0x38e38e39
 8005b50:	51eb851f 	.word	0x51eb851f
 8005b54:	24924925 	.word	0x24924925

08005b58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e093      	b.n	8005c94 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d106      	bne.n	8005b86 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7fc fe7d 	bl	8002880 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2202      	movs	r2, #2
 8005b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	6812      	ldr	r2, [r2, #0]
 8005b98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b9c:	f023 0307 	bic.w	r3, r3, #7
 8005ba0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	3304      	adds	r3, #4
 8005baa:	4619      	mov	r1, r3
 8005bac:	4610      	mov	r0, r2
 8005bae:	f000 f903 	bl	8005db8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bda:	f023 0303 	bic.w	r3, r3, #3
 8005bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	021b      	lsls	r3, r3, #8
 8005bea:	4313      	orrs	r3, r2
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005bf8:	f023 030c 	bic.w	r3, r3, #12
 8005bfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	021b      	lsls	r3, r3, #8
 8005c14:	4313      	orrs	r3, r2
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	011a      	lsls	r2, r3, #4
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	031b      	lsls	r3, r3, #12
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005c36:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	4313      	orrs	r3, r2
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005cb4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cbc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005cc4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d110      	bne.n	8005cee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d102      	bne.n	8005cd8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cd2:	7b7b      	ldrb	r3, [r7, #13]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d001      	beq.n	8005cdc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e069      	b.n	8005db0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cec:	e031      	b.n	8005d52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b04      	cmp	r3, #4
 8005cf2:	d110      	bne.n	8005d16 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cf4:	7bbb      	ldrb	r3, [r7, #14]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d102      	bne.n	8005d00 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cfa:	7b3b      	ldrb	r3, [r7, #12]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d001      	beq.n	8005d04 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e055      	b.n	8005db0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d14:	e01d      	b.n	8005d52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d108      	bne.n	8005d2e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d1c:	7bbb      	ldrb	r3, [r7, #14]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d105      	bne.n	8005d2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d22:	7b7b      	ldrb	r3, [r7, #13]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d102      	bne.n	8005d2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d28:	7b3b      	ldrb	r3, [r7, #12]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d001      	beq.n	8005d32 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e03e      	b.n	8005db0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2202      	movs	r2, #2
 8005d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2202      	movs	r2, #2
 8005d3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2202      	movs	r2, #2
 8005d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d003      	beq.n	8005d60 <HAL_TIM_Encoder_Start+0xc4>
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d008      	beq.n	8005d70 <HAL_TIM_Encoder_Start+0xd4>
 8005d5e:	e00f      	b.n	8005d80 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2201      	movs	r2, #1
 8005d66:	2100      	movs	r1, #0
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f000 f887 	bl	8005e7c <TIM_CCxChannelCmd>
      break;
 8005d6e:	e016      	b.n	8005d9e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2201      	movs	r2, #1
 8005d76:	2104      	movs	r1, #4
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 f87f 	bl	8005e7c <TIM_CCxChannelCmd>
      break;
 8005d7e:	e00e      	b.n	8005d9e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2201      	movs	r2, #1
 8005d86:	2100      	movs	r1, #0
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 f877 	bl	8005e7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2201      	movs	r2, #1
 8005d94:	2104      	movs	r1, #4
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 f870 	bl	8005e7c <TIM_CCxChannelCmd>
      break;
 8005d9c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f042 0201 	orr.w	r2, r2, #1
 8005dac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a29      	ldr	r2, [pc, #164]	@ (8005e70 <TIM_Base_SetConfig+0xb8>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d00b      	beq.n	8005de8 <TIM_Base_SetConfig+0x30>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dd6:	d007      	beq.n	8005de8 <TIM_Base_SetConfig+0x30>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a26      	ldr	r2, [pc, #152]	@ (8005e74 <TIM_Base_SetConfig+0xbc>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d003      	beq.n	8005de8 <TIM_Base_SetConfig+0x30>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a25      	ldr	r2, [pc, #148]	@ (8005e78 <TIM_Base_SetConfig+0xc0>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d108      	bne.n	8005dfa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8005e70 <TIM_Base_SetConfig+0xb8>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d00b      	beq.n	8005e1a <TIM_Base_SetConfig+0x62>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e08:	d007      	beq.n	8005e1a <TIM_Base_SetConfig+0x62>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a19      	ldr	r2, [pc, #100]	@ (8005e74 <TIM_Base_SetConfig+0xbc>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d003      	beq.n	8005e1a <TIM_Base_SetConfig+0x62>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a18      	ldr	r2, [pc, #96]	@ (8005e78 <TIM_Base_SetConfig+0xc0>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d108      	bne.n	8005e2c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a07      	ldr	r2, [pc, #28]	@ (8005e70 <TIM_Base_SetConfig+0xb8>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d103      	bne.n	8005e60 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	691a      	ldr	r2, [r3, #16]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	615a      	str	r2, [r3, #20]
}
 8005e66:	bf00      	nop
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bc80      	pop	{r7}
 8005e6e:	4770      	bx	lr
 8005e70:	40012c00 	.word	0x40012c00
 8005e74:	40000400 	.word	0x40000400
 8005e78:	40000800 	.word	0x40000800

08005e7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f003 031f 	and.w	r3, r3, #31
 8005e8e:	2201      	movs	r2, #1
 8005e90:	fa02 f303 	lsl.w	r3, r2, r3
 8005e94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6a1a      	ldr	r2, [r3, #32]
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	43db      	mvns	r3, r3
 8005e9e:	401a      	ands	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a1a      	ldr	r2, [r3, #32]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f003 031f 	and.w	r3, r3, #31
 8005eae:	6879      	ldr	r1, [r7, #4]
 8005eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	621a      	str	r2, [r3, #32]
}
 8005eba:	bf00      	nop
 8005ebc:	371c      	adds	r7, #28
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bc80      	pop	{r7}
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d101      	bne.n	8005edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e046      	b.n	8005f6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a16      	ldr	r2, [pc, #88]	@ (8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d00e      	beq.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f28:	d009      	beq.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a12      	ldr	r2, [pc, #72]	@ (8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d004      	beq.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a10      	ldr	r2, [pc, #64]	@ (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d10c      	bne.n	8005f58 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bc80      	pop	{r7}
 8005f72:	4770      	bx	lr
 8005f74:	40012c00 	.word	0x40012c00
 8005f78:	40000400 	.word	0x40000400
 8005f7c:	40000800 	.word	0x40000800

08005f80 <__cvt>:
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f86:	461d      	mov	r5, r3
 8005f88:	bfbb      	ittet	lt
 8005f8a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005f8e:	461d      	movlt	r5, r3
 8005f90:	2300      	movge	r3, #0
 8005f92:	232d      	movlt	r3, #45	@ 0x2d
 8005f94:	b088      	sub	sp, #32
 8005f96:	4614      	mov	r4, r2
 8005f98:	bfb8      	it	lt
 8005f9a:	4614      	movlt	r4, r2
 8005f9c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005f9e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005fa0:	7013      	strb	r3, [r2, #0]
 8005fa2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005fa4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005fa8:	f023 0820 	bic.w	r8, r3, #32
 8005fac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005fb0:	d005      	beq.n	8005fbe <__cvt+0x3e>
 8005fb2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005fb6:	d100      	bne.n	8005fba <__cvt+0x3a>
 8005fb8:	3601      	adds	r6, #1
 8005fba:	2302      	movs	r3, #2
 8005fbc:	e000      	b.n	8005fc0 <__cvt+0x40>
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	aa07      	add	r2, sp, #28
 8005fc2:	9204      	str	r2, [sp, #16]
 8005fc4:	aa06      	add	r2, sp, #24
 8005fc6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005fca:	e9cd 3600 	strd	r3, r6, [sp]
 8005fce:	4622      	mov	r2, r4
 8005fd0:	462b      	mov	r3, r5
 8005fd2:	f001 f8dd 	bl	8007190 <_dtoa_r>
 8005fd6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005fda:	4607      	mov	r7, r0
 8005fdc:	d119      	bne.n	8006012 <__cvt+0x92>
 8005fde:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005fe0:	07db      	lsls	r3, r3, #31
 8005fe2:	d50e      	bpl.n	8006002 <__cvt+0x82>
 8005fe4:	eb00 0906 	add.w	r9, r0, r6
 8005fe8:	2200      	movs	r2, #0
 8005fea:	2300      	movs	r3, #0
 8005fec:	4620      	mov	r0, r4
 8005fee:	4629      	mov	r1, r5
 8005ff0:	f7fa fcda 	bl	80009a8 <__aeabi_dcmpeq>
 8005ff4:	b108      	cbz	r0, 8005ffa <__cvt+0x7a>
 8005ff6:	f8cd 901c 	str.w	r9, [sp, #28]
 8005ffa:	2230      	movs	r2, #48	@ 0x30
 8005ffc:	9b07      	ldr	r3, [sp, #28]
 8005ffe:	454b      	cmp	r3, r9
 8006000:	d31e      	bcc.n	8006040 <__cvt+0xc0>
 8006002:	4638      	mov	r0, r7
 8006004:	9b07      	ldr	r3, [sp, #28]
 8006006:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006008:	1bdb      	subs	r3, r3, r7
 800600a:	6013      	str	r3, [r2, #0]
 800600c:	b008      	add	sp, #32
 800600e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006012:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006016:	eb00 0906 	add.w	r9, r0, r6
 800601a:	d1e5      	bne.n	8005fe8 <__cvt+0x68>
 800601c:	7803      	ldrb	r3, [r0, #0]
 800601e:	2b30      	cmp	r3, #48	@ 0x30
 8006020:	d10a      	bne.n	8006038 <__cvt+0xb8>
 8006022:	2200      	movs	r2, #0
 8006024:	2300      	movs	r3, #0
 8006026:	4620      	mov	r0, r4
 8006028:	4629      	mov	r1, r5
 800602a:	f7fa fcbd 	bl	80009a8 <__aeabi_dcmpeq>
 800602e:	b918      	cbnz	r0, 8006038 <__cvt+0xb8>
 8006030:	f1c6 0601 	rsb	r6, r6, #1
 8006034:	f8ca 6000 	str.w	r6, [sl]
 8006038:	f8da 3000 	ldr.w	r3, [sl]
 800603c:	4499      	add	r9, r3
 800603e:	e7d3      	b.n	8005fe8 <__cvt+0x68>
 8006040:	1c59      	adds	r1, r3, #1
 8006042:	9107      	str	r1, [sp, #28]
 8006044:	701a      	strb	r2, [r3, #0]
 8006046:	e7d9      	b.n	8005ffc <__cvt+0x7c>

08006048 <__exponent>:
 8006048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800604a:	2900      	cmp	r1, #0
 800604c:	bfb6      	itet	lt
 800604e:	232d      	movlt	r3, #45	@ 0x2d
 8006050:	232b      	movge	r3, #43	@ 0x2b
 8006052:	4249      	neglt	r1, r1
 8006054:	2909      	cmp	r1, #9
 8006056:	7002      	strb	r2, [r0, #0]
 8006058:	7043      	strb	r3, [r0, #1]
 800605a:	dd29      	ble.n	80060b0 <__exponent+0x68>
 800605c:	f10d 0307 	add.w	r3, sp, #7
 8006060:	461d      	mov	r5, r3
 8006062:	270a      	movs	r7, #10
 8006064:	fbb1 f6f7 	udiv	r6, r1, r7
 8006068:	461a      	mov	r2, r3
 800606a:	fb07 1416 	mls	r4, r7, r6, r1
 800606e:	3430      	adds	r4, #48	@ 0x30
 8006070:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006074:	460c      	mov	r4, r1
 8006076:	2c63      	cmp	r4, #99	@ 0x63
 8006078:	4631      	mov	r1, r6
 800607a:	f103 33ff 	add.w	r3, r3, #4294967295
 800607e:	dcf1      	bgt.n	8006064 <__exponent+0x1c>
 8006080:	3130      	adds	r1, #48	@ 0x30
 8006082:	1e94      	subs	r4, r2, #2
 8006084:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006088:	4623      	mov	r3, r4
 800608a:	1c41      	adds	r1, r0, #1
 800608c:	42ab      	cmp	r3, r5
 800608e:	d30a      	bcc.n	80060a6 <__exponent+0x5e>
 8006090:	f10d 0309 	add.w	r3, sp, #9
 8006094:	1a9b      	subs	r3, r3, r2
 8006096:	42ac      	cmp	r4, r5
 8006098:	bf88      	it	hi
 800609a:	2300      	movhi	r3, #0
 800609c:	3302      	adds	r3, #2
 800609e:	4403      	add	r3, r0
 80060a0:	1a18      	subs	r0, r3, r0
 80060a2:	b003      	add	sp, #12
 80060a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060a6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80060aa:	f801 6f01 	strb.w	r6, [r1, #1]!
 80060ae:	e7ed      	b.n	800608c <__exponent+0x44>
 80060b0:	2330      	movs	r3, #48	@ 0x30
 80060b2:	3130      	adds	r1, #48	@ 0x30
 80060b4:	7083      	strb	r3, [r0, #2]
 80060b6:	70c1      	strb	r1, [r0, #3]
 80060b8:	1d03      	adds	r3, r0, #4
 80060ba:	e7f1      	b.n	80060a0 <__exponent+0x58>

080060bc <_printf_float>:
 80060bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c0:	b091      	sub	sp, #68	@ 0x44
 80060c2:	460c      	mov	r4, r1
 80060c4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80060c8:	4616      	mov	r6, r2
 80060ca:	461f      	mov	r7, r3
 80060cc:	4605      	mov	r5, r0
 80060ce:	f000 ff3f 	bl	8006f50 <_localeconv_r>
 80060d2:	6803      	ldr	r3, [r0, #0]
 80060d4:	4618      	mov	r0, r3
 80060d6:	9308      	str	r3, [sp, #32]
 80060d8:	f7fa f83a 	bl	8000150 <strlen>
 80060dc:	2300      	movs	r3, #0
 80060de:	930e      	str	r3, [sp, #56]	@ 0x38
 80060e0:	f8d8 3000 	ldr.w	r3, [r8]
 80060e4:	9009      	str	r0, [sp, #36]	@ 0x24
 80060e6:	3307      	adds	r3, #7
 80060e8:	f023 0307 	bic.w	r3, r3, #7
 80060ec:	f103 0208 	add.w	r2, r3, #8
 80060f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80060f4:	f8d4 b000 	ldr.w	fp, [r4]
 80060f8:	f8c8 2000 	str.w	r2, [r8]
 80060fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006100:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006104:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006106:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800610a:	f04f 32ff 	mov.w	r2, #4294967295
 800610e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006112:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006116:	4b9c      	ldr	r3, [pc, #624]	@ (8006388 <_printf_float+0x2cc>)
 8006118:	f7fa fc78 	bl	8000a0c <__aeabi_dcmpun>
 800611c:	bb70      	cbnz	r0, 800617c <_printf_float+0xc0>
 800611e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006122:	f04f 32ff 	mov.w	r2, #4294967295
 8006126:	4b98      	ldr	r3, [pc, #608]	@ (8006388 <_printf_float+0x2cc>)
 8006128:	f7fa fc52 	bl	80009d0 <__aeabi_dcmple>
 800612c:	bb30      	cbnz	r0, 800617c <_printf_float+0xc0>
 800612e:	2200      	movs	r2, #0
 8006130:	2300      	movs	r3, #0
 8006132:	4640      	mov	r0, r8
 8006134:	4649      	mov	r1, r9
 8006136:	f7fa fc41 	bl	80009bc <__aeabi_dcmplt>
 800613a:	b110      	cbz	r0, 8006142 <_printf_float+0x86>
 800613c:	232d      	movs	r3, #45	@ 0x2d
 800613e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006142:	4a92      	ldr	r2, [pc, #584]	@ (800638c <_printf_float+0x2d0>)
 8006144:	4b92      	ldr	r3, [pc, #584]	@ (8006390 <_printf_float+0x2d4>)
 8006146:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800614a:	bf94      	ite	ls
 800614c:	4690      	movls	r8, r2
 800614e:	4698      	movhi	r8, r3
 8006150:	2303      	movs	r3, #3
 8006152:	f04f 0900 	mov.w	r9, #0
 8006156:	6123      	str	r3, [r4, #16]
 8006158:	f02b 0304 	bic.w	r3, fp, #4
 800615c:	6023      	str	r3, [r4, #0]
 800615e:	4633      	mov	r3, r6
 8006160:	4621      	mov	r1, r4
 8006162:	4628      	mov	r0, r5
 8006164:	9700      	str	r7, [sp, #0]
 8006166:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006168:	f000 f9d4 	bl	8006514 <_printf_common>
 800616c:	3001      	adds	r0, #1
 800616e:	f040 8090 	bne.w	8006292 <_printf_float+0x1d6>
 8006172:	f04f 30ff 	mov.w	r0, #4294967295
 8006176:	b011      	add	sp, #68	@ 0x44
 8006178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800617c:	4642      	mov	r2, r8
 800617e:	464b      	mov	r3, r9
 8006180:	4640      	mov	r0, r8
 8006182:	4649      	mov	r1, r9
 8006184:	f7fa fc42 	bl	8000a0c <__aeabi_dcmpun>
 8006188:	b148      	cbz	r0, 800619e <_printf_float+0xe2>
 800618a:	464b      	mov	r3, r9
 800618c:	2b00      	cmp	r3, #0
 800618e:	bfb8      	it	lt
 8006190:	232d      	movlt	r3, #45	@ 0x2d
 8006192:	4a80      	ldr	r2, [pc, #512]	@ (8006394 <_printf_float+0x2d8>)
 8006194:	bfb8      	it	lt
 8006196:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800619a:	4b7f      	ldr	r3, [pc, #508]	@ (8006398 <_printf_float+0x2dc>)
 800619c:	e7d3      	b.n	8006146 <_printf_float+0x8a>
 800619e:	6863      	ldr	r3, [r4, #4]
 80061a0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80061a4:	1c5a      	adds	r2, r3, #1
 80061a6:	d13f      	bne.n	8006228 <_printf_float+0x16c>
 80061a8:	2306      	movs	r3, #6
 80061aa:	6063      	str	r3, [r4, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80061b2:	6023      	str	r3, [r4, #0]
 80061b4:	9206      	str	r2, [sp, #24]
 80061b6:	aa0e      	add	r2, sp, #56	@ 0x38
 80061b8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80061bc:	aa0d      	add	r2, sp, #52	@ 0x34
 80061be:	9203      	str	r2, [sp, #12]
 80061c0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80061c4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80061c8:	6863      	ldr	r3, [r4, #4]
 80061ca:	4642      	mov	r2, r8
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	4628      	mov	r0, r5
 80061d0:	464b      	mov	r3, r9
 80061d2:	910a      	str	r1, [sp, #40]	@ 0x28
 80061d4:	f7ff fed4 	bl	8005f80 <__cvt>
 80061d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061da:	4680      	mov	r8, r0
 80061dc:	2947      	cmp	r1, #71	@ 0x47
 80061de:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80061e0:	d128      	bne.n	8006234 <_printf_float+0x178>
 80061e2:	1cc8      	adds	r0, r1, #3
 80061e4:	db02      	blt.n	80061ec <_printf_float+0x130>
 80061e6:	6863      	ldr	r3, [r4, #4]
 80061e8:	4299      	cmp	r1, r3
 80061ea:	dd40      	ble.n	800626e <_printf_float+0x1b2>
 80061ec:	f1aa 0a02 	sub.w	sl, sl, #2
 80061f0:	fa5f fa8a 	uxtb.w	sl, sl
 80061f4:	4652      	mov	r2, sl
 80061f6:	3901      	subs	r1, #1
 80061f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80061fc:	910d      	str	r1, [sp, #52]	@ 0x34
 80061fe:	f7ff ff23 	bl	8006048 <__exponent>
 8006202:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006204:	4681      	mov	r9, r0
 8006206:	1813      	adds	r3, r2, r0
 8006208:	2a01      	cmp	r2, #1
 800620a:	6123      	str	r3, [r4, #16]
 800620c:	dc02      	bgt.n	8006214 <_printf_float+0x158>
 800620e:	6822      	ldr	r2, [r4, #0]
 8006210:	07d2      	lsls	r2, r2, #31
 8006212:	d501      	bpl.n	8006218 <_printf_float+0x15c>
 8006214:	3301      	adds	r3, #1
 8006216:	6123      	str	r3, [r4, #16]
 8006218:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800621c:	2b00      	cmp	r3, #0
 800621e:	d09e      	beq.n	800615e <_printf_float+0xa2>
 8006220:	232d      	movs	r3, #45	@ 0x2d
 8006222:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006226:	e79a      	b.n	800615e <_printf_float+0xa2>
 8006228:	2947      	cmp	r1, #71	@ 0x47
 800622a:	d1bf      	bne.n	80061ac <_printf_float+0xf0>
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1bd      	bne.n	80061ac <_printf_float+0xf0>
 8006230:	2301      	movs	r3, #1
 8006232:	e7ba      	b.n	80061aa <_printf_float+0xee>
 8006234:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006238:	d9dc      	bls.n	80061f4 <_printf_float+0x138>
 800623a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800623e:	d118      	bne.n	8006272 <_printf_float+0x1b6>
 8006240:	2900      	cmp	r1, #0
 8006242:	6863      	ldr	r3, [r4, #4]
 8006244:	dd0b      	ble.n	800625e <_printf_float+0x1a2>
 8006246:	6121      	str	r1, [r4, #16]
 8006248:	b913      	cbnz	r3, 8006250 <_printf_float+0x194>
 800624a:	6822      	ldr	r2, [r4, #0]
 800624c:	07d0      	lsls	r0, r2, #31
 800624e:	d502      	bpl.n	8006256 <_printf_float+0x19a>
 8006250:	3301      	adds	r3, #1
 8006252:	440b      	add	r3, r1
 8006254:	6123      	str	r3, [r4, #16]
 8006256:	f04f 0900 	mov.w	r9, #0
 800625a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800625c:	e7dc      	b.n	8006218 <_printf_float+0x15c>
 800625e:	b913      	cbnz	r3, 8006266 <_printf_float+0x1aa>
 8006260:	6822      	ldr	r2, [r4, #0]
 8006262:	07d2      	lsls	r2, r2, #31
 8006264:	d501      	bpl.n	800626a <_printf_float+0x1ae>
 8006266:	3302      	adds	r3, #2
 8006268:	e7f4      	b.n	8006254 <_printf_float+0x198>
 800626a:	2301      	movs	r3, #1
 800626c:	e7f2      	b.n	8006254 <_printf_float+0x198>
 800626e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006272:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006274:	4299      	cmp	r1, r3
 8006276:	db05      	blt.n	8006284 <_printf_float+0x1c8>
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	6121      	str	r1, [r4, #16]
 800627c:	07d8      	lsls	r0, r3, #31
 800627e:	d5ea      	bpl.n	8006256 <_printf_float+0x19a>
 8006280:	1c4b      	adds	r3, r1, #1
 8006282:	e7e7      	b.n	8006254 <_printf_float+0x198>
 8006284:	2900      	cmp	r1, #0
 8006286:	bfcc      	ite	gt
 8006288:	2201      	movgt	r2, #1
 800628a:	f1c1 0202 	rsble	r2, r1, #2
 800628e:	4413      	add	r3, r2
 8006290:	e7e0      	b.n	8006254 <_printf_float+0x198>
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	055a      	lsls	r2, r3, #21
 8006296:	d407      	bmi.n	80062a8 <_printf_float+0x1ec>
 8006298:	6923      	ldr	r3, [r4, #16]
 800629a:	4642      	mov	r2, r8
 800629c:	4631      	mov	r1, r6
 800629e:	4628      	mov	r0, r5
 80062a0:	47b8      	blx	r7
 80062a2:	3001      	adds	r0, #1
 80062a4:	d12b      	bne.n	80062fe <_printf_float+0x242>
 80062a6:	e764      	b.n	8006172 <_printf_float+0xb6>
 80062a8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80062ac:	f240 80dc 	bls.w	8006468 <_printf_float+0x3ac>
 80062b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80062b4:	2200      	movs	r2, #0
 80062b6:	2300      	movs	r3, #0
 80062b8:	f7fa fb76 	bl	80009a8 <__aeabi_dcmpeq>
 80062bc:	2800      	cmp	r0, #0
 80062be:	d033      	beq.n	8006328 <_printf_float+0x26c>
 80062c0:	2301      	movs	r3, #1
 80062c2:	4631      	mov	r1, r6
 80062c4:	4628      	mov	r0, r5
 80062c6:	4a35      	ldr	r2, [pc, #212]	@ (800639c <_printf_float+0x2e0>)
 80062c8:	47b8      	blx	r7
 80062ca:	3001      	adds	r0, #1
 80062cc:	f43f af51 	beq.w	8006172 <_printf_float+0xb6>
 80062d0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80062d4:	4543      	cmp	r3, r8
 80062d6:	db02      	blt.n	80062de <_printf_float+0x222>
 80062d8:	6823      	ldr	r3, [r4, #0]
 80062da:	07d8      	lsls	r0, r3, #31
 80062dc:	d50f      	bpl.n	80062fe <_printf_float+0x242>
 80062de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80062e2:	4631      	mov	r1, r6
 80062e4:	4628      	mov	r0, r5
 80062e6:	47b8      	blx	r7
 80062e8:	3001      	adds	r0, #1
 80062ea:	f43f af42 	beq.w	8006172 <_printf_float+0xb6>
 80062ee:	f04f 0900 	mov.w	r9, #0
 80062f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80062f6:	f104 0a1a 	add.w	sl, r4, #26
 80062fa:	45c8      	cmp	r8, r9
 80062fc:	dc09      	bgt.n	8006312 <_printf_float+0x256>
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	079b      	lsls	r3, r3, #30
 8006302:	f100 8102 	bmi.w	800650a <_printf_float+0x44e>
 8006306:	68e0      	ldr	r0, [r4, #12]
 8006308:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800630a:	4298      	cmp	r0, r3
 800630c:	bfb8      	it	lt
 800630e:	4618      	movlt	r0, r3
 8006310:	e731      	b.n	8006176 <_printf_float+0xba>
 8006312:	2301      	movs	r3, #1
 8006314:	4652      	mov	r2, sl
 8006316:	4631      	mov	r1, r6
 8006318:	4628      	mov	r0, r5
 800631a:	47b8      	blx	r7
 800631c:	3001      	adds	r0, #1
 800631e:	f43f af28 	beq.w	8006172 <_printf_float+0xb6>
 8006322:	f109 0901 	add.w	r9, r9, #1
 8006326:	e7e8      	b.n	80062fa <_printf_float+0x23e>
 8006328:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800632a:	2b00      	cmp	r3, #0
 800632c:	dc38      	bgt.n	80063a0 <_printf_float+0x2e4>
 800632e:	2301      	movs	r3, #1
 8006330:	4631      	mov	r1, r6
 8006332:	4628      	mov	r0, r5
 8006334:	4a19      	ldr	r2, [pc, #100]	@ (800639c <_printf_float+0x2e0>)
 8006336:	47b8      	blx	r7
 8006338:	3001      	adds	r0, #1
 800633a:	f43f af1a 	beq.w	8006172 <_printf_float+0xb6>
 800633e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006342:	ea59 0303 	orrs.w	r3, r9, r3
 8006346:	d102      	bne.n	800634e <_printf_float+0x292>
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	07d9      	lsls	r1, r3, #31
 800634c:	d5d7      	bpl.n	80062fe <_printf_float+0x242>
 800634e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006352:	4631      	mov	r1, r6
 8006354:	4628      	mov	r0, r5
 8006356:	47b8      	blx	r7
 8006358:	3001      	adds	r0, #1
 800635a:	f43f af0a 	beq.w	8006172 <_printf_float+0xb6>
 800635e:	f04f 0a00 	mov.w	sl, #0
 8006362:	f104 0b1a 	add.w	fp, r4, #26
 8006366:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006368:	425b      	negs	r3, r3
 800636a:	4553      	cmp	r3, sl
 800636c:	dc01      	bgt.n	8006372 <_printf_float+0x2b6>
 800636e:	464b      	mov	r3, r9
 8006370:	e793      	b.n	800629a <_printf_float+0x1de>
 8006372:	2301      	movs	r3, #1
 8006374:	465a      	mov	r2, fp
 8006376:	4631      	mov	r1, r6
 8006378:	4628      	mov	r0, r5
 800637a:	47b8      	blx	r7
 800637c:	3001      	adds	r0, #1
 800637e:	f43f aef8 	beq.w	8006172 <_printf_float+0xb6>
 8006382:	f10a 0a01 	add.w	sl, sl, #1
 8006386:	e7ee      	b.n	8006366 <_printf_float+0x2aa>
 8006388:	7fefffff 	.word	0x7fefffff
 800638c:	0800d57a 	.word	0x0800d57a
 8006390:	0800d57e 	.word	0x0800d57e
 8006394:	0800d582 	.word	0x0800d582
 8006398:	0800d586 	.word	0x0800d586
 800639c:	0800d58a 	.word	0x0800d58a
 80063a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063a2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80063a6:	4553      	cmp	r3, sl
 80063a8:	bfa8      	it	ge
 80063aa:	4653      	movge	r3, sl
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	4699      	mov	r9, r3
 80063b0:	dc36      	bgt.n	8006420 <_printf_float+0x364>
 80063b2:	f04f 0b00 	mov.w	fp, #0
 80063b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063ba:	f104 021a 	add.w	r2, r4, #26
 80063be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80063c2:	eba3 0309 	sub.w	r3, r3, r9
 80063c6:	455b      	cmp	r3, fp
 80063c8:	dc31      	bgt.n	800642e <_printf_float+0x372>
 80063ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063cc:	459a      	cmp	sl, r3
 80063ce:	dc3a      	bgt.n	8006446 <_printf_float+0x38a>
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	07da      	lsls	r2, r3, #31
 80063d4:	d437      	bmi.n	8006446 <_printf_float+0x38a>
 80063d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063d8:	ebaa 0903 	sub.w	r9, sl, r3
 80063dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063de:	ebaa 0303 	sub.w	r3, sl, r3
 80063e2:	4599      	cmp	r9, r3
 80063e4:	bfa8      	it	ge
 80063e6:	4699      	movge	r9, r3
 80063e8:	f1b9 0f00 	cmp.w	r9, #0
 80063ec:	dc33      	bgt.n	8006456 <_printf_float+0x39a>
 80063ee:	f04f 0800 	mov.w	r8, #0
 80063f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063f6:	f104 0b1a 	add.w	fp, r4, #26
 80063fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063fc:	ebaa 0303 	sub.w	r3, sl, r3
 8006400:	eba3 0309 	sub.w	r3, r3, r9
 8006404:	4543      	cmp	r3, r8
 8006406:	f77f af7a 	ble.w	80062fe <_printf_float+0x242>
 800640a:	2301      	movs	r3, #1
 800640c:	465a      	mov	r2, fp
 800640e:	4631      	mov	r1, r6
 8006410:	4628      	mov	r0, r5
 8006412:	47b8      	blx	r7
 8006414:	3001      	adds	r0, #1
 8006416:	f43f aeac 	beq.w	8006172 <_printf_float+0xb6>
 800641a:	f108 0801 	add.w	r8, r8, #1
 800641e:	e7ec      	b.n	80063fa <_printf_float+0x33e>
 8006420:	4642      	mov	r2, r8
 8006422:	4631      	mov	r1, r6
 8006424:	4628      	mov	r0, r5
 8006426:	47b8      	blx	r7
 8006428:	3001      	adds	r0, #1
 800642a:	d1c2      	bne.n	80063b2 <_printf_float+0x2f6>
 800642c:	e6a1      	b.n	8006172 <_printf_float+0xb6>
 800642e:	2301      	movs	r3, #1
 8006430:	4631      	mov	r1, r6
 8006432:	4628      	mov	r0, r5
 8006434:	920a      	str	r2, [sp, #40]	@ 0x28
 8006436:	47b8      	blx	r7
 8006438:	3001      	adds	r0, #1
 800643a:	f43f ae9a 	beq.w	8006172 <_printf_float+0xb6>
 800643e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006440:	f10b 0b01 	add.w	fp, fp, #1
 8006444:	e7bb      	b.n	80063be <_printf_float+0x302>
 8006446:	4631      	mov	r1, r6
 8006448:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800644c:	4628      	mov	r0, r5
 800644e:	47b8      	blx	r7
 8006450:	3001      	adds	r0, #1
 8006452:	d1c0      	bne.n	80063d6 <_printf_float+0x31a>
 8006454:	e68d      	b.n	8006172 <_printf_float+0xb6>
 8006456:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006458:	464b      	mov	r3, r9
 800645a:	4631      	mov	r1, r6
 800645c:	4628      	mov	r0, r5
 800645e:	4442      	add	r2, r8
 8006460:	47b8      	blx	r7
 8006462:	3001      	adds	r0, #1
 8006464:	d1c3      	bne.n	80063ee <_printf_float+0x332>
 8006466:	e684      	b.n	8006172 <_printf_float+0xb6>
 8006468:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800646c:	f1ba 0f01 	cmp.w	sl, #1
 8006470:	dc01      	bgt.n	8006476 <_printf_float+0x3ba>
 8006472:	07db      	lsls	r3, r3, #31
 8006474:	d536      	bpl.n	80064e4 <_printf_float+0x428>
 8006476:	2301      	movs	r3, #1
 8006478:	4642      	mov	r2, r8
 800647a:	4631      	mov	r1, r6
 800647c:	4628      	mov	r0, r5
 800647e:	47b8      	blx	r7
 8006480:	3001      	adds	r0, #1
 8006482:	f43f ae76 	beq.w	8006172 <_printf_float+0xb6>
 8006486:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800648a:	4631      	mov	r1, r6
 800648c:	4628      	mov	r0, r5
 800648e:	47b8      	blx	r7
 8006490:	3001      	adds	r0, #1
 8006492:	f43f ae6e 	beq.w	8006172 <_printf_float+0xb6>
 8006496:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800649a:	2200      	movs	r2, #0
 800649c:	2300      	movs	r3, #0
 800649e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064a2:	f7fa fa81 	bl	80009a8 <__aeabi_dcmpeq>
 80064a6:	b9c0      	cbnz	r0, 80064da <_printf_float+0x41e>
 80064a8:	4653      	mov	r3, sl
 80064aa:	f108 0201 	add.w	r2, r8, #1
 80064ae:	4631      	mov	r1, r6
 80064b0:	4628      	mov	r0, r5
 80064b2:	47b8      	blx	r7
 80064b4:	3001      	adds	r0, #1
 80064b6:	d10c      	bne.n	80064d2 <_printf_float+0x416>
 80064b8:	e65b      	b.n	8006172 <_printf_float+0xb6>
 80064ba:	2301      	movs	r3, #1
 80064bc:	465a      	mov	r2, fp
 80064be:	4631      	mov	r1, r6
 80064c0:	4628      	mov	r0, r5
 80064c2:	47b8      	blx	r7
 80064c4:	3001      	adds	r0, #1
 80064c6:	f43f ae54 	beq.w	8006172 <_printf_float+0xb6>
 80064ca:	f108 0801 	add.w	r8, r8, #1
 80064ce:	45d0      	cmp	r8, sl
 80064d0:	dbf3      	blt.n	80064ba <_printf_float+0x3fe>
 80064d2:	464b      	mov	r3, r9
 80064d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80064d8:	e6e0      	b.n	800629c <_printf_float+0x1e0>
 80064da:	f04f 0800 	mov.w	r8, #0
 80064de:	f104 0b1a 	add.w	fp, r4, #26
 80064e2:	e7f4      	b.n	80064ce <_printf_float+0x412>
 80064e4:	2301      	movs	r3, #1
 80064e6:	4642      	mov	r2, r8
 80064e8:	e7e1      	b.n	80064ae <_printf_float+0x3f2>
 80064ea:	2301      	movs	r3, #1
 80064ec:	464a      	mov	r2, r9
 80064ee:	4631      	mov	r1, r6
 80064f0:	4628      	mov	r0, r5
 80064f2:	47b8      	blx	r7
 80064f4:	3001      	adds	r0, #1
 80064f6:	f43f ae3c 	beq.w	8006172 <_printf_float+0xb6>
 80064fa:	f108 0801 	add.w	r8, r8, #1
 80064fe:	68e3      	ldr	r3, [r4, #12]
 8006500:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006502:	1a5b      	subs	r3, r3, r1
 8006504:	4543      	cmp	r3, r8
 8006506:	dcf0      	bgt.n	80064ea <_printf_float+0x42e>
 8006508:	e6fd      	b.n	8006306 <_printf_float+0x24a>
 800650a:	f04f 0800 	mov.w	r8, #0
 800650e:	f104 0919 	add.w	r9, r4, #25
 8006512:	e7f4      	b.n	80064fe <_printf_float+0x442>

08006514 <_printf_common>:
 8006514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006518:	4616      	mov	r6, r2
 800651a:	4698      	mov	r8, r3
 800651c:	688a      	ldr	r2, [r1, #8]
 800651e:	690b      	ldr	r3, [r1, #16]
 8006520:	4607      	mov	r7, r0
 8006522:	4293      	cmp	r3, r2
 8006524:	bfb8      	it	lt
 8006526:	4613      	movlt	r3, r2
 8006528:	6033      	str	r3, [r6, #0]
 800652a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800652e:	460c      	mov	r4, r1
 8006530:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006534:	b10a      	cbz	r2, 800653a <_printf_common+0x26>
 8006536:	3301      	adds	r3, #1
 8006538:	6033      	str	r3, [r6, #0]
 800653a:	6823      	ldr	r3, [r4, #0]
 800653c:	0699      	lsls	r1, r3, #26
 800653e:	bf42      	ittt	mi
 8006540:	6833      	ldrmi	r3, [r6, #0]
 8006542:	3302      	addmi	r3, #2
 8006544:	6033      	strmi	r3, [r6, #0]
 8006546:	6825      	ldr	r5, [r4, #0]
 8006548:	f015 0506 	ands.w	r5, r5, #6
 800654c:	d106      	bne.n	800655c <_printf_common+0x48>
 800654e:	f104 0a19 	add.w	sl, r4, #25
 8006552:	68e3      	ldr	r3, [r4, #12]
 8006554:	6832      	ldr	r2, [r6, #0]
 8006556:	1a9b      	subs	r3, r3, r2
 8006558:	42ab      	cmp	r3, r5
 800655a:	dc2b      	bgt.n	80065b4 <_printf_common+0xa0>
 800655c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006560:	6822      	ldr	r2, [r4, #0]
 8006562:	3b00      	subs	r3, #0
 8006564:	bf18      	it	ne
 8006566:	2301      	movne	r3, #1
 8006568:	0692      	lsls	r2, r2, #26
 800656a:	d430      	bmi.n	80065ce <_printf_common+0xba>
 800656c:	4641      	mov	r1, r8
 800656e:	4638      	mov	r0, r7
 8006570:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006574:	47c8      	blx	r9
 8006576:	3001      	adds	r0, #1
 8006578:	d023      	beq.n	80065c2 <_printf_common+0xae>
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	6922      	ldr	r2, [r4, #16]
 800657e:	f003 0306 	and.w	r3, r3, #6
 8006582:	2b04      	cmp	r3, #4
 8006584:	bf14      	ite	ne
 8006586:	2500      	movne	r5, #0
 8006588:	6833      	ldreq	r3, [r6, #0]
 800658a:	f04f 0600 	mov.w	r6, #0
 800658e:	bf08      	it	eq
 8006590:	68e5      	ldreq	r5, [r4, #12]
 8006592:	f104 041a 	add.w	r4, r4, #26
 8006596:	bf08      	it	eq
 8006598:	1aed      	subeq	r5, r5, r3
 800659a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800659e:	bf08      	it	eq
 80065a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065a4:	4293      	cmp	r3, r2
 80065a6:	bfc4      	itt	gt
 80065a8:	1a9b      	subgt	r3, r3, r2
 80065aa:	18ed      	addgt	r5, r5, r3
 80065ac:	42b5      	cmp	r5, r6
 80065ae:	d11a      	bne.n	80065e6 <_printf_common+0xd2>
 80065b0:	2000      	movs	r0, #0
 80065b2:	e008      	b.n	80065c6 <_printf_common+0xb2>
 80065b4:	2301      	movs	r3, #1
 80065b6:	4652      	mov	r2, sl
 80065b8:	4641      	mov	r1, r8
 80065ba:	4638      	mov	r0, r7
 80065bc:	47c8      	blx	r9
 80065be:	3001      	adds	r0, #1
 80065c0:	d103      	bne.n	80065ca <_printf_common+0xb6>
 80065c2:	f04f 30ff 	mov.w	r0, #4294967295
 80065c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ca:	3501      	adds	r5, #1
 80065cc:	e7c1      	b.n	8006552 <_printf_common+0x3e>
 80065ce:	2030      	movs	r0, #48	@ 0x30
 80065d0:	18e1      	adds	r1, r4, r3
 80065d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065d6:	1c5a      	adds	r2, r3, #1
 80065d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065dc:	4422      	add	r2, r4
 80065de:	3302      	adds	r3, #2
 80065e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065e4:	e7c2      	b.n	800656c <_printf_common+0x58>
 80065e6:	2301      	movs	r3, #1
 80065e8:	4622      	mov	r2, r4
 80065ea:	4641      	mov	r1, r8
 80065ec:	4638      	mov	r0, r7
 80065ee:	47c8      	blx	r9
 80065f0:	3001      	adds	r0, #1
 80065f2:	d0e6      	beq.n	80065c2 <_printf_common+0xae>
 80065f4:	3601      	adds	r6, #1
 80065f6:	e7d9      	b.n	80065ac <_printf_common+0x98>

080065f8 <_printf_i>:
 80065f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065fc:	7e0f      	ldrb	r7, [r1, #24]
 80065fe:	4691      	mov	r9, r2
 8006600:	2f78      	cmp	r7, #120	@ 0x78
 8006602:	4680      	mov	r8, r0
 8006604:	460c      	mov	r4, r1
 8006606:	469a      	mov	sl, r3
 8006608:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800660a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800660e:	d807      	bhi.n	8006620 <_printf_i+0x28>
 8006610:	2f62      	cmp	r7, #98	@ 0x62
 8006612:	d80a      	bhi.n	800662a <_printf_i+0x32>
 8006614:	2f00      	cmp	r7, #0
 8006616:	f000 80d3 	beq.w	80067c0 <_printf_i+0x1c8>
 800661a:	2f58      	cmp	r7, #88	@ 0x58
 800661c:	f000 80ba 	beq.w	8006794 <_printf_i+0x19c>
 8006620:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006624:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006628:	e03a      	b.n	80066a0 <_printf_i+0xa8>
 800662a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800662e:	2b15      	cmp	r3, #21
 8006630:	d8f6      	bhi.n	8006620 <_printf_i+0x28>
 8006632:	a101      	add	r1, pc, #4	@ (adr r1, 8006638 <_printf_i+0x40>)
 8006634:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006638:	08006691 	.word	0x08006691
 800663c:	080066a5 	.word	0x080066a5
 8006640:	08006621 	.word	0x08006621
 8006644:	08006621 	.word	0x08006621
 8006648:	08006621 	.word	0x08006621
 800664c:	08006621 	.word	0x08006621
 8006650:	080066a5 	.word	0x080066a5
 8006654:	08006621 	.word	0x08006621
 8006658:	08006621 	.word	0x08006621
 800665c:	08006621 	.word	0x08006621
 8006660:	08006621 	.word	0x08006621
 8006664:	080067a7 	.word	0x080067a7
 8006668:	080066cf 	.word	0x080066cf
 800666c:	08006761 	.word	0x08006761
 8006670:	08006621 	.word	0x08006621
 8006674:	08006621 	.word	0x08006621
 8006678:	080067c9 	.word	0x080067c9
 800667c:	08006621 	.word	0x08006621
 8006680:	080066cf 	.word	0x080066cf
 8006684:	08006621 	.word	0x08006621
 8006688:	08006621 	.word	0x08006621
 800668c:	08006769 	.word	0x08006769
 8006690:	6833      	ldr	r3, [r6, #0]
 8006692:	1d1a      	adds	r2, r3, #4
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6032      	str	r2, [r6, #0]
 8006698:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800669c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066a0:	2301      	movs	r3, #1
 80066a2:	e09e      	b.n	80067e2 <_printf_i+0x1ea>
 80066a4:	6833      	ldr	r3, [r6, #0]
 80066a6:	6820      	ldr	r0, [r4, #0]
 80066a8:	1d19      	adds	r1, r3, #4
 80066aa:	6031      	str	r1, [r6, #0]
 80066ac:	0606      	lsls	r6, r0, #24
 80066ae:	d501      	bpl.n	80066b4 <_printf_i+0xbc>
 80066b0:	681d      	ldr	r5, [r3, #0]
 80066b2:	e003      	b.n	80066bc <_printf_i+0xc4>
 80066b4:	0645      	lsls	r5, r0, #25
 80066b6:	d5fb      	bpl.n	80066b0 <_printf_i+0xb8>
 80066b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066bc:	2d00      	cmp	r5, #0
 80066be:	da03      	bge.n	80066c8 <_printf_i+0xd0>
 80066c0:	232d      	movs	r3, #45	@ 0x2d
 80066c2:	426d      	negs	r5, r5
 80066c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066c8:	230a      	movs	r3, #10
 80066ca:	4859      	ldr	r0, [pc, #356]	@ (8006830 <_printf_i+0x238>)
 80066cc:	e011      	b.n	80066f2 <_printf_i+0xfa>
 80066ce:	6821      	ldr	r1, [r4, #0]
 80066d0:	6833      	ldr	r3, [r6, #0]
 80066d2:	0608      	lsls	r0, r1, #24
 80066d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80066d8:	d402      	bmi.n	80066e0 <_printf_i+0xe8>
 80066da:	0649      	lsls	r1, r1, #25
 80066dc:	bf48      	it	mi
 80066de:	b2ad      	uxthmi	r5, r5
 80066e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80066e2:	6033      	str	r3, [r6, #0]
 80066e4:	bf14      	ite	ne
 80066e6:	230a      	movne	r3, #10
 80066e8:	2308      	moveq	r3, #8
 80066ea:	4851      	ldr	r0, [pc, #324]	@ (8006830 <_printf_i+0x238>)
 80066ec:	2100      	movs	r1, #0
 80066ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066f2:	6866      	ldr	r6, [r4, #4]
 80066f4:	2e00      	cmp	r6, #0
 80066f6:	bfa8      	it	ge
 80066f8:	6821      	ldrge	r1, [r4, #0]
 80066fa:	60a6      	str	r6, [r4, #8]
 80066fc:	bfa4      	itt	ge
 80066fe:	f021 0104 	bicge.w	r1, r1, #4
 8006702:	6021      	strge	r1, [r4, #0]
 8006704:	b90d      	cbnz	r5, 800670a <_printf_i+0x112>
 8006706:	2e00      	cmp	r6, #0
 8006708:	d04b      	beq.n	80067a2 <_printf_i+0x1aa>
 800670a:	4616      	mov	r6, r2
 800670c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006710:	fb03 5711 	mls	r7, r3, r1, r5
 8006714:	5dc7      	ldrb	r7, [r0, r7]
 8006716:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800671a:	462f      	mov	r7, r5
 800671c:	42bb      	cmp	r3, r7
 800671e:	460d      	mov	r5, r1
 8006720:	d9f4      	bls.n	800670c <_printf_i+0x114>
 8006722:	2b08      	cmp	r3, #8
 8006724:	d10b      	bne.n	800673e <_printf_i+0x146>
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	07df      	lsls	r7, r3, #31
 800672a:	d508      	bpl.n	800673e <_printf_i+0x146>
 800672c:	6923      	ldr	r3, [r4, #16]
 800672e:	6861      	ldr	r1, [r4, #4]
 8006730:	4299      	cmp	r1, r3
 8006732:	bfde      	ittt	le
 8006734:	2330      	movle	r3, #48	@ 0x30
 8006736:	f806 3c01 	strble.w	r3, [r6, #-1]
 800673a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800673e:	1b92      	subs	r2, r2, r6
 8006740:	6122      	str	r2, [r4, #16]
 8006742:	464b      	mov	r3, r9
 8006744:	4621      	mov	r1, r4
 8006746:	4640      	mov	r0, r8
 8006748:	f8cd a000 	str.w	sl, [sp]
 800674c:	aa03      	add	r2, sp, #12
 800674e:	f7ff fee1 	bl	8006514 <_printf_common>
 8006752:	3001      	adds	r0, #1
 8006754:	d14a      	bne.n	80067ec <_printf_i+0x1f4>
 8006756:	f04f 30ff 	mov.w	r0, #4294967295
 800675a:	b004      	add	sp, #16
 800675c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	f043 0320 	orr.w	r3, r3, #32
 8006766:	6023      	str	r3, [r4, #0]
 8006768:	2778      	movs	r7, #120	@ 0x78
 800676a:	4832      	ldr	r0, [pc, #200]	@ (8006834 <_printf_i+0x23c>)
 800676c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006770:	6823      	ldr	r3, [r4, #0]
 8006772:	6831      	ldr	r1, [r6, #0]
 8006774:	061f      	lsls	r7, r3, #24
 8006776:	f851 5b04 	ldr.w	r5, [r1], #4
 800677a:	d402      	bmi.n	8006782 <_printf_i+0x18a>
 800677c:	065f      	lsls	r7, r3, #25
 800677e:	bf48      	it	mi
 8006780:	b2ad      	uxthmi	r5, r5
 8006782:	6031      	str	r1, [r6, #0]
 8006784:	07d9      	lsls	r1, r3, #31
 8006786:	bf44      	itt	mi
 8006788:	f043 0320 	orrmi.w	r3, r3, #32
 800678c:	6023      	strmi	r3, [r4, #0]
 800678e:	b11d      	cbz	r5, 8006798 <_printf_i+0x1a0>
 8006790:	2310      	movs	r3, #16
 8006792:	e7ab      	b.n	80066ec <_printf_i+0xf4>
 8006794:	4826      	ldr	r0, [pc, #152]	@ (8006830 <_printf_i+0x238>)
 8006796:	e7e9      	b.n	800676c <_printf_i+0x174>
 8006798:	6823      	ldr	r3, [r4, #0]
 800679a:	f023 0320 	bic.w	r3, r3, #32
 800679e:	6023      	str	r3, [r4, #0]
 80067a0:	e7f6      	b.n	8006790 <_printf_i+0x198>
 80067a2:	4616      	mov	r6, r2
 80067a4:	e7bd      	b.n	8006722 <_printf_i+0x12a>
 80067a6:	6833      	ldr	r3, [r6, #0]
 80067a8:	6825      	ldr	r5, [r4, #0]
 80067aa:	1d18      	adds	r0, r3, #4
 80067ac:	6961      	ldr	r1, [r4, #20]
 80067ae:	6030      	str	r0, [r6, #0]
 80067b0:	062e      	lsls	r6, r5, #24
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	d501      	bpl.n	80067ba <_printf_i+0x1c2>
 80067b6:	6019      	str	r1, [r3, #0]
 80067b8:	e002      	b.n	80067c0 <_printf_i+0x1c8>
 80067ba:	0668      	lsls	r0, r5, #25
 80067bc:	d5fb      	bpl.n	80067b6 <_printf_i+0x1be>
 80067be:	8019      	strh	r1, [r3, #0]
 80067c0:	2300      	movs	r3, #0
 80067c2:	4616      	mov	r6, r2
 80067c4:	6123      	str	r3, [r4, #16]
 80067c6:	e7bc      	b.n	8006742 <_printf_i+0x14a>
 80067c8:	6833      	ldr	r3, [r6, #0]
 80067ca:	2100      	movs	r1, #0
 80067cc:	1d1a      	adds	r2, r3, #4
 80067ce:	6032      	str	r2, [r6, #0]
 80067d0:	681e      	ldr	r6, [r3, #0]
 80067d2:	6862      	ldr	r2, [r4, #4]
 80067d4:	4630      	mov	r0, r6
 80067d6:	f000 fc32 	bl	800703e <memchr>
 80067da:	b108      	cbz	r0, 80067e0 <_printf_i+0x1e8>
 80067dc:	1b80      	subs	r0, r0, r6
 80067de:	6060      	str	r0, [r4, #4]
 80067e0:	6863      	ldr	r3, [r4, #4]
 80067e2:	6123      	str	r3, [r4, #16]
 80067e4:	2300      	movs	r3, #0
 80067e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067ea:	e7aa      	b.n	8006742 <_printf_i+0x14a>
 80067ec:	4632      	mov	r2, r6
 80067ee:	4649      	mov	r1, r9
 80067f0:	4640      	mov	r0, r8
 80067f2:	6923      	ldr	r3, [r4, #16]
 80067f4:	47d0      	blx	sl
 80067f6:	3001      	adds	r0, #1
 80067f8:	d0ad      	beq.n	8006756 <_printf_i+0x15e>
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	079b      	lsls	r3, r3, #30
 80067fe:	d413      	bmi.n	8006828 <_printf_i+0x230>
 8006800:	68e0      	ldr	r0, [r4, #12]
 8006802:	9b03      	ldr	r3, [sp, #12]
 8006804:	4298      	cmp	r0, r3
 8006806:	bfb8      	it	lt
 8006808:	4618      	movlt	r0, r3
 800680a:	e7a6      	b.n	800675a <_printf_i+0x162>
 800680c:	2301      	movs	r3, #1
 800680e:	4632      	mov	r2, r6
 8006810:	4649      	mov	r1, r9
 8006812:	4640      	mov	r0, r8
 8006814:	47d0      	blx	sl
 8006816:	3001      	adds	r0, #1
 8006818:	d09d      	beq.n	8006756 <_printf_i+0x15e>
 800681a:	3501      	adds	r5, #1
 800681c:	68e3      	ldr	r3, [r4, #12]
 800681e:	9903      	ldr	r1, [sp, #12]
 8006820:	1a5b      	subs	r3, r3, r1
 8006822:	42ab      	cmp	r3, r5
 8006824:	dcf2      	bgt.n	800680c <_printf_i+0x214>
 8006826:	e7eb      	b.n	8006800 <_printf_i+0x208>
 8006828:	2500      	movs	r5, #0
 800682a:	f104 0619 	add.w	r6, r4, #25
 800682e:	e7f5      	b.n	800681c <_printf_i+0x224>
 8006830:	0800d58c 	.word	0x0800d58c
 8006834:	0800d59d 	.word	0x0800d59d

08006838 <_scanf_float>:
 8006838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800683c:	b087      	sub	sp, #28
 800683e:	9303      	str	r3, [sp, #12]
 8006840:	688b      	ldr	r3, [r1, #8]
 8006842:	4617      	mov	r7, r2
 8006844:	1e5a      	subs	r2, r3, #1
 8006846:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800684a:	bf82      	ittt	hi
 800684c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006850:	eb03 0b05 	addhi.w	fp, r3, r5
 8006854:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006858:	460a      	mov	r2, r1
 800685a:	f04f 0500 	mov.w	r5, #0
 800685e:	bf88      	it	hi
 8006860:	608b      	strhi	r3, [r1, #8]
 8006862:	680b      	ldr	r3, [r1, #0]
 8006864:	4680      	mov	r8, r0
 8006866:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800686a:	f842 3b1c 	str.w	r3, [r2], #28
 800686e:	460c      	mov	r4, r1
 8006870:	bf98      	it	ls
 8006872:	f04f 0b00 	movls.w	fp, #0
 8006876:	4616      	mov	r6, r2
 8006878:	46aa      	mov	sl, r5
 800687a:	46a9      	mov	r9, r5
 800687c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006880:	9201      	str	r2, [sp, #4]
 8006882:	9502      	str	r5, [sp, #8]
 8006884:	68a2      	ldr	r2, [r4, #8]
 8006886:	b152      	cbz	r2, 800689e <_scanf_float+0x66>
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	2b4e      	cmp	r3, #78	@ 0x4e
 800688e:	d865      	bhi.n	800695c <_scanf_float+0x124>
 8006890:	2b40      	cmp	r3, #64	@ 0x40
 8006892:	d83d      	bhi.n	8006910 <_scanf_float+0xd8>
 8006894:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006898:	b2c8      	uxtb	r0, r1
 800689a:	280e      	cmp	r0, #14
 800689c:	d93b      	bls.n	8006916 <_scanf_float+0xde>
 800689e:	f1b9 0f00 	cmp.w	r9, #0
 80068a2:	d003      	beq.n	80068ac <_scanf_float+0x74>
 80068a4:	6823      	ldr	r3, [r4, #0]
 80068a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068aa:	6023      	str	r3, [r4, #0]
 80068ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068b0:	f1ba 0f01 	cmp.w	sl, #1
 80068b4:	f200 8118 	bhi.w	8006ae8 <_scanf_float+0x2b0>
 80068b8:	9b01      	ldr	r3, [sp, #4]
 80068ba:	429e      	cmp	r6, r3
 80068bc:	f200 8109 	bhi.w	8006ad2 <_scanf_float+0x29a>
 80068c0:	2001      	movs	r0, #1
 80068c2:	b007      	add	sp, #28
 80068c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80068cc:	2a0d      	cmp	r2, #13
 80068ce:	d8e6      	bhi.n	800689e <_scanf_float+0x66>
 80068d0:	a101      	add	r1, pc, #4	@ (adr r1, 80068d8 <_scanf_float+0xa0>)
 80068d2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80068d6:	bf00      	nop
 80068d8:	08006a1f 	.word	0x08006a1f
 80068dc:	0800689f 	.word	0x0800689f
 80068e0:	0800689f 	.word	0x0800689f
 80068e4:	0800689f 	.word	0x0800689f
 80068e8:	08006a7f 	.word	0x08006a7f
 80068ec:	08006a57 	.word	0x08006a57
 80068f0:	0800689f 	.word	0x0800689f
 80068f4:	0800689f 	.word	0x0800689f
 80068f8:	08006a2d 	.word	0x08006a2d
 80068fc:	0800689f 	.word	0x0800689f
 8006900:	0800689f 	.word	0x0800689f
 8006904:	0800689f 	.word	0x0800689f
 8006908:	0800689f 	.word	0x0800689f
 800690c:	080069e5 	.word	0x080069e5
 8006910:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006914:	e7da      	b.n	80068cc <_scanf_float+0x94>
 8006916:	290e      	cmp	r1, #14
 8006918:	d8c1      	bhi.n	800689e <_scanf_float+0x66>
 800691a:	a001      	add	r0, pc, #4	@ (adr r0, 8006920 <_scanf_float+0xe8>)
 800691c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006920:	080069d5 	.word	0x080069d5
 8006924:	0800689f 	.word	0x0800689f
 8006928:	080069d5 	.word	0x080069d5
 800692c:	08006a6b 	.word	0x08006a6b
 8006930:	0800689f 	.word	0x0800689f
 8006934:	0800697d 	.word	0x0800697d
 8006938:	080069bb 	.word	0x080069bb
 800693c:	080069bb 	.word	0x080069bb
 8006940:	080069bb 	.word	0x080069bb
 8006944:	080069bb 	.word	0x080069bb
 8006948:	080069bb 	.word	0x080069bb
 800694c:	080069bb 	.word	0x080069bb
 8006950:	080069bb 	.word	0x080069bb
 8006954:	080069bb 	.word	0x080069bb
 8006958:	080069bb 	.word	0x080069bb
 800695c:	2b6e      	cmp	r3, #110	@ 0x6e
 800695e:	d809      	bhi.n	8006974 <_scanf_float+0x13c>
 8006960:	2b60      	cmp	r3, #96	@ 0x60
 8006962:	d8b1      	bhi.n	80068c8 <_scanf_float+0x90>
 8006964:	2b54      	cmp	r3, #84	@ 0x54
 8006966:	d07b      	beq.n	8006a60 <_scanf_float+0x228>
 8006968:	2b59      	cmp	r3, #89	@ 0x59
 800696a:	d198      	bne.n	800689e <_scanf_float+0x66>
 800696c:	2d07      	cmp	r5, #7
 800696e:	d196      	bne.n	800689e <_scanf_float+0x66>
 8006970:	2508      	movs	r5, #8
 8006972:	e02c      	b.n	80069ce <_scanf_float+0x196>
 8006974:	2b74      	cmp	r3, #116	@ 0x74
 8006976:	d073      	beq.n	8006a60 <_scanf_float+0x228>
 8006978:	2b79      	cmp	r3, #121	@ 0x79
 800697a:	e7f6      	b.n	800696a <_scanf_float+0x132>
 800697c:	6821      	ldr	r1, [r4, #0]
 800697e:	05c8      	lsls	r0, r1, #23
 8006980:	d51b      	bpl.n	80069ba <_scanf_float+0x182>
 8006982:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006986:	6021      	str	r1, [r4, #0]
 8006988:	f109 0901 	add.w	r9, r9, #1
 800698c:	f1bb 0f00 	cmp.w	fp, #0
 8006990:	d003      	beq.n	800699a <_scanf_float+0x162>
 8006992:	3201      	adds	r2, #1
 8006994:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006998:	60a2      	str	r2, [r4, #8]
 800699a:	68a3      	ldr	r3, [r4, #8]
 800699c:	3b01      	subs	r3, #1
 800699e:	60a3      	str	r3, [r4, #8]
 80069a0:	6923      	ldr	r3, [r4, #16]
 80069a2:	3301      	adds	r3, #1
 80069a4:	6123      	str	r3, [r4, #16]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	3b01      	subs	r3, #1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	607b      	str	r3, [r7, #4]
 80069ae:	f340 8087 	ble.w	8006ac0 <_scanf_float+0x288>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	3301      	adds	r3, #1
 80069b6:	603b      	str	r3, [r7, #0]
 80069b8:	e764      	b.n	8006884 <_scanf_float+0x4c>
 80069ba:	eb1a 0105 	adds.w	r1, sl, r5
 80069be:	f47f af6e 	bne.w	800689e <_scanf_float+0x66>
 80069c2:	460d      	mov	r5, r1
 80069c4:	468a      	mov	sl, r1
 80069c6:	6822      	ldr	r2, [r4, #0]
 80069c8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80069cc:	6022      	str	r2, [r4, #0]
 80069ce:	f806 3b01 	strb.w	r3, [r6], #1
 80069d2:	e7e2      	b.n	800699a <_scanf_float+0x162>
 80069d4:	6822      	ldr	r2, [r4, #0]
 80069d6:	0610      	lsls	r0, r2, #24
 80069d8:	f57f af61 	bpl.w	800689e <_scanf_float+0x66>
 80069dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069e0:	6022      	str	r2, [r4, #0]
 80069e2:	e7f4      	b.n	80069ce <_scanf_float+0x196>
 80069e4:	f1ba 0f00 	cmp.w	sl, #0
 80069e8:	d10e      	bne.n	8006a08 <_scanf_float+0x1d0>
 80069ea:	f1b9 0f00 	cmp.w	r9, #0
 80069ee:	d10e      	bne.n	8006a0e <_scanf_float+0x1d6>
 80069f0:	6822      	ldr	r2, [r4, #0]
 80069f2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80069f6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80069fa:	d108      	bne.n	8006a0e <_scanf_float+0x1d6>
 80069fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006a00:	f04f 0a01 	mov.w	sl, #1
 8006a04:	6022      	str	r2, [r4, #0]
 8006a06:	e7e2      	b.n	80069ce <_scanf_float+0x196>
 8006a08:	f1ba 0f02 	cmp.w	sl, #2
 8006a0c:	d055      	beq.n	8006aba <_scanf_float+0x282>
 8006a0e:	2d01      	cmp	r5, #1
 8006a10:	d002      	beq.n	8006a18 <_scanf_float+0x1e0>
 8006a12:	2d04      	cmp	r5, #4
 8006a14:	f47f af43 	bne.w	800689e <_scanf_float+0x66>
 8006a18:	3501      	adds	r5, #1
 8006a1a:	b2ed      	uxtb	r5, r5
 8006a1c:	e7d7      	b.n	80069ce <_scanf_float+0x196>
 8006a1e:	f1ba 0f01 	cmp.w	sl, #1
 8006a22:	f47f af3c 	bne.w	800689e <_scanf_float+0x66>
 8006a26:	f04f 0a02 	mov.w	sl, #2
 8006a2a:	e7d0      	b.n	80069ce <_scanf_float+0x196>
 8006a2c:	b97d      	cbnz	r5, 8006a4e <_scanf_float+0x216>
 8006a2e:	f1b9 0f00 	cmp.w	r9, #0
 8006a32:	f47f af37 	bne.w	80068a4 <_scanf_float+0x6c>
 8006a36:	6822      	ldr	r2, [r4, #0]
 8006a38:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006a3c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006a40:	f040 8103 	bne.w	8006c4a <_scanf_float+0x412>
 8006a44:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006a48:	2501      	movs	r5, #1
 8006a4a:	6022      	str	r2, [r4, #0]
 8006a4c:	e7bf      	b.n	80069ce <_scanf_float+0x196>
 8006a4e:	2d03      	cmp	r5, #3
 8006a50:	d0e2      	beq.n	8006a18 <_scanf_float+0x1e0>
 8006a52:	2d05      	cmp	r5, #5
 8006a54:	e7de      	b.n	8006a14 <_scanf_float+0x1dc>
 8006a56:	2d02      	cmp	r5, #2
 8006a58:	f47f af21 	bne.w	800689e <_scanf_float+0x66>
 8006a5c:	2503      	movs	r5, #3
 8006a5e:	e7b6      	b.n	80069ce <_scanf_float+0x196>
 8006a60:	2d06      	cmp	r5, #6
 8006a62:	f47f af1c 	bne.w	800689e <_scanf_float+0x66>
 8006a66:	2507      	movs	r5, #7
 8006a68:	e7b1      	b.n	80069ce <_scanf_float+0x196>
 8006a6a:	6822      	ldr	r2, [r4, #0]
 8006a6c:	0591      	lsls	r1, r2, #22
 8006a6e:	f57f af16 	bpl.w	800689e <_scanf_float+0x66>
 8006a72:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006a76:	6022      	str	r2, [r4, #0]
 8006a78:	f8cd 9008 	str.w	r9, [sp, #8]
 8006a7c:	e7a7      	b.n	80069ce <_scanf_float+0x196>
 8006a7e:	6822      	ldr	r2, [r4, #0]
 8006a80:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006a84:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006a88:	d006      	beq.n	8006a98 <_scanf_float+0x260>
 8006a8a:	0550      	lsls	r0, r2, #21
 8006a8c:	f57f af07 	bpl.w	800689e <_scanf_float+0x66>
 8006a90:	f1b9 0f00 	cmp.w	r9, #0
 8006a94:	f000 80d9 	beq.w	8006c4a <_scanf_float+0x412>
 8006a98:	0591      	lsls	r1, r2, #22
 8006a9a:	bf58      	it	pl
 8006a9c:	9902      	ldrpl	r1, [sp, #8]
 8006a9e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006aa2:	bf58      	it	pl
 8006aa4:	eba9 0101 	subpl.w	r1, r9, r1
 8006aa8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006aac:	f04f 0900 	mov.w	r9, #0
 8006ab0:	bf58      	it	pl
 8006ab2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006ab6:	6022      	str	r2, [r4, #0]
 8006ab8:	e789      	b.n	80069ce <_scanf_float+0x196>
 8006aba:	f04f 0a03 	mov.w	sl, #3
 8006abe:	e786      	b.n	80069ce <_scanf_float+0x196>
 8006ac0:	4639      	mov	r1, r7
 8006ac2:	4640      	mov	r0, r8
 8006ac4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006ac8:	4798      	blx	r3
 8006aca:	2800      	cmp	r0, #0
 8006acc:	f43f aeda 	beq.w	8006884 <_scanf_float+0x4c>
 8006ad0:	e6e5      	b.n	800689e <_scanf_float+0x66>
 8006ad2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ad6:	463a      	mov	r2, r7
 8006ad8:	4640      	mov	r0, r8
 8006ada:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ade:	4798      	blx	r3
 8006ae0:	6923      	ldr	r3, [r4, #16]
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	6123      	str	r3, [r4, #16]
 8006ae6:	e6e7      	b.n	80068b8 <_scanf_float+0x80>
 8006ae8:	1e6b      	subs	r3, r5, #1
 8006aea:	2b06      	cmp	r3, #6
 8006aec:	d824      	bhi.n	8006b38 <_scanf_float+0x300>
 8006aee:	2d02      	cmp	r5, #2
 8006af0:	d836      	bhi.n	8006b60 <_scanf_float+0x328>
 8006af2:	9b01      	ldr	r3, [sp, #4]
 8006af4:	429e      	cmp	r6, r3
 8006af6:	f67f aee3 	bls.w	80068c0 <_scanf_float+0x88>
 8006afa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006afe:	463a      	mov	r2, r7
 8006b00:	4640      	mov	r0, r8
 8006b02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b06:	4798      	blx	r3
 8006b08:	6923      	ldr	r3, [r4, #16]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	6123      	str	r3, [r4, #16]
 8006b0e:	e7f0      	b.n	8006af2 <_scanf_float+0x2ba>
 8006b10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b14:	463a      	mov	r2, r7
 8006b16:	4640      	mov	r0, r8
 8006b18:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006b1c:	4798      	blx	r3
 8006b1e:	6923      	ldr	r3, [r4, #16]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	6123      	str	r3, [r4, #16]
 8006b24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b28:	fa5f fa8a 	uxtb.w	sl, sl
 8006b2c:	f1ba 0f02 	cmp.w	sl, #2
 8006b30:	d1ee      	bne.n	8006b10 <_scanf_float+0x2d8>
 8006b32:	3d03      	subs	r5, #3
 8006b34:	b2ed      	uxtb	r5, r5
 8006b36:	1b76      	subs	r6, r6, r5
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	05da      	lsls	r2, r3, #23
 8006b3c:	d530      	bpl.n	8006ba0 <_scanf_float+0x368>
 8006b3e:	055b      	lsls	r3, r3, #21
 8006b40:	d511      	bpl.n	8006b66 <_scanf_float+0x32e>
 8006b42:	9b01      	ldr	r3, [sp, #4]
 8006b44:	429e      	cmp	r6, r3
 8006b46:	f67f aebb 	bls.w	80068c0 <_scanf_float+0x88>
 8006b4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b4e:	463a      	mov	r2, r7
 8006b50:	4640      	mov	r0, r8
 8006b52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b56:	4798      	blx	r3
 8006b58:	6923      	ldr	r3, [r4, #16]
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	6123      	str	r3, [r4, #16]
 8006b5e:	e7f0      	b.n	8006b42 <_scanf_float+0x30a>
 8006b60:	46aa      	mov	sl, r5
 8006b62:	46b3      	mov	fp, r6
 8006b64:	e7de      	b.n	8006b24 <_scanf_float+0x2ec>
 8006b66:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006b6a:	6923      	ldr	r3, [r4, #16]
 8006b6c:	2965      	cmp	r1, #101	@ 0x65
 8006b6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b72:	f106 35ff 	add.w	r5, r6, #4294967295
 8006b76:	6123      	str	r3, [r4, #16]
 8006b78:	d00c      	beq.n	8006b94 <_scanf_float+0x35c>
 8006b7a:	2945      	cmp	r1, #69	@ 0x45
 8006b7c:	d00a      	beq.n	8006b94 <_scanf_float+0x35c>
 8006b7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b82:	463a      	mov	r2, r7
 8006b84:	4640      	mov	r0, r8
 8006b86:	4798      	blx	r3
 8006b88:	6923      	ldr	r3, [r4, #16]
 8006b8a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	1eb5      	subs	r5, r6, #2
 8006b92:	6123      	str	r3, [r4, #16]
 8006b94:	463a      	mov	r2, r7
 8006b96:	4640      	mov	r0, r8
 8006b98:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b9c:	4798      	blx	r3
 8006b9e:	462e      	mov	r6, r5
 8006ba0:	6822      	ldr	r2, [r4, #0]
 8006ba2:	f012 0210 	ands.w	r2, r2, #16
 8006ba6:	d001      	beq.n	8006bac <_scanf_float+0x374>
 8006ba8:	2000      	movs	r0, #0
 8006baa:	e68a      	b.n	80068c2 <_scanf_float+0x8a>
 8006bac:	7032      	strb	r2, [r6, #0]
 8006bae:	6823      	ldr	r3, [r4, #0]
 8006bb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006bb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bb8:	d11c      	bne.n	8006bf4 <_scanf_float+0x3bc>
 8006bba:	9b02      	ldr	r3, [sp, #8]
 8006bbc:	454b      	cmp	r3, r9
 8006bbe:	eba3 0209 	sub.w	r2, r3, r9
 8006bc2:	d123      	bne.n	8006c0c <_scanf_float+0x3d4>
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	4640      	mov	r0, r8
 8006bc8:	9901      	ldr	r1, [sp, #4]
 8006bca:	f002 fc49 	bl	8009460 <_strtod_r>
 8006bce:	9b03      	ldr	r3, [sp, #12]
 8006bd0:	6825      	ldr	r5, [r4, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f015 0f02 	tst.w	r5, #2
 8006bd8:	4606      	mov	r6, r0
 8006bda:	460f      	mov	r7, r1
 8006bdc:	f103 0204 	add.w	r2, r3, #4
 8006be0:	d01f      	beq.n	8006c22 <_scanf_float+0x3ea>
 8006be2:	9903      	ldr	r1, [sp, #12]
 8006be4:	600a      	str	r2, [r1, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	e9c3 6700 	strd	r6, r7, [r3]
 8006bec:	68e3      	ldr	r3, [r4, #12]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	60e3      	str	r3, [r4, #12]
 8006bf2:	e7d9      	b.n	8006ba8 <_scanf_float+0x370>
 8006bf4:	9b04      	ldr	r3, [sp, #16]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d0e4      	beq.n	8006bc4 <_scanf_float+0x38c>
 8006bfa:	9905      	ldr	r1, [sp, #20]
 8006bfc:	230a      	movs	r3, #10
 8006bfe:	4640      	mov	r0, r8
 8006c00:	3101      	adds	r1, #1
 8006c02:	f002 fcad 	bl	8009560 <_strtol_r>
 8006c06:	9b04      	ldr	r3, [sp, #16]
 8006c08:	9e05      	ldr	r6, [sp, #20]
 8006c0a:	1ac2      	subs	r2, r0, r3
 8006c0c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006c10:	429e      	cmp	r6, r3
 8006c12:	bf28      	it	cs
 8006c14:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006c18:	4630      	mov	r0, r6
 8006c1a:	490d      	ldr	r1, [pc, #52]	@ (8006c50 <_scanf_float+0x418>)
 8006c1c:	f000 f912 	bl	8006e44 <siprintf>
 8006c20:	e7d0      	b.n	8006bc4 <_scanf_float+0x38c>
 8006c22:	076d      	lsls	r5, r5, #29
 8006c24:	d4dd      	bmi.n	8006be2 <_scanf_float+0x3aa>
 8006c26:	9d03      	ldr	r5, [sp, #12]
 8006c28:	602a      	str	r2, [r5, #0]
 8006c2a:	681d      	ldr	r5, [r3, #0]
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	460b      	mov	r3, r1
 8006c30:	f7f9 feec 	bl	8000a0c <__aeabi_dcmpun>
 8006c34:	b120      	cbz	r0, 8006c40 <_scanf_float+0x408>
 8006c36:	4807      	ldr	r0, [pc, #28]	@ (8006c54 <_scanf_float+0x41c>)
 8006c38:	f000 fa1e 	bl	8007078 <nanf>
 8006c3c:	6028      	str	r0, [r5, #0]
 8006c3e:	e7d5      	b.n	8006bec <_scanf_float+0x3b4>
 8006c40:	4630      	mov	r0, r6
 8006c42:	4639      	mov	r1, r7
 8006c44:	f7f9 ff40 	bl	8000ac8 <__aeabi_d2f>
 8006c48:	e7f8      	b.n	8006c3c <_scanf_float+0x404>
 8006c4a:	f04f 0900 	mov.w	r9, #0
 8006c4e:	e62d      	b.n	80068ac <_scanf_float+0x74>
 8006c50:	0800d5ae 	.word	0x0800d5ae
 8006c54:	0800d945 	.word	0x0800d945

08006c58 <std>:
 8006c58:	2300      	movs	r3, #0
 8006c5a:	b510      	push	{r4, lr}
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	e9c0 3300 	strd	r3, r3, [r0]
 8006c62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c66:	6083      	str	r3, [r0, #8]
 8006c68:	8181      	strh	r1, [r0, #12]
 8006c6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c6c:	81c2      	strh	r2, [r0, #14]
 8006c6e:	6183      	str	r3, [r0, #24]
 8006c70:	4619      	mov	r1, r3
 8006c72:	2208      	movs	r2, #8
 8006c74:	305c      	adds	r0, #92	@ 0x5c
 8006c76:	f000 f962 	bl	8006f3e <memset>
 8006c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006cb0 <std+0x58>)
 8006c7c:	6224      	str	r4, [r4, #32]
 8006c7e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c80:	4b0c      	ldr	r3, [pc, #48]	@ (8006cb4 <std+0x5c>)
 8006c82:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c84:	4b0c      	ldr	r3, [pc, #48]	@ (8006cb8 <std+0x60>)
 8006c86:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c88:	4b0c      	ldr	r3, [pc, #48]	@ (8006cbc <std+0x64>)
 8006c8a:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8006cc0 <std+0x68>)
 8006c8e:	429c      	cmp	r4, r3
 8006c90:	d006      	beq.n	8006ca0 <std+0x48>
 8006c92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c96:	4294      	cmp	r4, r2
 8006c98:	d002      	beq.n	8006ca0 <std+0x48>
 8006c9a:	33d0      	adds	r3, #208	@ 0xd0
 8006c9c:	429c      	cmp	r4, r3
 8006c9e:	d105      	bne.n	8006cac <std+0x54>
 8006ca0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ca8:	f000 b9c6 	b.w	8007038 <__retarget_lock_init_recursive>
 8006cac:	bd10      	pop	{r4, pc}
 8006cae:	bf00      	nop
 8006cb0:	08006e85 	.word	0x08006e85
 8006cb4:	08006ea7 	.word	0x08006ea7
 8006cb8:	08006edf 	.word	0x08006edf
 8006cbc:	08006f03 	.word	0x08006f03
 8006cc0:	20000774 	.word	0x20000774

08006cc4 <stdio_exit_handler>:
 8006cc4:	4a02      	ldr	r2, [pc, #8]	@ (8006cd0 <stdio_exit_handler+0xc>)
 8006cc6:	4903      	ldr	r1, [pc, #12]	@ (8006cd4 <stdio_exit_handler+0x10>)
 8006cc8:	4803      	ldr	r0, [pc, #12]	@ (8006cd8 <stdio_exit_handler+0x14>)
 8006cca:	f000 b869 	b.w	8006da0 <_fwalk_sglue>
 8006cce:	bf00      	nop
 8006cd0:	20000010 	.word	0x20000010
 8006cd4:	08009915 	.word	0x08009915
 8006cd8:	20000020 	.word	0x20000020

08006cdc <cleanup_stdio>:
 8006cdc:	6841      	ldr	r1, [r0, #4]
 8006cde:	4b0c      	ldr	r3, [pc, #48]	@ (8006d10 <cleanup_stdio+0x34>)
 8006ce0:	b510      	push	{r4, lr}
 8006ce2:	4299      	cmp	r1, r3
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	d001      	beq.n	8006cec <cleanup_stdio+0x10>
 8006ce8:	f002 fe14 	bl	8009914 <_fflush_r>
 8006cec:	68a1      	ldr	r1, [r4, #8]
 8006cee:	4b09      	ldr	r3, [pc, #36]	@ (8006d14 <cleanup_stdio+0x38>)
 8006cf0:	4299      	cmp	r1, r3
 8006cf2:	d002      	beq.n	8006cfa <cleanup_stdio+0x1e>
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f002 fe0d 	bl	8009914 <_fflush_r>
 8006cfa:	68e1      	ldr	r1, [r4, #12]
 8006cfc:	4b06      	ldr	r3, [pc, #24]	@ (8006d18 <cleanup_stdio+0x3c>)
 8006cfe:	4299      	cmp	r1, r3
 8006d00:	d004      	beq.n	8006d0c <cleanup_stdio+0x30>
 8006d02:	4620      	mov	r0, r4
 8006d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d08:	f002 be04 	b.w	8009914 <_fflush_r>
 8006d0c:	bd10      	pop	{r4, pc}
 8006d0e:	bf00      	nop
 8006d10:	20000774 	.word	0x20000774
 8006d14:	200007dc 	.word	0x200007dc
 8006d18:	20000844 	.word	0x20000844

08006d1c <global_stdio_init.part.0>:
 8006d1c:	b510      	push	{r4, lr}
 8006d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8006d4c <global_stdio_init.part.0+0x30>)
 8006d20:	4c0b      	ldr	r4, [pc, #44]	@ (8006d50 <global_stdio_init.part.0+0x34>)
 8006d22:	4a0c      	ldr	r2, [pc, #48]	@ (8006d54 <global_stdio_init.part.0+0x38>)
 8006d24:	4620      	mov	r0, r4
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	2104      	movs	r1, #4
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f7ff ff94 	bl	8006c58 <std>
 8006d30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d34:	2201      	movs	r2, #1
 8006d36:	2109      	movs	r1, #9
 8006d38:	f7ff ff8e 	bl	8006c58 <std>
 8006d3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d40:	2202      	movs	r2, #2
 8006d42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d46:	2112      	movs	r1, #18
 8006d48:	f7ff bf86 	b.w	8006c58 <std>
 8006d4c:	200008ac 	.word	0x200008ac
 8006d50:	20000774 	.word	0x20000774
 8006d54:	08006cc5 	.word	0x08006cc5

08006d58 <__sfp_lock_acquire>:
 8006d58:	4801      	ldr	r0, [pc, #4]	@ (8006d60 <__sfp_lock_acquire+0x8>)
 8006d5a:	f000 b96e 	b.w	800703a <__retarget_lock_acquire_recursive>
 8006d5e:	bf00      	nop
 8006d60:	200008b5 	.word	0x200008b5

08006d64 <__sfp_lock_release>:
 8006d64:	4801      	ldr	r0, [pc, #4]	@ (8006d6c <__sfp_lock_release+0x8>)
 8006d66:	f000 b969 	b.w	800703c <__retarget_lock_release_recursive>
 8006d6a:	bf00      	nop
 8006d6c:	200008b5 	.word	0x200008b5

08006d70 <__sinit>:
 8006d70:	b510      	push	{r4, lr}
 8006d72:	4604      	mov	r4, r0
 8006d74:	f7ff fff0 	bl	8006d58 <__sfp_lock_acquire>
 8006d78:	6a23      	ldr	r3, [r4, #32]
 8006d7a:	b11b      	cbz	r3, 8006d84 <__sinit+0x14>
 8006d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d80:	f7ff bff0 	b.w	8006d64 <__sfp_lock_release>
 8006d84:	4b04      	ldr	r3, [pc, #16]	@ (8006d98 <__sinit+0x28>)
 8006d86:	6223      	str	r3, [r4, #32]
 8006d88:	4b04      	ldr	r3, [pc, #16]	@ (8006d9c <__sinit+0x2c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1f5      	bne.n	8006d7c <__sinit+0xc>
 8006d90:	f7ff ffc4 	bl	8006d1c <global_stdio_init.part.0>
 8006d94:	e7f2      	b.n	8006d7c <__sinit+0xc>
 8006d96:	bf00      	nop
 8006d98:	08006cdd 	.word	0x08006cdd
 8006d9c:	200008ac 	.word	0x200008ac

08006da0 <_fwalk_sglue>:
 8006da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006da4:	4607      	mov	r7, r0
 8006da6:	4688      	mov	r8, r1
 8006da8:	4614      	mov	r4, r2
 8006daa:	2600      	movs	r6, #0
 8006dac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006db0:	f1b9 0901 	subs.w	r9, r9, #1
 8006db4:	d505      	bpl.n	8006dc2 <_fwalk_sglue+0x22>
 8006db6:	6824      	ldr	r4, [r4, #0]
 8006db8:	2c00      	cmp	r4, #0
 8006dba:	d1f7      	bne.n	8006dac <_fwalk_sglue+0xc>
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dc2:	89ab      	ldrh	r3, [r5, #12]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d907      	bls.n	8006dd8 <_fwalk_sglue+0x38>
 8006dc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	d003      	beq.n	8006dd8 <_fwalk_sglue+0x38>
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	4638      	mov	r0, r7
 8006dd4:	47c0      	blx	r8
 8006dd6:	4306      	orrs	r6, r0
 8006dd8:	3568      	adds	r5, #104	@ 0x68
 8006dda:	e7e9      	b.n	8006db0 <_fwalk_sglue+0x10>

08006ddc <sniprintf>:
 8006ddc:	b40c      	push	{r2, r3}
 8006dde:	b530      	push	{r4, r5, lr}
 8006de0:	4b17      	ldr	r3, [pc, #92]	@ (8006e40 <sniprintf+0x64>)
 8006de2:	1e0c      	subs	r4, r1, #0
 8006de4:	681d      	ldr	r5, [r3, #0]
 8006de6:	b09d      	sub	sp, #116	@ 0x74
 8006de8:	da08      	bge.n	8006dfc <sniprintf+0x20>
 8006dea:	238b      	movs	r3, #139	@ 0x8b
 8006dec:	f04f 30ff 	mov.w	r0, #4294967295
 8006df0:	602b      	str	r3, [r5, #0]
 8006df2:	b01d      	add	sp, #116	@ 0x74
 8006df4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006df8:	b002      	add	sp, #8
 8006dfa:	4770      	bx	lr
 8006dfc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006e00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006e04:	bf0c      	ite	eq
 8006e06:	4623      	moveq	r3, r4
 8006e08:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006e0c:	9304      	str	r3, [sp, #16]
 8006e0e:	9307      	str	r3, [sp, #28]
 8006e10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006e14:	9002      	str	r0, [sp, #8]
 8006e16:	9006      	str	r0, [sp, #24]
 8006e18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	ab21      	add	r3, sp, #132	@ 0x84
 8006e20:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006e22:	a902      	add	r1, sp, #8
 8006e24:	9301      	str	r3, [sp, #4]
 8006e26:	f002 fbf9 	bl	800961c <_svfiprintf_r>
 8006e2a:	1c43      	adds	r3, r0, #1
 8006e2c:	bfbc      	itt	lt
 8006e2e:	238b      	movlt	r3, #139	@ 0x8b
 8006e30:	602b      	strlt	r3, [r5, #0]
 8006e32:	2c00      	cmp	r4, #0
 8006e34:	d0dd      	beq.n	8006df2 <sniprintf+0x16>
 8006e36:	2200      	movs	r2, #0
 8006e38:	9b02      	ldr	r3, [sp, #8]
 8006e3a:	701a      	strb	r2, [r3, #0]
 8006e3c:	e7d9      	b.n	8006df2 <sniprintf+0x16>
 8006e3e:	bf00      	nop
 8006e40:	2000001c 	.word	0x2000001c

08006e44 <siprintf>:
 8006e44:	b40e      	push	{r1, r2, r3}
 8006e46:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006e4a:	b500      	push	{lr}
 8006e4c:	b09c      	sub	sp, #112	@ 0x70
 8006e4e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006e50:	9002      	str	r0, [sp, #8]
 8006e52:	9006      	str	r0, [sp, #24]
 8006e54:	9107      	str	r1, [sp, #28]
 8006e56:	9104      	str	r1, [sp, #16]
 8006e58:	4808      	ldr	r0, [pc, #32]	@ (8006e7c <siprintf+0x38>)
 8006e5a:	4909      	ldr	r1, [pc, #36]	@ (8006e80 <siprintf+0x3c>)
 8006e5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e60:	9105      	str	r1, [sp, #20]
 8006e62:	6800      	ldr	r0, [r0, #0]
 8006e64:	a902      	add	r1, sp, #8
 8006e66:	9301      	str	r3, [sp, #4]
 8006e68:	f002 fbd8 	bl	800961c <_svfiprintf_r>
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	9b02      	ldr	r3, [sp, #8]
 8006e70:	701a      	strb	r2, [r3, #0]
 8006e72:	b01c      	add	sp, #112	@ 0x70
 8006e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e78:	b003      	add	sp, #12
 8006e7a:	4770      	bx	lr
 8006e7c:	2000001c 	.word	0x2000001c
 8006e80:	ffff0208 	.word	0xffff0208

08006e84 <__sread>:
 8006e84:	b510      	push	{r4, lr}
 8006e86:	460c      	mov	r4, r1
 8006e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e8c:	f000 f886 	bl	8006f9c <_read_r>
 8006e90:	2800      	cmp	r0, #0
 8006e92:	bfab      	itete	ge
 8006e94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e96:	89a3      	ldrhlt	r3, [r4, #12]
 8006e98:	181b      	addge	r3, r3, r0
 8006e9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e9e:	bfac      	ite	ge
 8006ea0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006ea2:	81a3      	strhlt	r3, [r4, #12]
 8006ea4:	bd10      	pop	{r4, pc}

08006ea6 <__swrite>:
 8006ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eaa:	461f      	mov	r7, r3
 8006eac:	898b      	ldrh	r3, [r1, #12]
 8006eae:	4605      	mov	r5, r0
 8006eb0:	05db      	lsls	r3, r3, #23
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	4616      	mov	r6, r2
 8006eb6:	d505      	bpl.n	8006ec4 <__swrite+0x1e>
 8006eb8:	2302      	movs	r3, #2
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ec0:	f000 f85a 	bl	8006f78 <_lseek_r>
 8006ec4:	89a3      	ldrh	r3, [r4, #12]
 8006ec6:	4632      	mov	r2, r6
 8006ec8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ecc:	81a3      	strh	r3, [r4, #12]
 8006ece:	4628      	mov	r0, r5
 8006ed0:	463b      	mov	r3, r7
 8006ed2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006eda:	f000 b871 	b.w	8006fc0 <_write_r>

08006ede <__sseek>:
 8006ede:	b510      	push	{r4, lr}
 8006ee0:	460c      	mov	r4, r1
 8006ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ee6:	f000 f847 	bl	8006f78 <_lseek_r>
 8006eea:	1c43      	adds	r3, r0, #1
 8006eec:	89a3      	ldrh	r3, [r4, #12]
 8006eee:	bf15      	itete	ne
 8006ef0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006ef2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ef6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006efa:	81a3      	strheq	r3, [r4, #12]
 8006efc:	bf18      	it	ne
 8006efe:	81a3      	strhne	r3, [r4, #12]
 8006f00:	bd10      	pop	{r4, pc}

08006f02 <__sclose>:
 8006f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f06:	f000 b827 	b.w	8006f58 <_close_r>

08006f0a <memmove>:
 8006f0a:	4288      	cmp	r0, r1
 8006f0c:	b510      	push	{r4, lr}
 8006f0e:	eb01 0402 	add.w	r4, r1, r2
 8006f12:	d902      	bls.n	8006f1a <memmove+0x10>
 8006f14:	4284      	cmp	r4, r0
 8006f16:	4623      	mov	r3, r4
 8006f18:	d807      	bhi.n	8006f2a <memmove+0x20>
 8006f1a:	1e43      	subs	r3, r0, #1
 8006f1c:	42a1      	cmp	r1, r4
 8006f1e:	d008      	beq.n	8006f32 <memmove+0x28>
 8006f20:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f24:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f28:	e7f8      	b.n	8006f1c <memmove+0x12>
 8006f2a:	4601      	mov	r1, r0
 8006f2c:	4402      	add	r2, r0
 8006f2e:	428a      	cmp	r2, r1
 8006f30:	d100      	bne.n	8006f34 <memmove+0x2a>
 8006f32:	bd10      	pop	{r4, pc}
 8006f34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f38:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f3c:	e7f7      	b.n	8006f2e <memmove+0x24>

08006f3e <memset>:
 8006f3e:	4603      	mov	r3, r0
 8006f40:	4402      	add	r2, r0
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d100      	bne.n	8006f48 <memset+0xa>
 8006f46:	4770      	bx	lr
 8006f48:	f803 1b01 	strb.w	r1, [r3], #1
 8006f4c:	e7f9      	b.n	8006f42 <memset+0x4>
	...

08006f50 <_localeconv_r>:
 8006f50:	4800      	ldr	r0, [pc, #0]	@ (8006f54 <_localeconv_r+0x4>)
 8006f52:	4770      	bx	lr
 8006f54:	2000015c 	.word	0x2000015c

08006f58 <_close_r>:
 8006f58:	b538      	push	{r3, r4, r5, lr}
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	4d05      	ldr	r5, [pc, #20]	@ (8006f74 <_close_r+0x1c>)
 8006f5e:	4604      	mov	r4, r0
 8006f60:	4608      	mov	r0, r1
 8006f62:	602b      	str	r3, [r5, #0]
 8006f64:	f7fb fd97 	bl	8002a96 <_close>
 8006f68:	1c43      	adds	r3, r0, #1
 8006f6a:	d102      	bne.n	8006f72 <_close_r+0x1a>
 8006f6c:	682b      	ldr	r3, [r5, #0]
 8006f6e:	b103      	cbz	r3, 8006f72 <_close_r+0x1a>
 8006f70:	6023      	str	r3, [r4, #0]
 8006f72:	bd38      	pop	{r3, r4, r5, pc}
 8006f74:	200008b0 	.word	0x200008b0

08006f78 <_lseek_r>:
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	4608      	mov	r0, r1
 8006f7e:	4611      	mov	r1, r2
 8006f80:	2200      	movs	r2, #0
 8006f82:	4d05      	ldr	r5, [pc, #20]	@ (8006f98 <_lseek_r+0x20>)
 8006f84:	602a      	str	r2, [r5, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	f7fb fda9 	bl	8002ade <_lseek>
 8006f8c:	1c43      	adds	r3, r0, #1
 8006f8e:	d102      	bne.n	8006f96 <_lseek_r+0x1e>
 8006f90:	682b      	ldr	r3, [r5, #0]
 8006f92:	b103      	cbz	r3, 8006f96 <_lseek_r+0x1e>
 8006f94:	6023      	str	r3, [r4, #0]
 8006f96:	bd38      	pop	{r3, r4, r5, pc}
 8006f98:	200008b0 	.word	0x200008b0

08006f9c <_read_r>:
 8006f9c:	b538      	push	{r3, r4, r5, lr}
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	4608      	mov	r0, r1
 8006fa2:	4611      	mov	r1, r2
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	4d05      	ldr	r5, [pc, #20]	@ (8006fbc <_read_r+0x20>)
 8006fa8:	602a      	str	r2, [r5, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	f7fb fd3a 	bl	8002a24 <_read>
 8006fb0:	1c43      	adds	r3, r0, #1
 8006fb2:	d102      	bne.n	8006fba <_read_r+0x1e>
 8006fb4:	682b      	ldr	r3, [r5, #0]
 8006fb6:	b103      	cbz	r3, 8006fba <_read_r+0x1e>
 8006fb8:	6023      	str	r3, [r4, #0]
 8006fba:	bd38      	pop	{r3, r4, r5, pc}
 8006fbc:	200008b0 	.word	0x200008b0

08006fc0 <_write_r>:
 8006fc0:	b538      	push	{r3, r4, r5, lr}
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	4608      	mov	r0, r1
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	2200      	movs	r2, #0
 8006fca:	4d05      	ldr	r5, [pc, #20]	@ (8006fe0 <_write_r+0x20>)
 8006fcc:	602a      	str	r2, [r5, #0]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	f7fb fd45 	bl	8002a5e <_write>
 8006fd4:	1c43      	adds	r3, r0, #1
 8006fd6:	d102      	bne.n	8006fde <_write_r+0x1e>
 8006fd8:	682b      	ldr	r3, [r5, #0]
 8006fda:	b103      	cbz	r3, 8006fde <_write_r+0x1e>
 8006fdc:	6023      	str	r3, [r4, #0]
 8006fde:	bd38      	pop	{r3, r4, r5, pc}
 8006fe0:	200008b0 	.word	0x200008b0

08006fe4 <__errno>:
 8006fe4:	4b01      	ldr	r3, [pc, #4]	@ (8006fec <__errno+0x8>)
 8006fe6:	6818      	ldr	r0, [r3, #0]
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	2000001c 	.word	0x2000001c

08006ff0 <__libc_init_array>:
 8006ff0:	b570      	push	{r4, r5, r6, lr}
 8006ff2:	2600      	movs	r6, #0
 8006ff4:	4d0c      	ldr	r5, [pc, #48]	@ (8007028 <__libc_init_array+0x38>)
 8006ff6:	4c0d      	ldr	r4, [pc, #52]	@ (800702c <__libc_init_array+0x3c>)
 8006ff8:	1b64      	subs	r4, r4, r5
 8006ffa:	10a4      	asrs	r4, r4, #2
 8006ffc:	42a6      	cmp	r6, r4
 8006ffe:	d109      	bne.n	8007014 <__libc_init_array+0x24>
 8007000:	f003 fb4c 	bl	800a69c <_init>
 8007004:	2600      	movs	r6, #0
 8007006:	4d0a      	ldr	r5, [pc, #40]	@ (8007030 <__libc_init_array+0x40>)
 8007008:	4c0a      	ldr	r4, [pc, #40]	@ (8007034 <__libc_init_array+0x44>)
 800700a:	1b64      	subs	r4, r4, r5
 800700c:	10a4      	asrs	r4, r4, #2
 800700e:	42a6      	cmp	r6, r4
 8007010:	d105      	bne.n	800701e <__libc_init_array+0x2e>
 8007012:	bd70      	pop	{r4, r5, r6, pc}
 8007014:	f855 3b04 	ldr.w	r3, [r5], #4
 8007018:	4798      	blx	r3
 800701a:	3601      	adds	r6, #1
 800701c:	e7ee      	b.n	8006ffc <__libc_init_array+0xc>
 800701e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007022:	4798      	blx	r3
 8007024:	3601      	adds	r6, #1
 8007026:	e7f2      	b.n	800700e <__libc_init_array+0x1e>
 8007028:	0800d9b0 	.word	0x0800d9b0
 800702c:	0800d9b0 	.word	0x0800d9b0
 8007030:	0800d9b0 	.word	0x0800d9b0
 8007034:	0800d9b4 	.word	0x0800d9b4

08007038 <__retarget_lock_init_recursive>:
 8007038:	4770      	bx	lr

0800703a <__retarget_lock_acquire_recursive>:
 800703a:	4770      	bx	lr

0800703c <__retarget_lock_release_recursive>:
 800703c:	4770      	bx	lr

0800703e <memchr>:
 800703e:	4603      	mov	r3, r0
 8007040:	b510      	push	{r4, lr}
 8007042:	b2c9      	uxtb	r1, r1
 8007044:	4402      	add	r2, r0
 8007046:	4293      	cmp	r3, r2
 8007048:	4618      	mov	r0, r3
 800704a:	d101      	bne.n	8007050 <memchr+0x12>
 800704c:	2000      	movs	r0, #0
 800704e:	e003      	b.n	8007058 <memchr+0x1a>
 8007050:	7804      	ldrb	r4, [r0, #0]
 8007052:	3301      	adds	r3, #1
 8007054:	428c      	cmp	r4, r1
 8007056:	d1f6      	bne.n	8007046 <memchr+0x8>
 8007058:	bd10      	pop	{r4, pc}

0800705a <memcpy>:
 800705a:	440a      	add	r2, r1
 800705c:	4291      	cmp	r1, r2
 800705e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007062:	d100      	bne.n	8007066 <memcpy+0xc>
 8007064:	4770      	bx	lr
 8007066:	b510      	push	{r4, lr}
 8007068:	f811 4b01 	ldrb.w	r4, [r1], #1
 800706c:	4291      	cmp	r1, r2
 800706e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007072:	d1f9      	bne.n	8007068 <memcpy+0xe>
 8007074:	bd10      	pop	{r4, pc}
	...

08007078 <nanf>:
 8007078:	4800      	ldr	r0, [pc, #0]	@ (800707c <nanf+0x4>)
 800707a:	4770      	bx	lr
 800707c:	7fc00000 	.word	0x7fc00000

08007080 <quorem>:
 8007080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007084:	6903      	ldr	r3, [r0, #16]
 8007086:	690c      	ldr	r4, [r1, #16]
 8007088:	4607      	mov	r7, r0
 800708a:	42a3      	cmp	r3, r4
 800708c:	db7e      	blt.n	800718c <quorem+0x10c>
 800708e:	3c01      	subs	r4, #1
 8007090:	00a3      	lsls	r3, r4, #2
 8007092:	f100 0514 	add.w	r5, r0, #20
 8007096:	f101 0814 	add.w	r8, r1, #20
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070a0:	9301      	str	r3, [sp, #4]
 80070a2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070aa:	3301      	adds	r3, #1
 80070ac:	429a      	cmp	r2, r3
 80070ae:	fbb2 f6f3 	udiv	r6, r2, r3
 80070b2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070b6:	d32e      	bcc.n	8007116 <quorem+0x96>
 80070b8:	f04f 0a00 	mov.w	sl, #0
 80070bc:	46c4      	mov	ip, r8
 80070be:	46ae      	mov	lr, r5
 80070c0:	46d3      	mov	fp, sl
 80070c2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80070c6:	b298      	uxth	r0, r3
 80070c8:	fb06 a000 	mla	r0, r6, r0, sl
 80070cc:	0c1b      	lsrs	r3, r3, #16
 80070ce:	0c02      	lsrs	r2, r0, #16
 80070d0:	fb06 2303 	mla	r3, r6, r3, r2
 80070d4:	f8de 2000 	ldr.w	r2, [lr]
 80070d8:	b280      	uxth	r0, r0
 80070da:	b292      	uxth	r2, r2
 80070dc:	1a12      	subs	r2, r2, r0
 80070de:	445a      	add	r2, fp
 80070e0:	f8de 0000 	ldr.w	r0, [lr]
 80070e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80070ee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80070f2:	b292      	uxth	r2, r2
 80070f4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80070f8:	45e1      	cmp	r9, ip
 80070fa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80070fe:	f84e 2b04 	str.w	r2, [lr], #4
 8007102:	d2de      	bcs.n	80070c2 <quorem+0x42>
 8007104:	9b00      	ldr	r3, [sp, #0]
 8007106:	58eb      	ldr	r3, [r5, r3]
 8007108:	b92b      	cbnz	r3, 8007116 <quorem+0x96>
 800710a:	9b01      	ldr	r3, [sp, #4]
 800710c:	3b04      	subs	r3, #4
 800710e:	429d      	cmp	r5, r3
 8007110:	461a      	mov	r2, r3
 8007112:	d32f      	bcc.n	8007174 <quorem+0xf4>
 8007114:	613c      	str	r4, [r7, #16]
 8007116:	4638      	mov	r0, r7
 8007118:	f001 f9c2 	bl	80084a0 <__mcmp>
 800711c:	2800      	cmp	r0, #0
 800711e:	db25      	blt.n	800716c <quorem+0xec>
 8007120:	4629      	mov	r1, r5
 8007122:	2000      	movs	r0, #0
 8007124:	f858 2b04 	ldr.w	r2, [r8], #4
 8007128:	f8d1 c000 	ldr.w	ip, [r1]
 800712c:	fa1f fe82 	uxth.w	lr, r2
 8007130:	fa1f f38c 	uxth.w	r3, ip
 8007134:	eba3 030e 	sub.w	r3, r3, lr
 8007138:	4403      	add	r3, r0
 800713a:	0c12      	lsrs	r2, r2, #16
 800713c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007140:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007144:	b29b      	uxth	r3, r3
 8007146:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800714a:	45c1      	cmp	r9, r8
 800714c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007150:	f841 3b04 	str.w	r3, [r1], #4
 8007154:	d2e6      	bcs.n	8007124 <quorem+0xa4>
 8007156:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800715a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800715e:	b922      	cbnz	r2, 800716a <quorem+0xea>
 8007160:	3b04      	subs	r3, #4
 8007162:	429d      	cmp	r5, r3
 8007164:	461a      	mov	r2, r3
 8007166:	d30b      	bcc.n	8007180 <quorem+0x100>
 8007168:	613c      	str	r4, [r7, #16]
 800716a:	3601      	adds	r6, #1
 800716c:	4630      	mov	r0, r6
 800716e:	b003      	add	sp, #12
 8007170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007174:	6812      	ldr	r2, [r2, #0]
 8007176:	3b04      	subs	r3, #4
 8007178:	2a00      	cmp	r2, #0
 800717a:	d1cb      	bne.n	8007114 <quorem+0x94>
 800717c:	3c01      	subs	r4, #1
 800717e:	e7c6      	b.n	800710e <quorem+0x8e>
 8007180:	6812      	ldr	r2, [r2, #0]
 8007182:	3b04      	subs	r3, #4
 8007184:	2a00      	cmp	r2, #0
 8007186:	d1ef      	bne.n	8007168 <quorem+0xe8>
 8007188:	3c01      	subs	r4, #1
 800718a:	e7ea      	b.n	8007162 <quorem+0xe2>
 800718c:	2000      	movs	r0, #0
 800718e:	e7ee      	b.n	800716e <quorem+0xee>

08007190 <_dtoa_r>:
 8007190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007194:	4614      	mov	r4, r2
 8007196:	461d      	mov	r5, r3
 8007198:	69c7      	ldr	r7, [r0, #28]
 800719a:	b097      	sub	sp, #92	@ 0x5c
 800719c:	4683      	mov	fp, r0
 800719e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80071a2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80071a4:	b97f      	cbnz	r7, 80071c6 <_dtoa_r+0x36>
 80071a6:	2010      	movs	r0, #16
 80071a8:	f000 fe02 	bl	8007db0 <malloc>
 80071ac:	4602      	mov	r2, r0
 80071ae:	f8cb 001c 	str.w	r0, [fp, #28]
 80071b2:	b920      	cbnz	r0, 80071be <_dtoa_r+0x2e>
 80071b4:	21ef      	movs	r1, #239	@ 0xef
 80071b6:	4ba8      	ldr	r3, [pc, #672]	@ (8007458 <_dtoa_r+0x2c8>)
 80071b8:	48a8      	ldr	r0, [pc, #672]	@ (800745c <_dtoa_r+0x2cc>)
 80071ba:	f002 fbfb 	bl	80099b4 <__assert_func>
 80071be:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80071c2:	6007      	str	r7, [r0, #0]
 80071c4:	60c7      	str	r7, [r0, #12]
 80071c6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80071ca:	6819      	ldr	r1, [r3, #0]
 80071cc:	b159      	cbz	r1, 80071e6 <_dtoa_r+0x56>
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	2301      	movs	r3, #1
 80071d2:	4093      	lsls	r3, r2
 80071d4:	604a      	str	r2, [r1, #4]
 80071d6:	608b      	str	r3, [r1, #8]
 80071d8:	4658      	mov	r0, fp
 80071da:	f000 fedf 	bl	8007f9c <_Bfree>
 80071de:	2200      	movs	r2, #0
 80071e0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	1e2b      	subs	r3, r5, #0
 80071e8:	bfaf      	iteee	ge
 80071ea:	2300      	movge	r3, #0
 80071ec:	2201      	movlt	r2, #1
 80071ee:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80071f2:	9303      	strlt	r3, [sp, #12]
 80071f4:	bfa8      	it	ge
 80071f6:	6033      	strge	r3, [r6, #0]
 80071f8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80071fc:	4b98      	ldr	r3, [pc, #608]	@ (8007460 <_dtoa_r+0x2d0>)
 80071fe:	bfb8      	it	lt
 8007200:	6032      	strlt	r2, [r6, #0]
 8007202:	ea33 0308 	bics.w	r3, r3, r8
 8007206:	d112      	bne.n	800722e <_dtoa_r+0x9e>
 8007208:	f242 730f 	movw	r3, #9999	@ 0x270f
 800720c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800720e:	6013      	str	r3, [r2, #0]
 8007210:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007214:	4323      	orrs	r3, r4
 8007216:	f000 8550 	beq.w	8007cba <_dtoa_r+0xb2a>
 800721a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800721c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007464 <_dtoa_r+0x2d4>
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 8552 	beq.w	8007cca <_dtoa_r+0xb3a>
 8007226:	f10a 0303 	add.w	r3, sl, #3
 800722a:	f000 bd4c 	b.w	8007cc6 <_dtoa_r+0xb36>
 800722e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007232:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007236:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800723a:	2200      	movs	r2, #0
 800723c:	2300      	movs	r3, #0
 800723e:	f7f9 fbb3 	bl	80009a8 <__aeabi_dcmpeq>
 8007242:	4607      	mov	r7, r0
 8007244:	b158      	cbz	r0, 800725e <_dtoa_r+0xce>
 8007246:	2301      	movs	r3, #1
 8007248:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800724a:	6013      	str	r3, [r2, #0]
 800724c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800724e:	b113      	cbz	r3, 8007256 <_dtoa_r+0xc6>
 8007250:	4b85      	ldr	r3, [pc, #532]	@ (8007468 <_dtoa_r+0x2d8>)
 8007252:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007254:	6013      	str	r3, [r2, #0]
 8007256:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800746c <_dtoa_r+0x2dc>
 800725a:	f000 bd36 	b.w	8007cca <_dtoa_r+0xb3a>
 800725e:	ab14      	add	r3, sp, #80	@ 0x50
 8007260:	9301      	str	r3, [sp, #4]
 8007262:	ab15      	add	r3, sp, #84	@ 0x54
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	4658      	mov	r0, fp
 8007268:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800726c:	f001 fa30 	bl	80086d0 <__d2b>
 8007270:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007274:	4681      	mov	r9, r0
 8007276:	2e00      	cmp	r6, #0
 8007278:	d077      	beq.n	800736a <_dtoa_r+0x1da>
 800727a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800727e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007280:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007288:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800728c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007290:	9712      	str	r7, [sp, #72]	@ 0x48
 8007292:	4619      	mov	r1, r3
 8007294:	2200      	movs	r2, #0
 8007296:	4b76      	ldr	r3, [pc, #472]	@ (8007470 <_dtoa_r+0x2e0>)
 8007298:	f7f8 ff66 	bl	8000168 <__aeabi_dsub>
 800729c:	a368      	add	r3, pc, #416	@ (adr r3, 8007440 <_dtoa_r+0x2b0>)
 800729e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a2:	f7f9 f919 	bl	80004d8 <__aeabi_dmul>
 80072a6:	a368      	add	r3, pc, #416	@ (adr r3, 8007448 <_dtoa_r+0x2b8>)
 80072a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ac:	f7f8 ff5e 	bl	800016c <__adddf3>
 80072b0:	4604      	mov	r4, r0
 80072b2:	4630      	mov	r0, r6
 80072b4:	460d      	mov	r5, r1
 80072b6:	f7f9 f8a5 	bl	8000404 <__aeabi_i2d>
 80072ba:	a365      	add	r3, pc, #404	@ (adr r3, 8007450 <_dtoa_r+0x2c0>)
 80072bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c0:	f7f9 f90a 	bl	80004d8 <__aeabi_dmul>
 80072c4:	4602      	mov	r2, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	4620      	mov	r0, r4
 80072ca:	4629      	mov	r1, r5
 80072cc:	f7f8 ff4e 	bl	800016c <__adddf3>
 80072d0:	4604      	mov	r4, r0
 80072d2:	460d      	mov	r5, r1
 80072d4:	f7f9 fbb0 	bl	8000a38 <__aeabi_d2iz>
 80072d8:	2200      	movs	r2, #0
 80072da:	4607      	mov	r7, r0
 80072dc:	2300      	movs	r3, #0
 80072de:	4620      	mov	r0, r4
 80072e0:	4629      	mov	r1, r5
 80072e2:	f7f9 fb6b 	bl	80009bc <__aeabi_dcmplt>
 80072e6:	b140      	cbz	r0, 80072fa <_dtoa_r+0x16a>
 80072e8:	4638      	mov	r0, r7
 80072ea:	f7f9 f88b 	bl	8000404 <__aeabi_i2d>
 80072ee:	4622      	mov	r2, r4
 80072f0:	462b      	mov	r3, r5
 80072f2:	f7f9 fb59 	bl	80009a8 <__aeabi_dcmpeq>
 80072f6:	b900      	cbnz	r0, 80072fa <_dtoa_r+0x16a>
 80072f8:	3f01      	subs	r7, #1
 80072fa:	2f16      	cmp	r7, #22
 80072fc:	d853      	bhi.n	80073a6 <_dtoa_r+0x216>
 80072fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007302:	4b5c      	ldr	r3, [pc, #368]	@ (8007474 <_dtoa_r+0x2e4>)
 8007304:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730c:	f7f9 fb56 	bl	80009bc <__aeabi_dcmplt>
 8007310:	2800      	cmp	r0, #0
 8007312:	d04a      	beq.n	80073aa <_dtoa_r+0x21a>
 8007314:	2300      	movs	r3, #0
 8007316:	3f01      	subs	r7, #1
 8007318:	930f      	str	r3, [sp, #60]	@ 0x3c
 800731a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800731c:	1b9b      	subs	r3, r3, r6
 800731e:	1e5a      	subs	r2, r3, #1
 8007320:	bf46      	itte	mi
 8007322:	f1c3 0801 	rsbmi	r8, r3, #1
 8007326:	2300      	movmi	r3, #0
 8007328:	f04f 0800 	movpl.w	r8, #0
 800732c:	9209      	str	r2, [sp, #36]	@ 0x24
 800732e:	bf48      	it	mi
 8007330:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007332:	2f00      	cmp	r7, #0
 8007334:	db3b      	blt.n	80073ae <_dtoa_r+0x21e>
 8007336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007338:	970e      	str	r7, [sp, #56]	@ 0x38
 800733a:	443b      	add	r3, r7
 800733c:	9309      	str	r3, [sp, #36]	@ 0x24
 800733e:	2300      	movs	r3, #0
 8007340:	930a      	str	r3, [sp, #40]	@ 0x28
 8007342:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007344:	2b09      	cmp	r3, #9
 8007346:	d866      	bhi.n	8007416 <_dtoa_r+0x286>
 8007348:	2b05      	cmp	r3, #5
 800734a:	bfc4      	itt	gt
 800734c:	3b04      	subgt	r3, #4
 800734e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007350:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007352:	bfc8      	it	gt
 8007354:	2400      	movgt	r4, #0
 8007356:	f1a3 0302 	sub.w	r3, r3, #2
 800735a:	bfd8      	it	le
 800735c:	2401      	movle	r4, #1
 800735e:	2b03      	cmp	r3, #3
 8007360:	d864      	bhi.n	800742c <_dtoa_r+0x29c>
 8007362:	e8df f003 	tbb	[pc, r3]
 8007366:	382b      	.short	0x382b
 8007368:	5636      	.short	0x5636
 800736a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800736e:	441e      	add	r6, r3
 8007370:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007374:	2b20      	cmp	r3, #32
 8007376:	bfc1      	itttt	gt
 8007378:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800737c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007380:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007384:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007388:	bfd6      	itet	le
 800738a:	f1c3 0320 	rsble	r3, r3, #32
 800738e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007392:	fa04 f003 	lslle.w	r0, r4, r3
 8007396:	f7f9 f825 	bl	80003e4 <__aeabi_ui2d>
 800739a:	2201      	movs	r2, #1
 800739c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80073a0:	3e01      	subs	r6, #1
 80073a2:	9212      	str	r2, [sp, #72]	@ 0x48
 80073a4:	e775      	b.n	8007292 <_dtoa_r+0x102>
 80073a6:	2301      	movs	r3, #1
 80073a8:	e7b6      	b.n	8007318 <_dtoa_r+0x188>
 80073aa:	900f      	str	r0, [sp, #60]	@ 0x3c
 80073ac:	e7b5      	b.n	800731a <_dtoa_r+0x18a>
 80073ae:	427b      	negs	r3, r7
 80073b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80073b2:	2300      	movs	r3, #0
 80073b4:	eba8 0807 	sub.w	r8, r8, r7
 80073b8:	930e      	str	r3, [sp, #56]	@ 0x38
 80073ba:	e7c2      	b.n	8007342 <_dtoa_r+0x1b2>
 80073bc:	2300      	movs	r3, #0
 80073be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	dc35      	bgt.n	8007432 <_dtoa_r+0x2a2>
 80073c6:	2301      	movs	r3, #1
 80073c8:	461a      	mov	r2, r3
 80073ca:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80073ce:	9221      	str	r2, [sp, #132]	@ 0x84
 80073d0:	e00b      	b.n	80073ea <_dtoa_r+0x25a>
 80073d2:	2301      	movs	r3, #1
 80073d4:	e7f3      	b.n	80073be <_dtoa_r+0x22e>
 80073d6:	2300      	movs	r3, #0
 80073d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80073dc:	18fb      	adds	r3, r7, r3
 80073de:	9308      	str	r3, [sp, #32]
 80073e0:	3301      	adds	r3, #1
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	9307      	str	r3, [sp, #28]
 80073e6:	bfb8      	it	lt
 80073e8:	2301      	movlt	r3, #1
 80073ea:	2100      	movs	r1, #0
 80073ec:	2204      	movs	r2, #4
 80073ee:	f8db 001c 	ldr.w	r0, [fp, #28]
 80073f2:	f102 0514 	add.w	r5, r2, #20
 80073f6:	429d      	cmp	r5, r3
 80073f8:	d91f      	bls.n	800743a <_dtoa_r+0x2aa>
 80073fa:	6041      	str	r1, [r0, #4]
 80073fc:	4658      	mov	r0, fp
 80073fe:	f000 fd8d 	bl	8007f1c <_Balloc>
 8007402:	4682      	mov	sl, r0
 8007404:	2800      	cmp	r0, #0
 8007406:	d139      	bne.n	800747c <_dtoa_r+0x2ec>
 8007408:	4602      	mov	r2, r0
 800740a:	f240 11af 	movw	r1, #431	@ 0x1af
 800740e:	4b1a      	ldr	r3, [pc, #104]	@ (8007478 <_dtoa_r+0x2e8>)
 8007410:	e6d2      	b.n	80071b8 <_dtoa_r+0x28>
 8007412:	2301      	movs	r3, #1
 8007414:	e7e0      	b.n	80073d8 <_dtoa_r+0x248>
 8007416:	2401      	movs	r4, #1
 8007418:	2300      	movs	r3, #0
 800741a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800741c:	9320      	str	r3, [sp, #128]	@ 0x80
 800741e:	f04f 33ff 	mov.w	r3, #4294967295
 8007422:	2200      	movs	r2, #0
 8007424:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007428:	2312      	movs	r3, #18
 800742a:	e7d0      	b.n	80073ce <_dtoa_r+0x23e>
 800742c:	2301      	movs	r3, #1
 800742e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007430:	e7f5      	b.n	800741e <_dtoa_r+0x28e>
 8007432:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007434:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007438:	e7d7      	b.n	80073ea <_dtoa_r+0x25a>
 800743a:	3101      	adds	r1, #1
 800743c:	0052      	lsls	r2, r2, #1
 800743e:	e7d8      	b.n	80073f2 <_dtoa_r+0x262>
 8007440:	636f4361 	.word	0x636f4361
 8007444:	3fd287a7 	.word	0x3fd287a7
 8007448:	8b60c8b3 	.word	0x8b60c8b3
 800744c:	3fc68a28 	.word	0x3fc68a28
 8007450:	509f79fb 	.word	0x509f79fb
 8007454:	3fd34413 	.word	0x3fd34413
 8007458:	0800d5c0 	.word	0x0800d5c0
 800745c:	0800d5d7 	.word	0x0800d5d7
 8007460:	7ff00000 	.word	0x7ff00000
 8007464:	0800d5bc 	.word	0x0800d5bc
 8007468:	0800d58b 	.word	0x0800d58b
 800746c:	0800d58a 	.word	0x0800d58a
 8007470:	3ff80000 	.word	0x3ff80000
 8007474:	0800d6d0 	.word	0x0800d6d0
 8007478:	0800d62f 	.word	0x0800d62f
 800747c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007480:	6018      	str	r0, [r3, #0]
 8007482:	9b07      	ldr	r3, [sp, #28]
 8007484:	2b0e      	cmp	r3, #14
 8007486:	f200 80a4 	bhi.w	80075d2 <_dtoa_r+0x442>
 800748a:	2c00      	cmp	r4, #0
 800748c:	f000 80a1 	beq.w	80075d2 <_dtoa_r+0x442>
 8007490:	2f00      	cmp	r7, #0
 8007492:	dd33      	ble.n	80074fc <_dtoa_r+0x36c>
 8007494:	4b86      	ldr	r3, [pc, #536]	@ (80076b0 <_dtoa_r+0x520>)
 8007496:	f007 020f 	and.w	r2, r7, #15
 800749a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800749e:	05f8      	lsls	r0, r7, #23
 80074a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074a4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80074a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80074ac:	d516      	bpl.n	80074dc <_dtoa_r+0x34c>
 80074ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074b2:	4b80      	ldr	r3, [pc, #512]	@ (80076b4 <_dtoa_r+0x524>)
 80074b4:	2603      	movs	r6, #3
 80074b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074ba:	f7f9 f937 	bl	800072c <__aeabi_ddiv>
 80074be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074c2:	f004 040f 	and.w	r4, r4, #15
 80074c6:	4d7b      	ldr	r5, [pc, #492]	@ (80076b4 <_dtoa_r+0x524>)
 80074c8:	b954      	cbnz	r4, 80074e0 <_dtoa_r+0x350>
 80074ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074d2:	f7f9 f92b 	bl	800072c <__aeabi_ddiv>
 80074d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074da:	e028      	b.n	800752e <_dtoa_r+0x39e>
 80074dc:	2602      	movs	r6, #2
 80074de:	e7f2      	b.n	80074c6 <_dtoa_r+0x336>
 80074e0:	07e1      	lsls	r1, r4, #31
 80074e2:	d508      	bpl.n	80074f6 <_dtoa_r+0x366>
 80074e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80074ec:	f7f8 fff4 	bl	80004d8 <__aeabi_dmul>
 80074f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074f4:	3601      	adds	r6, #1
 80074f6:	1064      	asrs	r4, r4, #1
 80074f8:	3508      	adds	r5, #8
 80074fa:	e7e5      	b.n	80074c8 <_dtoa_r+0x338>
 80074fc:	f000 80d2 	beq.w	80076a4 <_dtoa_r+0x514>
 8007500:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007504:	427c      	negs	r4, r7
 8007506:	4b6a      	ldr	r3, [pc, #424]	@ (80076b0 <_dtoa_r+0x520>)
 8007508:	f004 020f 	and.w	r2, r4, #15
 800750c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007514:	f7f8 ffe0 	bl	80004d8 <__aeabi_dmul>
 8007518:	2602      	movs	r6, #2
 800751a:	2300      	movs	r3, #0
 800751c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007520:	4d64      	ldr	r5, [pc, #400]	@ (80076b4 <_dtoa_r+0x524>)
 8007522:	1124      	asrs	r4, r4, #4
 8007524:	2c00      	cmp	r4, #0
 8007526:	f040 80b2 	bne.w	800768e <_dtoa_r+0x4fe>
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1d3      	bne.n	80074d6 <_dtoa_r+0x346>
 800752e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007532:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 80b7 	beq.w	80076a8 <_dtoa_r+0x518>
 800753a:	2200      	movs	r2, #0
 800753c:	4620      	mov	r0, r4
 800753e:	4629      	mov	r1, r5
 8007540:	4b5d      	ldr	r3, [pc, #372]	@ (80076b8 <_dtoa_r+0x528>)
 8007542:	f7f9 fa3b 	bl	80009bc <__aeabi_dcmplt>
 8007546:	2800      	cmp	r0, #0
 8007548:	f000 80ae 	beq.w	80076a8 <_dtoa_r+0x518>
 800754c:	9b07      	ldr	r3, [sp, #28]
 800754e:	2b00      	cmp	r3, #0
 8007550:	f000 80aa 	beq.w	80076a8 <_dtoa_r+0x518>
 8007554:	9b08      	ldr	r3, [sp, #32]
 8007556:	2b00      	cmp	r3, #0
 8007558:	dd37      	ble.n	80075ca <_dtoa_r+0x43a>
 800755a:	1e7b      	subs	r3, r7, #1
 800755c:	4620      	mov	r0, r4
 800755e:	9304      	str	r3, [sp, #16]
 8007560:	2200      	movs	r2, #0
 8007562:	4629      	mov	r1, r5
 8007564:	4b55      	ldr	r3, [pc, #340]	@ (80076bc <_dtoa_r+0x52c>)
 8007566:	f7f8 ffb7 	bl	80004d8 <__aeabi_dmul>
 800756a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800756e:	9c08      	ldr	r4, [sp, #32]
 8007570:	3601      	adds	r6, #1
 8007572:	4630      	mov	r0, r6
 8007574:	f7f8 ff46 	bl	8000404 <__aeabi_i2d>
 8007578:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800757c:	f7f8 ffac 	bl	80004d8 <__aeabi_dmul>
 8007580:	2200      	movs	r2, #0
 8007582:	4b4f      	ldr	r3, [pc, #316]	@ (80076c0 <_dtoa_r+0x530>)
 8007584:	f7f8 fdf2 	bl	800016c <__adddf3>
 8007588:	4605      	mov	r5, r0
 800758a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800758e:	2c00      	cmp	r4, #0
 8007590:	f040 809a 	bne.w	80076c8 <_dtoa_r+0x538>
 8007594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007598:	2200      	movs	r2, #0
 800759a:	4b4a      	ldr	r3, [pc, #296]	@ (80076c4 <_dtoa_r+0x534>)
 800759c:	f7f8 fde4 	bl	8000168 <__aeabi_dsub>
 80075a0:	4602      	mov	r2, r0
 80075a2:	460b      	mov	r3, r1
 80075a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075a8:	462a      	mov	r2, r5
 80075aa:	4633      	mov	r3, r6
 80075ac:	f7f9 fa24 	bl	80009f8 <__aeabi_dcmpgt>
 80075b0:	2800      	cmp	r0, #0
 80075b2:	f040 828e 	bne.w	8007ad2 <_dtoa_r+0x942>
 80075b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075ba:	462a      	mov	r2, r5
 80075bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80075c0:	f7f9 f9fc 	bl	80009bc <__aeabi_dcmplt>
 80075c4:	2800      	cmp	r0, #0
 80075c6:	f040 8127 	bne.w	8007818 <_dtoa_r+0x688>
 80075ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80075ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80075d2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f2c0 8163 	blt.w	80078a0 <_dtoa_r+0x710>
 80075da:	2f0e      	cmp	r7, #14
 80075dc:	f300 8160 	bgt.w	80078a0 <_dtoa_r+0x710>
 80075e0:	4b33      	ldr	r3, [pc, #204]	@ (80076b0 <_dtoa_r+0x520>)
 80075e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80075e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075ea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80075ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	da03      	bge.n	80075fc <_dtoa_r+0x46c>
 80075f4:	9b07      	ldr	r3, [sp, #28]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f340 8100 	ble.w	80077fc <_dtoa_r+0x66c>
 80075fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007600:	4656      	mov	r6, sl
 8007602:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007606:	4620      	mov	r0, r4
 8007608:	4629      	mov	r1, r5
 800760a:	f7f9 f88f 	bl	800072c <__aeabi_ddiv>
 800760e:	f7f9 fa13 	bl	8000a38 <__aeabi_d2iz>
 8007612:	4680      	mov	r8, r0
 8007614:	f7f8 fef6 	bl	8000404 <__aeabi_i2d>
 8007618:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800761c:	f7f8 ff5c 	bl	80004d8 <__aeabi_dmul>
 8007620:	4602      	mov	r2, r0
 8007622:	460b      	mov	r3, r1
 8007624:	4620      	mov	r0, r4
 8007626:	4629      	mov	r1, r5
 8007628:	f7f8 fd9e 	bl	8000168 <__aeabi_dsub>
 800762c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007630:	9d07      	ldr	r5, [sp, #28]
 8007632:	f806 4b01 	strb.w	r4, [r6], #1
 8007636:	eba6 040a 	sub.w	r4, r6, sl
 800763a:	42a5      	cmp	r5, r4
 800763c:	4602      	mov	r2, r0
 800763e:	460b      	mov	r3, r1
 8007640:	f040 8116 	bne.w	8007870 <_dtoa_r+0x6e0>
 8007644:	f7f8 fd92 	bl	800016c <__adddf3>
 8007648:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800764c:	4604      	mov	r4, r0
 800764e:	460d      	mov	r5, r1
 8007650:	f7f9 f9d2 	bl	80009f8 <__aeabi_dcmpgt>
 8007654:	2800      	cmp	r0, #0
 8007656:	f040 80f8 	bne.w	800784a <_dtoa_r+0x6ba>
 800765a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800765e:	4620      	mov	r0, r4
 8007660:	4629      	mov	r1, r5
 8007662:	f7f9 f9a1 	bl	80009a8 <__aeabi_dcmpeq>
 8007666:	b118      	cbz	r0, 8007670 <_dtoa_r+0x4e0>
 8007668:	f018 0f01 	tst.w	r8, #1
 800766c:	f040 80ed 	bne.w	800784a <_dtoa_r+0x6ba>
 8007670:	4649      	mov	r1, r9
 8007672:	4658      	mov	r0, fp
 8007674:	f000 fc92 	bl	8007f9c <_Bfree>
 8007678:	2300      	movs	r3, #0
 800767a:	7033      	strb	r3, [r6, #0]
 800767c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800767e:	3701      	adds	r7, #1
 8007680:	601f      	str	r7, [r3, #0]
 8007682:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 8320 	beq.w	8007cca <_dtoa_r+0xb3a>
 800768a:	601e      	str	r6, [r3, #0]
 800768c:	e31d      	b.n	8007cca <_dtoa_r+0xb3a>
 800768e:	07e2      	lsls	r2, r4, #31
 8007690:	d505      	bpl.n	800769e <_dtoa_r+0x50e>
 8007692:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007696:	f7f8 ff1f 	bl	80004d8 <__aeabi_dmul>
 800769a:	2301      	movs	r3, #1
 800769c:	3601      	adds	r6, #1
 800769e:	1064      	asrs	r4, r4, #1
 80076a0:	3508      	adds	r5, #8
 80076a2:	e73f      	b.n	8007524 <_dtoa_r+0x394>
 80076a4:	2602      	movs	r6, #2
 80076a6:	e742      	b.n	800752e <_dtoa_r+0x39e>
 80076a8:	9c07      	ldr	r4, [sp, #28]
 80076aa:	9704      	str	r7, [sp, #16]
 80076ac:	e761      	b.n	8007572 <_dtoa_r+0x3e2>
 80076ae:	bf00      	nop
 80076b0:	0800d6d0 	.word	0x0800d6d0
 80076b4:	0800d6a8 	.word	0x0800d6a8
 80076b8:	3ff00000 	.word	0x3ff00000
 80076bc:	40240000 	.word	0x40240000
 80076c0:	401c0000 	.word	0x401c0000
 80076c4:	40140000 	.word	0x40140000
 80076c8:	4b70      	ldr	r3, [pc, #448]	@ (800788c <_dtoa_r+0x6fc>)
 80076ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80076cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80076d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076d4:	4454      	add	r4, sl
 80076d6:	2900      	cmp	r1, #0
 80076d8:	d045      	beq.n	8007766 <_dtoa_r+0x5d6>
 80076da:	2000      	movs	r0, #0
 80076dc:	496c      	ldr	r1, [pc, #432]	@ (8007890 <_dtoa_r+0x700>)
 80076de:	f7f9 f825 	bl	800072c <__aeabi_ddiv>
 80076e2:	4633      	mov	r3, r6
 80076e4:	462a      	mov	r2, r5
 80076e6:	f7f8 fd3f 	bl	8000168 <__aeabi_dsub>
 80076ea:	4656      	mov	r6, sl
 80076ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80076f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076f4:	f7f9 f9a0 	bl	8000a38 <__aeabi_d2iz>
 80076f8:	4605      	mov	r5, r0
 80076fa:	f7f8 fe83 	bl	8000404 <__aeabi_i2d>
 80076fe:	4602      	mov	r2, r0
 8007700:	460b      	mov	r3, r1
 8007702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007706:	f7f8 fd2f 	bl	8000168 <__aeabi_dsub>
 800770a:	4602      	mov	r2, r0
 800770c:	460b      	mov	r3, r1
 800770e:	3530      	adds	r5, #48	@ 0x30
 8007710:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007714:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007718:	f806 5b01 	strb.w	r5, [r6], #1
 800771c:	f7f9 f94e 	bl	80009bc <__aeabi_dcmplt>
 8007720:	2800      	cmp	r0, #0
 8007722:	d163      	bne.n	80077ec <_dtoa_r+0x65c>
 8007724:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007728:	2000      	movs	r0, #0
 800772a:	495a      	ldr	r1, [pc, #360]	@ (8007894 <_dtoa_r+0x704>)
 800772c:	f7f8 fd1c 	bl	8000168 <__aeabi_dsub>
 8007730:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007734:	f7f9 f942 	bl	80009bc <__aeabi_dcmplt>
 8007738:	2800      	cmp	r0, #0
 800773a:	f040 8087 	bne.w	800784c <_dtoa_r+0x6bc>
 800773e:	42a6      	cmp	r6, r4
 8007740:	f43f af43 	beq.w	80075ca <_dtoa_r+0x43a>
 8007744:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007748:	2200      	movs	r2, #0
 800774a:	4b53      	ldr	r3, [pc, #332]	@ (8007898 <_dtoa_r+0x708>)
 800774c:	f7f8 fec4 	bl	80004d8 <__aeabi_dmul>
 8007750:	2200      	movs	r2, #0
 8007752:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800775a:	4b4f      	ldr	r3, [pc, #316]	@ (8007898 <_dtoa_r+0x708>)
 800775c:	f7f8 febc 	bl	80004d8 <__aeabi_dmul>
 8007760:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007764:	e7c4      	b.n	80076f0 <_dtoa_r+0x560>
 8007766:	4631      	mov	r1, r6
 8007768:	4628      	mov	r0, r5
 800776a:	f7f8 feb5 	bl	80004d8 <__aeabi_dmul>
 800776e:	4656      	mov	r6, sl
 8007770:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007774:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800777a:	f7f9 f95d 	bl	8000a38 <__aeabi_d2iz>
 800777e:	4605      	mov	r5, r0
 8007780:	f7f8 fe40 	bl	8000404 <__aeabi_i2d>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800778c:	f7f8 fcec 	bl	8000168 <__aeabi_dsub>
 8007790:	4602      	mov	r2, r0
 8007792:	460b      	mov	r3, r1
 8007794:	3530      	adds	r5, #48	@ 0x30
 8007796:	f806 5b01 	strb.w	r5, [r6], #1
 800779a:	42a6      	cmp	r6, r4
 800779c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077a0:	f04f 0200 	mov.w	r2, #0
 80077a4:	d124      	bne.n	80077f0 <_dtoa_r+0x660>
 80077a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80077aa:	4b39      	ldr	r3, [pc, #228]	@ (8007890 <_dtoa_r+0x700>)
 80077ac:	f7f8 fcde 	bl	800016c <__adddf3>
 80077b0:	4602      	mov	r2, r0
 80077b2:	460b      	mov	r3, r1
 80077b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077b8:	f7f9 f91e 	bl	80009f8 <__aeabi_dcmpgt>
 80077bc:	2800      	cmp	r0, #0
 80077be:	d145      	bne.n	800784c <_dtoa_r+0x6bc>
 80077c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077c4:	2000      	movs	r0, #0
 80077c6:	4932      	ldr	r1, [pc, #200]	@ (8007890 <_dtoa_r+0x700>)
 80077c8:	f7f8 fcce 	bl	8000168 <__aeabi_dsub>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077d4:	f7f9 f8f2 	bl	80009bc <__aeabi_dcmplt>
 80077d8:	2800      	cmp	r0, #0
 80077da:	f43f aef6 	beq.w	80075ca <_dtoa_r+0x43a>
 80077de:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80077e0:	1e73      	subs	r3, r6, #1
 80077e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80077e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80077e8:	2b30      	cmp	r3, #48	@ 0x30
 80077ea:	d0f8      	beq.n	80077de <_dtoa_r+0x64e>
 80077ec:	9f04      	ldr	r7, [sp, #16]
 80077ee:	e73f      	b.n	8007670 <_dtoa_r+0x4e0>
 80077f0:	4b29      	ldr	r3, [pc, #164]	@ (8007898 <_dtoa_r+0x708>)
 80077f2:	f7f8 fe71 	bl	80004d8 <__aeabi_dmul>
 80077f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077fa:	e7bc      	b.n	8007776 <_dtoa_r+0x5e6>
 80077fc:	d10c      	bne.n	8007818 <_dtoa_r+0x688>
 80077fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007802:	2200      	movs	r2, #0
 8007804:	4b25      	ldr	r3, [pc, #148]	@ (800789c <_dtoa_r+0x70c>)
 8007806:	f7f8 fe67 	bl	80004d8 <__aeabi_dmul>
 800780a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800780e:	f7f9 f8e9 	bl	80009e4 <__aeabi_dcmpge>
 8007812:	2800      	cmp	r0, #0
 8007814:	f000 815b 	beq.w	8007ace <_dtoa_r+0x93e>
 8007818:	2400      	movs	r4, #0
 800781a:	4625      	mov	r5, r4
 800781c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800781e:	4656      	mov	r6, sl
 8007820:	43db      	mvns	r3, r3
 8007822:	9304      	str	r3, [sp, #16]
 8007824:	2700      	movs	r7, #0
 8007826:	4621      	mov	r1, r4
 8007828:	4658      	mov	r0, fp
 800782a:	f000 fbb7 	bl	8007f9c <_Bfree>
 800782e:	2d00      	cmp	r5, #0
 8007830:	d0dc      	beq.n	80077ec <_dtoa_r+0x65c>
 8007832:	b12f      	cbz	r7, 8007840 <_dtoa_r+0x6b0>
 8007834:	42af      	cmp	r7, r5
 8007836:	d003      	beq.n	8007840 <_dtoa_r+0x6b0>
 8007838:	4639      	mov	r1, r7
 800783a:	4658      	mov	r0, fp
 800783c:	f000 fbae 	bl	8007f9c <_Bfree>
 8007840:	4629      	mov	r1, r5
 8007842:	4658      	mov	r0, fp
 8007844:	f000 fbaa 	bl	8007f9c <_Bfree>
 8007848:	e7d0      	b.n	80077ec <_dtoa_r+0x65c>
 800784a:	9704      	str	r7, [sp, #16]
 800784c:	4633      	mov	r3, r6
 800784e:	461e      	mov	r6, r3
 8007850:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007854:	2a39      	cmp	r2, #57	@ 0x39
 8007856:	d107      	bne.n	8007868 <_dtoa_r+0x6d8>
 8007858:	459a      	cmp	sl, r3
 800785a:	d1f8      	bne.n	800784e <_dtoa_r+0x6be>
 800785c:	9a04      	ldr	r2, [sp, #16]
 800785e:	3201      	adds	r2, #1
 8007860:	9204      	str	r2, [sp, #16]
 8007862:	2230      	movs	r2, #48	@ 0x30
 8007864:	f88a 2000 	strb.w	r2, [sl]
 8007868:	781a      	ldrb	r2, [r3, #0]
 800786a:	3201      	adds	r2, #1
 800786c:	701a      	strb	r2, [r3, #0]
 800786e:	e7bd      	b.n	80077ec <_dtoa_r+0x65c>
 8007870:	2200      	movs	r2, #0
 8007872:	4b09      	ldr	r3, [pc, #36]	@ (8007898 <_dtoa_r+0x708>)
 8007874:	f7f8 fe30 	bl	80004d8 <__aeabi_dmul>
 8007878:	2200      	movs	r2, #0
 800787a:	2300      	movs	r3, #0
 800787c:	4604      	mov	r4, r0
 800787e:	460d      	mov	r5, r1
 8007880:	f7f9 f892 	bl	80009a8 <__aeabi_dcmpeq>
 8007884:	2800      	cmp	r0, #0
 8007886:	f43f aebc 	beq.w	8007602 <_dtoa_r+0x472>
 800788a:	e6f1      	b.n	8007670 <_dtoa_r+0x4e0>
 800788c:	0800d6d0 	.word	0x0800d6d0
 8007890:	3fe00000 	.word	0x3fe00000
 8007894:	3ff00000 	.word	0x3ff00000
 8007898:	40240000 	.word	0x40240000
 800789c:	40140000 	.word	0x40140000
 80078a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80078a2:	2a00      	cmp	r2, #0
 80078a4:	f000 80db 	beq.w	8007a5e <_dtoa_r+0x8ce>
 80078a8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80078aa:	2a01      	cmp	r2, #1
 80078ac:	f300 80bf 	bgt.w	8007a2e <_dtoa_r+0x89e>
 80078b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80078b2:	2a00      	cmp	r2, #0
 80078b4:	f000 80b7 	beq.w	8007a26 <_dtoa_r+0x896>
 80078b8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80078bc:	4646      	mov	r6, r8
 80078be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80078c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078c2:	2101      	movs	r1, #1
 80078c4:	441a      	add	r2, r3
 80078c6:	4658      	mov	r0, fp
 80078c8:	4498      	add	r8, r3
 80078ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80078cc:	f000 fc64 	bl	8008198 <__i2b>
 80078d0:	4605      	mov	r5, r0
 80078d2:	b15e      	cbz	r6, 80078ec <_dtoa_r+0x75c>
 80078d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	dd08      	ble.n	80078ec <_dtoa_r+0x75c>
 80078da:	42b3      	cmp	r3, r6
 80078dc:	bfa8      	it	ge
 80078de:	4633      	movge	r3, r6
 80078e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078e2:	eba8 0803 	sub.w	r8, r8, r3
 80078e6:	1af6      	subs	r6, r6, r3
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80078ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078ee:	b1f3      	cbz	r3, 800792e <_dtoa_r+0x79e>
 80078f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f000 80b7 	beq.w	8007a66 <_dtoa_r+0x8d6>
 80078f8:	b18c      	cbz	r4, 800791e <_dtoa_r+0x78e>
 80078fa:	4629      	mov	r1, r5
 80078fc:	4622      	mov	r2, r4
 80078fe:	4658      	mov	r0, fp
 8007900:	f000 fd08 	bl	8008314 <__pow5mult>
 8007904:	464a      	mov	r2, r9
 8007906:	4601      	mov	r1, r0
 8007908:	4605      	mov	r5, r0
 800790a:	4658      	mov	r0, fp
 800790c:	f000 fc5a 	bl	80081c4 <__multiply>
 8007910:	4649      	mov	r1, r9
 8007912:	9004      	str	r0, [sp, #16]
 8007914:	4658      	mov	r0, fp
 8007916:	f000 fb41 	bl	8007f9c <_Bfree>
 800791a:	9b04      	ldr	r3, [sp, #16]
 800791c:	4699      	mov	r9, r3
 800791e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007920:	1b1a      	subs	r2, r3, r4
 8007922:	d004      	beq.n	800792e <_dtoa_r+0x79e>
 8007924:	4649      	mov	r1, r9
 8007926:	4658      	mov	r0, fp
 8007928:	f000 fcf4 	bl	8008314 <__pow5mult>
 800792c:	4681      	mov	r9, r0
 800792e:	2101      	movs	r1, #1
 8007930:	4658      	mov	r0, fp
 8007932:	f000 fc31 	bl	8008198 <__i2b>
 8007936:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007938:	4604      	mov	r4, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	f000 81c9 	beq.w	8007cd2 <_dtoa_r+0xb42>
 8007940:	461a      	mov	r2, r3
 8007942:	4601      	mov	r1, r0
 8007944:	4658      	mov	r0, fp
 8007946:	f000 fce5 	bl	8008314 <__pow5mult>
 800794a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800794c:	4604      	mov	r4, r0
 800794e:	2b01      	cmp	r3, #1
 8007950:	f300 808f 	bgt.w	8007a72 <_dtoa_r+0x8e2>
 8007954:	9b02      	ldr	r3, [sp, #8]
 8007956:	2b00      	cmp	r3, #0
 8007958:	f040 8087 	bne.w	8007a6a <_dtoa_r+0x8da>
 800795c:	9b03      	ldr	r3, [sp, #12]
 800795e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007962:	2b00      	cmp	r3, #0
 8007964:	f040 8083 	bne.w	8007a6e <_dtoa_r+0x8de>
 8007968:	9b03      	ldr	r3, [sp, #12]
 800796a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800796e:	0d1b      	lsrs	r3, r3, #20
 8007970:	051b      	lsls	r3, r3, #20
 8007972:	b12b      	cbz	r3, 8007980 <_dtoa_r+0x7f0>
 8007974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007976:	f108 0801 	add.w	r8, r8, #1
 800797a:	3301      	adds	r3, #1
 800797c:	9309      	str	r3, [sp, #36]	@ 0x24
 800797e:	2301      	movs	r3, #1
 8007980:	930a      	str	r3, [sp, #40]	@ 0x28
 8007982:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007984:	2b00      	cmp	r3, #0
 8007986:	f000 81aa 	beq.w	8007cde <_dtoa_r+0xb4e>
 800798a:	6923      	ldr	r3, [r4, #16]
 800798c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007990:	6918      	ldr	r0, [r3, #16]
 8007992:	f000 fbb5 	bl	8008100 <__hi0bits>
 8007996:	f1c0 0020 	rsb	r0, r0, #32
 800799a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800799c:	4418      	add	r0, r3
 800799e:	f010 001f 	ands.w	r0, r0, #31
 80079a2:	d071      	beq.n	8007a88 <_dtoa_r+0x8f8>
 80079a4:	f1c0 0320 	rsb	r3, r0, #32
 80079a8:	2b04      	cmp	r3, #4
 80079aa:	dd65      	ble.n	8007a78 <_dtoa_r+0x8e8>
 80079ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ae:	f1c0 001c 	rsb	r0, r0, #28
 80079b2:	4403      	add	r3, r0
 80079b4:	4480      	add	r8, r0
 80079b6:	4406      	add	r6, r0
 80079b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80079ba:	f1b8 0f00 	cmp.w	r8, #0
 80079be:	dd05      	ble.n	80079cc <_dtoa_r+0x83c>
 80079c0:	4649      	mov	r1, r9
 80079c2:	4642      	mov	r2, r8
 80079c4:	4658      	mov	r0, fp
 80079c6:	f000 fcff 	bl	80083c8 <__lshift>
 80079ca:	4681      	mov	r9, r0
 80079cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	dd05      	ble.n	80079de <_dtoa_r+0x84e>
 80079d2:	4621      	mov	r1, r4
 80079d4:	461a      	mov	r2, r3
 80079d6:	4658      	mov	r0, fp
 80079d8:	f000 fcf6 	bl	80083c8 <__lshift>
 80079dc:	4604      	mov	r4, r0
 80079de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d053      	beq.n	8007a8c <_dtoa_r+0x8fc>
 80079e4:	4621      	mov	r1, r4
 80079e6:	4648      	mov	r0, r9
 80079e8:	f000 fd5a 	bl	80084a0 <__mcmp>
 80079ec:	2800      	cmp	r0, #0
 80079ee:	da4d      	bge.n	8007a8c <_dtoa_r+0x8fc>
 80079f0:	1e7b      	subs	r3, r7, #1
 80079f2:	4649      	mov	r1, r9
 80079f4:	9304      	str	r3, [sp, #16]
 80079f6:	220a      	movs	r2, #10
 80079f8:	2300      	movs	r3, #0
 80079fa:	4658      	mov	r0, fp
 80079fc:	f000 faf0 	bl	8007fe0 <__multadd>
 8007a00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a02:	4681      	mov	r9, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f000 816c 	beq.w	8007ce2 <_dtoa_r+0xb52>
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	4629      	mov	r1, r5
 8007a0e:	220a      	movs	r2, #10
 8007a10:	4658      	mov	r0, fp
 8007a12:	f000 fae5 	bl	8007fe0 <__multadd>
 8007a16:	9b08      	ldr	r3, [sp, #32]
 8007a18:	4605      	mov	r5, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	dc61      	bgt.n	8007ae2 <_dtoa_r+0x952>
 8007a1e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	dc3b      	bgt.n	8007a9c <_dtoa_r+0x90c>
 8007a24:	e05d      	b.n	8007ae2 <_dtoa_r+0x952>
 8007a26:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007a28:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007a2c:	e746      	b.n	80078bc <_dtoa_r+0x72c>
 8007a2e:	9b07      	ldr	r3, [sp, #28]
 8007a30:	1e5c      	subs	r4, r3, #1
 8007a32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a34:	42a3      	cmp	r3, r4
 8007a36:	bfbf      	itttt	lt
 8007a38:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007a3a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007a3c:	1ae3      	sublt	r3, r4, r3
 8007a3e:	18d2      	addlt	r2, r2, r3
 8007a40:	bfa8      	it	ge
 8007a42:	1b1c      	subge	r4, r3, r4
 8007a44:	9b07      	ldr	r3, [sp, #28]
 8007a46:	bfbe      	ittt	lt
 8007a48:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007a4a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007a4c:	2400      	movlt	r4, #0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	bfb5      	itete	lt
 8007a52:	eba8 0603 	sublt.w	r6, r8, r3
 8007a56:	4646      	movge	r6, r8
 8007a58:	2300      	movlt	r3, #0
 8007a5a:	9b07      	ldrge	r3, [sp, #28]
 8007a5c:	e730      	b.n	80078c0 <_dtoa_r+0x730>
 8007a5e:	4646      	mov	r6, r8
 8007a60:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007a62:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007a64:	e735      	b.n	80078d2 <_dtoa_r+0x742>
 8007a66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a68:	e75c      	b.n	8007924 <_dtoa_r+0x794>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	e788      	b.n	8007980 <_dtoa_r+0x7f0>
 8007a6e:	9b02      	ldr	r3, [sp, #8]
 8007a70:	e786      	b.n	8007980 <_dtoa_r+0x7f0>
 8007a72:	2300      	movs	r3, #0
 8007a74:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a76:	e788      	b.n	800798a <_dtoa_r+0x7fa>
 8007a78:	d09f      	beq.n	80079ba <_dtoa_r+0x82a>
 8007a7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a7c:	331c      	adds	r3, #28
 8007a7e:	441a      	add	r2, r3
 8007a80:	4498      	add	r8, r3
 8007a82:	441e      	add	r6, r3
 8007a84:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a86:	e798      	b.n	80079ba <_dtoa_r+0x82a>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	e7f6      	b.n	8007a7a <_dtoa_r+0x8ea>
 8007a8c:	9b07      	ldr	r3, [sp, #28]
 8007a8e:	9704      	str	r7, [sp, #16]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	dc20      	bgt.n	8007ad6 <_dtoa_r+0x946>
 8007a94:	9308      	str	r3, [sp, #32]
 8007a96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	dd1e      	ble.n	8007ada <_dtoa_r+0x94a>
 8007a9c:	9b08      	ldr	r3, [sp, #32]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f47f aebc 	bne.w	800781c <_dtoa_r+0x68c>
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	2205      	movs	r2, #5
 8007aa8:	4658      	mov	r0, fp
 8007aaa:	f000 fa99 	bl	8007fe0 <__multadd>
 8007aae:	4601      	mov	r1, r0
 8007ab0:	4604      	mov	r4, r0
 8007ab2:	4648      	mov	r0, r9
 8007ab4:	f000 fcf4 	bl	80084a0 <__mcmp>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	f77f aeaf 	ble.w	800781c <_dtoa_r+0x68c>
 8007abe:	2331      	movs	r3, #49	@ 0x31
 8007ac0:	4656      	mov	r6, sl
 8007ac2:	f806 3b01 	strb.w	r3, [r6], #1
 8007ac6:	9b04      	ldr	r3, [sp, #16]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	9304      	str	r3, [sp, #16]
 8007acc:	e6aa      	b.n	8007824 <_dtoa_r+0x694>
 8007ace:	9c07      	ldr	r4, [sp, #28]
 8007ad0:	9704      	str	r7, [sp, #16]
 8007ad2:	4625      	mov	r5, r4
 8007ad4:	e7f3      	b.n	8007abe <_dtoa_r+0x92e>
 8007ad6:	9b07      	ldr	r3, [sp, #28]
 8007ad8:	9308      	str	r3, [sp, #32]
 8007ada:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 8104 	beq.w	8007cea <_dtoa_r+0xb5a>
 8007ae2:	2e00      	cmp	r6, #0
 8007ae4:	dd05      	ble.n	8007af2 <_dtoa_r+0x962>
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	4632      	mov	r2, r6
 8007aea:	4658      	mov	r0, fp
 8007aec:	f000 fc6c 	bl	80083c8 <__lshift>
 8007af0:	4605      	mov	r5, r0
 8007af2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d05a      	beq.n	8007bae <_dtoa_r+0xa1e>
 8007af8:	4658      	mov	r0, fp
 8007afa:	6869      	ldr	r1, [r5, #4]
 8007afc:	f000 fa0e 	bl	8007f1c <_Balloc>
 8007b00:	4606      	mov	r6, r0
 8007b02:	b928      	cbnz	r0, 8007b10 <_dtoa_r+0x980>
 8007b04:	4602      	mov	r2, r0
 8007b06:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007b0a:	4b83      	ldr	r3, [pc, #524]	@ (8007d18 <_dtoa_r+0xb88>)
 8007b0c:	f7ff bb54 	b.w	80071b8 <_dtoa_r+0x28>
 8007b10:	692a      	ldr	r2, [r5, #16]
 8007b12:	f105 010c 	add.w	r1, r5, #12
 8007b16:	3202      	adds	r2, #2
 8007b18:	0092      	lsls	r2, r2, #2
 8007b1a:	300c      	adds	r0, #12
 8007b1c:	f7ff fa9d 	bl	800705a <memcpy>
 8007b20:	2201      	movs	r2, #1
 8007b22:	4631      	mov	r1, r6
 8007b24:	4658      	mov	r0, fp
 8007b26:	f000 fc4f 	bl	80083c8 <__lshift>
 8007b2a:	462f      	mov	r7, r5
 8007b2c:	4605      	mov	r5, r0
 8007b2e:	f10a 0301 	add.w	r3, sl, #1
 8007b32:	9307      	str	r3, [sp, #28]
 8007b34:	9b08      	ldr	r3, [sp, #32]
 8007b36:	4453      	add	r3, sl
 8007b38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b3a:	9b02      	ldr	r3, [sp, #8]
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b42:	9b07      	ldr	r3, [sp, #28]
 8007b44:	4621      	mov	r1, r4
 8007b46:	3b01      	subs	r3, #1
 8007b48:	4648      	mov	r0, r9
 8007b4a:	9302      	str	r3, [sp, #8]
 8007b4c:	f7ff fa98 	bl	8007080 <quorem>
 8007b50:	4639      	mov	r1, r7
 8007b52:	9008      	str	r0, [sp, #32]
 8007b54:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007b58:	4648      	mov	r0, r9
 8007b5a:	f000 fca1 	bl	80084a0 <__mcmp>
 8007b5e:	462a      	mov	r2, r5
 8007b60:	9009      	str	r0, [sp, #36]	@ 0x24
 8007b62:	4621      	mov	r1, r4
 8007b64:	4658      	mov	r0, fp
 8007b66:	f000 fcb7 	bl	80084d8 <__mdiff>
 8007b6a:	68c2      	ldr	r2, [r0, #12]
 8007b6c:	4606      	mov	r6, r0
 8007b6e:	bb02      	cbnz	r2, 8007bb2 <_dtoa_r+0xa22>
 8007b70:	4601      	mov	r1, r0
 8007b72:	4648      	mov	r0, r9
 8007b74:	f000 fc94 	bl	80084a0 <__mcmp>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	4631      	mov	r1, r6
 8007b7c:	4658      	mov	r0, fp
 8007b7e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007b80:	f000 fa0c 	bl	8007f9c <_Bfree>
 8007b84:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b86:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007b88:	9e07      	ldr	r6, [sp, #28]
 8007b8a:	ea43 0102 	orr.w	r1, r3, r2
 8007b8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b90:	4319      	orrs	r1, r3
 8007b92:	d110      	bne.n	8007bb6 <_dtoa_r+0xa26>
 8007b94:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b98:	d029      	beq.n	8007bee <_dtoa_r+0xa5e>
 8007b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	dd02      	ble.n	8007ba6 <_dtoa_r+0xa16>
 8007ba0:	9b08      	ldr	r3, [sp, #32]
 8007ba2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007ba6:	9b02      	ldr	r3, [sp, #8]
 8007ba8:	f883 8000 	strb.w	r8, [r3]
 8007bac:	e63b      	b.n	8007826 <_dtoa_r+0x696>
 8007bae:	4628      	mov	r0, r5
 8007bb0:	e7bb      	b.n	8007b2a <_dtoa_r+0x99a>
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	e7e1      	b.n	8007b7a <_dtoa_r+0x9ea>
 8007bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	db04      	blt.n	8007bc6 <_dtoa_r+0xa36>
 8007bbc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007bbe:	430b      	orrs	r3, r1
 8007bc0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007bc2:	430b      	orrs	r3, r1
 8007bc4:	d120      	bne.n	8007c08 <_dtoa_r+0xa78>
 8007bc6:	2a00      	cmp	r2, #0
 8007bc8:	dded      	ble.n	8007ba6 <_dtoa_r+0xa16>
 8007bca:	4649      	mov	r1, r9
 8007bcc:	2201      	movs	r2, #1
 8007bce:	4658      	mov	r0, fp
 8007bd0:	f000 fbfa 	bl	80083c8 <__lshift>
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	4681      	mov	r9, r0
 8007bd8:	f000 fc62 	bl	80084a0 <__mcmp>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	dc03      	bgt.n	8007be8 <_dtoa_r+0xa58>
 8007be0:	d1e1      	bne.n	8007ba6 <_dtoa_r+0xa16>
 8007be2:	f018 0f01 	tst.w	r8, #1
 8007be6:	d0de      	beq.n	8007ba6 <_dtoa_r+0xa16>
 8007be8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007bec:	d1d8      	bne.n	8007ba0 <_dtoa_r+0xa10>
 8007bee:	2339      	movs	r3, #57	@ 0x39
 8007bf0:	9a02      	ldr	r2, [sp, #8]
 8007bf2:	7013      	strb	r3, [r2, #0]
 8007bf4:	4633      	mov	r3, r6
 8007bf6:	461e      	mov	r6, r3
 8007bf8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	2a39      	cmp	r2, #57	@ 0x39
 8007c00:	d052      	beq.n	8007ca8 <_dtoa_r+0xb18>
 8007c02:	3201      	adds	r2, #1
 8007c04:	701a      	strb	r2, [r3, #0]
 8007c06:	e60e      	b.n	8007826 <_dtoa_r+0x696>
 8007c08:	2a00      	cmp	r2, #0
 8007c0a:	dd07      	ble.n	8007c1c <_dtoa_r+0xa8c>
 8007c0c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c10:	d0ed      	beq.n	8007bee <_dtoa_r+0xa5e>
 8007c12:	9a02      	ldr	r2, [sp, #8]
 8007c14:	f108 0301 	add.w	r3, r8, #1
 8007c18:	7013      	strb	r3, [r2, #0]
 8007c1a:	e604      	b.n	8007826 <_dtoa_r+0x696>
 8007c1c:	9b07      	ldr	r3, [sp, #28]
 8007c1e:	9a07      	ldr	r2, [sp, #28]
 8007c20:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007c24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d028      	beq.n	8007c7c <_dtoa_r+0xaec>
 8007c2a:	4649      	mov	r1, r9
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	220a      	movs	r2, #10
 8007c30:	4658      	mov	r0, fp
 8007c32:	f000 f9d5 	bl	8007fe0 <__multadd>
 8007c36:	42af      	cmp	r7, r5
 8007c38:	4681      	mov	r9, r0
 8007c3a:	f04f 0300 	mov.w	r3, #0
 8007c3e:	f04f 020a 	mov.w	r2, #10
 8007c42:	4639      	mov	r1, r7
 8007c44:	4658      	mov	r0, fp
 8007c46:	d107      	bne.n	8007c58 <_dtoa_r+0xac8>
 8007c48:	f000 f9ca 	bl	8007fe0 <__multadd>
 8007c4c:	4607      	mov	r7, r0
 8007c4e:	4605      	mov	r5, r0
 8007c50:	9b07      	ldr	r3, [sp, #28]
 8007c52:	3301      	adds	r3, #1
 8007c54:	9307      	str	r3, [sp, #28]
 8007c56:	e774      	b.n	8007b42 <_dtoa_r+0x9b2>
 8007c58:	f000 f9c2 	bl	8007fe0 <__multadd>
 8007c5c:	4629      	mov	r1, r5
 8007c5e:	4607      	mov	r7, r0
 8007c60:	2300      	movs	r3, #0
 8007c62:	220a      	movs	r2, #10
 8007c64:	4658      	mov	r0, fp
 8007c66:	f000 f9bb 	bl	8007fe0 <__multadd>
 8007c6a:	4605      	mov	r5, r0
 8007c6c:	e7f0      	b.n	8007c50 <_dtoa_r+0xac0>
 8007c6e:	9b08      	ldr	r3, [sp, #32]
 8007c70:	2700      	movs	r7, #0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	bfcc      	ite	gt
 8007c76:	461e      	movgt	r6, r3
 8007c78:	2601      	movle	r6, #1
 8007c7a:	4456      	add	r6, sl
 8007c7c:	4649      	mov	r1, r9
 8007c7e:	2201      	movs	r2, #1
 8007c80:	4658      	mov	r0, fp
 8007c82:	f000 fba1 	bl	80083c8 <__lshift>
 8007c86:	4621      	mov	r1, r4
 8007c88:	4681      	mov	r9, r0
 8007c8a:	f000 fc09 	bl	80084a0 <__mcmp>
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	dcb0      	bgt.n	8007bf4 <_dtoa_r+0xa64>
 8007c92:	d102      	bne.n	8007c9a <_dtoa_r+0xb0a>
 8007c94:	f018 0f01 	tst.w	r8, #1
 8007c98:	d1ac      	bne.n	8007bf4 <_dtoa_r+0xa64>
 8007c9a:	4633      	mov	r3, r6
 8007c9c:	461e      	mov	r6, r3
 8007c9e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ca2:	2a30      	cmp	r2, #48	@ 0x30
 8007ca4:	d0fa      	beq.n	8007c9c <_dtoa_r+0xb0c>
 8007ca6:	e5be      	b.n	8007826 <_dtoa_r+0x696>
 8007ca8:	459a      	cmp	sl, r3
 8007caa:	d1a4      	bne.n	8007bf6 <_dtoa_r+0xa66>
 8007cac:	9b04      	ldr	r3, [sp, #16]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	9304      	str	r3, [sp, #16]
 8007cb2:	2331      	movs	r3, #49	@ 0x31
 8007cb4:	f88a 3000 	strb.w	r3, [sl]
 8007cb8:	e5b5      	b.n	8007826 <_dtoa_r+0x696>
 8007cba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007cbc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007d1c <_dtoa_r+0xb8c>
 8007cc0:	b11b      	cbz	r3, 8007cca <_dtoa_r+0xb3a>
 8007cc2:	f10a 0308 	add.w	r3, sl, #8
 8007cc6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007cc8:	6013      	str	r3, [r2, #0]
 8007cca:	4650      	mov	r0, sl
 8007ccc:	b017      	add	sp, #92	@ 0x5c
 8007cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	f77f ae3d 	ble.w	8007954 <_dtoa_r+0x7c4>
 8007cda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cdc:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cde:	2001      	movs	r0, #1
 8007ce0:	e65b      	b.n	800799a <_dtoa_r+0x80a>
 8007ce2:	9b08      	ldr	r3, [sp, #32]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f77f aed6 	ble.w	8007a96 <_dtoa_r+0x906>
 8007cea:	4656      	mov	r6, sl
 8007cec:	4621      	mov	r1, r4
 8007cee:	4648      	mov	r0, r9
 8007cf0:	f7ff f9c6 	bl	8007080 <quorem>
 8007cf4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007cf8:	9b08      	ldr	r3, [sp, #32]
 8007cfa:	f806 8b01 	strb.w	r8, [r6], #1
 8007cfe:	eba6 020a 	sub.w	r2, r6, sl
 8007d02:	4293      	cmp	r3, r2
 8007d04:	ddb3      	ble.n	8007c6e <_dtoa_r+0xade>
 8007d06:	4649      	mov	r1, r9
 8007d08:	2300      	movs	r3, #0
 8007d0a:	220a      	movs	r2, #10
 8007d0c:	4658      	mov	r0, fp
 8007d0e:	f000 f967 	bl	8007fe0 <__multadd>
 8007d12:	4681      	mov	r9, r0
 8007d14:	e7ea      	b.n	8007cec <_dtoa_r+0xb5c>
 8007d16:	bf00      	nop
 8007d18:	0800d62f 	.word	0x0800d62f
 8007d1c:	0800d5b3 	.word	0x0800d5b3

08007d20 <_free_r>:
 8007d20:	b538      	push	{r3, r4, r5, lr}
 8007d22:	4605      	mov	r5, r0
 8007d24:	2900      	cmp	r1, #0
 8007d26:	d040      	beq.n	8007daa <_free_r+0x8a>
 8007d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d2c:	1f0c      	subs	r4, r1, #4
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	bfb8      	it	lt
 8007d32:	18e4      	addlt	r4, r4, r3
 8007d34:	f000 f8e6 	bl	8007f04 <__malloc_lock>
 8007d38:	4a1c      	ldr	r2, [pc, #112]	@ (8007dac <_free_r+0x8c>)
 8007d3a:	6813      	ldr	r3, [r2, #0]
 8007d3c:	b933      	cbnz	r3, 8007d4c <_free_r+0x2c>
 8007d3e:	6063      	str	r3, [r4, #4]
 8007d40:	6014      	str	r4, [r2, #0]
 8007d42:	4628      	mov	r0, r5
 8007d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d48:	f000 b8e2 	b.w	8007f10 <__malloc_unlock>
 8007d4c:	42a3      	cmp	r3, r4
 8007d4e:	d908      	bls.n	8007d62 <_free_r+0x42>
 8007d50:	6820      	ldr	r0, [r4, #0]
 8007d52:	1821      	adds	r1, r4, r0
 8007d54:	428b      	cmp	r3, r1
 8007d56:	bf01      	itttt	eq
 8007d58:	6819      	ldreq	r1, [r3, #0]
 8007d5a:	685b      	ldreq	r3, [r3, #4]
 8007d5c:	1809      	addeq	r1, r1, r0
 8007d5e:	6021      	streq	r1, [r4, #0]
 8007d60:	e7ed      	b.n	8007d3e <_free_r+0x1e>
 8007d62:	461a      	mov	r2, r3
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	b10b      	cbz	r3, 8007d6c <_free_r+0x4c>
 8007d68:	42a3      	cmp	r3, r4
 8007d6a:	d9fa      	bls.n	8007d62 <_free_r+0x42>
 8007d6c:	6811      	ldr	r1, [r2, #0]
 8007d6e:	1850      	adds	r0, r2, r1
 8007d70:	42a0      	cmp	r0, r4
 8007d72:	d10b      	bne.n	8007d8c <_free_r+0x6c>
 8007d74:	6820      	ldr	r0, [r4, #0]
 8007d76:	4401      	add	r1, r0
 8007d78:	1850      	adds	r0, r2, r1
 8007d7a:	4283      	cmp	r3, r0
 8007d7c:	6011      	str	r1, [r2, #0]
 8007d7e:	d1e0      	bne.n	8007d42 <_free_r+0x22>
 8007d80:	6818      	ldr	r0, [r3, #0]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	4408      	add	r0, r1
 8007d86:	6010      	str	r0, [r2, #0]
 8007d88:	6053      	str	r3, [r2, #4]
 8007d8a:	e7da      	b.n	8007d42 <_free_r+0x22>
 8007d8c:	d902      	bls.n	8007d94 <_free_r+0x74>
 8007d8e:	230c      	movs	r3, #12
 8007d90:	602b      	str	r3, [r5, #0]
 8007d92:	e7d6      	b.n	8007d42 <_free_r+0x22>
 8007d94:	6820      	ldr	r0, [r4, #0]
 8007d96:	1821      	adds	r1, r4, r0
 8007d98:	428b      	cmp	r3, r1
 8007d9a:	bf01      	itttt	eq
 8007d9c:	6819      	ldreq	r1, [r3, #0]
 8007d9e:	685b      	ldreq	r3, [r3, #4]
 8007da0:	1809      	addeq	r1, r1, r0
 8007da2:	6021      	streq	r1, [r4, #0]
 8007da4:	6063      	str	r3, [r4, #4]
 8007da6:	6054      	str	r4, [r2, #4]
 8007da8:	e7cb      	b.n	8007d42 <_free_r+0x22>
 8007daa:	bd38      	pop	{r3, r4, r5, pc}
 8007dac:	200008bc 	.word	0x200008bc

08007db0 <malloc>:
 8007db0:	4b02      	ldr	r3, [pc, #8]	@ (8007dbc <malloc+0xc>)
 8007db2:	4601      	mov	r1, r0
 8007db4:	6818      	ldr	r0, [r3, #0]
 8007db6:	f000 b825 	b.w	8007e04 <_malloc_r>
 8007dba:	bf00      	nop
 8007dbc:	2000001c 	.word	0x2000001c

08007dc0 <sbrk_aligned>:
 8007dc0:	b570      	push	{r4, r5, r6, lr}
 8007dc2:	4e0f      	ldr	r6, [pc, #60]	@ (8007e00 <sbrk_aligned+0x40>)
 8007dc4:	460c      	mov	r4, r1
 8007dc6:	6831      	ldr	r1, [r6, #0]
 8007dc8:	4605      	mov	r5, r0
 8007dca:	b911      	cbnz	r1, 8007dd2 <sbrk_aligned+0x12>
 8007dcc:	f001 fddc 	bl	8009988 <_sbrk_r>
 8007dd0:	6030      	str	r0, [r6, #0]
 8007dd2:	4621      	mov	r1, r4
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	f001 fdd7 	bl	8009988 <_sbrk_r>
 8007dda:	1c43      	adds	r3, r0, #1
 8007ddc:	d103      	bne.n	8007de6 <sbrk_aligned+0x26>
 8007dde:	f04f 34ff 	mov.w	r4, #4294967295
 8007de2:	4620      	mov	r0, r4
 8007de4:	bd70      	pop	{r4, r5, r6, pc}
 8007de6:	1cc4      	adds	r4, r0, #3
 8007de8:	f024 0403 	bic.w	r4, r4, #3
 8007dec:	42a0      	cmp	r0, r4
 8007dee:	d0f8      	beq.n	8007de2 <sbrk_aligned+0x22>
 8007df0:	1a21      	subs	r1, r4, r0
 8007df2:	4628      	mov	r0, r5
 8007df4:	f001 fdc8 	bl	8009988 <_sbrk_r>
 8007df8:	3001      	adds	r0, #1
 8007dfa:	d1f2      	bne.n	8007de2 <sbrk_aligned+0x22>
 8007dfc:	e7ef      	b.n	8007dde <sbrk_aligned+0x1e>
 8007dfe:	bf00      	nop
 8007e00:	200008b8 	.word	0x200008b8

08007e04 <_malloc_r>:
 8007e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e08:	1ccd      	adds	r5, r1, #3
 8007e0a:	f025 0503 	bic.w	r5, r5, #3
 8007e0e:	3508      	adds	r5, #8
 8007e10:	2d0c      	cmp	r5, #12
 8007e12:	bf38      	it	cc
 8007e14:	250c      	movcc	r5, #12
 8007e16:	2d00      	cmp	r5, #0
 8007e18:	4606      	mov	r6, r0
 8007e1a:	db01      	blt.n	8007e20 <_malloc_r+0x1c>
 8007e1c:	42a9      	cmp	r1, r5
 8007e1e:	d904      	bls.n	8007e2a <_malloc_r+0x26>
 8007e20:	230c      	movs	r3, #12
 8007e22:	6033      	str	r3, [r6, #0]
 8007e24:	2000      	movs	r0, #0
 8007e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f00 <_malloc_r+0xfc>
 8007e2e:	f000 f869 	bl	8007f04 <__malloc_lock>
 8007e32:	f8d8 3000 	ldr.w	r3, [r8]
 8007e36:	461c      	mov	r4, r3
 8007e38:	bb44      	cbnz	r4, 8007e8c <_malloc_r+0x88>
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	4630      	mov	r0, r6
 8007e3e:	f7ff ffbf 	bl	8007dc0 <sbrk_aligned>
 8007e42:	1c43      	adds	r3, r0, #1
 8007e44:	4604      	mov	r4, r0
 8007e46:	d158      	bne.n	8007efa <_malloc_r+0xf6>
 8007e48:	f8d8 4000 	ldr.w	r4, [r8]
 8007e4c:	4627      	mov	r7, r4
 8007e4e:	2f00      	cmp	r7, #0
 8007e50:	d143      	bne.n	8007eda <_malloc_r+0xd6>
 8007e52:	2c00      	cmp	r4, #0
 8007e54:	d04b      	beq.n	8007eee <_malloc_r+0xea>
 8007e56:	6823      	ldr	r3, [r4, #0]
 8007e58:	4639      	mov	r1, r7
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	eb04 0903 	add.w	r9, r4, r3
 8007e60:	f001 fd92 	bl	8009988 <_sbrk_r>
 8007e64:	4581      	cmp	r9, r0
 8007e66:	d142      	bne.n	8007eee <_malloc_r+0xea>
 8007e68:	6821      	ldr	r1, [r4, #0]
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	1a6d      	subs	r5, r5, r1
 8007e6e:	4629      	mov	r1, r5
 8007e70:	f7ff ffa6 	bl	8007dc0 <sbrk_aligned>
 8007e74:	3001      	adds	r0, #1
 8007e76:	d03a      	beq.n	8007eee <_malloc_r+0xea>
 8007e78:	6823      	ldr	r3, [r4, #0]
 8007e7a:	442b      	add	r3, r5
 8007e7c:	6023      	str	r3, [r4, #0]
 8007e7e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	bb62      	cbnz	r2, 8007ee0 <_malloc_r+0xdc>
 8007e86:	f8c8 7000 	str.w	r7, [r8]
 8007e8a:	e00f      	b.n	8007eac <_malloc_r+0xa8>
 8007e8c:	6822      	ldr	r2, [r4, #0]
 8007e8e:	1b52      	subs	r2, r2, r5
 8007e90:	d420      	bmi.n	8007ed4 <_malloc_r+0xd0>
 8007e92:	2a0b      	cmp	r2, #11
 8007e94:	d917      	bls.n	8007ec6 <_malloc_r+0xc2>
 8007e96:	1961      	adds	r1, r4, r5
 8007e98:	42a3      	cmp	r3, r4
 8007e9a:	6025      	str	r5, [r4, #0]
 8007e9c:	bf18      	it	ne
 8007e9e:	6059      	strne	r1, [r3, #4]
 8007ea0:	6863      	ldr	r3, [r4, #4]
 8007ea2:	bf08      	it	eq
 8007ea4:	f8c8 1000 	streq.w	r1, [r8]
 8007ea8:	5162      	str	r2, [r4, r5]
 8007eaa:	604b      	str	r3, [r1, #4]
 8007eac:	4630      	mov	r0, r6
 8007eae:	f000 f82f 	bl	8007f10 <__malloc_unlock>
 8007eb2:	f104 000b 	add.w	r0, r4, #11
 8007eb6:	1d23      	adds	r3, r4, #4
 8007eb8:	f020 0007 	bic.w	r0, r0, #7
 8007ebc:	1ac2      	subs	r2, r0, r3
 8007ebe:	bf1c      	itt	ne
 8007ec0:	1a1b      	subne	r3, r3, r0
 8007ec2:	50a3      	strne	r3, [r4, r2]
 8007ec4:	e7af      	b.n	8007e26 <_malloc_r+0x22>
 8007ec6:	6862      	ldr	r2, [r4, #4]
 8007ec8:	42a3      	cmp	r3, r4
 8007eca:	bf0c      	ite	eq
 8007ecc:	f8c8 2000 	streq.w	r2, [r8]
 8007ed0:	605a      	strne	r2, [r3, #4]
 8007ed2:	e7eb      	b.n	8007eac <_malloc_r+0xa8>
 8007ed4:	4623      	mov	r3, r4
 8007ed6:	6864      	ldr	r4, [r4, #4]
 8007ed8:	e7ae      	b.n	8007e38 <_malloc_r+0x34>
 8007eda:	463c      	mov	r4, r7
 8007edc:	687f      	ldr	r7, [r7, #4]
 8007ede:	e7b6      	b.n	8007e4e <_malloc_r+0x4a>
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	42a3      	cmp	r3, r4
 8007ee6:	d1fb      	bne.n	8007ee0 <_malloc_r+0xdc>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	6053      	str	r3, [r2, #4]
 8007eec:	e7de      	b.n	8007eac <_malloc_r+0xa8>
 8007eee:	230c      	movs	r3, #12
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	6033      	str	r3, [r6, #0]
 8007ef4:	f000 f80c 	bl	8007f10 <__malloc_unlock>
 8007ef8:	e794      	b.n	8007e24 <_malloc_r+0x20>
 8007efa:	6005      	str	r5, [r0, #0]
 8007efc:	e7d6      	b.n	8007eac <_malloc_r+0xa8>
 8007efe:	bf00      	nop
 8007f00:	200008bc 	.word	0x200008bc

08007f04 <__malloc_lock>:
 8007f04:	4801      	ldr	r0, [pc, #4]	@ (8007f0c <__malloc_lock+0x8>)
 8007f06:	f7ff b898 	b.w	800703a <__retarget_lock_acquire_recursive>
 8007f0a:	bf00      	nop
 8007f0c:	200008b4 	.word	0x200008b4

08007f10 <__malloc_unlock>:
 8007f10:	4801      	ldr	r0, [pc, #4]	@ (8007f18 <__malloc_unlock+0x8>)
 8007f12:	f7ff b893 	b.w	800703c <__retarget_lock_release_recursive>
 8007f16:	bf00      	nop
 8007f18:	200008b4 	.word	0x200008b4

08007f1c <_Balloc>:
 8007f1c:	b570      	push	{r4, r5, r6, lr}
 8007f1e:	69c6      	ldr	r6, [r0, #28]
 8007f20:	4604      	mov	r4, r0
 8007f22:	460d      	mov	r5, r1
 8007f24:	b976      	cbnz	r6, 8007f44 <_Balloc+0x28>
 8007f26:	2010      	movs	r0, #16
 8007f28:	f7ff ff42 	bl	8007db0 <malloc>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	61e0      	str	r0, [r4, #28]
 8007f30:	b920      	cbnz	r0, 8007f3c <_Balloc+0x20>
 8007f32:	216b      	movs	r1, #107	@ 0x6b
 8007f34:	4b17      	ldr	r3, [pc, #92]	@ (8007f94 <_Balloc+0x78>)
 8007f36:	4818      	ldr	r0, [pc, #96]	@ (8007f98 <_Balloc+0x7c>)
 8007f38:	f001 fd3c 	bl	80099b4 <__assert_func>
 8007f3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f40:	6006      	str	r6, [r0, #0]
 8007f42:	60c6      	str	r6, [r0, #12]
 8007f44:	69e6      	ldr	r6, [r4, #28]
 8007f46:	68f3      	ldr	r3, [r6, #12]
 8007f48:	b183      	cbz	r3, 8007f6c <_Balloc+0x50>
 8007f4a:	69e3      	ldr	r3, [r4, #28]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f52:	b9b8      	cbnz	r0, 8007f84 <_Balloc+0x68>
 8007f54:	2101      	movs	r1, #1
 8007f56:	fa01 f605 	lsl.w	r6, r1, r5
 8007f5a:	1d72      	adds	r2, r6, #5
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	0092      	lsls	r2, r2, #2
 8007f60:	f001 fd46 	bl	80099f0 <_calloc_r>
 8007f64:	b160      	cbz	r0, 8007f80 <_Balloc+0x64>
 8007f66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f6a:	e00e      	b.n	8007f8a <_Balloc+0x6e>
 8007f6c:	2221      	movs	r2, #33	@ 0x21
 8007f6e:	2104      	movs	r1, #4
 8007f70:	4620      	mov	r0, r4
 8007f72:	f001 fd3d 	bl	80099f0 <_calloc_r>
 8007f76:	69e3      	ldr	r3, [r4, #28]
 8007f78:	60f0      	str	r0, [r6, #12]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1e4      	bne.n	8007f4a <_Balloc+0x2e>
 8007f80:	2000      	movs	r0, #0
 8007f82:	bd70      	pop	{r4, r5, r6, pc}
 8007f84:	6802      	ldr	r2, [r0, #0]
 8007f86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f90:	e7f7      	b.n	8007f82 <_Balloc+0x66>
 8007f92:	bf00      	nop
 8007f94:	0800d5c0 	.word	0x0800d5c0
 8007f98:	0800d640 	.word	0x0800d640

08007f9c <_Bfree>:
 8007f9c:	b570      	push	{r4, r5, r6, lr}
 8007f9e:	69c6      	ldr	r6, [r0, #28]
 8007fa0:	4605      	mov	r5, r0
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	b976      	cbnz	r6, 8007fc4 <_Bfree+0x28>
 8007fa6:	2010      	movs	r0, #16
 8007fa8:	f7ff ff02 	bl	8007db0 <malloc>
 8007fac:	4602      	mov	r2, r0
 8007fae:	61e8      	str	r0, [r5, #28]
 8007fb0:	b920      	cbnz	r0, 8007fbc <_Bfree+0x20>
 8007fb2:	218f      	movs	r1, #143	@ 0x8f
 8007fb4:	4b08      	ldr	r3, [pc, #32]	@ (8007fd8 <_Bfree+0x3c>)
 8007fb6:	4809      	ldr	r0, [pc, #36]	@ (8007fdc <_Bfree+0x40>)
 8007fb8:	f001 fcfc 	bl	80099b4 <__assert_func>
 8007fbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fc0:	6006      	str	r6, [r0, #0]
 8007fc2:	60c6      	str	r6, [r0, #12]
 8007fc4:	b13c      	cbz	r4, 8007fd6 <_Bfree+0x3a>
 8007fc6:	69eb      	ldr	r3, [r5, #28]
 8007fc8:	6862      	ldr	r2, [r4, #4]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fd0:	6021      	str	r1, [r4, #0]
 8007fd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007fd6:	bd70      	pop	{r4, r5, r6, pc}
 8007fd8:	0800d5c0 	.word	0x0800d5c0
 8007fdc:	0800d640 	.word	0x0800d640

08007fe0 <__multadd>:
 8007fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fe4:	4607      	mov	r7, r0
 8007fe6:	460c      	mov	r4, r1
 8007fe8:	461e      	mov	r6, r3
 8007fea:	2000      	movs	r0, #0
 8007fec:	690d      	ldr	r5, [r1, #16]
 8007fee:	f101 0c14 	add.w	ip, r1, #20
 8007ff2:	f8dc 3000 	ldr.w	r3, [ip]
 8007ff6:	3001      	adds	r0, #1
 8007ff8:	b299      	uxth	r1, r3
 8007ffa:	fb02 6101 	mla	r1, r2, r1, r6
 8007ffe:	0c1e      	lsrs	r6, r3, #16
 8008000:	0c0b      	lsrs	r3, r1, #16
 8008002:	fb02 3306 	mla	r3, r2, r6, r3
 8008006:	b289      	uxth	r1, r1
 8008008:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800800c:	4285      	cmp	r5, r0
 800800e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008012:	f84c 1b04 	str.w	r1, [ip], #4
 8008016:	dcec      	bgt.n	8007ff2 <__multadd+0x12>
 8008018:	b30e      	cbz	r6, 800805e <__multadd+0x7e>
 800801a:	68a3      	ldr	r3, [r4, #8]
 800801c:	42ab      	cmp	r3, r5
 800801e:	dc19      	bgt.n	8008054 <__multadd+0x74>
 8008020:	6861      	ldr	r1, [r4, #4]
 8008022:	4638      	mov	r0, r7
 8008024:	3101      	adds	r1, #1
 8008026:	f7ff ff79 	bl	8007f1c <_Balloc>
 800802a:	4680      	mov	r8, r0
 800802c:	b928      	cbnz	r0, 800803a <__multadd+0x5a>
 800802e:	4602      	mov	r2, r0
 8008030:	21ba      	movs	r1, #186	@ 0xba
 8008032:	4b0c      	ldr	r3, [pc, #48]	@ (8008064 <__multadd+0x84>)
 8008034:	480c      	ldr	r0, [pc, #48]	@ (8008068 <__multadd+0x88>)
 8008036:	f001 fcbd 	bl	80099b4 <__assert_func>
 800803a:	6922      	ldr	r2, [r4, #16]
 800803c:	f104 010c 	add.w	r1, r4, #12
 8008040:	3202      	adds	r2, #2
 8008042:	0092      	lsls	r2, r2, #2
 8008044:	300c      	adds	r0, #12
 8008046:	f7ff f808 	bl	800705a <memcpy>
 800804a:	4621      	mov	r1, r4
 800804c:	4638      	mov	r0, r7
 800804e:	f7ff ffa5 	bl	8007f9c <_Bfree>
 8008052:	4644      	mov	r4, r8
 8008054:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008058:	3501      	adds	r5, #1
 800805a:	615e      	str	r6, [r3, #20]
 800805c:	6125      	str	r5, [r4, #16]
 800805e:	4620      	mov	r0, r4
 8008060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008064:	0800d62f 	.word	0x0800d62f
 8008068:	0800d640 	.word	0x0800d640

0800806c <__s2b>:
 800806c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008070:	4615      	mov	r5, r2
 8008072:	2209      	movs	r2, #9
 8008074:	461f      	mov	r7, r3
 8008076:	3308      	adds	r3, #8
 8008078:	460c      	mov	r4, r1
 800807a:	fb93 f3f2 	sdiv	r3, r3, r2
 800807e:	4606      	mov	r6, r0
 8008080:	2201      	movs	r2, #1
 8008082:	2100      	movs	r1, #0
 8008084:	429a      	cmp	r2, r3
 8008086:	db09      	blt.n	800809c <__s2b+0x30>
 8008088:	4630      	mov	r0, r6
 800808a:	f7ff ff47 	bl	8007f1c <_Balloc>
 800808e:	b940      	cbnz	r0, 80080a2 <__s2b+0x36>
 8008090:	4602      	mov	r2, r0
 8008092:	21d3      	movs	r1, #211	@ 0xd3
 8008094:	4b18      	ldr	r3, [pc, #96]	@ (80080f8 <__s2b+0x8c>)
 8008096:	4819      	ldr	r0, [pc, #100]	@ (80080fc <__s2b+0x90>)
 8008098:	f001 fc8c 	bl	80099b4 <__assert_func>
 800809c:	0052      	lsls	r2, r2, #1
 800809e:	3101      	adds	r1, #1
 80080a0:	e7f0      	b.n	8008084 <__s2b+0x18>
 80080a2:	9b08      	ldr	r3, [sp, #32]
 80080a4:	2d09      	cmp	r5, #9
 80080a6:	6143      	str	r3, [r0, #20]
 80080a8:	f04f 0301 	mov.w	r3, #1
 80080ac:	6103      	str	r3, [r0, #16]
 80080ae:	dd16      	ble.n	80080de <__s2b+0x72>
 80080b0:	f104 0909 	add.w	r9, r4, #9
 80080b4:	46c8      	mov	r8, r9
 80080b6:	442c      	add	r4, r5
 80080b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80080bc:	4601      	mov	r1, r0
 80080be:	220a      	movs	r2, #10
 80080c0:	4630      	mov	r0, r6
 80080c2:	3b30      	subs	r3, #48	@ 0x30
 80080c4:	f7ff ff8c 	bl	8007fe0 <__multadd>
 80080c8:	45a0      	cmp	r8, r4
 80080ca:	d1f5      	bne.n	80080b8 <__s2b+0x4c>
 80080cc:	f1a5 0408 	sub.w	r4, r5, #8
 80080d0:	444c      	add	r4, r9
 80080d2:	1b2d      	subs	r5, r5, r4
 80080d4:	1963      	adds	r3, r4, r5
 80080d6:	42bb      	cmp	r3, r7
 80080d8:	db04      	blt.n	80080e4 <__s2b+0x78>
 80080da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080de:	2509      	movs	r5, #9
 80080e0:	340a      	adds	r4, #10
 80080e2:	e7f6      	b.n	80080d2 <__s2b+0x66>
 80080e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80080e8:	4601      	mov	r1, r0
 80080ea:	220a      	movs	r2, #10
 80080ec:	4630      	mov	r0, r6
 80080ee:	3b30      	subs	r3, #48	@ 0x30
 80080f0:	f7ff ff76 	bl	8007fe0 <__multadd>
 80080f4:	e7ee      	b.n	80080d4 <__s2b+0x68>
 80080f6:	bf00      	nop
 80080f8:	0800d62f 	.word	0x0800d62f
 80080fc:	0800d640 	.word	0x0800d640

08008100 <__hi0bits>:
 8008100:	4603      	mov	r3, r0
 8008102:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008106:	bf3a      	itte	cc
 8008108:	0403      	lslcc	r3, r0, #16
 800810a:	2010      	movcc	r0, #16
 800810c:	2000      	movcs	r0, #0
 800810e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008112:	bf3c      	itt	cc
 8008114:	021b      	lslcc	r3, r3, #8
 8008116:	3008      	addcc	r0, #8
 8008118:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800811c:	bf3c      	itt	cc
 800811e:	011b      	lslcc	r3, r3, #4
 8008120:	3004      	addcc	r0, #4
 8008122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008126:	bf3c      	itt	cc
 8008128:	009b      	lslcc	r3, r3, #2
 800812a:	3002      	addcc	r0, #2
 800812c:	2b00      	cmp	r3, #0
 800812e:	db05      	blt.n	800813c <__hi0bits+0x3c>
 8008130:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008134:	f100 0001 	add.w	r0, r0, #1
 8008138:	bf08      	it	eq
 800813a:	2020      	moveq	r0, #32
 800813c:	4770      	bx	lr

0800813e <__lo0bits>:
 800813e:	6803      	ldr	r3, [r0, #0]
 8008140:	4602      	mov	r2, r0
 8008142:	f013 0007 	ands.w	r0, r3, #7
 8008146:	d00b      	beq.n	8008160 <__lo0bits+0x22>
 8008148:	07d9      	lsls	r1, r3, #31
 800814a:	d421      	bmi.n	8008190 <__lo0bits+0x52>
 800814c:	0798      	lsls	r0, r3, #30
 800814e:	bf49      	itett	mi
 8008150:	085b      	lsrmi	r3, r3, #1
 8008152:	089b      	lsrpl	r3, r3, #2
 8008154:	2001      	movmi	r0, #1
 8008156:	6013      	strmi	r3, [r2, #0]
 8008158:	bf5c      	itt	pl
 800815a:	2002      	movpl	r0, #2
 800815c:	6013      	strpl	r3, [r2, #0]
 800815e:	4770      	bx	lr
 8008160:	b299      	uxth	r1, r3
 8008162:	b909      	cbnz	r1, 8008168 <__lo0bits+0x2a>
 8008164:	2010      	movs	r0, #16
 8008166:	0c1b      	lsrs	r3, r3, #16
 8008168:	b2d9      	uxtb	r1, r3
 800816a:	b909      	cbnz	r1, 8008170 <__lo0bits+0x32>
 800816c:	3008      	adds	r0, #8
 800816e:	0a1b      	lsrs	r3, r3, #8
 8008170:	0719      	lsls	r1, r3, #28
 8008172:	bf04      	itt	eq
 8008174:	091b      	lsreq	r3, r3, #4
 8008176:	3004      	addeq	r0, #4
 8008178:	0799      	lsls	r1, r3, #30
 800817a:	bf04      	itt	eq
 800817c:	089b      	lsreq	r3, r3, #2
 800817e:	3002      	addeq	r0, #2
 8008180:	07d9      	lsls	r1, r3, #31
 8008182:	d403      	bmi.n	800818c <__lo0bits+0x4e>
 8008184:	085b      	lsrs	r3, r3, #1
 8008186:	f100 0001 	add.w	r0, r0, #1
 800818a:	d003      	beq.n	8008194 <__lo0bits+0x56>
 800818c:	6013      	str	r3, [r2, #0]
 800818e:	4770      	bx	lr
 8008190:	2000      	movs	r0, #0
 8008192:	4770      	bx	lr
 8008194:	2020      	movs	r0, #32
 8008196:	4770      	bx	lr

08008198 <__i2b>:
 8008198:	b510      	push	{r4, lr}
 800819a:	460c      	mov	r4, r1
 800819c:	2101      	movs	r1, #1
 800819e:	f7ff febd 	bl	8007f1c <_Balloc>
 80081a2:	4602      	mov	r2, r0
 80081a4:	b928      	cbnz	r0, 80081b2 <__i2b+0x1a>
 80081a6:	f240 1145 	movw	r1, #325	@ 0x145
 80081aa:	4b04      	ldr	r3, [pc, #16]	@ (80081bc <__i2b+0x24>)
 80081ac:	4804      	ldr	r0, [pc, #16]	@ (80081c0 <__i2b+0x28>)
 80081ae:	f001 fc01 	bl	80099b4 <__assert_func>
 80081b2:	2301      	movs	r3, #1
 80081b4:	6144      	str	r4, [r0, #20]
 80081b6:	6103      	str	r3, [r0, #16]
 80081b8:	bd10      	pop	{r4, pc}
 80081ba:	bf00      	nop
 80081bc:	0800d62f 	.word	0x0800d62f
 80081c0:	0800d640 	.word	0x0800d640

080081c4 <__multiply>:
 80081c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c8:	4614      	mov	r4, r2
 80081ca:	690a      	ldr	r2, [r1, #16]
 80081cc:	6923      	ldr	r3, [r4, #16]
 80081ce:	460f      	mov	r7, r1
 80081d0:	429a      	cmp	r2, r3
 80081d2:	bfa2      	ittt	ge
 80081d4:	4623      	movge	r3, r4
 80081d6:	460c      	movge	r4, r1
 80081d8:	461f      	movge	r7, r3
 80081da:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80081de:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80081e2:	68a3      	ldr	r3, [r4, #8]
 80081e4:	6861      	ldr	r1, [r4, #4]
 80081e6:	eb0a 0609 	add.w	r6, sl, r9
 80081ea:	42b3      	cmp	r3, r6
 80081ec:	b085      	sub	sp, #20
 80081ee:	bfb8      	it	lt
 80081f0:	3101      	addlt	r1, #1
 80081f2:	f7ff fe93 	bl	8007f1c <_Balloc>
 80081f6:	b930      	cbnz	r0, 8008206 <__multiply+0x42>
 80081f8:	4602      	mov	r2, r0
 80081fa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80081fe:	4b43      	ldr	r3, [pc, #268]	@ (800830c <__multiply+0x148>)
 8008200:	4843      	ldr	r0, [pc, #268]	@ (8008310 <__multiply+0x14c>)
 8008202:	f001 fbd7 	bl	80099b4 <__assert_func>
 8008206:	f100 0514 	add.w	r5, r0, #20
 800820a:	462b      	mov	r3, r5
 800820c:	2200      	movs	r2, #0
 800820e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008212:	4543      	cmp	r3, r8
 8008214:	d321      	bcc.n	800825a <__multiply+0x96>
 8008216:	f107 0114 	add.w	r1, r7, #20
 800821a:	f104 0214 	add.w	r2, r4, #20
 800821e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008222:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008226:	9302      	str	r3, [sp, #8]
 8008228:	1b13      	subs	r3, r2, r4
 800822a:	3b15      	subs	r3, #21
 800822c:	f023 0303 	bic.w	r3, r3, #3
 8008230:	3304      	adds	r3, #4
 8008232:	f104 0715 	add.w	r7, r4, #21
 8008236:	42ba      	cmp	r2, r7
 8008238:	bf38      	it	cc
 800823a:	2304      	movcc	r3, #4
 800823c:	9301      	str	r3, [sp, #4]
 800823e:	9b02      	ldr	r3, [sp, #8]
 8008240:	9103      	str	r1, [sp, #12]
 8008242:	428b      	cmp	r3, r1
 8008244:	d80c      	bhi.n	8008260 <__multiply+0x9c>
 8008246:	2e00      	cmp	r6, #0
 8008248:	dd03      	ble.n	8008252 <__multiply+0x8e>
 800824a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800824e:	2b00      	cmp	r3, #0
 8008250:	d05a      	beq.n	8008308 <__multiply+0x144>
 8008252:	6106      	str	r6, [r0, #16]
 8008254:	b005      	add	sp, #20
 8008256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800825a:	f843 2b04 	str.w	r2, [r3], #4
 800825e:	e7d8      	b.n	8008212 <__multiply+0x4e>
 8008260:	f8b1 a000 	ldrh.w	sl, [r1]
 8008264:	f1ba 0f00 	cmp.w	sl, #0
 8008268:	d023      	beq.n	80082b2 <__multiply+0xee>
 800826a:	46a9      	mov	r9, r5
 800826c:	f04f 0c00 	mov.w	ip, #0
 8008270:	f104 0e14 	add.w	lr, r4, #20
 8008274:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008278:	f8d9 3000 	ldr.w	r3, [r9]
 800827c:	fa1f fb87 	uxth.w	fp, r7
 8008280:	b29b      	uxth	r3, r3
 8008282:	fb0a 330b 	mla	r3, sl, fp, r3
 8008286:	4463      	add	r3, ip
 8008288:	f8d9 c000 	ldr.w	ip, [r9]
 800828c:	0c3f      	lsrs	r7, r7, #16
 800828e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008292:	fb0a c707 	mla	r7, sl, r7, ip
 8008296:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800829a:	b29b      	uxth	r3, r3
 800829c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80082a0:	4572      	cmp	r2, lr
 80082a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80082a6:	f849 3b04 	str.w	r3, [r9], #4
 80082aa:	d8e3      	bhi.n	8008274 <__multiply+0xb0>
 80082ac:	9b01      	ldr	r3, [sp, #4]
 80082ae:	f845 c003 	str.w	ip, [r5, r3]
 80082b2:	9b03      	ldr	r3, [sp, #12]
 80082b4:	3104      	adds	r1, #4
 80082b6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80082ba:	f1b9 0f00 	cmp.w	r9, #0
 80082be:	d021      	beq.n	8008304 <__multiply+0x140>
 80082c0:	46ae      	mov	lr, r5
 80082c2:	f04f 0a00 	mov.w	sl, #0
 80082c6:	682b      	ldr	r3, [r5, #0]
 80082c8:	f104 0c14 	add.w	ip, r4, #20
 80082cc:	f8bc b000 	ldrh.w	fp, [ip]
 80082d0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	fb09 770b 	mla	r7, r9, fp, r7
 80082da:	4457      	add	r7, sl
 80082dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80082e0:	f84e 3b04 	str.w	r3, [lr], #4
 80082e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80082e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082ec:	f8be 3000 	ldrh.w	r3, [lr]
 80082f0:	4562      	cmp	r2, ip
 80082f2:	fb09 330a 	mla	r3, r9, sl, r3
 80082f6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80082fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082fe:	d8e5      	bhi.n	80082cc <__multiply+0x108>
 8008300:	9f01      	ldr	r7, [sp, #4]
 8008302:	51eb      	str	r3, [r5, r7]
 8008304:	3504      	adds	r5, #4
 8008306:	e79a      	b.n	800823e <__multiply+0x7a>
 8008308:	3e01      	subs	r6, #1
 800830a:	e79c      	b.n	8008246 <__multiply+0x82>
 800830c:	0800d62f 	.word	0x0800d62f
 8008310:	0800d640 	.word	0x0800d640

08008314 <__pow5mult>:
 8008314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008318:	4615      	mov	r5, r2
 800831a:	f012 0203 	ands.w	r2, r2, #3
 800831e:	4607      	mov	r7, r0
 8008320:	460e      	mov	r6, r1
 8008322:	d007      	beq.n	8008334 <__pow5mult+0x20>
 8008324:	4c25      	ldr	r4, [pc, #148]	@ (80083bc <__pow5mult+0xa8>)
 8008326:	3a01      	subs	r2, #1
 8008328:	2300      	movs	r3, #0
 800832a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800832e:	f7ff fe57 	bl	8007fe0 <__multadd>
 8008332:	4606      	mov	r6, r0
 8008334:	10ad      	asrs	r5, r5, #2
 8008336:	d03d      	beq.n	80083b4 <__pow5mult+0xa0>
 8008338:	69fc      	ldr	r4, [r7, #28]
 800833a:	b97c      	cbnz	r4, 800835c <__pow5mult+0x48>
 800833c:	2010      	movs	r0, #16
 800833e:	f7ff fd37 	bl	8007db0 <malloc>
 8008342:	4602      	mov	r2, r0
 8008344:	61f8      	str	r0, [r7, #28]
 8008346:	b928      	cbnz	r0, 8008354 <__pow5mult+0x40>
 8008348:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800834c:	4b1c      	ldr	r3, [pc, #112]	@ (80083c0 <__pow5mult+0xac>)
 800834e:	481d      	ldr	r0, [pc, #116]	@ (80083c4 <__pow5mult+0xb0>)
 8008350:	f001 fb30 	bl	80099b4 <__assert_func>
 8008354:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008358:	6004      	str	r4, [r0, #0]
 800835a:	60c4      	str	r4, [r0, #12]
 800835c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008360:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008364:	b94c      	cbnz	r4, 800837a <__pow5mult+0x66>
 8008366:	f240 2171 	movw	r1, #625	@ 0x271
 800836a:	4638      	mov	r0, r7
 800836c:	f7ff ff14 	bl	8008198 <__i2b>
 8008370:	2300      	movs	r3, #0
 8008372:	4604      	mov	r4, r0
 8008374:	f8c8 0008 	str.w	r0, [r8, #8]
 8008378:	6003      	str	r3, [r0, #0]
 800837a:	f04f 0900 	mov.w	r9, #0
 800837e:	07eb      	lsls	r3, r5, #31
 8008380:	d50a      	bpl.n	8008398 <__pow5mult+0x84>
 8008382:	4631      	mov	r1, r6
 8008384:	4622      	mov	r2, r4
 8008386:	4638      	mov	r0, r7
 8008388:	f7ff ff1c 	bl	80081c4 <__multiply>
 800838c:	4680      	mov	r8, r0
 800838e:	4631      	mov	r1, r6
 8008390:	4638      	mov	r0, r7
 8008392:	f7ff fe03 	bl	8007f9c <_Bfree>
 8008396:	4646      	mov	r6, r8
 8008398:	106d      	asrs	r5, r5, #1
 800839a:	d00b      	beq.n	80083b4 <__pow5mult+0xa0>
 800839c:	6820      	ldr	r0, [r4, #0]
 800839e:	b938      	cbnz	r0, 80083b0 <__pow5mult+0x9c>
 80083a0:	4622      	mov	r2, r4
 80083a2:	4621      	mov	r1, r4
 80083a4:	4638      	mov	r0, r7
 80083a6:	f7ff ff0d 	bl	80081c4 <__multiply>
 80083aa:	6020      	str	r0, [r4, #0]
 80083ac:	f8c0 9000 	str.w	r9, [r0]
 80083b0:	4604      	mov	r4, r0
 80083b2:	e7e4      	b.n	800837e <__pow5mult+0x6a>
 80083b4:	4630      	mov	r0, r6
 80083b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ba:	bf00      	nop
 80083bc:	0800d69c 	.word	0x0800d69c
 80083c0:	0800d5c0 	.word	0x0800d5c0
 80083c4:	0800d640 	.word	0x0800d640

080083c8 <__lshift>:
 80083c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083cc:	460c      	mov	r4, r1
 80083ce:	4607      	mov	r7, r0
 80083d0:	4691      	mov	r9, r2
 80083d2:	6923      	ldr	r3, [r4, #16]
 80083d4:	6849      	ldr	r1, [r1, #4]
 80083d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083da:	68a3      	ldr	r3, [r4, #8]
 80083dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083e0:	f108 0601 	add.w	r6, r8, #1
 80083e4:	42b3      	cmp	r3, r6
 80083e6:	db0b      	blt.n	8008400 <__lshift+0x38>
 80083e8:	4638      	mov	r0, r7
 80083ea:	f7ff fd97 	bl	8007f1c <_Balloc>
 80083ee:	4605      	mov	r5, r0
 80083f0:	b948      	cbnz	r0, 8008406 <__lshift+0x3e>
 80083f2:	4602      	mov	r2, r0
 80083f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80083f8:	4b27      	ldr	r3, [pc, #156]	@ (8008498 <__lshift+0xd0>)
 80083fa:	4828      	ldr	r0, [pc, #160]	@ (800849c <__lshift+0xd4>)
 80083fc:	f001 fada 	bl	80099b4 <__assert_func>
 8008400:	3101      	adds	r1, #1
 8008402:	005b      	lsls	r3, r3, #1
 8008404:	e7ee      	b.n	80083e4 <__lshift+0x1c>
 8008406:	2300      	movs	r3, #0
 8008408:	f100 0114 	add.w	r1, r0, #20
 800840c:	f100 0210 	add.w	r2, r0, #16
 8008410:	4618      	mov	r0, r3
 8008412:	4553      	cmp	r3, sl
 8008414:	db33      	blt.n	800847e <__lshift+0xb6>
 8008416:	6920      	ldr	r0, [r4, #16]
 8008418:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800841c:	f104 0314 	add.w	r3, r4, #20
 8008420:	f019 091f 	ands.w	r9, r9, #31
 8008424:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008428:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800842c:	d02b      	beq.n	8008486 <__lshift+0xbe>
 800842e:	468a      	mov	sl, r1
 8008430:	2200      	movs	r2, #0
 8008432:	f1c9 0e20 	rsb	lr, r9, #32
 8008436:	6818      	ldr	r0, [r3, #0]
 8008438:	fa00 f009 	lsl.w	r0, r0, r9
 800843c:	4310      	orrs	r0, r2
 800843e:	f84a 0b04 	str.w	r0, [sl], #4
 8008442:	f853 2b04 	ldr.w	r2, [r3], #4
 8008446:	459c      	cmp	ip, r3
 8008448:	fa22 f20e 	lsr.w	r2, r2, lr
 800844c:	d8f3      	bhi.n	8008436 <__lshift+0x6e>
 800844e:	ebac 0304 	sub.w	r3, ip, r4
 8008452:	3b15      	subs	r3, #21
 8008454:	f023 0303 	bic.w	r3, r3, #3
 8008458:	3304      	adds	r3, #4
 800845a:	f104 0015 	add.w	r0, r4, #21
 800845e:	4584      	cmp	ip, r0
 8008460:	bf38      	it	cc
 8008462:	2304      	movcc	r3, #4
 8008464:	50ca      	str	r2, [r1, r3]
 8008466:	b10a      	cbz	r2, 800846c <__lshift+0xa4>
 8008468:	f108 0602 	add.w	r6, r8, #2
 800846c:	3e01      	subs	r6, #1
 800846e:	4638      	mov	r0, r7
 8008470:	4621      	mov	r1, r4
 8008472:	612e      	str	r6, [r5, #16]
 8008474:	f7ff fd92 	bl	8007f9c <_Bfree>
 8008478:	4628      	mov	r0, r5
 800847a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800847e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008482:	3301      	adds	r3, #1
 8008484:	e7c5      	b.n	8008412 <__lshift+0x4a>
 8008486:	3904      	subs	r1, #4
 8008488:	f853 2b04 	ldr.w	r2, [r3], #4
 800848c:	459c      	cmp	ip, r3
 800848e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008492:	d8f9      	bhi.n	8008488 <__lshift+0xc0>
 8008494:	e7ea      	b.n	800846c <__lshift+0xa4>
 8008496:	bf00      	nop
 8008498:	0800d62f 	.word	0x0800d62f
 800849c:	0800d640 	.word	0x0800d640

080084a0 <__mcmp>:
 80084a0:	4603      	mov	r3, r0
 80084a2:	690a      	ldr	r2, [r1, #16]
 80084a4:	6900      	ldr	r0, [r0, #16]
 80084a6:	b530      	push	{r4, r5, lr}
 80084a8:	1a80      	subs	r0, r0, r2
 80084aa:	d10e      	bne.n	80084ca <__mcmp+0x2a>
 80084ac:	3314      	adds	r3, #20
 80084ae:	3114      	adds	r1, #20
 80084b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80084b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80084b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80084c0:	4295      	cmp	r5, r2
 80084c2:	d003      	beq.n	80084cc <__mcmp+0x2c>
 80084c4:	d205      	bcs.n	80084d2 <__mcmp+0x32>
 80084c6:	f04f 30ff 	mov.w	r0, #4294967295
 80084ca:	bd30      	pop	{r4, r5, pc}
 80084cc:	42a3      	cmp	r3, r4
 80084ce:	d3f3      	bcc.n	80084b8 <__mcmp+0x18>
 80084d0:	e7fb      	b.n	80084ca <__mcmp+0x2a>
 80084d2:	2001      	movs	r0, #1
 80084d4:	e7f9      	b.n	80084ca <__mcmp+0x2a>
	...

080084d8 <__mdiff>:
 80084d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084dc:	4689      	mov	r9, r1
 80084de:	4606      	mov	r6, r0
 80084e0:	4611      	mov	r1, r2
 80084e2:	4648      	mov	r0, r9
 80084e4:	4614      	mov	r4, r2
 80084e6:	f7ff ffdb 	bl	80084a0 <__mcmp>
 80084ea:	1e05      	subs	r5, r0, #0
 80084ec:	d112      	bne.n	8008514 <__mdiff+0x3c>
 80084ee:	4629      	mov	r1, r5
 80084f0:	4630      	mov	r0, r6
 80084f2:	f7ff fd13 	bl	8007f1c <_Balloc>
 80084f6:	4602      	mov	r2, r0
 80084f8:	b928      	cbnz	r0, 8008506 <__mdiff+0x2e>
 80084fa:	f240 2137 	movw	r1, #567	@ 0x237
 80084fe:	4b3e      	ldr	r3, [pc, #248]	@ (80085f8 <__mdiff+0x120>)
 8008500:	483e      	ldr	r0, [pc, #248]	@ (80085fc <__mdiff+0x124>)
 8008502:	f001 fa57 	bl	80099b4 <__assert_func>
 8008506:	2301      	movs	r3, #1
 8008508:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800850c:	4610      	mov	r0, r2
 800850e:	b003      	add	sp, #12
 8008510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008514:	bfbc      	itt	lt
 8008516:	464b      	movlt	r3, r9
 8008518:	46a1      	movlt	r9, r4
 800851a:	4630      	mov	r0, r6
 800851c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008520:	bfba      	itte	lt
 8008522:	461c      	movlt	r4, r3
 8008524:	2501      	movlt	r5, #1
 8008526:	2500      	movge	r5, #0
 8008528:	f7ff fcf8 	bl	8007f1c <_Balloc>
 800852c:	4602      	mov	r2, r0
 800852e:	b918      	cbnz	r0, 8008538 <__mdiff+0x60>
 8008530:	f240 2145 	movw	r1, #581	@ 0x245
 8008534:	4b30      	ldr	r3, [pc, #192]	@ (80085f8 <__mdiff+0x120>)
 8008536:	e7e3      	b.n	8008500 <__mdiff+0x28>
 8008538:	f100 0b14 	add.w	fp, r0, #20
 800853c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008540:	f109 0310 	add.w	r3, r9, #16
 8008544:	60c5      	str	r5, [r0, #12]
 8008546:	f04f 0c00 	mov.w	ip, #0
 800854a:	f109 0514 	add.w	r5, r9, #20
 800854e:	46d9      	mov	r9, fp
 8008550:	6926      	ldr	r6, [r4, #16]
 8008552:	f104 0e14 	add.w	lr, r4, #20
 8008556:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800855a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800855e:	9301      	str	r3, [sp, #4]
 8008560:	9b01      	ldr	r3, [sp, #4]
 8008562:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008566:	f853 af04 	ldr.w	sl, [r3, #4]!
 800856a:	b281      	uxth	r1, r0
 800856c:	9301      	str	r3, [sp, #4]
 800856e:	fa1f f38a 	uxth.w	r3, sl
 8008572:	1a5b      	subs	r3, r3, r1
 8008574:	0c00      	lsrs	r0, r0, #16
 8008576:	4463      	add	r3, ip
 8008578:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800857c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008580:	b29b      	uxth	r3, r3
 8008582:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008586:	4576      	cmp	r6, lr
 8008588:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800858c:	f849 3b04 	str.w	r3, [r9], #4
 8008590:	d8e6      	bhi.n	8008560 <__mdiff+0x88>
 8008592:	1b33      	subs	r3, r6, r4
 8008594:	3b15      	subs	r3, #21
 8008596:	f023 0303 	bic.w	r3, r3, #3
 800859a:	3415      	adds	r4, #21
 800859c:	3304      	adds	r3, #4
 800859e:	42a6      	cmp	r6, r4
 80085a0:	bf38      	it	cc
 80085a2:	2304      	movcc	r3, #4
 80085a4:	441d      	add	r5, r3
 80085a6:	445b      	add	r3, fp
 80085a8:	461e      	mov	r6, r3
 80085aa:	462c      	mov	r4, r5
 80085ac:	4544      	cmp	r4, r8
 80085ae:	d30e      	bcc.n	80085ce <__mdiff+0xf6>
 80085b0:	f108 0103 	add.w	r1, r8, #3
 80085b4:	1b49      	subs	r1, r1, r5
 80085b6:	f021 0103 	bic.w	r1, r1, #3
 80085ba:	3d03      	subs	r5, #3
 80085bc:	45a8      	cmp	r8, r5
 80085be:	bf38      	it	cc
 80085c0:	2100      	movcc	r1, #0
 80085c2:	440b      	add	r3, r1
 80085c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085c8:	b199      	cbz	r1, 80085f2 <__mdiff+0x11a>
 80085ca:	6117      	str	r7, [r2, #16]
 80085cc:	e79e      	b.n	800850c <__mdiff+0x34>
 80085ce:	46e6      	mov	lr, ip
 80085d0:	f854 1b04 	ldr.w	r1, [r4], #4
 80085d4:	fa1f fc81 	uxth.w	ip, r1
 80085d8:	44f4      	add	ip, lr
 80085da:	0c08      	lsrs	r0, r1, #16
 80085dc:	4471      	add	r1, lr
 80085de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80085e2:	b289      	uxth	r1, r1
 80085e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80085e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085ec:	f846 1b04 	str.w	r1, [r6], #4
 80085f0:	e7dc      	b.n	80085ac <__mdiff+0xd4>
 80085f2:	3f01      	subs	r7, #1
 80085f4:	e7e6      	b.n	80085c4 <__mdiff+0xec>
 80085f6:	bf00      	nop
 80085f8:	0800d62f 	.word	0x0800d62f
 80085fc:	0800d640 	.word	0x0800d640

08008600 <__ulp>:
 8008600:	4b0e      	ldr	r3, [pc, #56]	@ (800863c <__ulp+0x3c>)
 8008602:	400b      	ands	r3, r1
 8008604:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008608:	2b00      	cmp	r3, #0
 800860a:	dc08      	bgt.n	800861e <__ulp+0x1e>
 800860c:	425b      	negs	r3, r3
 800860e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008612:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008616:	da04      	bge.n	8008622 <__ulp+0x22>
 8008618:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800861c:	4113      	asrs	r3, r2
 800861e:	2200      	movs	r2, #0
 8008620:	e008      	b.n	8008634 <__ulp+0x34>
 8008622:	f1a2 0314 	sub.w	r3, r2, #20
 8008626:	2b1e      	cmp	r3, #30
 8008628:	bfd6      	itet	le
 800862a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800862e:	2201      	movgt	r2, #1
 8008630:	40da      	lsrle	r2, r3
 8008632:	2300      	movs	r3, #0
 8008634:	4619      	mov	r1, r3
 8008636:	4610      	mov	r0, r2
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	7ff00000 	.word	0x7ff00000

08008640 <__b2d>:
 8008640:	6902      	ldr	r2, [r0, #16]
 8008642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008644:	f100 0614 	add.w	r6, r0, #20
 8008648:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800864c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008650:	4f1e      	ldr	r7, [pc, #120]	@ (80086cc <__b2d+0x8c>)
 8008652:	4620      	mov	r0, r4
 8008654:	f7ff fd54 	bl	8008100 <__hi0bits>
 8008658:	4603      	mov	r3, r0
 800865a:	f1c0 0020 	rsb	r0, r0, #32
 800865e:	2b0a      	cmp	r3, #10
 8008660:	f1a2 0504 	sub.w	r5, r2, #4
 8008664:	6008      	str	r0, [r1, #0]
 8008666:	dc12      	bgt.n	800868e <__b2d+0x4e>
 8008668:	42ae      	cmp	r6, r5
 800866a:	bf2c      	ite	cs
 800866c:	2200      	movcs	r2, #0
 800866e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008672:	f1c3 0c0b 	rsb	ip, r3, #11
 8008676:	3315      	adds	r3, #21
 8008678:	fa24 fe0c 	lsr.w	lr, r4, ip
 800867c:	fa04 f303 	lsl.w	r3, r4, r3
 8008680:	fa22 f20c 	lsr.w	r2, r2, ip
 8008684:	ea4e 0107 	orr.w	r1, lr, r7
 8008688:	431a      	orrs	r2, r3
 800868a:	4610      	mov	r0, r2
 800868c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800868e:	42ae      	cmp	r6, r5
 8008690:	bf36      	itet	cc
 8008692:	f1a2 0508 	subcc.w	r5, r2, #8
 8008696:	2200      	movcs	r2, #0
 8008698:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800869c:	3b0b      	subs	r3, #11
 800869e:	d012      	beq.n	80086c6 <__b2d+0x86>
 80086a0:	f1c3 0720 	rsb	r7, r3, #32
 80086a4:	fa22 f107 	lsr.w	r1, r2, r7
 80086a8:	409c      	lsls	r4, r3
 80086aa:	430c      	orrs	r4, r1
 80086ac:	42b5      	cmp	r5, r6
 80086ae:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80086b2:	bf94      	ite	ls
 80086b4:	2400      	movls	r4, #0
 80086b6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80086ba:	409a      	lsls	r2, r3
 80086bc:	40fc      	lsrs	r4, r7
 80086be:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80086c2:	4322      	orrs	r2, r4
 80086c4:	e7e1      	b.n	800868a <__b2d+0x4a>
 80086c6:	ea44 0107 	orr.w	r1, r4, r7
 80086ca:	e7de      	b.n	800868a <__b2d+0x4a>
 80086cc:	3ff00000 	.word	0x3ff00000

080086d0 <__d2b>:
 80086d0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80086d4:	2101      	movs	r1, #1
 80086d6:	4690      	mov	r8, r2
 80086d8:	4699      	mov	r9, r3
 80086da:	9e08      	ldr	r6, [sp, #32]
 80086dc:	f7ff fc1e 	bl	8007f1c <_Balloc>
 80086e0:	4604      	mov	r4, r0
 80086e2:	b930      	cbnz	r0, 80086f2 <__d2b+0x22>
 80086e4:	4602      	mov	r2, r0
 80086e6:	f240 310f 	movw	r1, #783	@ 0x30f
 80086ea:	4b23      	ldr	r3, [pc, #140]	@ (8008778 <__d2b+0xa8>)
 80086ec:	4823      	ldr	r0, [pc, #140]	@ (800877c <__d2b+0xac>)
 80086ee:	f001 f961 	bl	80099b4 <__assert_func>
 80086f2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80086f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086fa:	b10d      	cbz	r5, 8008700 <__d2b+0x30>
 80086fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008700:	9301      	str	r3, [sp, #4]
 8008702:	f1b8 0300 	subs.w	r3, r8, #0
 8008706:	d024      	beq.n	8008752 <__d2b+0x82>
 8008708:	4668      	mov	r0, sp
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	f7ff fd17 	bl	800813e <__lo0bits>
 8008710:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008714:	b1d8      	cbz	r0, 800874e <__d2b+0x7e>
 8008716:	f1c0 0320 	rsb	r3, r0, #32
 800871a:	fa02 f303 	lsl.w	r3, r2, r3
 800871e:	430b      	orrs	r3, r1
 8008720:	40c2      	lsrs	r2, r0
 8008722:	6163      	str	r3, [r4, #20]
 8008724:	9201      	str	r2, [sp, #4]
 8008726:	9b01      	ldr	r3, [sp, #4]
 8008728:	2b00      	cmp	r3, #0
 800872a:	bf0c      	ite	eq
 800872c:	2201      	moveq	r2, #1
 800872e:	2202      	movne	r2, #2
 8008730:	61a3      	str	r3, [r4, #24]
 8008732:	6122      	str	r2, [r4, #16]
 8008734:	b1ad      	cbz	r5, 8008762 <__d2b+0x92>
 8008736:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800873a:	4405      	add	r5, r0
 800873c:	6035      	str	r5, [r6, #0]
 800873e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008744:	6018      	str	r0, [r3, #0]
 8008746:	4620      	mov	r0, r4
 8008748:	b002      	add	sp, #8
 800874a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800874e:	6161      	str	r1, [r4, #20]
 8008750:	e7e9      	b.n	8008726 <__d2b+0x56>
 8008752:	a801      	add	r0, sp, #4
 8008754:	f7ff fcf3 	bl	800813e <__lo0bits>
 8008758:	9b01      	ldr	r3, [sp, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	6163      	str	r3, [r4, #20]
 800875e:	3020      	adds	r0, #32
 8008760:	e7e7      	b.n	8008732 <__d2b+0x62>
 8008762:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008766:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800876a:	6030      	str	r0, [r6, #0]
 800876c:	6918      	ldr	r0, [r3, #16]
 800876e:	f7ff fcc7 	bl	8008100 <__hi0bits>
 8008772:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008776:	e7e4      	b.n	8008742 <__d2b+0x72>
 8008778:	0800d62f 	.word	0x0800d62f
 800877c:	0800d640 	.word	0x0800d640

08008780 <__ratio>:
 8008780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008784:	b085      	sub	sp, #20
 8008786:	e9cd 1000 	strd	r1, r0, [sp]
 800878a:	a902      	add	r1, sp, #8
 800878c:	f7ff ff58 	bl	8008640 <__b2d>
 8008790:	468b      	mov	fp, r1
 8008792:	4606      	mov	r6, r0
 8008794:	460f      	mov	r7, r1
 8008796:	9800      	ldr	r0, [sp, #0]
 8008798:	a903      	add	r1, sp, #12
 800879a:	f7ff ff51 	bl	8008640 <__b2d>
 800879e:	460d      	mov	r5, r1
 80087a0:	9b01      	ldr	r3, [sp, #4]
 80087a2:	4689      	mov	r9, r1
 80087a4:	6919      	ldr	r1, [r3, #16]
 80087a6:	9b00      	ldr	r3, [sp, #0]
 80087a8:	4604      	mov	r4, r0
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	4630      	mov	r0, r6
 80087ae:	1ac9      	subs	r1, r1, r3
 80087b0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80087b4:	1a9b      	subs	r3, r3, r2
 80087b6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	bfcd      	iteet	gt
 80087be:	463a      	movgt	r2, r7
 80087c0:	462a      	movle	r2, r5
 80087c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80087c6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80087ca:	bfd8      	it	le
 80087cc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80087d0:	464b      	mov	r3, r9
 80087d2:	4622      	mov	r2, r4
 80087d4:	4659      	mov	r1, fp
 80087d6:	f7f7 ffa9 	bl	800072c <__aeabi_ddiv>
 80087da:	b005      	add	sp, #20
 80087dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087e0 <__copybits>:
 80087e0:	3901      	subs	r1, #1
 80087e2:	b570      	push	{r4, r5, r6, lr}
 80087e4:	1149      	asrs	r1, r1, #5
 80087e6:	6914      	ldr	r4, [r2, #16]
 80087e8:	3101      	adds	r1, #1
 80087ea:	f102 0314 	add.w	r3, r2, #20
 80087ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80087f2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80087f6:	1f05      	subs	r5, r0, #4
 80087f8:	42a3      	cmp	r3, r4
 80087fa:	d30c      	bcc.n	8008816 <__copybits+0x36>
 80087fc:	1aa3      	subs	r3, r4, r2
 80087fe:	3b11      	subs	r3, #17
 8008800:	f023 0303 	bic.w	r3, r3, #3
 8008804:	3211      	adds	r2, #17
 8008806:	42a2      	cmp	r2, r4
 8008808:	bf88      	it	hi
 800880a:	2300      	movhi	r3, #0
 800880c:	4418      	add	r0, r3
 800880e:	2300      	movs	r3, #0
 8008810:	4288      	cmp	r0, r1
 8008812:	d305      	bcc.n	8008820 <__copybits+0x40>
 8008814:	bd70      	pop	{r4, r5, r6, pc}
 8008816:	f853 6b04 	ldr.w	r6, [r3], #4
 800881a:	f845 6f04 	str.w	r6, [r5, #4]!
 800881e:	e7eb      	b.n	80087f8 <__copybits+0x18>
 8008820:	f840 3b04 	str.w	r3, [r0], #4
 8008824:	e7f4      	b.n	8008810 <__copybits+0x30>

08008826 <__any_on>:
 8008826:	f100 0214 	add.w	r2, r0, #20
 800882a:	6900      	ldr	r0, [r0, #16]
 800882c:	114b      	asrs	r3, r1, #5
 800882e:	4298      	cmp	r0, r3
 8008830:	b510      	push	{r4, lr}
 8008832:	db11      	blt.n	8008858 <__any_on+0x32>
 8008834:	dd0a      	ble.n	800884c <__any_on+0x26>
 8008836:	f011 011f 	ands.w	r1, r1, #31
 800883a:	d007      	beq.n	800884c <__any_on+0x26>
 800883c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008840:	fa24 f001 	lsr.w	r0, r4, r1
 8008844:	fa00 f101 	lsl.w	r1, r0, r1
 8008848:	428c      	cmp	r4, r1
 800884a:	d10b      	bne.n	8008864 <__any_on+0x3e>
 800884c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008850:	4293      	cmp	r3, r2
 8008852:	d803      	bhi.n	800885c <__any_on+0x36>
 8008854:	2000      	movs	r0, #0
 8008856:	bd10      	pop	{r4, pc}
 8008858:	4603      	mov	r3, r0
 800885a:	e7f7      	b.n	800884c <__any_on+0x26>
 800885c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008860:	2900      	cmp	r1, #0
 8008862:	d0f5      	beq.n	8008850 <__any_on+0x2a>
 8008864:	2001      	movs	r0, #1
 8008866:	e7f6      	b.n	8008856 <__any_on+0x30>

08008868 <sulp>:
 8008868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800886c:	460f      	mov	r7, r1
 800886e:	4690      	mov	r8, r2
 8008870:	f7ff fec6 	bl	8008600 <__ulp>
 8008874:	4604      	mov	r4, r0
 8008876:	460d      	mov	r5, r1
 8008878:	f1b8 0f00 	cmp.w	r8, #0
 800887c:	d011      	beq.n	80088a2 <sulp+0x3a>
 800887e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008882:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008886:	2b00      	cmp	r3, #0
 8008888:	dd0b      	ble.n	80088a2 <sulp+0x3a>
 800888a:	2400      	movs	r4, #0
 800888c:	051b      	lsls	r3, r3, #20
 800888e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008892:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008896:	4622      	mov	r2, r4
 8008898:	462b      	mov	r3, r5
 800889a:	f7f7 fe1d 	bl	80004d8 <__aeabi_dmul>
 800889e:	4604      	mov	r4, r0
 80088a0:	460d      	mov	r5, r1
 80088a2:	4620      	mov	r0, r4
 80088a4:	4629      	mov	r1, r5
 80088a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088aa:	0000      	movs	r0, r0
 80088ac:	0000      	movs	r0, r0
	...

080088b0 <_strtod_l>:
 80088b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b4:	b09f      	sub	sp, #124	@ 0x7c
 80088b6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80088b8:	2200      	movs	r2, #0
 80088ba:	460c      	mov	r4, r1
 80088bc:	921a      	str	r2, [sp, #104]	@ 0x68
 80088be:	f04f 0a00 	mov.w	sl, #0
 80088c2:	f04f 0b00 	mov.w	fp, #0
 80088c6:	460a      	mov	r2, r1
 80088c8:	9005      	str	r0, [sp, #20]
 80088ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80088cc:	7811      	ldrb	r1, [r2, #0]
 80088ce:	292b      	cmp	r1, #43	@ 0x2b
 80088d0:	d048      	beq.n	8008964 <_strtod_l+0xb4>
 80088d2:	d836      	bhi.n	8008942 <_strtod_l+0x92>
 80088d4:	290d      	cmp	r1, #13
 80088d6:	d830      	bhi.n	800893a <_strtod_l+0x8a>
 80088d8:	2908      	cmp	r1, #8
 80088da:	d830      	bhi.n	800893e <_strtod_l+0x8e>
 80088dc:	2900      	cmp	r1, #0
 80088de:	d039      	beq.n	8008954 <_strtod_l+0xa4>
 80088e0:	2200      	movs	r2, #0
 80088e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80088e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80088e6:	782a      	ldrb	r2, [r5, #0]
 80088e8:	2a30      	cmp	r2, #48	@ 0x30
 80088ea:	f040 80b1 	bne.w	8008a50 <_strtod_l+0x1a0>
 80088ee:	786a      	ldrb	r2, [r5, #1]
 80088f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80088f4:	2a58      	cmp	r2, #88	@ 0x58
 80088f6:	d16c      	bne.n	80089d2 <_strtod_l+0x122>
 80088f8:	9302      	str	r3, [sp, #8]
 80088fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088fc:	4a8e      	ldr	r2, [pc, #568]	@ (8008b38 <_strtod_l+0x288>)
 80088fe:	9301      	str	r3, [sp, #4]
 8008900:	ab1a      	add	r3, sp, #104	@ 0x68
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	9805      	ldr	r0, [sp, #20]
 8008906:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008908:	a919      	add	r1, sp, #100	@ 0x64
 800890a:	f001 f8ed 	bl	8009ae8 <__gethex>
 800890e:	f010 060f 	ands.w	r6, r0, #15
 8008912:	4604      	mov	r4, r0
 8008914:	d005      	beq.n	8008922 <_strtod_l+0x72>
 8008916:	2e06      	cmp	r6, #6
 8008918:	d126      	bne.n	8008968 <_strtod_l+0xb8>
 800891a:	2300      	movs	r3, #0
 800891c:	3501      	adds	r5, #1
 800891e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008920:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008922:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008924:	2b00      	cmp	r3, #0
 8008926:	f040 8584 	bne.w	8009432 <_strtod_l+0xb82>
 800892a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800892c:	b1bb      	cbz	r3, 800895e <_strtod_l+0xae>
 800892e:	4650      	mov	r0, sl
 8008930:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008934:	b01f      	add	sp, #124	@ 0x7c
 8008936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800893a:	2920      	cmp	r1, #32
 800893c:	d1d0      	bne.n	80088e0 <_strtod_l+0x30>
 800893e:	3201      	adds	r2, #1
 8008940:	e7c3      	b.n	80088ca <_strtod_l+0x1a>
 8008942:	292d      	cmp	r1, #45	@ 0x2d
 8008944:	d1cc      	bne.n	80088e0 <_strtod_l+0x30>
 8008946:	2101      	movs	r1, #1
 8008948:	910b      	str	r1, [sp, #44]	@ 0x2c
 800894a:	1c51      	adds	r1, r2, #1
 800894c:	9119      	str	r1, [sp, #100]	@ 0x64
 800894e:	7852      	ldrb	r2, [r2, #1]
 8008950:	2a00      	cmp	r2, #0
 8008952:	d1c7      	bne.n	80088e4 <_strtod_l+0x34>
 8008954:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008956:	9419      	str	r4, [sp, #100]	@ 0x64
 8008958:	2b00      	cmp	r3, #0
 800895a:	f040 8568 	bne.w	800942e <_strtod_l+0xb7e>
 800895e:	4650      	mov	r0, sl
 8008960:	4659      	mov	r1, fp
 8008962:	e7e7      	b.n	8008934 <_strtod_l+0x84>
 8008964:	2100      	movs	r1, #0
 8008966:	e7ef      	b.n	8008948 <_strtod_l+0x98>
 8008968:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800896a:	b13a      	cbz	r2, 800897c <_strtod_l+0xcc>
 800896c:	2135      	movs	r1, #53	@ 0x35
 800896e:	a81c      	add	r0, sp, #112	@ 0x70
 8008970:	f7ff ff36 	bl	80087e0 <__copybits>
 8008974:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008976:	9805      	ldr	r0, [sp, #20]
 8008978:	f7ff fb10 	bl	8007f9c <_Bfree>
 800897c:	3e01      	subs	r6, #1
 800897e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008980:	2e04      	cmp	r6, #4
 8008982:	d806      	bhi.n	8008992 <_strtod_l+0xe2>
 8008984:	e8df f006 	tbb	[pc, r6]
 8008988:	201d0314 	.word	0x201d0314
 800898c:	14          	.byte	0x14
 800898d:	00          	.byte	0x00
 800898e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008992:	05e1      	lsls	r1, r4, #23
 8008994:	bf48      	it	mi
 8008996:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800899a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800899e:	0d1b      	lsrs	r3, r3, #20
 80089a0:	051b      	lsls	r3, r3, #20
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1bd      	bne.n	8008922 <_strtod_l+0x72>
 80089a6:	f7fe fb1d 	bl	8006fe4 <__errno>
 80089aa:	2322      	movs	r3, #34	@ 0x22
 80089ac:	6003      	str	r3, [r0, #0]
 80089ae:	e7b8      	b.n	8008922 <_strtod_l+0x72>
 80089b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80089b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80089b8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80089bc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80089c0:	e7e7      	b.n	8008992 <_strtod_l+0xe2>
 80089c2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8008b3c <_strtod_l+0x28c>
 80089c6:	e7e4      	b.n	8008992 <_strtod_l+0xe2>
 80089c8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80089cc:	f04f 3aff 	mov.w	sl, #4294967295
 80089d0:	e7df      	b.n	8008992 <_strtod_l+0xe2>
 80089d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80089d4:	1c5a      	adds	r2, r3, #1
 80089d6:	9219      	str	r2, [sp, #100]	@ 0x64
 80089d8:	785b      	ldrb	r3, [r3, #1]
 80089da:	2b30      	cmp	r3, #48	@ 0x30
 80089dc:	d0f9      	beq.n	80089d2 <_strtod_l+0x122>
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d09f      	beq.n	8008922 <_strtod_l+0x72>
 80089e2:	2301      	movs	r3, #1
 80089e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80089e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80089e8:	220a      	movs	r2, #10
 80089ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80089ec:	2300      	movs	r3, #0
 80089ee:	461f      	mov	r7, r3
 80089f0:	9308      	str	r3, [sp, #32]
 80089f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80089f4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80089f6:	7805      	ldrb	r5, [r0, #0]
 80089f8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80089fc:	b2d9      	uxtb	r1, r3
 80089fe:	2909      	cmp	r1, #9
 8008a00:	d928      	bls.n	8008a54 <_strtod_l+0x1a4>
 8008a02:	2201      	movs	r2, #1
 8008a04:	494e      	ldr	r1, [pc, #312]	@ (8008b40 <_strtod_l+0x290>)
 8008a06:	f000 ffad 	bl	8009964 <strncmp>
 8008a0a:	2800      	cmp	r0, #0
 8008a0c:	d032      	beq.n	8008a74 <_strtod_l+0x1c4>
 8008a0e:	2000      	movs	r0, #0
 8008a10:	462a      	mov	r2, r5
 8008a12:	4681      	mov	r9, r0
 8008a14:	463d      	mov	r5, r7
 8008a16:	4603      	mov	r3, r0
 8008a18:	2a65      	cmp	r2, #101	@ 0x65
 8008a1a:	d001      	beq.n	8008a20 <_strtod_l+0x170>
 8008a1c:	2a45      	cmp	r2, #69	@ 0x45
 8008a1e:	d114      	bne.n	8008a4a <_strtod_l+0x19a>
 8008a20:	b91d      	cbnz	r5, 8008a2a <_strtod_l+0x17a>
 8008a22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a24:	4302      	orrs	r2, r0
 8008a26:	d095      	beq.n	8008954 <_strtod_l+0xa4>
 8008a28:	2500      	movs	r5, #0
 8008a2a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008a2c:	1c62      	adds	r2, r4, #1
 8008a2e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a30:	7862      	ldrb	r2, [r4, #1]
 8008a32:	2a2b      	cmp	r2, #43	@ 0x2b
 8008a34:	d077      	beq.n	8008b26 <_strtod_l+0x276>
 8008a36:	2a2d      	cmp	r2, #45	@ 0x2d
 8008a38:	d07b      	beq.n	8008b32 <_strtod_l+0x282>
 8008a3a:	f04f 0c00 	mov.w	ip, #0
 8008a3e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008a42:	2909      	cmp	r1, #9
 8008a44:	f240 8082 	bls.w	8008b4c <_strtod_l+0x29c>
 8008a48:	9419      	str	r4, [sp, #100]	@ 0x64
 8008a4a:	f04f 0800 	mov.w	r8, #0
 8008a4e:	e0a2      	b.n	8008b96 <_strtod_l+0x2e6>
 8008a50:	2300      	movs	r3, #0
 8008a52:	e7c7      	b.n	80089e4 <_strtod_l+0x134>
 8008a54:	2f08      	cmp	r7, #8
 8008a56:	bfd5      	itete	le
 8008a58:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008a5a:	9908      	ldrgt	r1, [sp, #32]
 8008a5c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008a60:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008a64:	f100 0001 	add.w	r0, r0, #1
 8008a68:	bfd4      	ite	le
 8008a6a:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008a6c:	9308      	strgt	r3, [sp, #32]
 8008a6e:	3701      	adds	r7, #1
 8008a70:	9019      	str	r0, [sp, #100]	@ 0x64
 8008a72:	e7bf      	b.n	80089f4 <_strtod_l+0x144>
 8008a74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a76:	1c5a      	adds	r2, r3, #1
 8008a78:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a7a:	785a      	ldrb	r2, [r3, #1]
 8008a7c:	b37f      	cbz	r7, 8008ade <_strtod_l+0x22e>
 8008a7e:	4681      	mov	r9, r0
 8008a80:	463d      	mov	r5, r7
 8008a82:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008a86:	2b09      	cmp	r3, #9
 8008a88:	d912      	bls.n	8008ab0 <_strtod_l+0x200>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e7c4      	b.n	8008a18 <_strtod_l+0x168>
 8008a8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a90:	3001      	adds	r0, #1
 8008a92:	1c5a      	adds	r2, r3, #1
 8008a94:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a96:	785a      	ldrb	r2, [r3, #1]
 8008a98:	2a30      	cmp	r2, #48	@ 0x30
 8008a9a:	d0f8      	beq.n	8008a8e <_strtod_l+0x1de>
 8008a9c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008aa0:	2b08      	cmp	r3, #8
 8008aa2:	f200 84cb 	bhi.w	800943c <_strtod_l+0xb8c>
 8008aa6:	4681      	mov	r9, r0
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	4605      	mov	r5, r0
 8008aac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008aae:	930c      	str	r3, [sp, #48]	@ 0x30
 8008ab0:	3a30      	subs	r2, #48	@ 0x30
 8008ab2:	f100 0301 	add.w	r3, r0, #1
 8008ab6:	d02a      	beq.n	8008b0e <_strtod_l+0x25e>
 8008ab8:	4499      	add	r9, r3
 8008aba:	210a      	movs	r1, #10
 8008abc:	462b      	mov	r3, r5
 8008abe:	eb00 0c05 	add.w	ip, r0, r5
 8008ac2:	4563      	cmp	r3, ip
 8008ac4:	d10d      	bne.n	8008ae2 <_strtod_l+0x232>
 8008ac6:	1c69      	adds	r1, r5, #1
 8008ac8:	4401      	add	r1, r0
 8008aca:	4428      	add	r0, r5
 8008acc:	2808      	cmp	r0, #8
 8008ace:	dc16      	bgt.n	8008afe <_strtod_l+0x24e>
 8008ad0:	230a      	movs	r3, #10
 8008ad2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008ad4:	fb03 2300 	mla	r3, r3, r0, r2
 8008ad8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ada:	2300      	movs	r3, #0
 8008adc:	e018      	b.n	8008b10 <_strtod_l+0x260>
 8008ade:	4638      	mov	r0, r7
 8008ae0:	e7da      	b.n	8008a98 <_strtod_l+0x1e8>
 8008ae2:	2b08      	cmp	r3, #8
 8008ae4:	f103 0301 	add.w	r3, r3, #1
 8008ae8:	dc03      	bgt.n	8008af2 <_strtod_l+0x242>
 8008aea:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008aec:	434e      	muls	r6, r1
 8008aee:	960a      	str	r6, [sp, #40]	@ 0x28
 8008af0:	e7e7      	b.n	8008ac2 <_strtod_l+0x212>
 8008af2:	2b10      	cmp	r3, #16
 8008af4:	bfde      	ittt	le
 8008af6:	9e08      	ldrle	r6, [sp, #32]
 8008af8:	434e      	mulle	r6, r1
 8008afa:	9608      	strle	r6, [sp, #32]
 8008afc:	e7e1      	b.n	8008ac2 <_strtod_l+0x212>
 8008afe:	280f      	cmp	r0, #15
 8008b00:	dceb      	bgt.n	8008ada <_strtod_l+0x22a>
 8008b02:	230a      	movs	r3, #10
 8008b04:	9808      	ldr	r0, [sp, #32]
 8008b06:	fb03 2300 	mla	r3, r3, r0, r2
 8008b0a:	9308      	str	r3, [sp, #32]
 8008b0c:	e7e5      	b.n	8008ada <_strtod_l+0x22a>
 8008b0e:	4629      	mov	r1, r5
 8008b10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b12:	460d      	mov	r5, r1
 8008b14:	1c50      	adds	r0, r2, #1
 8008b16:	9019      	str	r0, [sp, #100]	@ 0x64
 8008b18:	7852      	ldrb	r2, [r2, #1]
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	e7b1      	b.n	8008a82 <_strtod_l+0x1d2>
 8008b1e:	f04f 0900 	mov.w	r9, #0
 8008b22:	2301      	movs	r3, #1
 8008b24:	e77d      	b.n	8008a22 <_strtod_l+0x172>
 8008b26:	f04f 0c00 	mov.w	ip, #0
 8008b2a:	1ca2      	adds	r2, r4, #2
 8008b2c:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b2e:	78a2      	ldrb	r2, [r4, #2]
 8008b30:	e785      	b.n	8008a3e <_strtod_l+0x18e>
 8008b32:	f04f 0c01 	mov.w	ip, #1
 8008b36:	e7f8      	b.n	8008b2a <_strtod_l+0x27a>
 8008b38:	0800d7b0 	.word	0x0800d7b0
 8008b3c:	7ff00000 	.word	0x7ff00000
 8008b40:	0800d798 	.word	0x0800d798
 8008b44:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b46:	1c51      	adds	r1, r2, #1
 8008b48:	9119      	str	r1, [sp, #100]	@ 0x64
 8008b4a:	7852      	ldrb	r2, [r2, #1]
 8008b4c:	2a30      	cmp	r2, #48	@ 0x30
 8008b4e:	d0f9      	beq.n	8008b44 <_strtod_l+0x294>
 8008b50:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008b54:	2908      	cmp	r1, #8
 8008b56:	f63f af78 	bhi.w	8008a4a <_strtod_l+0x19a>
 8008b5a:	f04f 080a 	mov.w	r8, #10
 8008b5e:	3a30      	subs	r2, #48	@ 0x30
 8008b60:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b64:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008b66:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b68:	1c56      	adds	r6, r2, #1
 8008b6a:	9619      	str	r6, [sp, #100]	@ 0x64
 8008b6c:	7852      	ldrb	r2, [r2, #1]
 8008b6e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008b72:	f1be 0f09 	cmp.w	lr, #9
 8008b76:	d939      	bls.n	8008bec <_strtod_l+0x33c>
 8008b78:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008b7a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008b7e:	1a76      	subs	r6, r6, r1
 8008b80:	2e08      	cmp	r6, #8
 8008b82:	dc03      	bgt.n	8008b8c <_strtod_l+0x2dc>
 8008b84:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008b86:	4588      	cmp	r8, r1
 8008b88:	bfa8      	it	ge
 8008b8a:	4688      	movge	r8, r1
 8008b8c:	f1bc 0f00 	cmp.w	ip, #0
 8008b90:	d001      	beq.n	8008b96 <_strtod_l+0x2e6>
 8008b92:	f1c8 0800 	rsb	r8, r8, #0
 8008b96:	2d00      	cmp	r5, #0
 8008b98:	d14e      	bne.n	8008c38 <_strtod_l+0x388>
 8008b9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008b9c:	4308      	orrs	r0, r1
 8008b9e:	f47f aec0 	bne.w	8008922 <_strtod_l+0x72>
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f47f aed6 	bne.w	8008954 <_strtod_l+0xa4>
 8008ba8:	2a69      	cmp	r2, #105	@ 0x69
 8008baa:	d028      	beq.n	8008bfe <_strtod_l+0x34e>
 8008bac:	dc25      	bgt.n	8008bfa <_strtod_l+0x34a>
 8008bae:	2a49      	cmp	r2, #73	@ 0x49
 8008bb0:	d025      	beq.n	8008bfe <_strtod_l+0x34e>
 8008bb2:	2a4e      	cmp	r2, #78	@ 0x4e
 8008bb4:	f47f aece 	bne.w	8008954 <_strtod_l+0xa4>
 8008bb8:	499a      	ldr	r1, [pc, #616]	@ (8008e24 <_strtod_l+0x574>)
 8008bba:	a819      	add	r0, sp, #100	@ 0x64
 8008bbc:	f001 f9b6 	bl	8009f2c <__match>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	f43f aec7 	beq.w	8008954 <_strtod_l+0xa4>
 8008bc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	2b28      	cmp	r3, #40	@ 0x28
 8008bcc:	d12e      	bne.n	8008c2c <_strtod_l+0x37c>
 8008bce:	4996      	ldr	r1, [pc, #600]	@ (8008e28 <_strtod_l+0x578>)
 8008bd0:	aa1c      	add	r2, sp, #112	@ 0x70
 8008bd2:	a819      	add	r0, sp, #100	@ 0x64
 8008bd4:	f001 f9be 	bl	8009f54 <__hexnan>
 8008bd8:	2805      	cmp	r0, #5
 8008bda:	d127      	bne.n	8008c2c <_strtod_l+0x37c>
 8008bdc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008bde:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008be2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008be6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008bea:	e69a      	b.n	8008922 <_strtod_l+0x72>
 8008bec:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008bee:	fb08 2101 	mla	r1, r8, r1, r2
 8008bf2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008bf6:	920e      	str	r2, [sp, #56]	@ 0x38
 8008bf8:	e7b5      	b.n	8008b66 <_strtod_l+0x2b6>
 8008bfa:	2a6e      	cmp	r2, #110	@ 0x6e
 8008bfc:	e7da      	b.n	8008bb4 <_strtod_l+0x304>
 8008bfe:	498b      	ldr	r1, [pc, #556]	@ (8008e2c <_strtod_l+0x57c>)
 8008c00:	a819      	add	r0, sp, #100	@ 0x64
 8008c02:	f001 f993 	bl	8009f2c <__match>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	f43f aea4 	beq.w	8008954 <_strtod_l+0xa4>
 8008c0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c0e:	4988      	ldr	r1, [pc, #544]	@ (8008e30 <_strtod_l+0x580>)
 8008c10:	3b01      	subs	r3, #1
 8008c12:	a819      	add	r0, sp, #100	@ 0x64
 8008c14:	9319      	str	r3, [sp, #100]	@ 0x64
 8008c16:	f001 f989 	bl	8009f2c <__match>
 8008c1a:	b910      	cbnz	r0, 8008c22 <_strtod_l+0x372>
 8008c1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c1e:	3301      	adds	r3, #1
 8008c20:	9319      	str	r3, [sp, #100]	@ 0x64
 8008c22:	f04f 0a00 	mov.w	sl, #0
 8008c26:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8008e34 <_strtod_l+0x584>
 8008c2a:	e67a      	b.n	8008922 <_strtod_l+0x72>
 8008c2c:	4882      	ldr	r0, [pc, #520]	@ (8008e38 <_strtod_l+0x588>)
 8008c2e:	f000 febb 	bl	80099a8 <nan>
 8008c32:	4682      	mov	sl, r0
 8008c34:	468b      	mov	fp, r1
 8008c36:	e674      	b.n	8008922 <_strtod_l+0x72>
 8008c38:	eba8 0309 	sub.w	r3, r8, r9
 8008c3c:	2f00      	cmp	r7, #0
 8008c3e:	bf08      	it	eq
 8008c40:	462f      	moveq	r7, r5
 8008c42:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008c44:	2d10      	cmp	r5, #16
 8008c46:	462c      	mov	r4, r5
 8008c48:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c4a:	bfa8      	it	ge
 8008c4c:	2410      	movge	r4, #16
 8008c4e:	f7f7 fbc9 	bl	80003e4 <__aeabi_ui2d>
 8008c52:	2d09      	cmp	r5, #9
 8008c54:	4682      	mov	sl, r0
 8008c56:	468b      	mov	fp, r1
 8008c58:	dc11      	bgt.n	8008c7e <_strtod_l+0x3ce>
 8008c5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f43f ae60 	beq.w	8008922 <_strtod_l+0x72>
 8008c62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c64:	dd76      	ble.n	8008d54 <_strtod_l+0x4a4>
 8008c66:	2b16      	cmp	r3, #22
 8008c68:	dc5d      	bgt.n	8008d26 <_strtod_l+0x476>
 8008c6a:	4974      	ldr	r1, [pc, #464]	@ (8008e3c <_strtod_l+0x58c>)
 8008c6c:	4652      	mov	r2, sl
 8008c6e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008c72:	465b      	mov	r3, fp
 8008c74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c78:	f7f7 fc2e 	bl	80004d8 <__aeabi_dmul>
 8008c7c:	e7d9      	b.n	8008c32 <_strtod_l+0x382>
 8008c7e:	4b6f      	ldr	r3, [pc, #444]	@ (8008e3c <_strtod_l+0x58c>)
 8008c80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c84:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008c88:	f7f7 fc26 	bl	80004d8 <__aeabi_dmul>
 8008c8c:	4682      	mov	sl, r0
 8008c8e:	9808      	ldr	r0, [sp, #32]
 8008c90:	468b      	mov	fp, r1
 8008c92:	f7f7 fba7 	bl	80003e4 <__aeabi_ui2d>
 8008c96:	4602      	mov	r2, r0
 8008c98:	460b      	mov	r3, r1
 8008c9a:	4650      	mov	r0, sl
 8008c9c:	4659      	mov	r1, fp
 8008c9e:	f7f7 fa65 	bl	800016c <__adddf3>
 8008ca2:	2d0f      	cmp	r5, #15
 8008ca4:	4682      	mov	sl, r0
 8008ca6:	468b      	mov	fp, r1
 8008ca8:	ddd7      	ble.n	8008c5a <_strtod_l+0x3aa>
 8008caa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cac:	1b2c      	subs	r4, r5, r4
 8008cae:	441c      	add	r4, r3
 8008cb0:	2c00      	cmp	r4, #0
 8008cb2:	f340 8096 	ble.w	8008de2 <_strtod_l+0x532>
 8008cb6:	f014 030f 	ands.w	r3, r4, #15
 8008cba:	d00a      	beq.n	8008cd2 <_strtod_l+0x422>
 8008cbc:	495f      	ldr	r1, [pc, #380]	@ (8008e3c <_strtod_l+0x58c>)
 8008cbe:	4652      	mov	r2, sl
 8008cc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008cc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cc8:	465b      	mov	r3, fp
 8008cca:	f7f7 fc05 	bl	80004d8 <__aeabi_dmul>
 8008cce:	4682      	mov	sl, r0
 8008cd0:	468b      	mov	fp, r1
 8008cd2:	f034 040f 	bics.w	r4, r4, #15
 8008cd6:	d073      	beq.n	8008dc0 <_strtod_l+0x510>
 8008cd8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008cdc:	dd48      	ble.n	8008d70 <_strtod_l+0x4c0>
 8008cde:	2400      	movs	r4, #0
 8008ce0:	46a0      	mov	r8, r4
 8008ce2:	46a1      	mov	r9, r4
 8008ce4:	940a      	str	r4, [sp, #40]	@ 0x28
 8008ce6:	2322      	movs	r3, #34	@ 0x22
 8008ce8:	f04f 0a00 	mov.w	sl, #0
 8008cec:	9a05      	ldr	r2, [sp, #20]
 8008cee:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8008e34 <_strtod_l+0x584>
 8008cf2:	6013      	str	r3, [r2, #0]
 8008cf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f43f ae13 	beq.w	8008922 <_strtod_l+0x72>
 8008cfc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008cfe:	9805      	ldr	r0, [sp, #20]
 8008d00:	f7ff f94c 	bl	8007f9c <_Bfree>
 8008d04:	4649      	mov	r1, r9
 8008d06:	9805      	ldr	r0, [sp, #20]
 8008d08:	f7ff f948 	bl	8007f9c <_Bfree>
 8008d0c:	4641      	mov	r1, r8
 8008d0e:	9805      	ldr	r0, [sp, #20]
 8008d10:	f7ff f944 	bl	8007f9c <_Bfree>
 8008d14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d16:	9805      	ldr	r0, [sp, #20]
 8008d18:	f7ff f940 	bl	8007f9c <_Bfree>
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	9805      	ldr	r0, [sp, #20]
 8008d20:	f7ff f93c 	bl	8007f9c <_Bfree>
 8008d24:	e5fd      	b.n	8008922 <_strtod_l+0x72>
 8008d26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d28:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	dbbc      	blt.n	8008caa <_strtod_l+0x3fa>
 8008d30:	4c42      	ldr	r4, [pc, #264]	@ (8008e3c <_strtod_l+0x58c>)
 8008d32:	f1c5 050f 	rsb	r5, r5, #15
 8008d36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008d3a:	4652      	mov	r2, sl
 8008d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d40:	465b      	mov	r3, fp
 8008d42:	f7f7 fbc9 	bl	80004d8 <__aeabi_dmul>
 8008d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d48:	1b5d      	subs	r5, r3, r5
 8008d4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008d4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008d52:	e791      	b.n	8008c78 <_strtod_l+0x3c8>
 8008d54:	3316      	adds	r3, #22
 8008d56:	dba8      	blt.n	8008caa <_strtod_l+0x3fa>
 8008d58:	4b38      	ldr	r3, [pc, #224]	@ (8008e3c <_strtod_l+0x58c>)
 8008d5a:	eba9 0808 	sub.w	r8, r9, r8
 8008d5e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008d62:	4650      	mov	r0, sl
 8008d64:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008d68:	4659      	mov	r1, fp
 8008d6a:	f7f7 fcdf 	bl	800072c <__aeabi_ddiv>
 8008d6e:	e760      	b.n	8008c32 <_strtod_l+0x382>
 8008d70:	4b33      	ldr	r3, [pc, #204]	@ (8008e40 <_strtod_l+0x590>)
 8008d72:	4650      	mov	r0, sl
 8008d74:	9308      	str	r3, [sp, #32]
 8008d76:	2300      	movs	r3, #0
 8008d78:	4659      	mov	r1, fp
 8008d7a:	461e      	mov	r6, r3
 8008d7c:	1124      	asrs	r4, r4, #4
 8008d7e:	2c01      	cmp	r4, #1
 8008d80:	dc21      	bgt.n	8008dc6 <_strtod_l+0x516>
 8008d82:	b10b      	cbz	r3, 8008d88 <_strtod_l+0x4d8>
 8008d84:	4682      	mov	sl, r0
 8008d86:	468b      	mov	fp, r1
 8008d88:	492d      	ldr	r1, [pc, #180]	@ (8008e40 <_strtod_l+0x590>)
 8008d8a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008d8e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008d92:	4652      	mov	r2, sl
 8008d94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d98:	465b      	mov	r3, fp
 8008d9a:	f7f7 fb9d 	bl	80004d8 <__aeabi_dmul>
 8008d9e:	4b25      	ldr	r3, [pc, #148]	@ (8008e34 <_strtod_l+0x584>)
 8008da0:	460a      	mov	r2, r1
 8008da2:	400b      	ands	r3, r1
 8008da4:	4927      	ldr	r1, [pc, #156]	@ (8008e44 <_strtod_l+0x594>)
 8008da6:	4682      	mov	sl, r0
 8008da8:	428b      	cmp	r3, r1
 8008daa:	d898      	bhi.n	8008cde <_strtod_l+0x42e>
 8008dac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008db0:	428b      	cmp	r3, r1
 8008db2:	bf86      	itte	hi
 8008db4:	f04f 3aff 	movhi.w	sl, #4294967295
 8008db8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8008e48 <_strtod_l+0x598>
 8008dbc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	9308      	str	r3, [sp, #32]
 8008dc4:	e07a      	b.n	8008ebc <_strtod_l+0x60c>
 8008dc6:	07e2      	lsls	r2, r4, #31
 8008dc8:	d505      	bpl.n	8008dd6 <_strtod_l+0x526>
 8008dca:	9b08      	ldr	r3, [sp, #32]
 8008dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd0:	f7f7 fb82 	bl	80004d8 <__aeabi_dmul>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	9a08      	ldr	r2, [sp, #32]
 8008dd8:	3601      	adds	r6, #1
 8008dda:	3208      	adds	r2, #8
 8008ddc:	1064      	asrs	r4, r4, #1
 8008dde:	9208      	str	r2, [sp, #32]
 8008de0:	e7cd      	b.n	8008d7e <_strtod_l+0x4ce>
 8008de2:	d0ed      	beq.n	8008dc0 <_strtod_l+0x510>
 8008de4:	4264      	negs	r4, r4
 8008de6:	f014 020f 	ands.w	r2, r4, #15
 8008dea:	d00a      	beq.n	8008e02 <_strtod_l+0x552>
 8008dec:	4b13      	ldr	r3, [pc, #76]	@ (8008e3c <_strtod_l+0x58c>)
 8008dee:	4650      	mov	r0, sl
 8008df0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008df4:	4659      	mov	r1, fp
 8008df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfa:	f7f7 fc97 	bl	800072c <__aeabi_ddiv>
 8008dfe:	4682      	mov	sl, r0
 8008e00:	468b      	mov	fp, r1
 8008e02:	1124      	asrs	r4, r4, #4
 8008e04:	d0dc      	beq.n	8008dc0 <_strtod_l+0x510>
 8008e06:	2c1f      	cmp	r4, #31
 8008e08:	dd20      	ble.n	8008e4c <_strtod_l+0x59c>
 8008e0a:	2400      	movs	r4, #0
 8008e0c:	46a0      	mov	r8, r4
 8008e0e:	46a1      	mov	r9, r4
 8008e10:	940a      	str	r4, [sp, #40]	@ 0x28
 8008e12:	2322      	movs	r3, #34	@ 0x22
 8008e14:	9a05      	ldr	r2, [sp, #20]
 8008e16:	f04f 0a00 	mov.w	sl, #0
 8008e1a:	f04f 0b00 	mov.w	fp, #0
 8008e1e:	6013      	str	r3, [r2, #0]
 8008e20:	e768      	b.n	8008cf4 <_strtod_l+0x444>
 8008e22:	bf00      	nop
 8008e24:	0800d587 	.word	0x0800d587
 8008e28:	0800d79c 	.word	0x0800d79c
 8008e2c:	0800d57f 	.word	0x0800d57f
 8008e30:	0800d5b6 	.word	0x0800d5b6
 8008e34:	7ff00000 	.word	0x7ff00000
 8008e38:	0800d945 	.word	0x0800d945
 8008e3c:	0800d6d0 	.word	0x0800d6d0
 8008e40:	0800d6a8 	.word	0x0800d6a8
 8008e44:	7ca00000 	.word	0x7ca00000
 8008e48:	7fefffff 	.word	0x7fefffff
 8008e4c:	f014 0310 	ands.w	r3, r4, #16
 8008e50:	bf18      	it	ne
 8008e52:	236a      	movne	r3, #106	@ 0x6a
 8008e54:	4650      	mov	r0, sl
 8008e56:	9308      	str	r3, [sp, #32]
 8008e58:	4659      	mov	r1, fp
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	4ea9      	ldr	r6, [pc, #676]	@ (8009104 <_strtod_l+0x854>)
 8008e5e:	07e2      	lsls	r2, r4, #31
 8008e60:	d504      	bpl.n	8008e6c <_strtod_l+0x5bc>
 8008e62:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e66:	f7f7 fb37 	bl	80004d8 <__aeabi_dmul>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	1064      	asrs	r4, r4, #1
 8008e6e:	f106 0608 	add.w	r6, r6, #8
 8008e72:	d1f4      	bne.n	8008e5e <_strtod_l+0x5ae>
 8008e74:	b10b      	cbz	r3, 8008e7a <_strtod_l+0x5ca>
 8008e76:	4682      	mov	sl, r0
 8008e78:	468b      	mov	fp, r1
 8008e7a:	9b08      	ldr	r3, [sp, #32]
 8008e7c:	b1b3      	cbz	r3, 8008eac <_strtod_l+0x5fc>
 8008e7e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008e82:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	4659      	mov	r1, fp
 8008e8a:	dd0f      	ble.n	8008eac <_strtod_l+0x5fc>
 8008e8c:	2b1f      	cmp	r3, #31
 8008e8e:	dd57      	ble.n	8008f40 <_strtod_l+0x690>
 8008e90:	2b34      	cmp	r3, #52	@ 0x34
 8008e92:	bfd8      	it	le
 8008e94:	f04f 33ff 	movle.w	r3, #4294967295
 8008e98:	f04f 0a00 	mov.w	sl, #0
 8008e9c:	bfcf      	iteee	gt
 8008e9e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008ea2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008ea6:	4093      	lslle	r3, r2
 8008ea8:	ea03 0b01 	andle.w	fp, r3, r1
 8008eac:	2200      	movs	r2, #0
 8008eae:	2300      	movs	r3, #0
 8008eb0:	4650      	mov	r0, sl
 8008eb2:	4659      	mov	r1, fp
 8008eb4:	f7f7 fd78 	bl	80009a8 <__aeabi_dcmpeq>
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	d1a6      	bne.n	8008e0a <_strtod_l+0x55a>
 8008ebc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ebe:	463a      	mov	r2, r7
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008ec4:	462b      	mov	r3, r5
 8008ec6:	9805      	ldr	r0, [sp, #20]
 8008ec8:	f7ff f8d0 	bl	800806c <__s2b>
 8008ecc:	900a      	str	r0, [sp, #40]	@ 0x28
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	f43f af05 	beq.w	8008cde <_strtod_l+0x42e>
 8008ed4:	2400      	movs	r4, #0
 8008ed6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ed8:	eba9 0308 	sub.w	r3, r9, r8
 8008edc:	2a00      	cmp	r2, #0
 8008ede:	bfa8      	it	ge
 8008ee0:	2300      	movge	r3, #0
 8008ee2:	46a0      	mov	r8, r4
 8008ee4:	9312      	str	r3, [sp, #72]	@ 0x48
 8008ee6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008eea:	9316      	str	r3, [sp, #88]	@ 0x58
 8008eec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008eee:	9805      	ldr	r0, [sp, #20]
 8008ef0:	6859      	ldr	r1, [r3, #4]
 8008ef2:	f7ff f813 	bl	8007f1c <_Balloc>
 8008ef6:	4681      	mov	r9, r0
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	f43f aef4 	beq.w	8008ce6 <_strtod_l+0x436>
 8008efe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f00:	300c      	adds	r0, #12
 8008f02:	691a      	ldr	r2, [r3, #16]
 8008f04:	f103 010c 	add.w	r1, r3, #12
 8008f08:	3202      	adds	r2, #2
 8008f0a:	0092      	lsls	r2, r2, #2
 8008f0c:	f7fe f8a5 	bl	800705a <memcpy>
 8008f10:	ab1c      	add	r3, sp, #112	@ 0x70
 8008f12:	9301      	str	r3, [sp, #4]
 8008f14:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008f16:	9300      	str	r3, [sp, #0]
 8008f18:	4652      	mov	r2, sl
 8008f1a:	465b      	mov	r3, fp
 8008f1c:	9805      	ldr	r0, [sp, #20]
 8008f1e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008f22:	f7ff fbd5 	bl	80086d0 <__d2b>
 8008f26:	901a      	str	r0, [sp, #104]	@ 0x68
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	f43f aedc 	beq.w	8008ce6 <_strtod_l+0x436>
 8008f2e:	2101      	movs	r1, #1
 8008f30:	9805      	ldr	r0, [sp, #20]
 8008f32:	f7ff f931 	bl	8008198 <__i2b>
 8008f36:	4680      	mov	r8, r0
 8008f38:	b948      	cbnz	r0, 8008f4e <_strtod_l+0x69e>
 8008f3a:	f04f 0800 	mov.w	r8, #0
 8008f3e:	e6d2      	b.n	8008ce6 <_strtod_l+0x436>
 8008f40:	f04f 32ff 	mov.w	r2, #4294967295
 8008f44:	fa02 f303 	lsl.w	r3, r2, r3
 8008f48:	ea03 0a0a 	and.w	sl, r3, sl
 8008f4c:	e7ae      	b.n	8008eac <_strtod_l+0x5fc>
 8008f4e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008f50:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008f52:	2d00      	cmp	r5, #0
 8008f54:	bfab      	itete	ge
 8008f56:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008f58:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008f5a:	18ef      	addge	r7, r5, r3
 8008f5c:	1b5e      	sublt	r6, r3, r5
 8008f5e:	9b08      	ldr	r3, [sp, #32]
 8008f60:	bfa8      	it	ge
 8008f62:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008f64:	eba5 0503 	sub.w	r5, r5, r3
 8008f68:	4415      	add	r5, r2
 8008f6a:	4b67      	ldr	r3, [pc, #412]	@ (8009108 <_strtod_l+0x858>)
 8008f6c:	f105 35ff 	add.w	r5, r5, #4294967295
 8008f70:	bfb8      	it	lt
 8008f72:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008f74:	429d      	cmp	r5, r3
 8008f76:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008f7a:	da50      	bge.n	800901e <_strtod_l+0x76e>
 8008f7c:	1b5b      	subs	r3, r3, r5
 8008f7e:	2b1f      	cmp	r3, #31
 8008f80:	f04f 0101 	mov.w	r1, #1
 8008f84:	eba2 0203 	sub.w	r2, r2, r3
 8008f88:	dc3d      	bgt.n	8009006 <_strtod_l+0x756>
 8008f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8008f8e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f90:	2300      	movs	r3, #0
 8008f92:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f94:	18bd      	adds	r5, r7, r2
 8008f96:	9b08      	ldr	r3, [sp, #32]
 8008f98:	42af      	cmp	r7, r5
 8008f9a:	4416      	add	r6, r2
 8008f9c:	441e      	add	r6, r3
 8008f9e:	463b      	mov	r3, r7
 8008fa0:	bfa8      	it	ge
 8008fa2:	462b      	movge	r3, r5
 8008fa4:	42b3      	cmp	r3, r6
 8008fa6:	bfa8      	it	ge
 8008fa8:	4633      	movge	r3, r6
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	bfc2      	ittt	gt
 8008fae:	1aed      	subgt	r5, r5, r3
 8008fb0:	1af6      	subgt	r6, r6, r3
 8008fb2:	1aff      	subgt	r7, r7, r3
 8008fb4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	dd16      	ble.n	8008fe8 <_strtod_l+0x738>
 8008fba:	4641      	mov	r1, r8
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	9805      	ldr	r0, [sp, #20]
 8008fc0:	f7ff f9a8 	bl	8008314 <__pow5mult>
 8008fc4:	4680      	mov	r8, r0
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	d0b7      	beq.n	8008f3a <_strtod_l+0x68a>
 8008fca:	4601      	mov	r1, r0
 8008fcc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008fce:	9805      	ldr	r0, [sp, #20]
 8008fd0:	f7ff f8f8 	bl	80081c4 <__multiply>
 8008fd4:	900e      	str	r0, [sp, #56]	@ 0x38
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	f43f ae85 	beq.w	8008ce6 <_strtod_l+0x436>
 8008fdc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008fde:	9805      	ldr	r0, [sp, #20]
 8008fe0:	f7fe ffdc 	bl	8007f9c <_Bfree>
 8008fe4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fe6:	931a      	str	r3, [sp, #104]	@ 0x68
 8008fe8:	2d00      	cmp	r5, #0
 8008fea:	dc1d      	bgt.n	8009028 <_strtod_l+0x778>
 8008fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	dd23      	ble.n	800903a <_strtod_l+0x78a>
 8008ff2:	4649      	mov	r1, r9
 8008ff4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008ff6:	9805      	ldr	r0, [sp, #20]
 8008ff8:	f7ff f98c 	bl	8008314 <__pow5mult>
 8008ffc:	4681      	mov	r9, r0
 8008ffe:	b9e0      	cbnz	r0, 800903a <_strtod_l+0x78a>
 8009000:	f04f 0900 	mov.w	r9, #0
 8009004:	e66f      	b.n	8008ce6 <_strtod_l+0x436>
 8009006:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800900a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800900e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009012:	35e2      	adds	r5, #226	@ 0xe2
 8009014:	fa01 f305 	lsl.w	r3, r1, r5
 8009018:	9310      	str	r3, [sp, #64]	@ 0x40
 800901a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800901c:	e7ba      	b.n	8008f94 <_strtod_l+0x6e4>
 800901e:	2300      	movs	r3, #0
 8009020:	9310      	str	r3, [sp, #64]	@ 0x40
 8009022:	2301      	movs	r3, #1
 8009024:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009026:	e7b5      	b.n	8008f94 <_strtod_l+0x6e4>
 8009028:	462a      	mov	r2, r5
 800902a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800902c:	9805      	ldr	r0, [sp, #20]
 800902e:	f7ff f9cb 	bl	80083c8 <__lshift>
 8009032:	901a      	str	r0, [sp, #104]	@ 0x68
 8009034:	2800      	cmp	r0, #0
 8009036:	d1d9      	bne.n	8008fec <_strtod_l+0x73c>
 8009038:	e655      	b.n	8008ce6 <_strtod_l+0x436>
 800903a:	2e00      	cmp	r6, #0
 800903c:	dd07      	ble.n	800904e <_strtod_l+0x79e>
 800903e:	4649      	mov	r1, r9
 8009040:	4632      	mov	r2, r6
 8009042:	9805      	ldr	r0, [sp, #20]
 8009044:	f7ff f9c0 	bl	80083c8 <__lshift>
 8009048:	4681      	mov	r9, r0
 800904a:	2800      	cmp	r0, #0
 800904c:	d0d8      	beq.n	8009000 <_strtod_l+0x750>
 800904e:	2f00      	cmp	r7, #0
 8009050:	dd08      	ble.n	8009064 <_strtod_l+0x7b4>
 8009052:	4641      	mov	r1, r8
 8009054:	463a      	mov	r2, r7
 8009056:	9805      	ldr	r0, [sp, #20]
 8009058:	f7ff f9b6 	bl	80083c8 <__lshift>
 800905c:	4680      	mov	r8, r0
 800905e:	2800      	cmp	r0, #0
 8009060:	f43f ae41 	beq.w	8008ce6 <_strtod_l+0x436>
 8009064:	464a      	mov	r2, r9
 8009066:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009068:	9805      	ldr	r0, [sp, #20]
 800906a:	f7ff fa35 	bl	80084d8 <__mdiff>
 800906e:	4604      	mov	r4, r0
 8009070:	2800      	cmp	r0, #0
 8009072:	f43f ae38 	beq.w	8008ce6 <_strtod_l+0x436>
 8009076:	68c3      	ldr	r3, [r0, #12]
 8009078:	4641      	mov	r1, r8
 800907a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800907c:	2300      	movs	r3, #0
 800907e:	60c3      	str	r3, [r0, #12]
 8009080:	f7ff fa0e 	bl	80084a0 <__mcmp>
 8009084:	2800      	cmp	r0, #0
 8009086:	da45      	bge.n	8009114 <_strtod_l+0x864>
 8009088:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800908a:	ea53 030a 	orrs.w	r3, r3, sl
 800908e:	d16b      	bne.n	8009168 <_strtod_l+0x8b8>
 8009090:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009094:	2b00      	cmp	r3, #0
 8009096:	d167      	bne.n	8009168 <_strtod_l+0x8b8>
 8009098:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800909c:	0d1b      	lsrs	r3, r3, #20
 800909e:	051b      	lsls	r3, r3, #20
 80090a0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80090a4:	d960      	bls.n	8009168 <_strtod_l+0x8b8>
 80090a6:	6963      	ldr	r3, [r4, #20]
 80090a8:	b913      	cbnz	r3, 80090b0 <_strtod_l+0x800>
 80090aa:	6923      	ldr	r3, [r4, #16]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	dd5b      	ble.n	8009168 <_strtod_l+0x8b8>
 80090b0:	4621      	mov	r1, r4
 80090b2:	2201      	movs	r2, #1
 80090b4:	9805      	ldr	r0, [sp, #20]
 80090b6:	f7ff f987 	bl	80083c8 <__lshift>
 80090ba:	4641      	mov	r1, r8
 80090bc:	4604      	mov	r4, r0
 80090be:	f7ff f9ef 	bl	80084a0 <__mcmp>
 80090c2:	2800      	cmp	r0, #0
 80090c4:	dd50      	ble.n	8009168 <_strtod_l+0x8b8>
 80090c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80090ca:	9a08      	ldr	r2, [sp, #32]
 80090cc:	0d1b      	lsrs	r3, r3, #20
 80090ce:	051b      	lsls	r3, r3, #20
 80090d0:	2a00      	cmp	r2, #0
 80090d2:	d06a      	beq.n	80091aa <_strtod_l+0x8fa>
 80090d4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80090d8:	d867      	bhi.n	80091aa <_strtod_l+0x8fa>
 80090da:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80090de:	f67f ae98 	bls.w	8008e12 <_strtod_l+0x562>
 80090e2:	4650      	mov	r0, sl
 80090e4:	4659      	mov	r1, fp
 80090e6:	4b09      	ldr	r3, [pc, #36]	@ (800910c <_strtod_l+0x85c>)
 80090e8:	2200      	movs	r2, #0
 80090ea:	f7f7 f9f5 	bl	80004d8 <__aeabi_dmul>
 80090ee:	4b08      	ldr	r3, [pc, #32]	@ (8009110 <_strtod_l+0x860>)
 80090f0:	4682      	mov	sl, r0
 80090f2:	400b      	ands	r3, r1
 80090f4:	468b      	mov	fp, r1
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f47f ae00 	bne.w	8008cfc <_strtod_l+0x44c>
 80090fc:	2322      	movs	r3, #34	@ 0x22
 80090fe:	9a05      	ldr	r2, [sp, #20]
 8009100:	6013      	str	r3, [r2, #0]
 8009102:	e5fb      	b.n	8008cfc <_strtod_l+0x44c>
 8009104:	0800d7c8 	.word	0x0800d7c8
 8009108:	fffffc02 	.word	0xfffffc02
 800910c:	39500000 	.word	0x39500000
 8009110:	7ff00000 	.word	0x7ff00000
 8009114:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009118:	d165      	bne.n	80091e6 <_strtod_l+0x936>
 800911a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800911c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009120:	b35a      	cbz	r2, 800917a <_strtod_l+0x8ca>
 8009122:	4a99      	ldr	r2, [pc, #612]	@ (8009388 <_strtod_l+0xad8>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d12b      	bne.n	8009180 <_strtod_l+0x8d0>
 8009128:	9b08      	ldr	r3, [sp, #32]
 800912a:	4651      	mov	r1, sl
 800912c:	b303      	cbz	r3, 8009170 <_strtod_l+0x8c0>
 800912e:	465a      	mov	r2, fp
 8009130:	4b96      	ldr	r3, [pc, #600]	@ (800938c <_strtod_l+0xadc>)
 8009132:	4013      	ands	r3, r2
 8009134:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009138:	f04f 32ff 	mov.w	r2, #4294967295
 800913c:	d81b      	bhi.n	8009176 <_strtod_l+0x8c6>
 800913e:	0d1b      	lsrs	r3, r3, #20
 8009140:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009144:	fa02 f303 	lsl.w	r3, r2, r3
 8009148:	4299      	cmp	r1, r3
 800914a:	d119      	bne.n	8009180 <_strtod_l+0x8d0>
 800914c:	4b90      	ldr	r3, [pc, #576]	@ (8009390 <_strtod_l+0xae0>)
 800914e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009150:	429a      	cmp	r2, r3
 8009152:	d102      	bne.n	800915a <_strtod_l+0x8aa>
 8009154:	3101      	adds	r1, #1
 8009156:	f43f adc6 	beq.w	8008ce6 <_strtod_l+0x436>
 800915a:	f04f 0a00 	mov.w	sl, #0
 800915e:	4b8b      	ldr	r3, [pc, #556]	@ (800938c <_strtod_l+0xadc>)
 8009160:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009162:	401a      	ands	r2, r3
 8009164:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009168:	9b08      	ldr	r3, [sp, #32]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1b9      	bne.n	80090e2 <_strtod_l+0x832>
 800916e:	e5c5      	b.n	8008cfc <_strtod_l+0x44c>
 8009170:	f04f 33ff 	mov.w	r3, #4294967295
 8009174:	e7e8      	b.n	8009148 <_strtod_l+0x898>
 8009176:	4613      	mov	r3, r2
 8009178:	e7e6      	b.n	8009148 <_strtod_l+0x898>
 800917a:	ea53 030a 	orrs.w	r3, r3, sl
 800917e:	d0a2      	beq.n	80090c6 <_strtod_l+0x816>
 8009180:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009182:	b1db      	cbz	r3, 80091bc <_strtod_l+0x90c>
 8009184:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009186:	4213      	tst	r3, r2
 8009188:	d0ee      	beq.n	8009168 <_strtod_l+0x8b8>
 800918a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800918c:	4650      	mov	r0, sl
 800918e:	4659      	mov	r1, fp
 8009190:	9a08      	ldr	r2, [sp, #32]
 8009192:	b1bb      	cbz	r3, 80091c4 <_strtod_l+0x914>
 8009194:	f7ff fb68 	bl	8008868 <sulp>
 8009198:	4602      	mov	r2, r0
 800919a:	460b      	mov	r3, r1
 800919c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091a0:	f7f6 ffe4 	bl	800016c <__adddf3>
 80091a4:	4682      	mov	sl, r0
 80091a6:	468b      	mov	fp, r1
 80091a8:	e7de      	b.n	8009168 <_strtod_l+0x8b8>
 80091aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80091ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80091b2:	f04f 3aff 	mov.w	sl, #4294967295
 80091b6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80091ba:	e7d5      	b.n	8009168 <_strtod_l+0x8b8>
 80091bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80091be:	ea13 0f0a 	tst.w	r3, sl
 80091c2:	e7e1      	b.n	8009188 <_strtod_l+0x8d8>
 80091c4:	f7ff fb50 	bl	8008868 <sulp>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091d0:	f7f6 ffca 	bl	8000168 <__aeabi_dsub>
 80091d4:	2200      	movs	r2, #0
 80091d6:	2300      	movs	r3, #0
 80091d8:	4682      	mov	sl, r0
 80091da:	468b      	mov	fp, r1
 80091dc:	f7f7 fbe4 	bl	80009a8 <__aeabi_dcmpeq>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d0c1      	beq.n	8009168 <_strtod_l+0x8b8>
 80091e4:	e615      	b.n	8008e12 <_strtod_l+0x562>
 80091e6:	4641      	mov	r1, r8
 80091e8:	4620      	mov	r0, r4
 80091ea:	f7ff fac9 	bl	8008780 <__ratio>
 80091ee:	2200      	movs	r2, #0
 80091f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80091f4:	4606      	mov	r6, r0
 80091f6:	460f      	mov	r7, r1
 80091f8:	f7f7 fbea 	bl	80009d0 <__aeabi_dcmple>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	d06d      	beq.n	80092dc <_strtod_l+0xa2c>
 8009200:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009202:	2b00      	cmp	r3, #0
 8009204:	d178      	bne.n	80092f8 <_strtod_l+0xa48>
 8009206:	f1ba 0f00 	cmp.w	sl, #0
 800920a:	d156      	bne.n	80092ba <_strtod_l+0xa0a>
 800920c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800920e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009212:	2b00      	cmp	r3, #0
 8009214:	d158      	bne.n	80092c8 <_strtod_l+0xa18>
 8009216:	2200      	movs	r2, #0
 8009218:	4630      	mov	r0, r6
 800921a:	4639      	mov	r1, r7
 800921c:	4b5d      	ldr	r3, [pc, #372]	@ (8009394 <_strtod_l+0xae4>)
 800921e:	f7f7 fbcd 	bl	80009bc <__aeabi_dcmplt>
 8009222:	2800      	cmp	r0, #0
 8009224:	d157      	bne.n	80092d6 <_strtod_l+0xa26>
 8009226:	4630      	mov	r0, r6
 8009228:	4639      	mov	r1, r7
 800922a:	2200      	movs	r2, #0
 800922c:	4b5a      	ldr	r3, [pc, #360]	@ (8009398 <_strtod_l+0xae8>)
 800922e:	f7f7 f953 	bl	80004d8 <__aeabi_dmul>
 8009232:	4606      	mov	r6, r0
 8009234:	460f      	mov	r7, r1
 8009236:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800923a:	9606      	str	r6, [sp, #24]
 800923c:	9307      	str	r3, [sp, #28]
 800923e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009242:	4d52      	ldr	r5, [pc, #328]	@ (800938c <_strtod_l+0xadc>)
 8009244:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009248:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800924a:	401d      	ands	r5, r3
 800924c:	4b53      	ldr	r3, [pc, #332]	@ (800939c <_strtod_l+0xaec>)
 800924e:	429d      	cmp	r5, r3
 8009250:	f040 80aa 	bne.w	80093a8 <_strtod_l+0xaf8>
 8009254:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009256:	4650      	mov	r0, sl
 8009258:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800925c:	4659      	mov	r1, fp
 800925e:	f7ff f9cf 	bl	8008600 <__ulp>
 8009262:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009266:	f7f7 f937 	bl	80004d8 <__aeabi_dmul>
 800926a:	4652      	mov	r2, sl
 800926c:	465b      	mov	r3, fp
 800926e:	f7f6 ff7d 	bl	800016c <__adddf3>
 8009272:	460b      	mov	r3, r1
 8009274:	4945      	ldr	r1, [pc, #276]	@ (800938c <_strtod_l+0xadc>)
 8009276:	4a4a      	ldr	r2, [pc, #296]	@ (80093a0 <_strtod_l+0xaf0>)
 8009278:	4019      	ands	r1, r3
 800927a:	4291      	cmp	r1, r2
 800927c:	4682      	mov	sl, r0
 800927e:	d942      	bls.n	8009306 <_strtod_l+0xa56>
 8009280:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009282:	4b43      	ldr	r3, [pc, #268]	@ (8009390 <_strtod_l+0xae0>)
 8009284:	429a      	cmp	r2, r3
 8009286:	d103      	bne.n	8009290 <_strtod_l+0x9e0>
 8009288:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800928a:	3301      	adds	r3, #1
 800928c:	f43f ad2b 	beq.w	8008ce6 <_strtod_l+0x436>
 8009290:	f04f 3aff 	mov.w	sl, #4294967295
 8009294:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009390 <_strtod_l+0xae0>
 8009298:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800929a:	9805      	ldr	r0, [sp, #20]
 800929c:	f7fe fe7e 	bl	8007f9c <_Bfree>
 80092a0:	4649      	mov	r1, r9
 80092a2:	9805      	ldr	r0, [sp, #20]
 80092a4:	f7fe fe7a 	bl	8007f9c <_Bfree>
 80092a8:	4641      	mov	r1, r8
 80092aa:	9805      	ldr	r0, [sp, #20]
 80092ac:	f7fe fe76 	bl	8007f9c <_Bfree>
 80092b0:	4621      	mov	r1, r4
 80092b2:	9805      	ldr	r0, [sp, #20]
 80092b4:	f7fe fe72 	bl	8007f9c <_Bfree>
 80092b8:	e618      	b.n	8008eec <_strtod_l+0x63c>
 80092ba:	f1ba 0f01 	cmp.w	sl, #1
 80092be:	d103      	bne.n	80092c8 <_strtod_l+0xa18>
 80092c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	f43f ada5 	beq.w	8008e12 <_strtod_l+0x562>
 80092c8:	2200      	movs	r2, #0
 80092ca:	4b36      	ldr	r3, [pc, #216]	@ (80093a4 <_strtod_l+0xaf4>)
 80092cc:	2600      	movs	r6, #0
 80092ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80092d2:	4f30      	ldr	r7, [pc, #192]	@ (8009394 <_strtod_l+0xae4>)
 80092d4:	e7b3      	b.n	800923e <_strtod_l+0x98e>
 80092d6:	2600      	movs	r6, #0
 80092d8:	4f2f      	ldr	r7, [pc, #188]	@ (8009398 <_strtod_l+0xae8>)
 80092da:	e7ac      	b.n	8009236 <_strtod_l+0x986>
 80092dc:	4630      	mov	r0, r6
 80092de:	4639      	mov	r1, r7
 80092e0:	4b2d      	ldr	r3, [pc, #180]	@ (8009398 <_strtod_l+0xae8>)
 80092e2:	2200      	movs	r2, #0
 80092e4:	f7f7 f8f8 	bl	80004d8 <__aeabi_dmul>
 80092e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092ea:	4606      	mov	r6, r0
 80092ec:	460f      	mov	r7, r1
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d0a1      	beq.n	8009236 <_strtod_l+0x986>
 80092f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80092f6:	e7a2      	b.n	800923e <_strtod_l+0x98e>
 80092f8:	2200      	movs	r2, #0
 80092fa:	4b26      	ldr	r3, [pc, #152]	@ (8009394 <_strtod_l+0xae4>)
 80092fc:	4616      	mov	r6, r2
 80092fe:	461f      	mov	r7, r3
 8009300:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009304:	e79b      	b.n	800923e <_strtod_l+0x98e>
 8009306:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800930a:	9b08      	ldr	r3, [sp, #32]
 800930c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1c1      	bne.n	8009298 <_strtod_l+0x9e8>
 8009314:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009318:	0d1b      	lsrs	r3, r3, #20
 800931a:	051b      	lsls	r3, r3, #20
 800931c:	429d      	cmp	r5, r3
 800931e:	d1bb      	bne.n	8009298 <_strtod_l+0x9e8>
 8009320:	4630      	mov	r0, r6
 8009322:	4639      	mov	r1, r7
 8009324:	f7f7 fd2e 	bl	8000d84 <__aeabi_d2lz>
 8009328:	f7f7 f8a8 	bl	800047c <__aeabi_l2d>
 800932c:	4602      	mov	r2, r0
 800932e:	460b      	mov	r3, r1
 8009330:	4630      	mov	r0, r6
 8009332:	4639      	mov	r1, r7
 8009334:	f7f6 ff18 	bl	8000168 <__aeabi_dsub>
 8009338:	460b      	mov	r3, r1
 800933a:	4602      	mov	r2, r0
 800933c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009340:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009344:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009346:	ea46 060a 	orr.w	r6, r6, sl
 800934a:	431e      	orrs	r6, r3
 800934c:	d069      	beq.n	8009422 <_strtod_l+0xb72>
 800934e:	a30a      	add	r3, pc, #40	@ (adr r3, 8009378 <_strtod_l+0xac8>)
 8009350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009354:	f7f7 fb32 	bl	80009bc <__aeabi_dcmplt>
 8009358:	2800      	cmp	r0, #0
 800935a:	f47f accf 	bne.w	8008cfc <_strtod_l+0x44c>
 800935e:	a308      	add	r3, pc, #32	@ (adr r3, 8009380 <_strtod_l+0xad0>)
 8009360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009364:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009368:	f7f7 fb46 	bl	80009f8 <__aeabi_dcmpgt>
 800936c:	2800      	cmp	r0, #0
 800936e:	d093      	beq.n	8009298 <_strtod_l+0x9e8>
 8009370:	e4c4      	b.n	8008cfc <_strtod_l+0x44c>
 8009372:	bf00      	nop
 8009374:	f3af 8000 	nop.w
 8009378:	94a03595 	.word	0x94a03595
 800937c:	3fdfffff 	.word	0x3fdfffff
 8009380:	35afe535 	.word	0x35afe535
 8009384:	3fe00000 	.word	0x3fe00000
 8009388:	000fffff 	.word	0x000fffff
 800938c:	7ff00000 	.word	0x7ff00000
 8009390:	7fefffff 	.word	0x7fefffff
 8009394:	3ff00000 	.word	0x3ff00000
 8009398:	3fe00000 	.word	0x3fe00000
 800939c:	7fe00000 	.word	0x7fe00000
 80093a0:	7c9fffff 	.word	0x7c9fffff
 80093a4:	bff00000 	.word	0xbff00000
 80093a8:	9b08      	ldr	r3, [sp, #32]
 80093aa:	b323      	cbz	r3, 80093f6 <_strtod_l+0xb46>
 80093ac:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80093b0:	d821      	bhi.n	80093f6 <_strtod_l+0xb46>
 80093b2:	a327      	add	r3, pc, #156	@ (adr r3, 8009450 <_strtod_l+0xba0>)
 80093b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b8:	4630      	mov	r0, r6
 80093ba:	4639      	mov	r1, r7
 80093bc:	f7f7 fb08 	bl	80009d0 <__aeabi_dcmple>
 80093c0:	b1a0      	cbz	r0, 80093ec <_strtod_l+0xb3c>
 80093c2:	4639      	mov	r1, r7
 80093c4:	4630      	mov	r0, r6
 80093c6:	f7f7 fb5f 	bl	8000a88 <__aeabi_d2uiz>
 80093ca:	2801      	cmp	r0, #1
 80093cc:	bf38      	it	cc
 80093ce:	2001      	movcc	r0, #1
 80093d0:	f7f7 f808 	bl	80003e4 <__aeabi_ui2d>
 80093d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093d6:	4606      	mov	r6, r0
 80093d8:	460f      	mov	r7, r1
 80093da:	b9fb      	cbnz	r3, 800941c <_strtod_l+0xb6c>
 80093dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80093e0:	9014      	str	r0, [sp, #80]	@ 0x50
 80093e2:	9315      	str	r3, [sp, #84]	@ 0x54
 80093e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80093e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80093ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80093ee:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80093f2:	1b5b      	subs	r3, r3, r5
 80093f4:	9311      	str	r3, [sp, #68]	@ 0x44
 80093f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093fa:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80093fe:	f7ff f8ff 	bl	8008600 <__ulp>
 8009402:	4602      	mov	r2, r0
 8009404:	460b      	mov	r3, r1
 8009406:	4650      	mov	r0, sl
 8009408:	4659      	mov	r1, fp
 800940a:	f7f7 f865 	bl	80004d8 <__aeabi_dmul>
 800940e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009412:	f7f6 feab 	bl	800016c <__adddf3>
 8009416:	4682      	mov	sl, r0
 8009418:	468b      	mov	fp, r1
 800941a:	e776      	b.n	800930a <_strtod_l+0xa5a>
 800941c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009420:	e7e0      	b.n	80093e4 <_strtod_l+0xb34>
 8009422:	a30d      	add	r3, pc, #52	@ (adr r3, 8009458 <_strtod_l+0xba8>)
 8009424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009428:	f7f7 fac8 	bl	80009bc <__aeabi_dcmplt>
 800942c:	e79e      	b.n	800936c <_strtod_l+0xabc>
 800942e:	2300      	movs	r3, #0
 8009430:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009432:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009434:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009436:	6013      	str	r3, [r2, #0]
 8009438:	f7ff ba77 	b.w	800892a <_strtod_l+0x7a>
 800943c:	2a65      	cmp	r2, #101	@ 0x65
 800943e:	f43f ab6e 	beq.w	8008b1e <_strtod_l+0x26e>
 8009442:	2a45      	cmp	r2, #69	@ 0x45
 8009444:	f43f ab6b 	beq.w	8008b1e <_strtod_l+0x26e>
 8009448:	2301      	movs	r3, #1
 800944a:	f7ff bba6 	b.w	8008b9a <_strtod_l+0x2ea>
 800944e:	bf00      	nop
 8009450:	ffc00000 	.word	0xffc00000
 8009454:	41dfffff 	.word	0x41dfffff
 8009458:	94a03595 	.word	0x94a03595
 800945c:	3fcfffff 	.word	0x3fcfffff

08009460 <_strtod_r>:
 8009460:	4b01      	ldr	r3, [pc, #4]	@ (8009468 <_strtod_r+0x8>)
 8009462:	f7ff ba25 	b.w	80088b0 <_strtod_l>
 8009466:	bf00      	nop
 8009468:	2000006c 	.word	0x2000006c

0800946c <_strtol_l.constprop.0>:
 800946c:	2b24      	cmp	r3, #36	@ 0x24
 800946e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009472:	4686      	mov	lr, r0
 8009474:	4690      	mov	r8, r2
 8009476:	d801      	bhi.n	800947c <_strtol_l.constprop.0+0x10>
 8009478:	2b01      	cmp	r3, #1
 800947a:	d106      	bne.n	800948a <_strtol_l.constprop.0+0x1e>
 800947c:	f7fd fdb2 	bl	8006fe4 <__errno>
 8009480:	2316      	movs	r3, #22
 8009482:	6003      	str	r3, [r0, #0]
 8009484:	2000      	movs	r0, #0
 8009486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800948a:	460d      	mov	r5, r1
 800948c:	4833      	ldr	r0, [pc, #204]	@ (800955c <_strtol_l.constprop.0+0xf0>)
 800948e:	462a      	mov	r2, r5
 8009490:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009494:	5d06      	ldrb	r6, [r0, r4]
 8009496:	f016 0608 	ands.w	r6, r6, #8
 800949a:	d1f8      	bne.n	800948e <_strtol_l.constprop.0+0x22>
 800949c:	2c2d      	cmp	r4, #45	@ 0x2d
 800949e:	d12d      	bne.n	80094fc <_strtol_l.constprop.0+0x90>
 80094a0:	2601      	movs	r6, #1
 80094a2:	782c      	ldrb	r4, [r5, #0]
 80094a4:	1c95      	adds	r5, r2, #2
 80094a6:	f033 0210 	bics.w	r2, r3, #16
 80094aa:	d109      	bne.n	80094c0 <_strtol_l.constprop.0+0x54>
 80094ac:	2c30      	cmp	r4, #48	@ 0x30
 80094ae:	d12a      	bne.n	8009506 <_strtol_l.constprop.0+0x9a>
 80094b0:	782a      	ldrb	r2, [r5, #0]
 80094b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80094b6:	2a58      	cmp	r2, #88	@ 0x58
 80094b8:	d125      	bne.n	8009506 <_strtol_l.constprop.0+0x9a>
 80094ba:	2310      	movs	r3, #16
 80094bc:	786c      	ldrb	r4, [r5, #1]
 80094be:	3502      	adds	r5, #2
 80094c0:	2200      	movs	r2, #0
 80094c2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80094c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80094ca:	fbbc f9f3 	udiv	r9, ip, r3
 80094ce:	4610      	mov	r0, r2
 80094d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80094d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80094d8:	2f09      	cmp	r7, #9
 80094da:	d81b      	bhi.n	8009514 <_strtol_l.constprop.0+0xa8>
 80094dc:	463c      	mov	r4, r7
 80094de:	42a3      	cmp	r3, r4
 80094e0:	dd27      	ble.n	8009532 <_strtol_l.constprop.0+0xc6>
 80094e2:	1c57      	adds	r7, r2, #1
 80094e4:	d007      	beq.n	80094f6 <_strtol_l.constprop.0+0x8a>
 80094e6:	4581      	cmp	r9, r0
 80094e8:	d320      	bcc.n	800952c <_strtol_l.constprop.0+0xc0>
 80094ea:	d101      	bne.n	80094f0 <_strtol_l.constprop.0+0x84>
 80094ec:	45a2      	cmp	sl, r4
 80094ee:	db1d      	blt.n	800952c <_strtol_l.constprop.0+0xc0>
 80094f0:	2201      	movs	r2, #1
 80094f2:	fb00 4003 	mla	r0, r0, r3, r4
 80094f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094fa:	e7eb      	b.n	80094d4 <_strtol_l.constprop.0+0x68>
 80094fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80094fe:	bf04      	itt	eq
 8009500:	782c      	ldrbeq	r4, [r5, #0]
 8009502:	1c95      	addeq	r5, r2, #2
 8009504:	e7cf      	b.n	80094a6 <_strtol_l.constprop.0+0x3a>
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1da      	bne.n	80094c0 <_strtol_l.constprop.0+0x54>
 800950a:	2c30      	cmp	r4, #48	@ 0x30
 800950c:	bf0c      	ite	eq
 800950e:	2308      	moveq	r3, #8
 8009510:	230a      	movne	r3, #10
 8009512:	e7d5      	b.n	80094c0 <_strtol_l.constprop.0+0x54>
 8009514:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009518:	2f19      	cmp	r7, #25
 800951a:	d801      	bhi.n	8009520 <_strtol_l.constprop.0+0xb4>
 800951c:	3c37      	subs	r4, #55	@ 0x37
 800951e:	e7de      	b.n	80094de <_strtol_l.constprop.0+0x72>
 8009520:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009524:	2f19      	cmp	r7, #25
 8009526:	d804      	bhi.n	8009532 <_strtol_l.constprop.0+0xc6>
 8009528:	3c57      	subs	r4, #87	@ 0x57
 800952a:	e7d8      	b.n	80094de <_strtol_l.constprop.0+0x72>
 800952c:	f04f 32ff 	mov.w	r2, #4294967295
 8009530:	e7e1      	b.n	80094f6 <_strtol_l.constprop.0+0x8a>
 8009532:	1c53      	adds	r3, r2, #1
 8009534:	d108      	bne.n	8009548 <_strtol_l.constprop.0+0xdc>
 8009536:	2322      	movs	r3, #34	@ 0x22
 8009538:	4660      	mov	r0, ip
 800953a:	f8ce 3000 	str.w	r3, [lr]
 800953e:	f1b8 0f00 	cmp.w	r8, #0
 8009542:	d0a0      	beq.n	8009486 <_strtol_l.constprop.0+0x1a>
 8009544:	1e69      	subs	r1, r5, #1
 8009546:	e006      	b.n	8009556 <_strtol_l.constprop.0+0xea>
 8009548:	b106      	cbz	r6, 800954c <_strtol_l.constprop.0+0xe0>
 800954a:	4240      	negs	r0, r0
 800954c:	f1b8 0f00 	cmp.w	r8, #0
 8009550:	d099      	beq.n	8009486 <_strtol_l.constprop.0+0x1a>
 8009552:	2a00      	cmp	r2, #0
 8009554:	d1f6      	bne.n	8009544 <_strtol_l.constprop.0+0xd8>
 8009556:	f8c8 1000 	str.w	r1, [r8]
 800955a:	e794      	b.n	8009486 <_strtol_l.constprop.0+0x1a>
 800955c:	0800d7f1 	.word	0x0800d7f1

08009560 <_strtol_r>:
 8009560:	f7ff bf84 	b.w	800946c <_strtol_l.constprop.0>

08009564 <__ssputs_r>:
 8009564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009568:	461f      	mov	r7, r3
 800956a:	688e      	ldr	r6, [r1, #8]
 800956c:	4682      	mov	sl, r0
 800956e:	42be      	cmp	r6, r7
 8009570:	460c      	mov	r4, r1
 8009572:	4690      	mov	r8, r2
 8009574:	680b      	ldr	r3, [r1, #0]
 8009576:	d82d      	bhi.n	80095d4 <__ssputs_r+0x70>
 8009578:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800957c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009580:	d026      	beq.n	80095d0 <__ssputs_r+0x6c>
 8009582:	6965      	ldr	r5, [r4, #20]
 8009584:	6909      	ldr	r1, [r1, #16]
 8009586:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800958a:	eba3 0901 	sub.w	r9, r3, r1
 800958e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009592:	1c7b      	adds	r3, r7, #1
 8009594:	444b      	add	r3, r9
 8009596:	106d      	asrs	r5, r5, #1
 8009598:	429d      	cmp	r5, r3
 800959a:	bf38      	it	cc
 800959c:	461d      	movcc	r5, r3
 800959e:	0553      	lsls	r3, r2, #21
 80095a0:	d527      	bpl.n	80095f2 <__ssputs_r+0x8e>
 80095a2:	4629      	mov	r1, r5
 80095a4:	f7fe fc2e 	bl	8007e04 <_malloc_r>
 80095a8:	4606      	mov	r6, r0
 80095aa:	b360      	cbz	r0, 8009606 <__ssputs_r+0xa2>
 80095ac:	464a      	mov	r2, r9
 80095ae:	6921      	ldr	r1, [r4, #16]
 80095b0:	f7fd fd53 	bl	800705a <memcpy>
 80095b4:	89a3      	ldrh	r3, [r4, #12]
 80095b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80095ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095be:	81a3      	strh	r3, [r4, #12]
 80095c0:	6126      	str	r6, [r4, #16]
 80095c2:	444e      	add	r6, r9
 80095c4:	6026      	str	r6, [r4, #0]
 80095c6:	463e      	mov	r6, r7
 80095c8:	6165      	str	r5, [r4, #20]
 80095ca:	eba5 0509 	sub.w	r5, r5, r9
 80095ce:	60a5      	str	r5, [r4, #8]
 80095d0:	42be      	cmp	r6, r7
 80095d2:	d900      	bls.n	80095d6 <__ssputs_r+0x72>
 80095d4:	463e      	mov	r6, r7
 80095d6:	4632      	mov	r2, r6
 80095d8:	4641      	mov	r1, r8
 80095da:	6820      	ldr	r0, [r4, #0]
 80095dc:	f7fd fc95 	bl	8006f0a <memmove>
 80095e0:	2000      	movs	r0, #0
 80095e2:	68a3      	ldr	r3, [r4, #8]
 80095e4:	1b9b      	subs	r3, r3, r6
 80095e6:	60a3      	str	r3, [r4, #8]
 80095e8:	6823      	ldr	r3, [r4, #0]
 80095ea:	4433      	add	r3, r6
 80095ec:	6023      	str	r3, [r4, #0]
 80095ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095f2:	462a      	mov	r2, r5
 80095f4:	f000 fd5b 	bl	800a0ae <_realloc_r>
 80095f8:	4606      	mov	r6, r0
 80095fa:	2800      	cmp	r0, #0
 80095fc:	d1e0      	bne.n	80095c0 <__ssputs_r+0x5c>
 80095fe:	4650      	mov	r0, sl
 8009600:	6921      	ldr	r1, [r4, #16]
 8009602:	f7fe fb8d 	bl	8007d20 <_free_r>
 8009606:	230c      	movs	r3, #12
 8009608:	f8ca 3000 	str.w	r3, [sl]
 800960c:	89a3      	ldrh	r3, [r4, #12]
 800960e:	f04f 30ff 	mov.w	r0, #4294967295
 8009612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009616:	81a3      	strh	r3, [r4, #12]
 8009618:	e7e9      	b.n	80095ee <__ssputs_r+0x8a>
	...

0800961c <_svfiprintf_r>:
 800961c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009620:	4698      	mov	r8, r3
 8009622:	898b      	ldrh	r3, [r1, #12]
 8009624:	4607      	mov	r7, r0
 8009626:	061b      	lsls	r3, r3, #24
 8009628:	460d      	mov	r5, r1
 800962a:	4614      	mov	r4, r2
 800962c:	b09d      	sub	sp, #116	@ 0x74
 800962e:	d510      	bpl.n	8009652 <_svfiprintf_r+0x36>
 8009630:	690b      	ldr	r3, [r1, #16]
 8009632:	b973      	cbnz	r3, 8009652 <_svfiprintf_r+0x36>
 8009634:	2140      	movs	r1, #64	@ 0x40
 8009636:	f7fe fbe5 	bl	8007e04 <_malloc_r>
 800963a:	6028      	str	r0, [r5, #0]
 800963c:	6128      	str	r0, [r5, #16]
 800963e:	b930      	cbnz	r0, 800964e <_svfiprintf_r+0x32>
 8009640:	230c      	movs	r3, #12
 8009642:	603b      	str	r3, [r7, #0]
 8009644:	f04f 30ff 	mov.w	r0, #4294967295
 8009648:	b01d      	add	sp, #116	@ 0x74
 800964a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800964e:	2340      	movs	r3, #64	@ 0x40
 8009650:	616b      	str	r3, [r5, #20]
 8009652:	2300      	movs	r3, #0
 8009654:	9309      	str	r3, [sp, #36]	@ 0x24
 8009656:	2320      	movs	r3, #32
 8009658:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800965c:	2330      	movs	r3, #48	@ 0x30
 800965e:	f04f 0901 	mov.w	r9, #1
 8009662:	f8cd 800c 	str.w	r8, [sp, #12]
 8009666:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009800 <_svfiprintf_r+0x1e4>
 800966a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800966e:	4623      	mov	r3, r4
 8009670:	469a      	mov	sl, r3
 8009672:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009676:	b10a      	cbz	r2, 800967c <_svfiprintf_r+0x60>
 8009678:	2a25      	cmp	r2, #37	@ 0x25
 800967a:	d1f9      	bne.n	8009670 <_svfiprintf_r+0x54>
 800967c:	ebba 0b04 	subs.w	fp, sl, r4
 8009680:	d00b      	beq.n	800969a <_svfiprintf_r+0x7e>
 8009682:	465b      	mov	r3, fp
 8009684:	4622      	mov	r2, r4
 8009686:	4629      	mov	r1, r5
 8009688:	4638      	mov	r0, r7
 800968a:	f7ff ff6b 	bl	8009564 <__ssputs_r>
 800968e:	3001      	adds	r0, #1
 8009690:	f000 80a7 	beq.w	80097e2 <_svfiprintf_r+0x1c6>
 8009694:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009696:	445a      	add	r2, fp
 8009698:	9209      	str	r2, [sp, #36]	@ 0x24
 800969a:	f89a 3000 	ldrb.w	r3, [sl]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f000 809f 	beq.w	80097e2 <_svfiprintf_r+0x1c6>
 80096a4:	2300      	movs	r3, #0
 80096a6:	f04f 32ff 	mov.w	r2, #4294967295
 80096aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096ae:	f10a 0a01 	add.w	sl, sl, #1
 80096b2:	9304      	str	r3, [sp, #16]
 80096b4:	9307      	str	r3, [sp, #28]
 80096b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80096bc:	4654      	mov	r4, sl
 80096be:	2205      	movs	r2, #5
 80096c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096c4:	484e      	ldr	r0, [pc, #312]	@ (8009800 <_svfiprintf_r+0x1e4>)
 80096c6:	f7fd fcba 	bl	800703e <memchr>
 80096ca:	9a04      	ldr	r2, [sp, #16]
 80096cc:	b9d8      	cbnz	r0, 8009706 <_svfiprintf_r+0xea>
 80096ce:	06d0      	lsls	r0, r2, #27
 80096d0:	bf44      	itt	mi
 80096d2:	2320      	movmi	r3, #32
 80096d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096d8:	0711      	lsls	r1, r2, #28
 80096da:	bf44      	itt	mi
 80096dc:	232b      	movmi	r3, #43	@ 0x2b
 80096de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096e2:	f89a 3000 	ldrb.w	r3, [sl]
 80096e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80096e8:	d015      	beq.n	8009716 <_svfiprintf_r+0xfa>
 80096ea:	4654      	mov	r4, sl
 80096ec:	2000      	movs	r0, #0
 80096ee:	f04f 0c0a 	mov.w	ip, #10
 80096f2:	9a07      	ldr	r2, [sp, #28]
 80096f4:	4621      	mov	r1, r4
 80096f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096fa:	3b30      	subs	r3, #48	@ 0x30
 80096fc:	2b09      	cmp	r3, #9
 80096fe:	d94b      	bls.n	8009798 <_svfiprintf_r+0x17c>
 8009700:	b1b0      	cbz	r0, 8009730 <_svfiprintf_r+0x114>
 8009702:	9207      	str	r2, [sp, #28]
 8009704:	e014      	b.n	8009730 <_svfiprintf_r+0x114>
 8009706:	eba0 0308 	sub.w	r3, r0, r8
 800970a:	fa09 f303 	lsl.w	r3, r9, r3
 800970e:	4313      	orrs	r3, r2
 8009710:	46a2      	mov	sl, r4
 8009712:	9304      	str	r3, [sp, #16]
 8009714:	e7d2      	b.n	80096bc <_svfiprintf_r+0xa0>
 8009716:	9b03      	ldr	r3, [sp, #12]
 8009718:	1d19      	adds	r1, r3, #4
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	9103      	str	r1, [sp, #12]
 800971e:	2b00      	cmp	r3, #0
 8009720:	bfbb      	ittet	lt
 8009722:	425b      	neglt	r3, r3
 8009724:	f042 0202 	orrlt.w	r2, r2, #2
 8009728:	9307      	strge	r3, [sp, #28]
 800972a:	9307      	strlt	r3, [sp, #28]
 800972c:	bfb8      	it	lt
 800972e:	9204      	strlt	r2, [sp, #16]
 8009730:	7823      	ldrb	r3, [r4, #0]
 8009732:	2b2e      	cmp	r3, #46	@ 0x2e
 8009734:	d10a      	bne.n	800974c <_svfiprintf_r+0x130>
 8009736:	7863      	ldrb	r3, [r4, #1]
 8009738:	2b2a      	cmp	r3, #42	@ 0x2a
 800973a:	d132      	bne.n	80097a2 <_svfiprintf_r+0x186>
 800973c:	9b03      	ldr	r3, [sp, #12]
 800973e:	3402      	adds	r4, #2
 8009740:	1d1a      	adds	r2, r3, #4
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	9203      	str	r2, [sp, #12]
 8009746:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800974a:	9305      	str	r3, [sp, #20]
 800974c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009804 <_svfiprintf_r+0x1e8>
 8009750:	2203      	movs	r2, #3
 8009752:	4650      	mov	r0, sl
 8009754:	7821      	ldrb	r1, [r4, #0]
 8009756:	f7fd fc72 	bl	800703e <memchr>
 800975a:	b138      	cbz	r0, 800976c <_svfiprintf_r+0x150>
 800975c:	2240      	movs	r2, #64	@ 0x40
 800975e:	9b04      	ldr	r3, [sp, #16]
 8009760:	eba0 000a 	sub.w	r0, r0, sl
 8009764:	4082      	lsls	r2, r0
 8009766:	4313      	orrs	r3, r2
 8009768:	3401      	adds	r4, #1
 800976a:	9304      	str	r3, [sp, #16]
 800976c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009770:	2206      	movs	r2, #6
 8009772:	4825      	ldr	r0, [pc, #148]	@ (8009808 <_svfiprintf_r+0x1ec>)
 8009774:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009778:	f7fd fc61 	bl	800703e <memchr>
 800977c:	2800      	cmp	r0, #0
 800977e:	d036      	beq.n	80097ee <_svfiprintf_r+0x1d2>
 8009780:	4b22      	ldr	r3, [pc, #136]	@ (800980c <_svfiprintf_r+0x1f0>)
 8009782:	bb1b      	cbnz	r3, 80097cc <_svfiprintf_r+0x1b0>
 8009784:	9b03      	ldr	r3, [sp, #12]
 8009786:	3307      	adds	r3, #7
 8009788:	f023 0307 	bic.w	r3, r3, #7
 800978c:	3308      	adds	r3, #8
 800978e:	9303      	str	r3, [sp, #12]
 8009790:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009792:	4433      	add	r3, r6
 8009794:	9309      	str	r3, [sp, #36]	@ 0x24
 8009796:	e76a      	b.n	800966e <_svfiprintf_r+0x52>
 8009798:	460c      	mov	r4, r1
 800979a:	2001      	movs	r0, #1
 800979c:	fb0c 3202 	mla	r2, ip, r2, r3
 80097a0:	e7a8      	b.n	80096f4 <_svfiprintf_r+0xd8>
 80097a2:	2300      	movs	r3, #0
 80097a4:	f04f 0c0a 	mov.w	ip, #10
 80097a8:	4619      	mov	r1, r3
 80097aa:	3401      	adds	r4, #1
 80097ac:	9305      	str	r3, [sp, #20]
 80097ae:	4620      	mov	r0, r4
 80097b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097b4:	3a30      	subs	r2, #48	@ 0x30
 80097b6:	2a09      	cmp	r2, #9
 80097b8:	d903      	bls.n	80097c2 <_svfiprintf_r+0x1a6>
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d0c6      	beq.n	800974c <_svfiprintf_r+0x130>
 80097be:	9105      	str	r1, [sp, #20]
 80097c0:	e7c4      	b.n	800974c <_svfiprintf_r+0x130>
 80097c2:	4604      	mov	r4, r0
 80097c4:	2301      	movs	r3, #1
 80097c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80097ca:	e7f0      	b.n	80097ae <_svfiprintf_r+0x192>
 80097cc:	ab03      	add	r3, sp, #12
 80097ce:	9300      	str	r3, [sp, #0]
 80097d0:	462a      	mov	r2, r5
 80097d2:	4638      	mov	r0, r7
 80097d4:	4b0e      	ldr	r3, [pc, #56]	@ (8009810 <_svfiprintf_r+0x1f4>)
 80097d6:	a904      	add	r1, sp, #16
 80097d8:	f7fc fc70 	bl	80060bc <_printf_float>
 80097dc:	1c42      	adds	r2, r0, #1
 80097de:	4606      	mov	r6, r0
 80097e0:	d1d6      	bne.n	8009790 <_svfiprintf_r+0x174>
 80097e2:	89ab      	ldrh	r3, [r5, #12]
 80097e4:	065b      	lsls	r3, r3, #25
 80097e6:	f53f af2d 	bmi.w	8009644 <_svfiprintf_r+0x28>
 80097ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097ec:	e72c      	b.n	8009648 <_svfiprintf_r+0x2c>
 80097ee:	ab03      	add	r3, sp, #12
 80097f0:	9300      	str	r3, [sp, #0]
 80097f2:	462a      	mov	r2, r5
 80097f4:	4638      	mov	r0, r7
 80097f6:	4b06      	ldr	r3, [pc, #24]	@ (8009810 <_svfiprintf_r+0x1f4>)
 80097f8:	a904      	add	r1, sp, #16
 80097fa:	f7fc fefd 	bl	80065f8 <_printf_i>
 80097fe:	e7ed      	b.n	80097dc <_svfiprintf_r+0x1c0>
 8009800:	0800d8f1 	.word	0x0800d8f1
 8009804:	0800d8f7 	.word	0x0800d8f7
 8009808:	0800d8fb 	.word	0x0800d8fb
 800980c:	080060bd 	.word	0x080060bd
 8009810:	08009565 	.word	0x08009565

08009814 <__sflush_r>:
 8009814:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800981a:	0716      	lsls	r6, r2, #28
 800981c:	4605      	mov	r5, r0
 800981e:	460c      	mov	r4, r1
 8009820:	d454      	bmi.n	80098cc <__sflush_r+0xb8>
 8009822:	684b      	ldr	r3, [r1, #4]
 8009824:	2b00      	cmp	r3, #0
 8009826:	dc02      	bgt.n	800982e <__sflush_r+0x1a>
 8009828:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800982a:	2b00      	cmp	r3, #0
 800982c:	dd48      	ble.n	80098c0 <__sflush_r+0xac>
 800982e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009830:	2e00      	cmp	r6, #0
 8009832:	d045      	beq.n	80098c0 <__sflush_r+0xac>
 8009834:	2300      	movs	r3, #0
 8009836:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800983a:	682f      	ldr	r7, [r5, #0]
 800983c:	6a21      	ldr	r1, [r4, #32]
 800983e:	602b      	str	r3, [r5, #0]
 8009840:	d030      	beq.n	80098a4 <__sflush_r+0x90>
 8009842:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009844:	89a3      	ldrh	r3, [r4, #12]
 8009846:	0759      	lsls	r1, r3, #29
 8009848:	d505      	bpl.n	8009856 <__sflush_r+0x42>
 800984a:	6863      	ldr	r3, [r4, #4]
 800984c:	1ad2      	subs	r2, r2, r3
 800984e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009850:	b10b      	cbz	r3, 8009856 <__sflush_r+0x42>
 8009852:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009854:	1ad2      	subs	r2, r2, r3
 8009856:	2300      	movs	r3, #0
 8009858:	4628      	mov	r0, r5
 800985a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800985c:	6a21      	ldr	r1, [r4, #32]
 800985e:	47b0      	blx	r6
 8009860:	1c43      	adds	r3, r0, #1
 8009862:	89a3      	ldrh	r3, [r4, #12]
 8009864:	d106      	bne.n	8009874 <__sflush_r+0x60>
 8009866:	6829      	ldr	r1, [r5, #0]
 8009868:	291d      	cmp	r1, #29
 800986a:	d82b      	bhi.n	80098c4 <__sflush_r+0xb0>
 800986c:	4a28      	ldr	r2, [pc, #160]	@ (8009910 <__sflush_r+0xfc>)
 800986e:	410a      	asrs	r2, r1
 8009870:	07d6      	lsls	r6, r2, #31
 8009872:	d427      	bmi.n	80098c4 <__sflush_r+0xb0>
 8009874:	2200      	movs	r2, #0
 8009876:	6062      	str	r2, [r4, #4]
 8009878:	6922      	ldr	r2, [r4, #16]
 800987a:	04d9      	lsls	r1, r3, #19
 800987c:	6022      	str	r2, [r4, #0]
 800987e:	d504      	bpl.n	800988a <__sflush_r+0x76>
 8009880:	1c42      	adds	r2, r0, #1
 8009882:	d101      	bne.n	8009888 <__sflush_r+0x74>
 8009884:	682b      	ldr	r3, [r5, #0]
 8009886:	b903      	cbnz	r3, 800988a <__sflush_r+0x76>
 8009888:	6560      	str	r0, [r4, #84]	@ 0x54
 800988a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800988c:	602f      	str	r7, [r5, #0]
 800988e:	b1b9      	cbz	r1, 80098c0 <__sflush_r+0xac>
 8009890:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009894:	4299      	cmp	r1, r3
 8009896:	d002      	beq.n	800989e <__sflush_r+0x8a>
 8009898:	4628      	mov	r0, r5
 800989a:	f7fe fa41 	bl	8007d20 <_free_r>
 800989e:	2300      	movs	r3, #0
 80098a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80098a2:	e00d      	b.n	80098c0 <__sflush_r+0xac>
 80098a4:	2301      	movs	r3, #1
 80098a6:	4628      	mov	r0, r5
 80098a8:	47b0      	blx	r6
 80098aa:	4602      	mov	r2, r0
 80098ac:	1c50      	adds	r0, r2, #1
 80098ae:	d1c9      	bne.n	8009844 <__sflush_r+0x30>
 80098b0:	682b      	ldr	r3, [r5, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d0c6      	beq.n	8009844 <__sflush_r+0x30>
 80098b6:	2b1d      	cmp	r3, #29
 80098b8:	d001      	beq.n	80098be <__sflush_r+0xaa>
 80098ba:	2b16      	cmp	r3, #22
 80098bc:	d11d      	bne.n	80098fa <__sflush_r+0xe6>
 80098be:	602f      	str	r7, [r5, #0]
 80098c0:	2000      	movs	r0, #0
 80098c2:	e021      	b.n	8009908 <__sflush_r+0xf4>
 80098c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098c8:	b21b      	sxth	r3, r3
 80098ca:	e01a      	b.n	8009902 <__sflush_r+0xee>
 80098cc:	690f      	ldr	r7, [r1, #16]
 80098ce:	2f00      	cmp	r7, #0
 80098d0:	d0f6      	beq.n	80098c0 <__sflush_r+0xac>
 80098d2:	0793      	lsls	r3, r2, #30
 80098d4:	bf18      	it	ne
 80098d6:	2300      	movne	r3, #0
 80098d8:	680e      	ldr	r6, [r1, #0]
 80098da:	bf08      	it	eq
 80098dc:	694b      	ldreq	r3, [r1, #20]
 80098de:	1bf6      	subs	r6, r6, r7
 80098e0:	600f      	str	r7, [r1, #0]
 80098e2:	608b      	str	r3, [r1, #8]
 80098e4:	2e00      	cmp	r6, #0
 80098e6:	ddeb      	ble.n	80098c0 <__sflush_r+0xac>
 80098e8:	4633      	mov	r3, r6
 80098ea:	463a      	mov	r2, r7
 80098ec:	4628      	mov	r0, r5
 80098ee:	6a21      	ldr	r1, [r4, #32]
 80098f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80098f4:	47e0      	blx	ip
 80098f6:	2800      	cmp	r0, #0
 80098f8:	dc07      	bgt.n	800990a <__sflush_r+0xf6>
 80098fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009902:	f04f 30ff 	mov.w	r0, #4294967295
 8009906:	81a3      	strh	r3, [r4, #12]
 8009908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800990a:	4407      	add	r7, r0
 800990c:	1a36      	subs	r6, r6, r0
 800990e:	e7e9      	b.n	80098e4 <__sflush_r+0xd0>
 8009910:	dfbffffe 	.word	0xdfbffffe

08009914 <_fflush_r>:
 8009914:	b538      	push	{r3, r4, r5, lr}
 8009916:	690b      	ldr	r3, [r1, #16]
 8009918:	4605      	mov	r5, r0
 800991a:	460c      	mov	r4, r1
 800991c:	b913      	cbnz	r3, 8009924 <_fflush_r+0x10>
 800991e:	2500      	movs	r5, #0
 8009920:	4628      	mov	r0, r5
 8009922:	bd38      	pop	{r3, r4, r5, pc}
 8009924:	b118      	cbz	r0, 800992e <_fflush_r+0x1a>
 8009926:	6a03      	ldr	r3, [r0, #32]
 8009928:	b90b      	cbnz	r3, 800992e <_fflush_r+0x1a>
 800992a:	f7fd fa21 	bl	8006d70 <__sinit>
 800992e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d0f3      	beq.n	800991e <_fflush_r+0xa>
 8009936:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009938:	07d0      	lsls	r0, r2, #31
 800993a:	d404      	bmi.n	8009946 <_fflush_r+0x32>
 800993c:	0599      	lsls	r1, r3, #22
 800993e:	d402      	bmi.n	8009946 <_fflush_r+0x32>
 8009940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009942:	f7fd fb7a 	bl	800703a <__retarget_lock_acquire_recursive>
 8009946:	4628      	mov	r0, r5
 8009948:	4621      	mov	r1, r4
 800994a:	f7ff ff63 	bl	8009814 <__sflush_r>
 800994e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009950:	4605      	mov	r5, r0
 8009952:	07da      	lsls	r2, r3, #31
 8009954:	d4e4      	bmi.n	8009920 <_fflush_r+0xc>
 8009956:	89a3      	ldrh	r3, [r4, #12]
 8009958:	059b      	lsls	r3, r3, #22
 800995a:	d4e1      	bmi.n	8009920 <_fflush_r+0xc>
 800995c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800995e:	f7fd fb6d 	bl	800703c <__retarget_lock_release_recursive>
 8009962:	e7dd      	b.n	8009920 <_fflush_r+0xc>

08009964 <strncmp>:
 8009964:	b510      	push	{r4, lr}
 8009966:	b16a      	cbz	r2, 8009984 <strncmp+0x20>
 8009968:	3901      	subs	r1, #1
 800996a:	1884      	adds	r4, r0, r2
 800996c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009970:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009974:	429a      	cmp	r2, r3
 8009976:	d103      	bne.n	8009980 <strncmp+0x1c>
 8009978:	42a0      	cmp	r0, r4
 800997a:	d001      	beq.n	8009980 <strncmp+0x1c>
 800997c:	2a00      	cmp	r2, #0
 800997e:	d1f5      	bne.n	800996c <strncmp+0x8>
 8009980:	1ad0      	subs	r0, r2, r3
 8009982:	bd10      	pop	{r4, pc}
 8009984:	4610      	mov	r0, r2
 8009986:	e7fc      	b.n	8009982 <strncmp+0x1e>

08009988 <_sbrk_r>:
 8009988:	b538      	push	{r3, r4, r5, lr}
 800998a:	2300      	movs	r3, #0
 800998c:	4d05      	ldr	r5, [pc, #20]	@ (80099a4 <_sbrk_r+0x1c>)
 800998e:	4604      	mov	r4, r0
 8009990:	4608      	mov	r0, r1
 8009992:	602b      	str	r3, [r5, #0]
 8009994:	f7f9 f8b0 	bl	8002af8 <_sbrk>
 8009998:	1c43      	adds	r3, r0, #1
 800999a:	d102      	bne.n	80099a2 <_sbrk_r+0x1a>
 800999c:	682b      	ldr	r3, [r5, #0]
 800999e:	b103      	cbz	r3, 80099a2 <_sbrk_r+0x1a>
 80099a0:	6023      	str	r3, [r4, #0]
 80099a2:	bd38      	pop	{r3, r4, r5, pc}
 80099a4:	200008b0 	.word	0x200008b0

080099a8 <nan>:
 80099a8:	2000      	movs	r0, #0
 80099aa:	4901      	ldr	r1, [pc, #4]	@ (80099b0 <nan+0x8>)
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	7ff80000 	.word	0x7ff80000

080099b4 <__assert_func>:
 80099b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099b6:	4614      	mov	r4, r2
 80099b8:	461a      	mov	r2, r3
 80099ba:	4b09      	ldr	r3, [pc, #36]	@ (80099e0 <__assert_func+0x2c>)
 80099bc:	4605      	mov	r5, r0
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68d8      	ldr	r0, [r3, #12]
 80099c2:	b954      	cbnz	r4, 80099da <__assert_func+0x26>
 80099c4:	4b07      	ldr	r3, [pc, #28]	@ (80099e4 <__assert_func+0x30>)
 80099c6:	461c      	mov	r4, r3
 80099c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099cc:	9100      	str	r1, [sp, #0]
 80099ce:	462b      	mov	r3, r5
 80099d0:	4905      	ldr	r1, [pc, #20]	@ (80099e8 <__assert_func+0x34>)
 80099d2:	f000 fba7 	bl	800a124 <fiprintf>
 80099d6:	f000 fbb7 	bl	800a148 <abort>
 80099da:	4b04      	ldr	r3, [pc, #16]	@ (80099ec <__assert_func+0x38>)
 80099dc:	e7f4      	b.n	80099c8 <__assert_func+0x14>
 80099de:	bf00      	nop
 80099e0:	2000001c 	.word	0x2000001c
 80099e4:	0800d945 	.word	0x0800d945
 80099e8:	0800d917 	.word	0x0800d917
 80099ec:	0800d90a 	.word	0x0800d90a

080099f0 <_calloc_r>:
 80099f0:	b570      	push	{r4, r5, r6, lr}
 80099f2:	fba1 5402 	umull	r5, r4, r1, r2
 80099f6:	b93c      	cbnz	r4, 8009a08 <_calloc_r+0x18>
 80099f8:	4629      	mov	r1, r5
 80099fa:	f7fe fa03 	bl	8007e04 <_malloc_r>
 80099fe:	4606      	mov	r6, r0
 8009a00:	b928      	cbnz	r0, 8009a0e <_calloc_r+0x1e>
 8009a02:	2600      	movs	r6, #0
 8009a04:	4630      	mov	r0, r6
 8009a06:	bd70      	pop	{r4, r5, r6, pc}
 8009a08:	220c      	movs	r2, #12
 8009a0a:	6002      	str	r2, [r0, #0]
 8009a0c:	e7f9      	b.n	8009a02 <_calloc_r+0x12>
 8009a0e:	462a      	mov	r2, r5
 8009a10:	4621      	mov	r1, r4
 8009a12:	f7fd fa94 	bl	8006f3e <memset>
 8009a16:	e7f5      	b.n	8009a04 <_calloc_r+0x14>

08009a18 <rshift>:
 8009a18:	6903      	ldr	r3, [r0, #16]
 8009a1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009a22:	f100 0414 	add.w	r4, r0, #20
 8009a26:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009a2a:	dd46      	ble.n	8009aba <rshift+0xa2>
 8009a2c:	f011 011f 	ands.w	r1, r1, #31
 8009a30:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009a34:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009a38:	d10c      	bne.n	8009a54 <rshift+0x3c>
 8009a3a:	4629      	mov	r1, r5
 8009a3c:	f100 0710 	add.w	r7, r0, #16
 8009a40:	42b1      	cmp	r1, r6
 8009a42:	d335      	bcc.n	8009ab0 <rshift+0x98>
 8009a44:	1a9b      	subs	r3, r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	1eea      	subs	r2, r5, #3
 8009a4a:	4296      	cmp	r6, r2
 8009a4c:	bf38      	it	cc
 8009a4e:	2300      	movcc	r3, #0
 8009a50:	4423      	add	r3, r4
 8009a52:	e015      	b.n	8009a80 <rshift+0x68>
 8009a54:	46a1      	mov	r9, r4
 8009a56:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009a5a:	f1c1 0820 	rsb	r8, r1, #32
 8009a5e:	40cf      	lsrs	r7, r1
 8009a60:	f105 0e04 	add.w	lr, r5, #4
 8009a64:	4576      	cmp	r6, lr
 8009a66:	46f4      	mov	ip, lr
 8009a68:	d816      	bhi.n	8009a98 <rshift+0x80>
 8009a6a:	1a9a      	subs	r2, r3, r2
 8009a6c:	0092      	lsls	r2, r2, #2
 8009a6e:	3a04      	subs	r2, #4
 8009a70:	3501      	adds	r5, #1
 8009a72:	42ae      	cmp	r6, r5
 8009a74:	bf38      	it	cc
 8009a76:	2200      	movcc	r2, #0
 8009a78:	18a3      	adds	r3, r4, r2
 8009a7a:	50a7      	str	r7, [r4, r2]
 8009a7c:	b107      	cbz	r7, 8009a80 <rshift+0x68>
 8009a7e:	3304      	adds	r3, #4
 8009a80:	42a3      	cmp	r3, r4
 8009a82:	eba3 0204 	sub.w	r2, r3, r4
 8009a86:	bf08      	it	eq
 8009a88:	2300      	moveq	r3, #0
 8009a8a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009a8e:	6102      	str	r2, [r0, #16]
 8009a90:	bf08      	it	eq
 8009a92:	6143      	streq	r3, [r0, #20]
 8009a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a98:	f8dc c000 	ldr.w	ip, [ip]
 8009a9c:	fa0c fc08 	lsl.w	ip, ip, r8
 8009aa0:	ea4c 0707 	orr.w	r7, ip, r7
 8009aa4:	f849 7b04 	str.w	r7, [r9], #4
 8009aa8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009aac:	40cf      	lsrs	r7, r1
 8009aae:	e7d9      	b.n	8009a64 <rshift+0x4c>
 8009ab0:	f851 cb04 	ldr.w	ip, [r1], #4
 8009ab4:	f847 cf04 	str.w	ip, [r7, #4]!
 8009ab8:	e7c2      	b.n	8009a40 <rshift+0x28>
 8009aba:	4623      	mov	r3, r4
 8009abc:	e7e0      	b.n	8009a80 <rshift+0x68>

08009abe <__hexdig_fun>:
 8009abe:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009ac2:	2b09      	cmp	r3, #9
 8009ac4:	d802      	bhi.n	8009acc <__hexdig_fun+0xe>
 8009ac6:	3820      	subs	r0, #32
 8009ac8:	b2c0      	uxtb	r0, r0
 8009aca:	4770      	bx	lr
 8009acc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009ad0:	2b05      	cmp	r3, #5
 8009ad2:	d801      	bhi.n	8009ad8 <__hexdig_fun+0x1a>
 8009ad4:	3847      	subs	r0, #71	@ 0x47
 8009ad6:	e7f7      	b.n	8009ac8 <__hexdig_fun+0xa>
 8009ad8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009adc:	2b05      	cmp	r3, #5
 8009ade:	d801      	bhi.n	8009ae4 <__hexdig_fun+0x26>
 8009ae0:	3827      	subs	r0, #39	@ 0x27
 8009ae2:	e7f1      	b.n	8009ac8 <__hexdig_fun+0xa>
 8009ae4:	2000      	movs	r0, #0
 8009ae6:	4770      	bx	lr

08009ae8 <__gethex>:
 8009ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aec:	468a      	mov	sl, r1
 8009aee:	4690      	mov	r8, r2
 8009af0:	b085      	sub	sp, #20
 8009af2:	9302      	str	r3, [sp, #8]
 8009af4:	680b      	ldr	r3, [r1, #0]
 8009af6:	9001      	str	r0, [sp, #4]
 8009af8:	1c9c      	adds	r4, r3, #2
 8009afa:	46a1      	mov	r9, r4
 8009afc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009b00:	2830      	cmp	r0, #48	@ 0x30
 8009b02:	d0fa      	beq.n	8009afa <__gethex+0x12>
 8009b04:	eba9 0303 	sub.w	r3, r9, r3
 8009b08:	f1a3 0b02 	sub.w	fp, r3, #2
 8009b0c:	f7ff ffd7 	bl	8009abe <__hexdig_fun>
 8009b10:	4605      	mov	r5, r0
 8009b12:	2800      	cmp	r0, #0
 8009b14:	d168      	bne.n	8009be8 <__gethex+0x100>
 8009b16:	2201      	movs	r2, #1
 8009b18:	4648      	mov	r0, r9
 8009b1a:	499f      	ldr	r1, [pc, #636]	@ (8009d98 <__gethex+0x2b0>)
 8009b1c:	f7ff ff22 	bl	8009964 <strncmp>
 8009b20:	4607      	mov	r7, r0
 8009b22:	2800      	cmp	r0, #0
 8009b24:	d167      	bne.n	8009bf6 <__gethex+0x10e>
 8009b26:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009b2a:	4626      	mov	r6, r4
 8009b2c:	f7ff ffc7 	bl	8009abe <__hexdig_fun>
 8009b30:	2800      	cmp	r0, #0
 8009b32:	d062      	beq.n	8009bfa <__gethex+0x112>
 8009b34:	4623      	mov	r3, r4
 8009b36:	7818      	ldrb	r0, [r3, #0]
 8009b38:	4699      	mov	r9, r3
 8009b3a:	2830      	cmp	r0, #48	@ 0x30
 8009b3c:	f103 0301 	add.w	r3, r3, #1
 8009b40:	d0f9      	beq.n	8009b36 <__gethex+0x4e>
 8009b42:	f7ff ffbc 	bl	8009abe <__hexdig_fun>
 8009b46:	fab0 f580 	clz	r5, r0
 8009b4a:	f04f 0b01 	mov.w	fp, #1
 8009b4e:	096d      	lsrs	r5, r5, #5
 8009b50:	464a      	mov	r2, r9
 8009b52:	4616      	mov	r6, r2
 8009b54:	7830      	ldrb	r0, [r6, #0]
 8009b56:	3201      	adds	r2, #1
 8009b58:	f7ff ffb1 	bl	8009abe <__hexdig_fun>
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	d1f8      	bne.n	8009b52 <__gethex+0x6a>
 8009b60:	2201      	movs	r2, #1
 8009b62:	4630      	mov	r0, r6
 8009b64:	498c      	ldr	r1, [pc, #560]	@ (8009d98 <__gethex+0x2b0>)
 8009b66:	f7ff fefd 	bl	8009964 <strncmp>
 8009b6a:	2800      	cmp	r0, #0
 8009b6c:	d13f      	bne.n	8009bee <__gethex+0x106>
 8009b6e:	b944      	cbnz	r4, 8009b82 <__gethex+0x9a>
 8009b70:	1c74      	adds	r4, r6, #1
 8009b72:	4622      	mov	r2, r4
 8009b74:	4616      	mov	r6, r2
 8009b76:	7830      	ldrb	r0, [r6, #0]
 8009b78:	3201      	adds	r2, #1
 8009b7a:	f7ff ffa0 	bl	8009abe <__hexdig_fun>
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	d1f8      	bne.n	8009b74 <__gethex+0x8c>
 8009b82:	1ba4      	subs	r4, r4, r6
 8009b84:	00a7      	lsls	r7, r4, #2
 8009b86:	7833      	ldrb	r3, [r6, #0]
 8009b88:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009b8c:	2b50      	cmp	r3, #80	@ 0x50
 8009b8e:	d13e      	bne.n	8009c0e <__gethex+0x126>
 8009b90:	7873      	ldrb	r3, [r6, #1]
 8009b92:	2b2b      	cmp	r3, #43	@ 0x2b
 8009b94:	d033      	beq.n	8009bfe <__gethex+0x116>
 8009b96:	2b2d      	cmp	r3, #45	@ 0x2d
 8009b98:	d034      	beq.n	8009c04 <__gethex+0x11c>
 8009b9a:	2400      	movs	r4, #0
 8009b9c:	1c71      	adds	r1, r6, #1
 8009b9e:	7808      	ldrb	r0, [r1, #0]
 8009ba0:	f7ff ff8d 	bl	8009abe <__hexdig_fun>
 8009ba4:	1e43      	subs	r3, r0, #1
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	2b18      	cmp	r3, #24
 8009baa:	d830      	bhi.n	8009c0e <__gethex+0x126>
 8009bac:	f1a0 0210 	sub.w	r2, r0, #16
 8009bb0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009bb4:	f7ff ff83 	bl	8009abe <__hexdig_fun>
 8009bb8:	f100 3cff 	add.w	ip, r0, #4294967295
 8009bbc:	fa5f fc8c 	uxtb.w	ip, ip
 8009bc0:	f1bc 0f18 	cmp.w	ip, #24
 8009bc4:	f04f 030a 	mov.w	r3, #10
 8009bc8:	d91e      	bls.n	8009c08 <__gethex+0x120>
 8009bca:	b104      	cbz	r4, 8009bce <__gethex+0xe6>
 8009bcc:	4252      	negs	r2, r2
 8009bce:	4417      	add	r7, r2
 8009bd0:	f8ca 1000 	str.w	r1, [sl]
 8009bd4:	b1ed      	cbz	r5, 8009c12 <__gethex+0x12a>
 8009bd6:	f1bb 0f00 	cmp.w	fp, #0
 8009bda:	bf0c      	ite	eq
 8009bdc:	2506      	moveq	r5, #6
 8009bde:	2500      	movne	r5, #0
 8009be0:	4628      	mov	r0, r5
 8009be2:	b005      	add	sp, #20
 8009be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be8:	2500      	movs	r5, #0
 8009bea:	462c      	mov	r4, r5
 8009bec:	e7b0      	b.n	8009b50 <__gethex+0x68>
 8009bee:	2c00      	cmp	r4, #0
 8009bf0:	d1c7      	bne.n	8009b82 <__gethex+0x9a>
 8009bf2:	4627      	mov	r7, r4
 8009bf4:	e7c7      	b.n	8009b86 <__gethex+0x9e>
 8009bf6:	464e      	mov	r6, r9
 8009bf8:	462f      	mov	r7, r5
 8009bfa:	2501      	movs	r5, #1
 8009bfc:	e7c3      	b.n	8009b86 <__gethex+0x9e>
 8009bfe:	2400      	movs	r4, #0
 8009c00:	1cb1      	adds	r1, r6, #2
 8009c02:	e7cc      	b.n	8009b9e <__gethex+0xb6>
 8009c04:	2401      	movs	r4, #1
 8009c06:	e7fb      	b.n	8009c00 <__gethex+0x118>
 8009c08:	fb03 0002 	mla	r0, r3, r2, r0
 8009c0c:	e7ce      	b.n	8009bac <__gethex+0xc4>
 8009c0e:	4631      	mov	r1, r6
 8009c10:	e7de      	b.n	8009bd0 <__gethex+0xe8>
 8009c12:	4629      	mov	r1, r5
 8009c14:	eba6 0309 	sub.w	r3, r6, r9
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	2b07      	cmp	r3, #7
 8009c1c:	dc0a      	bgt.n	8009c34 <__gethex+0x14c>
 8009c1e:	9801      	ldr	r0, [sp, #4]
 8009c20:	f7fe f97c 	bl	8007f1c <_Balloc>
 8009c24:	4604      	mov	r4, r0
 8009c26:	b940      	cbnz	r0, 8009c3a <__gethex+0x152>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	21e4      	movs	r1, #228	@ 0xe4
 8009c2c:	4b5b      	ldr	r3, [pc, #364]	@ (8009d9c <__gethex+0x2b4>)
 8009c2e:	485c      	ldr	r0, [pc, #368]	@ (8009da0 <__gethex+0x2b8>)
 8009c30:	f7ff fec0 	bl	80099b4 <__assert_func>
 8009c34:	3101      	adds	r1, #1
 8009c36:	105b      	asrs	r3, r3, #1
 8009c38:	e7ef      	b.n	8009c1a <__gethex+0x132>
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	f100 0a14 	add.w	sl, r0, #20
 8009c40:	4655      	mov	r5, sl
 8009c42:	469b      	mov	fp, r3
 8009c44:	45b1      	cmp	r9, r6
 8009c46:	d337      	bcc.n	8009cb8 <__gethex+0x1d0>
 8009c48:	f845 bb04 	str.w	fp, [r5], #4
 8009c4c:	eba5 050a 	sub.w	r5, r5, sl
 8009c50:	10ad      	asrs	r5, r5, #2
 8009c52:	6125      	str	r5, [r4, #16]
 8009c54:	4658      	mov	r0, fp
 8009c56:	f7fe fa53 	bl	8008100 <__hi0bits>
 8009c5a:	016d      	lsls	r5, r5, #5
 8009c5c:	f8d8 6000 	ldr.w	r6, [r8]
 8009c60:	1a2d      	subs	r5, r5, r0
 8009c62:	42b5      	cmp	r5, r6
 8009c64:	dd54      	ble.n	8009d10 <__gethex+0x228>
 8009c66:	1bad      	subs	r5, r5, r6
 8009c68:	4629      	mov	r1, r5
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	f7fe fddb 	bl	8008826 <__any_on>
 8009c70:	4681      	mov	r9, r0
 8009c72:	b178      	cbz	r0, 8009c94 <__gethex+0x1ac>
 8009c74:	f04f 0901 	mov.w	r9, #1
 8009c78:	1e6b      	subs	r3, r5, #1
 8009c7a:	1159      	asrs	r1, r3, #5
 8009c7c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009c80:	f003 021f 	and.w	r2, r3, #31
 8009c84:	fa09 f202 	lsl.w	r2, r9, r2
 8009c88:	420a      	tst	r2, r1
 8009c8a:	d003      	beq.n	8009c94 <__gethex+0x1ac>
 8009c8c:	454b      	cmp	r3, r9
 8009c8e:	dc36      	bgt.n	8009cfe <__gethex+0x216>
 8009c90:	f04f 0902 	mov.w	r9, #2
 8009c94:	4629      	mov	r1, r5
 8009c96:	4620      	mov	r0, r4
 8009c98:	f7ff febe 	bl	8009a18 <rshift>
 8009c9c:	442f      	add	r7, r5
 8009c9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ca2:	42bb      	cmp	r3, r7
 8009ca4:	da42      	bge.n	8009d2c <__gethex+0x244>
 8009ca6:	4621      	mov	r1, r4
 8009ca8:	9801      	ldr	r0, [sp, #4]
 8009caa:	f7fe f977 	bl	8007f9c <_Bfree>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cb2:	25a3      	movs	r5, #163	@ 0xa3
 8009cb4:	6013      	str	r3, [r2, #0]
 8009cb6:	e793      	b.n	8009be0 <__gethex+0xf8>
 8009cb8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009cbc:	2a2e      	cmp	r2, #46	@ 0x2e
 8009cbe:	d012      	beq.n	8009ce6 <__gethex+0x1fe>
 8009cc0:	2b20      	cmp	r3, #32
 8009cc2:	d104      	bne.n	8009cce <__gethex+0x1e6>
 8009cc4:	f845 bb04 	str.w	fp, [r5], #4
 8009cc8:	f04f 0b00 	mov.w	fp, #0
 8009ccc:	465b      	mov	r3, fp
 8009cce:	7830      	ldrb	r0, [r6, #0]
 8009cd0:	9303      	str	r3, [sp, #12]
 8009cd2:	f7ff fef4 	bl	8009abe <__hexdig_fun>
 8009cd6:	9b03      	ldr	r3, [sp, #12]
 8009cd8:	f000 000f 	and.w	r0, r0, #15
 8009cdc:	4098      	lsls	r0, r3
 8009cde:	ea4b 0b00 	orr.w	fp, fp, r0
 8009ce2:	3304      	adds	r3, #4
 8009ce4:	e7ae      	b.n	8009c44 <__gethex+0x15c>
 8009ce6:	45b1      	cmp	r9, r6
 8009ce8:	d8ea      	bhi.n	8009cc0 <__gethex+0x1d8>
 8009cea:	2201      	movs	r2, #1
 8009cec:	4630      	mov	r0, r6
 8009cee:	492a      	ldr	r1, [pc, #168]	@ (8009d98 <__gethex+0x2b0>)
 8009cf0:	9303      	str	r3, [sp, #12]
 8009cf2:	f7ff fe37 	bl	8009964 <strncmp>
 8009cf6:	9b03      	ldr	r3, [sp, #12]
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	d1e1      	bne.n	8009cc0 <__gethex+0x1d8>
 8009cfc:	e7a2      	b.n	8009c44 <__gethex+0x15c>
 8009cfe:	4620      	mov	r0, r4
 8009d00:	1ea9      	subs	r1, r5, #2
 8009d02:	f7fe fd90 	bl	8008826 <__any_on>
 8009d06:	2800      	cmp	r0, #0
 8009d08:	d0c2      	beq.n	8009c90 <__gethex+0x1a8>
 8009d0a:	f04f 0903 	mov.w	r9, #3
 8009d0e:	e7c1      	b.n	8009c94 <__gethex+0x1ac>
 8009d10:	da09      	bge.n	8009d26 <__gethex+0x23e>
 8009d12:	1b75      	subs	r5, r6, r5
 8009d14:	4621      	mov	r1, r4
 8009d16:	462a      	mov	r2, r5
 8009d18:	9801      	ldr	r0, [sp, #4]
 8009d1a:	f7fe fb55 	bl	80083c8 <__lshift>
 8009d1e:	4604      	mov	r4, r0
 8009d20:	1b7f      	subs	r7, r7, r5
 8009d22:	f100 0a14 	add.w	sl, r0, #20
 8009d26:	f04f 0900 	mov.w	r9, #0
 8009d2a:	e7b8      	b.n	8009c9e <__gethex+0x1b6>
 8009d2c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009d30:	42bd      	cmp	r5, r7
 8009d32:	dd6f      	ble.n	8009e14 <__gethex+0x32c>
 8009d34:	1bed      	subs	r5, r5, r7
 8009d36:	42ae      	cmp	r6, r5
 8009d38:	dc34      	bgt.n	8009da4 <__gethex+0x2bc>
 8009d3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d022      	beq.n	8009d88 <__gethex+0x2a0>
 8009d42:	2b03      	cmp	r3, #3
 8009d44:	d024      	beq.n	8009d90 <__gethex+0x2a8>
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d115      	bne.n	8009d76 <__gethex+0x28e>
 8009d4a:	42ae      	cmp	r6, r5
 8009d4c:	d113      	bne.n	8009d76 <__gethex+0x28e>
 8009d4e:	2e01      	cmp	r6, #1
 8009d50:	d10b      	bne.n	8009d6a <__gethex+0x282>
 8009d52:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009d56:	9a02      	ldr	r2, [sp, #8]
 8009d58:	2562      	movs	r5, #98	@ 0x62
 8009d5a:	6013      	str	r3, [r2, #0]
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	6123      	str	r3, [r4, #16]
 8009d60:	f8ca 3000 	str.w	r3, [sl]
 8009d64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d66:	601c      	str	r4, [r3, #0]
 8009d68:	e73a      	b.n	8009be0 <__gethex+0xf8>
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	1e71      	subs	r1, r6, #1
 8009d6e:	f7fe fd5a 	bl	8008826 <__any_on>
 8009d72:	2800      	cmp	r0, #0
 8009d74:	d1ed      	bne.n	8009d52 <__gethex+0x26a>
 8009d76:	4621      	mov	r1, r4
 8009d78:	9801      	ldr	r0, [sp, #4]
 8009d7a:	f7fe f90f 	bl	8007f9c <_Bfree>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d82:	2550      	movs	r5, #80	@ 0x50
 8009d84:	6013      	str	r3, [r2, #0]
 8009d86:	e72b      	b.n	8009be0 <__gethex+0xf8>
 8009d88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d1f3      	bne.n	8009d76 <__gethex+0x28e>
 8009d8e:	e7e0      	b.n	8009d52 <__gethex+0x26a>
 8009d90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d1dd      	bne.n	8009d52 <__gethex+0x26a>
 8009d96:	e7ee      	b.n	8009d76 <__gethex+0x28e>
 8009d98:	0800d798 	.word	0x0800d798
 8009d9c:	0800d62f 	.word	0x0800d62f
 8009da0:	0800d946 	.word	0x0800d946
 8009da4:	1e6f      	subs	r7, r5, #1
 8009da6:	f1b9 0f00 	cmp.w	r9, #0
 8009daa:	d130      	bne.n	8009e0e <__gethex+0x326>
 8009dac:	b127      	cbz	r7, 8009db8 <__gethex+0x2d0>
 8009dae:	4639      	mov	r1, r7
 8009db0:	4620      	mov	r0, r4
 8009db2:	f7fe fd38 	bl	8008826 <__any_on>
 8009db6:	4681      	mov	r9, r0
 8009db8:	2301      	movs	r3, #1
 8009dba:	4629      	mov	r1, r5
 8009dbc:	1b76      	subs	r6, r6, r5
 8009dbe:	2502      	movs	r5, #2
 8009dc0:	117a      	asrs	r2, r7, #5
 8009dc2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009dc6:	f007 071f 	and.w	r7, r7, #31
 8009dca:	40bb      	lsls	r3, r7
 8009dcc:	4213      	tst	r3, r2
 8009dce:	4620      	mov	r0, r4
 8009dd0:	bf18      	it	ne
 8009dd2:	f049 0902 	orrne.w	r9, r9, #2
 8009dd6:	f7ff fe1f 	bl	8009a18 <rshift>
 8009dda:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009dde:	f1b9 0f00 	cmp.w	r9, #0
 8009de2:	d047      	beq.n	8009e74 <__gethex+0x38c>
 8009de4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009de8:	2b02      	cmp	r3, #2
 8009dea:	d015      	beq.n	8009e18 <__gethex+0x330>
 8009dec:	2b03      	cmp	r3, #3
 8009dee:	d017      	beq.n	8009e20 <__gethex+0x338>
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d109      	bne.n	8009e08 <__gethex+0x320>
 8009df4:	f019 0f02 	tst.w	r9, #2
 8009df8:	d006      	beq.n	8009e08 <__gethex+0x320>
 8009dfa:	f8da 3000 	ldr.w	r3, [sl]
 8009dfe:	ea49 0903 	orr.w	r9, r9, r3
 8009e02:	f019 0f01 	tst.w	r9, #1
 8009e06:	d10e      	bne.n	8009e26 <__gethex+0x33e>
 8009e08:	f045 0510 	orr.w	r5, r5, #16
 8009e0c:	e032      	b.n	8009e74 <__gethex+0x38c>
 8009e0e:	f04f 0901 	mov.w	r9, #1
 8009e12:	e7d1      	b.n	8009db8 <__gethex+0x2d0>
 8009e14:	2501      	movs	r5, #1
 8009e16:	e7e2      	b.n	8009dde <__gethex+0x2f6>
 8009e18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e1a:	f1c3 0301 	rsb	r3, r3, #1
 8009e1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009e20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d0f0      	beq.n	8009e08 <__gethex+0x320>
 8009e26:	f04f 0c00 	mov.w	ip, #0
 8009e2a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009e2e:	f104 0314 	add.w	r3, r4, #20
 8009e32:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009e36:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e40:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009e44:	d01b      	beq.n	8009e7e <__gethex+0x396>
 8009e46:	3201      	adds	r2, #1
 8009e48:	6002      	str	r2, [r0, #0]
 8009e4a:	2d02      	cmp	r5, #2
 8009e4c:	f104 0314 	add.w	r3, r4, #20
 8009e50:	d13c      	bne.n	8009ecc <__gethex+0x3e4>
 8009e52:	f8d8 2000 	ldr.w	r2, [r8]
 8009e56:	3a01      	subs	r2, #1
 8009e58:	42b2      	cmp	r2, r6
 8009e5a:	d109      	bne.n	8009e70 <__gethex+0x388>
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	1171      	asrs	r1, r6, #5
 8009e60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009e64:	f006 061f 	and.w	r6, r6, #31
 8009e68:	fa02 f606 	lsl.w	r6, r2, r6
 8009e6c:	421e      	tst	r6, r3
 8009e6e:	d13a      	bne.n	8009ee6 <__gethex+0x3fe>
 8009e70:	f045 0520 	orr.w	r5, r5, #32
 8009e74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e76:	601c      	str	r4, [r3, #0]
 8009e78:	9b02      	ldr	r3, [sp, #8]
 8009e7a:	601f      	str	r7, [r3, #0]
 8009e7c:	e6b0      	b.n	8009be0 <__gethex+0xf8>
 8009e7e:	4299      	cmp	r1, r3
 8009e80:	f843 cc04 	str.w	ip, [r3, #-4]
 8009e84:	d8d9      	bhi.n	8009e3a <__gethex+0x352>
 8009e86:	68a3      	ldr	r3, [r4, #8]
 8009e88:	459b      	cmp	fp, r3
 8009e8a:	db17      	blt.n	8009ebc <__gethex+0x3d4>
 8009e8c:	6861      	ldr	r1, [r4, #4]
 8009e8e:	9801      	ldr	r0, [sp, #4]
 8009e90:	3101      	adds	r1, #1
 8009e92:	f7fe f843 	bl	8007f1c <_Balloc>
 8009e96:	4681      	mov	r9, r0
 8009e98:	b918      	cbnz	r0, 8009ea2 <__gethex+0x3ba>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	2184      	movs	r1, #132	@ 0x84
 8009e9e:	4b19      	ldr	r3, [pc, #100]	@ (8009f04 <__gethex+0x41c>)
 8009ea0:	e6c5      	b.n	8009c2e <__gethex+0x146>
 8009ea2:	6922      	ldr	r2, [r4, #16]
 8009ea4:	f104 010c 	add.w	r1, r4, #12
 8009ea8:	3202      	adds	r2, #2
 8009eaa:	0092      	lsls	r2, r2, #2
 8009eac:	300c      	adds	r0, #12
 8009eae:	f7fd f8d4 	bl	800705a <memcpy>
 8009eb2:	4621      	mov	r1, r4
 8009eb4:	9801      	ldr	r0, [sp, #4]
 8009eb6:	f7fe f871 	bl	8007f9c <_Bfree>
 8009eba:	464c      	mov	r4, r9
 8009ebc:	6923      	ldr	r3, [r4, #16]
 8009ebe:	1c5a      	adds	r2, r3, #1
 8009ec0:	6122      	str	r2, [r4, #16]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ec8:	615a      	str	r2, [r3, #20]
 8009eca:	e7be      	b.n	8009e4a <__gethex+0x362>
 8009ecc:	6922      	ldr	r2, [r4, #16]
 8009ece:	455a      	cmp	r2, fp
 8009ed0:	dd0b      	ble.n	8009eea <__gethex+0x402>
 8009ed2:	2101      	movs	r1, #1
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f7ff fd9f 	bl	8009a18 <rshift>
 8009eda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ede:	3701      	adds	r7, #1
 8009ee0:	42bb      	cmp	r3, r7
 8009ee2:	f6ff aee0 	blt.w	8009ca6 <__gethex+0x1be>
 8009ee6:	2501      	movs	r5, #1
 8009ee8:	e7c2      	b.n	8009e70 <__gethex+0x388>
 8009eea:	f016 061f 	ands.w	r6, r6, #31
 8009eee:	d0fa      	beq.n	8009ee6 <__gethex+0x3fe>
 8009ef0:	4453      	add	r3, sl
 8009ef2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009ef6:	f7fe f903 	bl	8008100 <__hi0bits>
 8009efa:	f1c6 0620 	rsb	r6, r6, #32
 8009efe:	42b0      	cmp	r0, r6
 8009f00:	dbe7      	blt.n	8009ed2 <__gethex+0x3ea>
 8009f02:	e7f0      	b.n	8009ee6 <__gethex+0x3fe>
 8009f04:	0800d62f 	.word	0x0800d62f

08009f08 <L_shift>:
 8009f08:	f1c2 0208 	rsb	r2, r2, #8
 8009f0c:	0092      	lsls	r2, r2, #2
 8009f0e:	b570      	push	{r4, r5, r6, lr}
 8009f10:	f1c2 0620 	rsb	r6, r2, #32
 8009f14:	6843      	ldr	r3, [r0, #4]
 8009f16:	6804      	ldr	r4, [r0, #0]
 8009f18:	fa03 f506 	lsl.w	r5, r3, r6
 8009f1c:	432c      	orrs	r4, r5
 8009f1e:	40d3      	lsrs	r3, r2
 8009f20:	6004      	str	r4, [r0, #0]
 8009f22:	f840 3f04 	str.w	r3, [r0, #4]!
 8009f26:	4288      	cmp	r0, r1
 8009f28:	d3f4      	bcc.n	8009f14 <L_shift+0xc>
 8009f2a:	bd70      	pop	{r4, r5, r6, pc}

08009f2c <__match>:
 8009f2c:	b530      	push	{r4, r5, lr}
 8009f2e:	6803      	ldr	r3, [r0, #0]
 8009f30:	3301      	adds	r3, #1
 8009f32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f36:	b914      	cbnz	r4, 8009f3e <__match+0x12>
 8009f38:	6003      	str	r3, [r0, #0]
 8009f3a:	2001      	movs	r0, #1
 8009f3c:	bd30      	pop	{r4, r5, pc}
 8009f3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f42:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009f46:	2d19      	cmp	r5, #25
 8009f48:	bf98      	it	ls
 8009f4a:	3220      	addls	r2, #32
 8009f4c:	42a2      	cmp	r2, r4
 8009f4e:	d0f0      	beq.n	8009f32 <__match+0x6>
 8009f50:	2000      	movs	r0, #0
 8009f52:	e7f3      	b.n	8009f3c <__match+0x10>

08009f54 <__hexnan>:
 8009f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f58:	2500      	movs	r5, #0
 8009f5a:	680b      	ldr	r3, [r1, #0]
 8009f5c:	4682      	mov	sl, r0
 8009f5e:	115e      	asrs	r6, r3, #5
 8009f60:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009f64:	f013 031f 	ands.w	r3, r3, #31
 8009f68:	bf18      	it	ne
 8009f6a:	3604      	addne	r6, #4
 8009f6c:	1f37      	subs	r7, r6, #4
 8009f6e:	4690      	mov	r8, r2
 8009f70:	46b9      	mov	r9, r7
 8009f72:	463c      	mov	r4, r7
 8009f74:	46ab      	mov	fp, r5
 8009f76:	b087      	sub	sp, #28
 8009f78:	6801      	ldr	r1, [r0, #0]
 8009f7a:	9301      	str	r3, [sp, #4]
 8009f7c:	f846 5c04 	str.w	r5, [r6, #-4]
 8009f80:	9502      	str	r5, [sp, #8]
 8009f82:	784a      	ldrb	r2, [r1, #1]
 8009f84:	1c4b      	adds	r3, r1, #1
 8009f86:	9303      	str	r3, [sp, #12]
 8009f88:	b342      	cbz	r2, 8009fdc <__hexnan+0x88>
 8009f8a:	4610      	mov	r0, r2
 8009f8c:	9105      	str	r1, [sp, #20]
 8009f8e:	9204      	str	r2, [sp, #16]
 8009f90:	f7ff fd95 	bl	8009abe <__hexdig_fun>
 8009f94:	2800      	cmp	r0, #0
 8009f96:	d151      	bne.n	800a03c <__hexnan+0xe8>
 8009f98:	9a04      	ldr	r2, [sp, #16]
 8009f9a:	9905      	ldr	r1, [sp, #20]
 8009f9c:	2a20      	cmp	r2, #32
 8009f9e:	d818      	bhi.n	8009fd2 <__hexnan+0x7e>
 8009fa0:	9b02      	ldr	r3, [sp, #8]
 8009fa2:	459b      	cmp	fp, r3
 8009fa4:	dd13      	ble.n	8009fce <__hexnan+0x7a>
 8009fa6:	454c      	cmp	r4, r9
 8009fa8:	d206      	bcs.n	8009fb8 <__hexnan+0x64>
 8009faa:	2d07      	cmp	r5, #7
 8009fac:	dc04      	bgt.n	8009fb8 <__hexnan+0x64>
 8009fae:	462a      	mov	r2, r5
 8009fb0:	4649      	mov	r1, r9
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	f7ff ffa8 	bl	8009f08 <L_shift>
 8009fb8:	4544      	cmp	r4, r8
 8009fba:	d952      	bls.n	800a062 <__hexnan+0x10e>
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	f1a4 0904 	sub.w	r9, r4, #4
 8009fc2:	f844 3c04 	str.w	r3, [r4, #-4]
 8009fc6:	461d      	mov	r5, r3
 8009fc8:	464c      	mov	r4, r9
 8009fca:	f8cd b008 	str.w	fp, [sp, #8]
 8009fce:	9903      	ldr	r1, [sp, #12]
 8009fd0:	e7d7      	b.n	8009f82 <__hexnan+0x2e>
 8009fd2:	2a29      	cmp	r2, #41	@ 0x29
 8009fd4:	d157      	bne.n	800a086 <__hexnan+0x132>
 8009fd6:	3102      	adds	r1, #2
 8009fd8:	f8ca 1000 	str.w	r1, [sl]
 8009fdc:	f1bb 0f00 	cmp.w	fp, #0
 8009fe0:	d051      	beq.n	800a086 <__hexnan+0x132>
 8009fe2:	454c      	cmp	r4, r9
 8009fe4:	d206      	bcs.n	8009ff4 <__hexnan+0xa0>
 8009fe6:	2d07      	cmp	r5, #7
 8009fe8:	dc04      	bgt.n	8009ff4 <__hexnan+0xa0>
 8009fea:	462a      	mov	r2, r5
 8009fec:	4649      	mov	r1, r9
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f7ff ff8a 	bl	8009f08 <L_shift>
 8009ff4:	4544      	cmp	r4, r8
 8009ff6:	d936      	bls.n	800a066 <__hexnan+0x112>
 8009ff8:	4623      	mov	r3, r4
 8009ffa:	f1a8 0204 	sub.w	r2, r8, #4
 8009ffe:	f853 1b04 	ldr.w	r1, [r3], #4
 800a002:	429f      	cmp	r7, r3
 800a004:	f842 1f04 	str.w	r1, [r2, #4]!
 800a008:	d2f9      	bcs.n	8009ffe <__hexnan+0xaa>
 800a00a:	1b3b      	subs	r3, r7, r4
 800a00c:	f023 0303 	bic.w	r3, r3, #3
 800a010:	3304      	adds	r3, #4
 800a012:	3401      	adds	r4, #1
 800a014:	3e03      	subs	r6, #3
 800a016:	42b4      	cmp	r4, r6
 800a018:	bf88      	it	hi
 800a01a:	2304      	movhi	r3, #4
 800a01c:	2200      	movs	r2, #0
 800a01e:	4443      	add	r3, r8
 800a020:	f843 2b04 	str.w	r2, [r3], #4
 800a024:	429f      	cmp	r7, r3
 800a026:	d2fb      	bcs.n	800a020 <__hexnan+0xcc>
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	b91b      	cbnz	r3, 800a034 <__hexnan+0xe0>
 800a02c:	4547      	cmp	r7, r8
 800a02e:	d128      	bne.n	800a082 <__hexnan+0x12e>
 800a030:	2301      	movs	r3, #1
 800a032:	603b      	str	r3, [r7, #0]
 800a034:	2005      	movs	r0, #5
 800a036:	b007      	add	sp, #28
 800a038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a03c:	3501      	adds	r5, #1
 800a03e:	2d08      	cmp	r5, #8
 800a040:	f10b 0b01 	add.w	fp, fp, #1
 800a044:	dd06      	ble.n	800a054 <__hexnan+0x100>
 800a046:	4544      	cmp	r4, r8
 800a048:	d9c1      	bls.n	8009fce <__hexnan+0x7a>
 800a04a:	2300      	movs	r3, #0
 800a04c:	2501      	movs	r5, #1
 800a04e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a052:	3c04      	subs	r4, #4
 800a054:	6822      	ldr	r2, [r4, #0]
 800a056:	f000 000f 	and.w	r0, r0, #15
 800a05a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a05e:	6020      	str	r0, [r4, #0]
 800a060:	e7b5      	b.n	8009fce <__hexnan+0x7a>
 800a062:	2508      	movs	r5, #8
 800a064:	e7b3      	b.n	8009fce <__hexnan+0x7a>
 800a066:	9b01      	ldr	r3, [sp, #4]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d0dd      	beq.n	800a028 <__hexnan+0xd4>
 800a06c:	f04f 32ff 	mov.w	r2, #4294967295
 800a070:	f1c3 0320 	rsb	r3, r3, #32
 800a074:	40da      	lsrs	r2, r3
 800a076:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a07a:	4013      	ands	r3, r2
 800a07c:	f846 3c04 	str.w	r3, [r6, #-4]
 800a080:	e7d2      	b.n	800a028 <__hexnan+0xd4>
 800a082:	3f04      	subs	r7, #4
 800a084:	e7d0      	b.n	800a028 <__hexnan+0xd4>
 800a086:	2004      	movs	r0, #4
 800a088:	e7d5      	b.n	800a036 <__hexnan+0xe2>

0800a08a <__ascii_mbtowc>:
 800a08a:	b082      	sub	sp, #8
 800a08c:	b901      	cbnz	r1, 800a090 <__ascii_mbtowc+0x6>
 800a08e:	a901      	add	r1, sp, #4
 800a090:	b142      	cbz	r2, 800a0a4 <__ascii_mbtowc+0x1a>
 800a092:	b14b      	cbz	r3, 800a0a8 <__ascii_mbtowc+0x1e>
 800a094:	7813      	ldrb	r3, [r2, #0]
 800a096:	600b      	str	r3, [r1, #0]
 800a098:	7812      	ldrb	r2, [r2, #0]
 800a09a:	1e10      	subs	r0, r2, #0
 800a09c:	bf18      	it	ne
 800a09e:	2001      	movne	r0, #1
 800a0a0:	b002      	add	sp, #8
 800a0a2:	4770      	bx	lr
 800a0a4:	4610      	mov	r0, r2
 800a0a6:	e7fb      	b.n	800a0a0 <__ascii_mbtowc+0x16>
 800a0a8:	f06f 0001 	mvn.w	r0, #1
 800a0ac:	e7f8      	b.n	800a0a0 <__ascii_mbtowc+0x16>

0800a0ae <_realloc_r>:
 800a0ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b2:	4680      	mov	r8, r0
 800a0b4:	4615      	mov	r5, r2
 800a0b6:	460c      	mov	r4, r1
 800a0b8:	b921      	cbnz	r1, 800a0c4 <_realloc_r+0x16>
 800a0ba:	4611      	mov	r1, r2
 800a0bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0c0:	f7fd bea0 	b.w	8007e04 <_malloc_r>
 800a0c4:	b92a      	cbnz	r2, 800a0d2 <_realloc_r+0x24>
 800a0c6:	f7fd fe2b 	bl	8007d20 <_free_r>
 800a0ca:	2400      	movs	r4, #0
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0d2:	f000 f840 	bl	800a156 <_malloc_usable_size_r>
 800a0d6:	4285      	cmp	r5, r0
 800a0d8:	4606      	mov	r6, r0
 800a0da:	d802      	bhi.n	800a0e2 <_realloc_r+0x34>
 800a0dc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a0e0:	d8f4      	bhi.n	800a0cc <_realloc_r+0x1e>
 800a0e2:	4629      	mov	r1, r5
 800a0e4:	4640      	mov	r0, r8
 800a0e6:	f7fd fe8d 	bl	8007e04 <_malloc_r>
 800a0ea:	4607      	mov	r7, r0
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d0ec      	beq.n	800a0ca <_realloc_r+0x1c>
 800a0f0:	42b5      	cmp	r5, r6
 800a0f2:	462a      	mov	r2, r5
 800a0f4:	4621      	mov	r1, r4
 800a0f6:	bf28      	it	cs
 800a0f8:	4632      	movcs	r2, r6
 800a0fa:	f7fc ffae 	bl	800705a <memcpy>
 800a0fe:	4621      	mov	r1, r4
 800a100:	4640      	mov	r0, r8
 800a102:	f7fd fe0d 	bl	8007d20 <_free_r>
 800a106:	463c      	mov	r4, r7
 800a108:	e7e0      	b.n	800a0cc <_realloc_r+0x1e>

0800a10a <__ascii_wctomb>:
 800a10a:	4603      	mov	r3, r0
 800a10c:	4608      	mov	r0, r1
 800a10e:	b141      	cbz	r1, 800a122 <__ascii_wctomb+0x18>
 800a110:	2aff      	cmp	r2, #255	@ 0xff
 800a112:	d904      	bls.n	800a11e <__ascii_wctomb+0x14>
 800a114:	228a      	movs	r2, #138	@ 0x8a
 800a116:	f04f 30ff 	mov.w	r0, #4294967295
 800a11a:	601a      	str	r2, [r3, #0]
 800a11c:	4770      	bx	lr
 800a11e:	2001      	movs	r0, #1
 800a120:	700a      	strb	r2, [r1, #0]
 800a122:	4770      	bx	lr

0800a124 <fiprintf>:
 800a124:	b40e      	push	{r1, r2, r3}
 800a126:	b503      	push	{r0, r1, lr}
 800a128:	4601      	mov	r1, r0
 800a12a:	ab03      	add	r3, sp, #12
 800a12c:	4805      	ldr	r0, [pc, #20]	@ (800a144 <fiprintf+0x20>)
 800a12e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a132:	6800      	ldr	r0, [r0, #0]
 800a134:	9301      	str	r3, [sp, #4]
 800a136:	f000 f83d 	bl	800a1b4 <_vfiprintf_r>
 800a13a:	b002      	add	sp, #8
 800a13c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a140:	b003      	add	sp, #12
 800a142:	4770      	bx	lr
 800a144:	2000001c 	.word	0x2000001c

0800a148 <abort>:
 800a148:	2006      	movs	r0, #6
 800a14a:	b508      	push	{r3, lr}
 800a14c:	f000 fa06 	bl	800a55c <raise>
 800a150:	2001      	movs	r0, #1
 800a152:	f7f8 fc5c 	bl	8002a0e <_exit>

0800a156 <_malloc_usable_size_r>:
 800a156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a15a:	1f18      	subs	r0, r3, #4
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	bfbc      	itt	lt
 800a160:	580b      	ldrlt	r3, [r1, r0]
 800a162:	18c0      	addlt	r0, r0, r3
 800a164:	4770      	bx	lr

0800a166 <__sfputc_r>:
 800a166:	6893      	ldr	r3, [r2, #8]
 800a168:	b410      	push	{r4}
 800a16a:	3b01      	subs	r3, #1
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	6093      	str	r3, [r2, #8]
 800a170:	da07      	bge.n	800a182 <__sfputc_r+0x1c>
 800a172:	6994      	ldr	r4, [r2, #24]
 800a174:	42a3      	cmp	r3, r4
 800a176:	db01      	blt.n	800a17c <__sfputc_r+0x16>
 800a178:	290a      	cmp	r1, #10
 800a17a:	d102      	bne.n	800a182 <__sfputc_r+0x1c>
 800a17c:	bc10      	pop	{r4}
 800a17e:	f000 b931 	b.w	800a3e4 <__swbuf_r>
 800a182:	6813      	ldr	r3, [r2, #0]
 800a184:	1c58      	adds	r0, r3, #1
 800a186:	6010      	str	r0, [r2, #0]
 800a188:	7019      	strb	r1, [r3, #0]
 800a18a:	4608      	mov	r0, r1
 800a18c:	bc10      	pop	{r4}
 800a18e:	4770      	bx	lr

0800a190 <__sfputs_r>:
 800a190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a192:	4606      	mov	r6, r0
 800a194:	460f      	mov	r7, r1
 800a196:	4614      	mov	r4, r2
 800a198:	18d5      	adds	r5, r2, r3
 800a19a:	42ac      	cmp	r4, r5
 800a19c:	d101      	bne.n	800a1a2 <__sfputs_r+0x12>
 800a19e:	2000      	movs	r0, #0
 800a1a0:	e007      	b.n	800a1b2 <__sfputs_r+0x22>
 800a1a2:	463a      	mov	r2, r7
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1aa:	f7ff ffdc 	bl	800a166 <__sfputc_r>
 800a1ae:	1c43      	adds	r3, r0, #1
 800a1b0:	d1f3      	bne.n	800a19a <__sfputs_r+0xa>
 800a1b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a1b4 <_vfiprintf_r>:
 800a1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b8:	460d      	mov	r5, r1
 800a1ba:	4614      	mov	r4, r2
 800a1bc:	4698      	mov	r8, r3
 800a1be:	4606      	mov	r6, r0
 800a1c0:	b09d      	sub	sp, #116	@ 0x74
 800a1c2:	b118      	cbz	r0, 800a1cc <_vfiprintf_r+0x18>
 800a1c4:	6a03      	ldr	r3, [r0, #32]
 800a1c6:	b90b      	cbnz	r3, 800a1cc <_vfiprintf_r+0x18>
 800a1c8:	f7fc fdd2 	bl	8006d70 <__sinit>
 800a1cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1ce:	07d9      	lsls	r1, r3, #31
 800a1d0:	d405      	bmi.n	800a1de <_vfiprintf_r+0x2a>
 800a1d2:	89ab      	ldrh	r3, [r5, #12]
 800a1d4:	059a      	lsls	r2, r3, #22
 800a1d6:	d402      	bmi.n	800a1de <_vfiprintf_r+0x2a>
 800a1d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1da:	f7fc ff2e 	bl	800703a <__retarget_lock_acquire_recursive>
 800a1de:	89ab      	ldrh	r3, [r5, #12]
 800a1e0:	071b      	lsls	r3, r3, #28
 800a1e2:	d501      	bpl.n	800a1e8 <_vfiprintf_r+0x34>
 800a1e4:	692b      	ldr	r3, [r5, #16]
 800a1e6:	b99b      	cbnz	r3, 800a210 <_vfiprintf_r+0x5c>
 800a1e8:	4629      	mov	r1, r5
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	f000 f938 	bl	800a460 <__swsetup_r>
 800a1f0:	b170      	cbz	r0, 800a210 <_vfiprintf_r+0x5c>
 800a1f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1f4:	07dc      	lsls	r4, r3, #31
 800a1f6:	d504      	bpl.n	800a202 <_vfiprintf_r+0x4e>
 800a1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1fc:	b01d      	add	sp, #116	@ 0x74
 800a1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a202:	89ab      	ldrh	r3, [r5, #12]
 800a204:	0598      	lsls	r0, r3, #22
 800a206:	d4f7      	bmi.n	800a1f8 <_vfiprintf_r+0x44>
 800a208:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a20a:	f7fc ff17 	bl	800703c <__retarget_lock_release_recursive>
 800a20e:	e7f3      	b.n	800a1f8 <_vfiprintf_r+0x44>
 800a210:	2300      	movs	r3, #0
 800a212:	9309      	str	r3, [sp, #36]	@ 0x24
 800a214:	2320      	movs	r3, #32
 800a216:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a21a:	2330      	movs	r3, #48	@ 0x30
 800a21c:	f04f 0901 	mov.w	r9, #1
 800a220:	f8cd 800c 	str.w	r8, [sp, #12]
 800a224:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a3d0 <_vfiprintf_r+0x21c>
 800a228:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a22c:	4623      	mov	r3, r4
 800a22e:	469a      	mov	sl, r3
 800a230:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a234:	b10a      	cbz	r2, 800a23a <_vfiprintf_r+0x86>
 800a236:	2a25      	cmp	r2, #37	@ 0x25
 800a238:	d1f9      	bne.n	800a22e <_vfiprintf_r+0x7a>
 800a23a:	ebba 0b04 	subs.w	fp, sl, r4
 800a23e:	d00b      	beq.n	800a258 <_vfiprintf_r+0xa4>
 800a240:	465b      	mov	r3, fp
 800a242:	4622      	mov	r2, r4
 800a244:	4629      	mov	r1, r5
 800a246:	4630      	mov	r0, r6
 800a248:	f7ff ffa2 	bl	800a190 <__sfputs_r>
 800a24c:	3001      	adds	r0, #1
 800a24e:	f000 80a7 	beq.w	800a3a0 <_vfiprintf_r+0x1ec>
 800a252:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a254:	445a      	add	r2, fp
 800a256:	9209      	str	r2, [sp, #36]	@ 0x24
 800a258:	f89a 3000 	ldrb.w	r3, [sl]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	f000 809f 	beq.w	800a3a0 <_vfiprintf_r+0x1ec>
 800a262:	2300      	movs	r3, #0
 800a264:	f04f 32ff 	mov.w	r2, #4294967295
 800a268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a26c:	f10a 0a01 	add.w	sl, sl, #1
 800a270:	9304      	str	r3, [sp, #16]
 800a272:	9307      	str	r3, [sp, #28]
 800a274:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a278:	931a      	str	r3, [sp, #104]	@ 0x68
 800a27a:	4654      	mov	r4, sl
 800a27c:	2205      	movs	r2, #5
 800a27e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a282:	4853      	ldr	r0, [pc, #332]	@ (800a3d0 <_vfiprintf_r+0x21c>)
 800a284:	f7fc fedb 	bl	800703e <memchr>
 800a288:	9a04      	ldr	r2, [sp, #16]
 800a28a:	b9d8      	cbnz	r0, 800a2c4 <_vfiprintf_r+0x110>
 800a28c:	06d1      	lsls	r1, r2, #27
 800a28e:	bf44      	itt	mi
 800a290:	2320      	movmi	r3, #32
 800a292:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a296:	0713      	lsls	r3, r2, #28
 800a298:	bf44      	itt	mi
 800a29a:	232b      	movmi	r3, #43	@ 0x2b
 800a29c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2a0:	f89a 3000 	ldrb.w	r3, [sl]
 800a2a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2a6:	d015      	beq.n	800a2d4 <_vfiprintf_r+0x120>
 800a2a8:	4654      	mov	r4, sl
 800a2aa:	2000      	movs	r0, #0
 800a2ac:	f04f 0c0a 	mov.w	ip, #10
 800a2b0:	9a07      	ldr	r2, [sp, #28]
 800a2b2:	4621      	mov	r1, r4
 800a2b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2b8:	3b30      	subs	r3, #48	@ 0x30
 800a2ba:	2b09      	cmp	r3, #9
 800a2bc:	d94b      	bls.n	800a356 <_vfiprintf_r+0x1a2>
 800a2be:	b1b0      	cbz	r0, 800a2ee <_vfiprintf_r+0x13a>
 800a2c0:	9207      	str	r2, [sp, #28]
 800a2c2:	e014      	b.n	800a2ee <_vfiprintf_r+0x13a>
 800a2c4:	eba0 0308 	sub.w	r3, r0, r8
 800a2c8:	fa09 f303 	lsl.w	r3, r9, r3
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	46a2      	mov	sl, r4
 800a2d0:	9304      	str	r3, [sp, #16]
 800a2d2:	e7d2      	b.n	800a27a <_vfiprintf_r+0xc6>
 800a2d4:	9b03      	ldr	r3, [sp, #12]
 800a2d6:	1d19      	adds	r1, r3, #4
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	9103      	str	r1, [sp, #12]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	bfbb      	ittet	lt
 800a2e0:	425b      	neglt	r3, r3
 800a2e2:	f042 0202 	orrlt.w	r2, r2, #2
 800a2e6:	9307      	strge	r3, [sp, #28]
 800a2e8:	9307      	strlt	r3, [sp, #28]
 800a2ea:	bfb8      	it	lt
 800a2ec:	9204      	strlt	r2, [sp, #16]
 800a2ee:	7823      	ldrb	r3, [r4, #0]
 800a2f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2f2:	d10a      	bne.n	800a30a <_vfiprintf_r+0x156>
 800a2f4:	7863      	ldrb	r3, [r4, #1]
 800a2f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2f8:	d132      	bne.n	800a360 <_vfiprintf_r+0x1ac>
 800a2fa:	9b03      	ldr	r3, [sp, #12]
 800a2fc:	3402      	adds	r4, #2
 800a2fe:	1d1a      	adds	r2, r3, #4
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	9203      	str	r2, [sp, #12]
 800a304:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a308:	9305      	str	r3, [sp, #20]
 800a30a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a3d4 <_vfiprintf_r+0x220>
 800a30e:	2203      	movs	r2, #3
 800a310:	4650      	mov	r0, sl
 800a312:	7821      	ldrb	r1, [r4, #0]
 800a314:	f7fc fe93 	bl	800703e <memchr>
 800a318:	b138      	cbz	r0, 800a32a <_vfiprintf_r+0x176>
 800a31a:	2240      	movs	r2, #64	@ 0x40
 800a31c:	9b04      	ldr	r3, [sp, #16]
 800a31e:	eba0 000a 	sub.w	r0, r0, sl
 800a322:	4082      	lsls	r2, r0
 800a324:	4313      	orrs	r3, r2
 800a326:	3401      	adds	r4, #1
 800a328:	9304      	str	r3, [sp, #16]
 800a32a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a32e:	2206      	movs	r2, #6
 800a330:	4829      	ldr	r0, [pc, #164]	@ (800a3d8 <_vfiprintf_r+0x224>)
 800a332:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a336:	f7fc fe82 	bl	800703e <memchr>
 800a33a:	2800      	cmp	r0, #0
 800a33c:	d03f      	beq.n	800a3be <_vfiprintf_r+0x20a>
 800a33e:	4b27      	ldr	r3, [pc, #156]	@ (800a3dc <_vfiprintf_r+0x228>)
 800a340:	bb1b      	cbnz	r3, 800a38a <_vfiprintf_r+0x1d6>
 800a342:	9b03      	ldr	r3, [sp, #12]
 800a344:	3307      	adds	r3, #7
 800a346:	f023 0307 	bic.w	r3, r3, #7
 800a34a:	3308      	adds	r3, #8
 800a34c:	9303      	str	r3, [sp, #12]
 800a34e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a350:	443b      	add	r3, r7
 800a352:	9309      	str	r3, [sp, #36]	@ 0x24
 800a354:	e76a      	b.n	800a22c <_vfiprintf_r+0x78>
 800a356:	460c      	mov	r4, r1
 800a358:	2001      	movs	r0, #1
 800a35a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a35e:	e7a8      	b.n	800a2b2 <_vfiprintf_r+0xfe>
 800a360:	2300      	movs	r3, #0
 800a362:	f04f 0c0a 	mov.w	ip, #10
 800a366:	4619      	mov	r1, r3
 800a368:	3401      	adds	r4, #1
 800a36a:	9305      	str	r3, [sp, #20]
 800a36c:	4620      	mov	r0, r4
 800a36e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a372:	3a30      	subs	r2, #48	@ 0x30
 800a374:	2a09      	cmp	r2, #9
 800a376:	d903      	bls.n	800a380 <_vfiprintf_r+0x1cc>
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d0c6      	beq.n	800a30a <_vfiprintf_r+0x156>
 800a37c:	9105      	str	r1, [sp, #20]
 800a37e:	e7c4      	b.n	800a30a <_vfiprintf_r+0x156>
 800a380:	4604      	mov	r4, r0
 800a382:	2301      	movs	r3, #1
 800a384:	fb0c 2101 	mla	r1, ip, r1, r2
 800a388:	e7f0      	b.n	800a36c <_vfiprintf_r+0x1b8>
 800a38a:	ab03      	add	r3, sp, #12
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	462a      	mov	r2, r5
 800a390:	4630      	mov	r0, r6
 800a392:	4b13      	ldr	r3, [pc, #76]	@ (800a3e0 <_vfiprintf_r+0x22c>)
 800a394:	a904      	add	r1, sp, #16
 800a396:	f7fb fe91 	bl	80060bc <_printf_float>
 800a39a:	4607      	mov	r7, r0
 800a39c:	1c78      	adds	r0, r7, #1
 800a39e:	d1d6      	bne.n	800a34e <_vfiprintf_r+0x19a>
 800a3a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3a2:	07d9      	lsls	r1, r3, #31
 800a3a4:	d405      	bmi.n	800a3b2 <_vfiprintf_r+0x1fe>
 800a3a6:	89ab      	ldrh	r3, [r5, #12]
 800a3a8:	059a      	lsls	r2, r3, #22
 800a3aa:	d402      	bmi.n	800a3b2 <_vfiprintf_r+0x1fe>
 800a3ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3ae:	f7fc fe45 	bl	800703c <__retarget_lock_release_recursive>
 800a3b2:	89ab      	ldrh	r3, [r5, #12]
 800a3b4:	065b      	lsls	r3, r3, #25
 800a3b6:	f53f af1f 	bmi.w	800a1f8 <_vfiprintf_r+0x44>
 800a3ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3bc:	e71e      	b.n	800a1fc <_vfiprintf_r+0x48>
 800a3be:	ab03      	add	r3, sp, #12
 800a3c0:	9300      	str	r3, [sp, #0]
 800a3c2:	462a      	mov	r2, r5
 800a3c4:	4630      	mov	r0, r6
 800a3c6:	4b06      	ldr	r3, [pc, #24]	@ (800a3e0 <_vfiprintf_r+0x22c>)
 800a3c8:	a904      	add	r1, sp, #16
 800a3ca:	f7fc f915 	bl	80065f8 <_printf_i>
 800a3ce:	e7e4      	b.n	800a39a <_vfiprintf_r+0x1e6>
 800a3d0:	0800d8f1 	.word	0x0800d8f1
 800a3d4:	0800d8f7 	.word	0x0800d8f7
 800a3d8:	0800d8fb 	.word	0x0800d8fb
 800a3dc:	080060bd 	.word	0x080060bd
 800a3e0:	0800a191 	.word	0x0800a191

0800a3e4 <__swbuf_r>:
 800a3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3e6:	460e      	mov	r6, r1
 800a3e8:	4614      	mov	r4, r2
 800a3ea:	4605      	mov	r5, r0
 800a3ec:	b118      	cbz	r0, 800a3f6 <__swbuf_r+0x12>
 800a3ee:	6a03      	ldr	r3, [r0, #32]
 800a3f0:	b90b      	cbnz	r3, 800a3f6 <__swbuf_r+0x12>
 800a3f2:	f7fc fcbd 	bl	8006d70 <__sinit>
 800a3f6:	69a3      	ldr	r3, [r4, #24]
 800a3f8:	60a3      	str	r3, [r4, #8]
 800a3fa:	89a3      	ldrh	r3, [r4, #12]
 800a3fc:	071a      	lsls	r2, r3, #28
 800a3fe:	d501      	bpl.n	800a404 <__swbuf_r+0x20>
 800a400:	6923      	ldr	r3, [r4, #16]
 800a402:	b943      	cbnz	r3, 800a416 <__swbuf_r+0x32>
 800a404:	4621      	mov	r1, r4
 800a406:	4628      	mov	r0, r5
 800a408:	f000 f82a 	bl	800a460 <__swsetup_r>
 800a40c:	b118      	cbz	r0, 800a416 <__swbuf_r+0x32>
 800a40e:	f04f 37ff 	mov.w	r7, #4294967295
 800a412:	4638      	mov	r0, r7
 800a414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a416:	6823      	ldr	r3, [r4, #0]
 800a418:	6922      	ldr	r2, [r4, #16]
 800a41a:	b2f6      	uxtb	r6, r6
 800a41c:	1a98      	subs	r0, r3, r2
 800a41e:	6963      	ldr	r3, [r4, #20]
 800a420:	4637      	mov	r7, r6
 800a422:	4283      	cmp	r3, r0
 800a424:	dc05      	bgt.n	800a432 <__swbuf_r+0x4e>
 800a426:	4621      	mov	r1, r4
 800a428:	4628      	mov	r0, r5
 800a42a:	f7ff fa73 	bl	8009914 <_fflush_r>
 800a42e:	2800      	cmp	r0, #0
 800a430:	d1ed      	bne.n	800a40e <__swbuf_r+0x2a>
 800a432:	68a3      	ldr	r3, [r4, #8]
 800a434:	3b01      	subs	r3, #1
 800a436:	60a3      	str	r3, [r4, #8]
 800a438:	6823      	ldr	r3, [r4, #0]
 800a43a:	1c5a      	adds	r2, r3, #1
 800a43c:	6022      	str	r2, [r4, #0]
 800a43e:	701e      	strb	r6, [r3, #0]
 800a440:	6962      	ldr	r2, [r4, #20]
 800a442:	1c43      	adds	r3, r0, #1
 800a444:	429a      	cmp	r2, r3
 800a446:	d004      	beq.n	800a452 <__swbuf_r+0x6e>
 800a448:	89a3      	ldrh	r3, [r4, #12]
 800a44a:	07db      	lsls	r3, r3, #31
 800a44c:	d5e1      	bpl.n	800a412 <__swbuf_r+0x2e>
 800a44e:	2e0a      	cmp	r6, #10
 800a450:	d1df      	bne.n	800a412 <__swbuf_r+0x2e>
 800a452:	4621      	mov	r1, r4
 800a454:	4628      	mov	r0, r5
 800a456:	f7ff fa5d 	bl	8009914 <_fflush_r>
 800a45a:	2800      	cmp	r0, #0
 800a45c:	d0d9      	beq.n	800a412 <__swbuf_r+0x2e>
 800a45e:	e7d6      	b.n	800a40e <__swbuf_r+0x2a>

0800a460 <__swsetup_r>:
 800a460:	b538      	push	{r3, r4, r5, lr}
 800a462:	4b29      	ldr	r3, [pc, #164]	@ (800a508 <__swsetup_r+0xa8>)
 800a464:	4605      	mov	r5, r0
 800a466:	6818      	ldr	r0, [r3, #0]
 800a468:	460c      	mov	r4, r1
 800a46a:	b118      	cbz	r0, 800a474 <__swsetup_r+0x14>
 800a46c:	6a03      	ldr	r3, [r0, #32]
 800a46e:	b90b      	cbnz	r3, 800a474 <__swsetup_r+0x14>
 800a470:	f7fc fc7e 	bl	8006d70 <__sinit>
 800a474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a478:	0719      	lsls	r1, r3, #28
 800a47a:	d422      	bmi.n	800a4c2 <__swsetup_r+0x62>
 800a47c:	06da      	lsls	r2, r3, #27
 800a47e:	d407      	bmi.n	800a490 <__swsetup_r+0x30>
 800a480:	2209      	movs	r2, #9
 800a482:	602a      	str	r2, [r5, #0]
 800a484:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a488:	f04f 30ff 	mov.w	r0, #4294967295
 800a48c:	81a3      	strh	r3, [r4, #12]
 800a48e:	e033      	b.n	800a4f8 <__swsetup_r+0x98>
 800a490:	0758      	lsls	r0, r3, #29
 800a492:	d512      	bpl.n	800a4ba <__swsetup_r+0x5a>
 800a494:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a496:	b141      	cbz	r1, 800a4aa <__swsetup_r+0x4a>
 800a498:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a49c:	4299      	cmp	r1, r3
 800a49e:	d002      	beq.n	800a4a6 <__swsetup_r+0x46>
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	f7fd fc3d 	bl	8007d20 <_free_r>
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4aa:	89a3      	ldrh	r3, [r4, #12]
 800a4ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a4b0:	81a3      	strh	r3, [r4, #12]
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	6063      	str	r3, [r4, #4]
 800a4b6:	6923      	ldr	r3, [r4, #16]
 800a4b8:	6023      	str	r3, [r4, #0]
 800a4ba:	89a3      	ldrh	r3, [r4, #12]
 800a4bc:	f043 0308 	orr.w	r3, r3, #8
 800a4c0:	81a3      	strh	r3, [r4, #12]
 800a4c2:	6923      	ldr	r3, [r4, #16]
 800a4c4:	b94b      	cbnz	r3, 800a4da <__swsetup_r+0x7a>
 800a4c6:	89a3      	ldrh	r3, [r4, #12]
 800a4c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a4cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4d0:	d003      	beq.n	800a4da <__swsetup_r+0x7a>
 800a4d2:	4621      	mov	r1, r4
 800a4d4:	4628      	mov	r0, r5
 800a4d6:	f000 f882 	bl	800a5de <__smakebuf_r>
 800a4da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4de:	f013 0201 	ands.w	r2, r3, #1
 800a4e2:	d00a      	beq.n	800a4fa <__swsetup_r+0x9a>
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	60a2      	str	r2, [r4, #8]
 800a4e8:	6962      	ldr	r2, [r4, #20]
 800a4ea:	4252      	negs	r2, r2
 800a4ec:	61a2      	str	r2, [r4, #24]
 800a4ee:	6922      	ldr	r2, [r4, #16]
 800a4f0:	b942      	cbnz	r2, 800a504 <__swsetup_r+0xa4>
 800a4f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a4f6:	d1c5      	bne.n	800a484 <__swsetup_r+0x24>
 800a4f8:	bd38      	pop	{r3, r4, r5, pc}
 800a4fa:	0799      	lsls	r1, r3, #30
 800a4fc:	bf58      	it	pl
 800a4fe:	6962      	ldrpl	r2, [r4, #20]
 800a500:	60a2      	str	r2, [r4, #8]
 800a502:	e7f4      	b.n	800a4ee <__swsetup_r+0x8e>
 800a504:	2000      	movs	r0, #0
 800a506:	e7f7      	b.n	800a4f8 <__swsetup_r+0x98>
 800a508:	2000001c 	.word	0x2000001c

0800a50c <_raise_r>:
 800a50c:	291f      	cmp	r1, #31
 800a50e:	b538      	push	{r3, r4, r5, lr}
 800a510:	4605      	mov	r5, r0
 800a512:	460c      	mov	r4, r1
 800a514:	d904      	bls.n	800a520 <_raise_r+0x14>
 800a516:	2316      	movs	r3, #22
 800a518:	6003      	str	r3, [r0, #0]
 800a51a:	f04f 30ff 	mov.w	r0, #4294967295
 800a51e:	bd38      	pop	{r3, r4, r5, pc}
 800a520:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a522:	b112      	cbz	r2, 800a52a <_raise_r+0x1e>
 800a524:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a528:	b94b      	cbnz	r3, 800a53e <_raise_r+0x32>
 800a52a:	4628      	mov	r0, r5
 800a52c:	f000 f830 	bl	800a590 <_getpid_r>
 800a530:	4622      	mov	r2, r4
 800a532:	4601      	mov	r1, r0
 800a534:	4628      	mov	r0, r5
 800a536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a53a:	f000 b817 	b.w	800a56c <_kill_r>
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d00a      	beq.n	800a558 <_raise_r+0x4c>
 800a542:	1c59      	adds	r1, r3, #1
 800a544:	d103      	bne.n	800a54e <_raise_r+0x42>
 800a546:	2316      	movs	r3, #22
 800a548:	6003      	str	r3, [r0, #0]
 800a54a:	2001      	movs	r0, #1
 800a54c:	e7e7      	b.n	800a51e <_raise_r+0x12>
 800a54e:	2100      	movs	r1, #0
 800a550:	4620      	mov	r0, r4
 800a552:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a556:	4798      	blx	r3
 800a558:	2000      	movs	r0, #0
 800a55a:	e7e0      	b.n	800a51e <_raise_r+0x12>

0800a55c <raise>:
 800a55c:	4b02      	ldr	r3, [pc, #8]	@ (800a568 <raise+0xc>)
 800a55e:	4601      	mov	r1, r0
 800a560:	6818      	ldr	r0, [r3, #0]
 800a562:	f7ff bfd3 	b.w	800a50c <_raise_r>
 800a566:	bf00      	nop
 800a568:	2000001c 	.word	0x2000001c

0800a56c <_kill_r>:
 800a56c:	b538      	push	{r3, r4, r5, lr}
 800a56e:	2300      	movs	r3, #0
 800a570:	4d06      	ldr	r5, [pc, #24]	@ (800a58c <_kill_r+0x20>)
 800a572:	4604      	mov	r4, r0
 800a574:	4608      	mov	r0, r1
 800a576:	4611      	mov	r1, r2
 800a578:	602b      	str	r3, [r5, #0]
 800a57a:	f7f8 fa38 	bl	80029ee <_kill>
 800a57e:	1c43      	adds	r3, r0, #1
 800a580:	d102      	bne.n	800a588 <_kill_r+0x1c>
 800a582:	682b      	ldr	r3, [r5, #0]
 800a584:	b103      	cbz	r3, 800a588 <_kill_r+0x1c>
 800a586:	6023      	str	r3, [r4, #0]
 800a588:	bd38      	pop	{r3, r4, r5, pc}
 800a58a:	bf00      	nop
 800a58c:	200008b0 	.word	0x200008b0

0800a590 <_getpid_r>:
 800a590:	f7f8 ba26 	b.w	80029e0 <_getpid>

0800a594 <__swhatbuf_r>:
 800a594:	b570      	push	{r4, r5, r6, lr}
 800a596:	460c      	mov	r4, r1
 800a598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a59c:	4615      	mov	r5, r2
 800a59e:	2900      	cmp	r1, #0
 800a5a0:	461e      	mov	r6, r3
 800a5a2:	b096      	sub	sp, #88	@ 0x58
 800a5a4:	da0c      	bge.n	800a5c0 <__swhatbuf_r+0x2c>
 800a5a6:	89a3      	ldrh	r3, [r4, #12]
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a5ae:	bf14      	ite	ne
 800a5b0:	2340      	movne	r3, #64	@ 0x40
 800a5b2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a5b6:	2000      	movs	r0, #0
 800a5b8:	6031      	str	r1, [r6, #0]
 800a5ba:	602b      	str	r3, [r5, #0]
 800a5bc:	b016      	add	sp, #88	@ 0x58
 800a5be:	bd70      	pop	{r4, r5, r6, pc}
 800a5c0:	466a      	mov	r2, sp
 800a5c2:	f000 f849 	bl	800a658 <_fstat_r>
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	dbed      	blt.n	800a5a6 <__swhatbuf_r+0x12>
 800a5ca:	9901      	ldr	r1, [sp, #4]
 800a5cc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a5d0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a5d4:	4259      	negs	r1, r3
 800a5d6:	4159      	adcs	r1, r3
 800a5d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5dc:	e7eb      	b.n	800a5b6 <__swhatbuf_r+0x22>

0800a5de <__smakebuf_r>:
 800a5de:	898b      	ldrh	r3, [r1, #12]
 800a5e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5e2:	079d      	lsls	r5, r3, #30
 800a5e4:	4606      	mov	r6, r0
 800a5e6:	460c      	mov	r4, r1
 800a5e8:	d507      	bpl.n	800a5fa <__smakebuf_r+0x1c>
 800a5ea:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a5ee:	6023      	str	r3, [r4, #0]
 800a5f0:	6123      	str	r3, [r4, #16]
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	6163      	str	r3, [r4, #20]
 800a5f6:	b003      	add	sp, #12
 800a5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5fa:	466a      	mov	r2, sp
 800a5fc:	ab01      	add	r3, sp, #4
 800a5fe:	f7ff ffc9 	bl	800a594 <__swhatbuf_r>
 800a602:	9f00      	ldr	r7, [sp, #0]
 800a604:	4605      	mov	r5, r0
 800a606:	4639      	mov	r1, r7
 800a608:	4630      	mov	r0, r6
 800a60a:	f7fd fbfb 	bl	8007e04 <_malloc_r>
 800a60e:	b948      	cbnz	r0, 800a624 <__smakebuf_r+0x46>
 800a610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a614:	059a      	lsls	r2, r3, #22
 800a616:	d4ee      	bmi.n	800a5f6 <__smakebuf_r+0x18>
 800a618:	f023 0303 	bic.w	r3, r3, #3
 800a61c:	f043 0302 	orr.w	r3, r3, #2
 800a620:	81a3      	strh	r3, [r4, #12]
 800a622:	e7e2      	b.n	800a5ea <__smakebuf_r+0xc>
 800a624:	89a3      	ldrh	r3, [r4, #12]
 800a626:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a62a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a62e:	81a3      	strh	r3, [r4, #12]
 800a630:	9b01      	ldr	r3, [sp, #4]
 800a632:	6020      	str	r0, [r4, #0]
 800a634:	b15b      	cbz	r3, 800a64e <__smakebuf_r+0x70>
 800a636:	4630      	mov	r0, r6
 800a638:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a63c:	f000 f81e 	bl	800a67c <_isatty_r>
 800a640:	b128      	cbz	r0, 800a64e <__smakebuf_r+0x70>
 800a642:	89a3      	ldrh	r3, [r4, #12]
 800a644:	f023 0303 	bic.w	r3, r3, #3
 800a648:	f043 0301 	orr.w	r3, r3, #1
 800a64c:	81a3      	strh	r3, [r4, #12]
 800a64e:	89a3      	ldrh	r3, [r4, #12]
 800a650:	431d      	orrs	r5, r3
 800a652:	81a5      	strh	r5, [r4, #12]
 800a654:	e7cf      	b.n	800a5f6 <__smakebuf_r+0x18>
	...

0800a658 <_fstat_r>:
 800a658:	b538      	push	{r3, r4, r5, lr}
 800a65a:	2300      	movs	r3, #0
 800a65c:	4d06      	ldr	r5, [pc, #24]	@ (800a678 <_fstat_r+0x20>)
 800a65e:	4604      	mov	r4, r0
 800a660:	4608      	mov	r0, r1
 800a662:	4611      	mov	r1, r2
 800a664:	602b      	str	r3, [r5, #0]
 800a666:	f7f8 fa21 	bl	8002aac <_fstat>
 800a66a:	1c43      	adds	r3, r0, #1
 800a66c:	d102      	bne.n	800a674 <_fstat_r+0x1c>
 800a66e:	682b      	ldr	r3, [r5, #0]
 800a670:	b103      	cbz	r3, 800a674 <_fstat_r+0x1c>
 800a672:	6023      	str	r3, [r4, #0]
 800a674:	bd38      	pop	{r3, r4, r5, pc}
 800a676:	bf00      	nop
 800a678:	200008b0 	.word	0x200008b0

0800a67c <_isatty_r>:
 800a67c:	b538      	push	{r3, r4, r5, lr}
 800a67e:	2300      	movs	r3, #0
 800a680:	4d05      	ldr	r5, [pc, #20]	@ (800a698 <_isatty_r+0x1c>)
 800a682:	4604      	mov	r4, r0
 800a684:	4608      	mov	r0, r1
 800a686:	602b      	str	r3, [r5, #0]
 800a688:	f7f8 fa1f 	bl	8002aca <_isatty>
 800a68c:	1c43      	adds	r3, r0, #1
 800a68e:	d102      	bne.n	800a696 <_isatty_r+0x1a>
 800a690:	682b      	ldr	r3, [r5, #0]
 800a692:	b103      	cbz	r3, 800a696 <_isatty_r+0x1a>
 800a694:	6023      	str	r3, [r4, #0]
 800a696:	bd38      	pop	{r3, r4, r5, pc}
 800a698:	200008b0 	.word	0x200008b0

0800a69c <_init>:
 800a69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69e:	bf00      	nop
 800a6a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6a2:	bc08      	pop	{r3}
 800a6a4:	469e      	mov	lr, r3
 800a6a6:	4770      	bx	lr

0800a6a8 <_fini>:
 800a6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6aa:	bf00      	nop
 800a6ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ae:	bc08      	pop	{r3}
 800a6b0:	469e      	mov	lr, r3
 800a6b2:	4770      	bx	lr
