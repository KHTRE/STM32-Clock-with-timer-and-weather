
STM32F103C8T6-Clock-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a81c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cf0  0800a930  0800a930  0000b930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d620  0800d620  0000f1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d620  0800d620  0000e620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d628  0800d628  0000f1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d628  0800d628  0000e628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d62c  0800d62c  0000e62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800d630  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ec  200001dc  0800d80c  0000f1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008c8  0800d80c  0000f8c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0af  00000000  00000000  0000f205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000286f  00000000  00000000  0001e2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00020b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cbc  00000000  00000000  00021b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197df  00000000  00000000  00022854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015406  00000000  00000000  0003c033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fb2f  00000000  00000000  00051439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0f68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a48  00000000  00000000  000e0fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000e69f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a914 	.word	0x0800a914

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800a914 	.word	0x0800a914

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_d2lz>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	2200      	movs	r2, #0
 8000d88:	2300      	movs	r3, #0
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	460d      	mov	r5, r1
 8000d8e:	f7ff fe15 	bl	80009bc <__aeabi_dcmplt>
 8000d92:	b928      	cbnz	r0, 8000da0 <__aeabi_d2lz+0x1c>
 8000d94:	4620      	mov	r0, r4
 8000d96:	4629      	mov	r1, r5
 8000d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d9c:	f000 b80a 	b.w	8000db4 <__aeabi_d2ulz>
 8000da0:	4620      	mov	r0, r4
 8000da2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000da6:	f000 f805 	bl	8000db4 <__aeabi_d2ulz>
 8000daa:	4240      	negs	r0, r0
 8000dac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db0:	bd38      	pop	{r3, r4, r5, pc}
 8000db2:	bf00      	nop

08000db4 <__aeabi_d2ulz>:
 8000db4:	b5d0      	push	{r4, r6, r7, lr}
 8000db6:	2200      	movs	r2, #0
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <__aeabi_d2ulz+0x34>)
 8000dba:	4606      	mov	r6, r0
 8000dbc:	460f      	mov	r7, r1
 8000dbe:	f7ff fb8b 	bl	80004d8 <__aeabi_dmul>
 8000dc2:	f7ff fe61 	bl	8000a88 <__aeabi_d2uiz>
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	f7ff fb0c 	bl	80003e4 <__aeabi_ui2d>
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <__aeabi_d2ulz+0x38>)
 8000dd0:	f7ff fb82 	bl	80004d8 <__aeabi_dmul>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	4630      	mov	r0, r6
 8000dda:	4639      	mov	r1, r7
 8000ddc:	f7ff f9c4 	bl	8000168 <__aeabi_dsub>
 8000de0:	f7ff fe52 	bl	8000a88 <__aeabi_d2uiz>
 8000de4:	4621      	mov	r1, r4
 8000de6:	bdd0      	pop	{r4, r6, r7, pc}
 8000de8:	3df00000 	.word	0x3df00000
 8000dec:	41f00000 	.word	0x41f00000

08000df0 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08c      	sub	sp, #48	@ 0x30
 8000df4:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfa:	9302      	str	r3, [sp, #8]
 8000dfc:	2319      	movs	r3, #25
 8000dfe:	9301      	str	r3, [sp, #4]
 8000e00:	463b      	mov	r3, r7
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2301      	movs	r3, #1
 8000e06:	2288      	movs	r2, #136	@ 0x88
 8000e08:	21ec      	movs	r1, #236	@ 0xec
 8000e0a:	4857      	ldr	r0, [pc, #348]	@ (8000f68 <TrimRead+0x178>)
 8000e0c:	f002 fdb2 	bl	8003974 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8000e10:	463b      	mov	r3, r7
 8000e12:	3319      	adds	r3, #25
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295
 8000e18:	9202      	str	r2, [sp, #8]
 8000e1a:	2207      	movs	r2, #7
 8000e1c:	9201      	str	r2, [sp, #4]
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	2301      	movs	r3, #1
 8000e22:	22e1      	movs	r2, #225	@ 0xe1
 8000e24:	21ec      	movs	r1, #236	@ 0xec
 8000e26:	4850      	ldr	r0, [pc, #320]	@ (8000f68 <TrimRead+0x178>)
 8000e28:	f002 fda4 	bl	8003974 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8000e2c:	787b      	ldrb	r3, [r7, #1]
 8000e2e:	021b      	lsls	r3, r3, #8
 8000e30:	b21a      	sxth	r2, r3
 8000e32:	783b      	ldrb	r3, [r7, #0]
 8000e34:	b21b      	sxth	r3, r3
 8000e36:	4313      	orrs	r3, r2
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	4b4b      	ldr	r3, [pc, #300]	@ (8000f6c <TrimRead+0x17c>)
 8000e3e:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8000e40:	78fb      	ldrb	r3, [r7, #3]
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	b21a      	sxth	r2, r3
 8000e46:	78bb      	ldrb	r3, [r7, #2]
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b21a      	sxth	r2, r3
 8000e4e:	4b48      	ldr	r3, [pc, #288]	@ (8000f70 <TrimRead+0x180>)
 8000e50:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8000e52:	797b      	ldrb	r3, [r7, #5]
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	b21a      	sxth	r2, r3
 8000e58:	793b      	ldrb	r3, [r7, #4]
 8000e5a:	b21b      	sxth	r3, r3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b21a      	sxth	r2, r3
 8000e60:	4b44      	ldr	r3, [pc, #272]	@ (8000f74 <TrimRead+0x184>)
 8000e62:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	021b      	lsls	r3, r3, #8
 8000e68:	b21a      	sxth	r2, r3
 8000e6a:	797b      	ldrb	r3, [r7, #5]
 8000e6c:	b21b      	sxth	r3, r3
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	b21b      	sxth	r3, r3
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	4b40      	ldr	r3, [pc, #256]	@ (8000f78 <TrimRead+0x188>)
 8000e76:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8000e78:	7a7b      	ldrb	r3, [r7, #9]
 8000e7a:	021b      	lsls	r3, r3, #8
 8000e7c:	b21a      	sxth	r2, r3
 8000e7e:	79bb      	ldrb	r3, [r7, #6]
 8000e80:	b21b      	sxth	r3, r3
 8000e82:	4313      	orrs	r3, r2
 8000e84:	b21a      	sxth	r2, r3
 8000e86:	4b3d      	ldr	r3, [pc, #244]	@ (8000f7c <TrimRead+0x18c>)
 8000e88:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8000e8a:	7afb      	ldrb	r3, [r7, #11]
 8000e8c:	021b      	lsls	r3, r3, #8
 8000e8e:	b21a      	sxth	r2, r3
 8000e90:	7abb      	ldrb	r3, [r7, #10]
 8000e92:	b21b      	sxth	r3, r3
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b21a      	sxth	r2, r3
 8000e98:	4b39      	ldr	r3, [pc, #228]	@ (8000f80 <TrimRead+0x190>)
 8000e9a:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8000e9c:	7b7b      	ldrb	r3, [r7, #13]
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	b21a      	sxth	r2, r3
 8000ea2:	7b3b      	ldrb	r3, [r7, #12]
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	b21a      	sxth	r2, r3
 8000eaa:	4b36      	ldr	r3, [pc, #216]	@ (8000f84 <TrimRead+0x194>)
 8000eac:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	021b      	lsls	r3, r3, #8
 8000eb2:	b21a      	sxth	r2, r3
 8000eb4:	7bbb      	ldrb	r3, [r7, #14]
 8000eb6:	b21b      	sxth	r3, r3
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	4b32      	ldr	r3, [pc, #200]	@ (8000f88 <TrimRead+0x198>)
 8000ebe:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8000ec0:	7c7b      	ldrb	r3, [r7, #17]
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	b21a      	sxth	r2, r3
 8000ec6:	7c3b      	ldrb	r3, [r7, #16]
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	b21a      	sxth	r2, r3
 8000ece:	4b2f      	ldr	r3, [pc, #188]	@ (8000f8c <TrimRead+0x19c>)
 8000ed0:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8000ed2:	7cfb      	ldrb	r3, [r7, #19]
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	b21a      	sxth	r2, r3
 8000ed8:	7cbb      	ldrb	r3, [r7, #18]
 8000eda:	b21b      	sxth	r3, r3
 8000edc:	4313      	orrs	r3, r2
 8000ede:	b21a      	sxth	r2, r3
 8000ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f90 <TrimRead+0x1a0>)
 8000ee2:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8000ee4:	7d7b      	ldrb	r3, [r7, #21]
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	b21a      	sxth	r2, r3
 8000eea:	7d3b      	ldrb	r3, [r7, #20]
 8000eec:	b21b      	sxth	r3, r3
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	b21a      	sxth	r2, r3
 8000ef2:	4b28      	ldr	r3, [pc, #160]	@ (8000f94 <TrimRead+0x1a4>)
 8000ef4:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8000ef6:	7dfb      	ldrb	r3, [r7, #23]
 8000ef8:	021b      	lsls	r3, r3, #8
 8000efa:	b21a      	sxth	r2, r3
 8000efc:	7dbb      	ldrb	r3, [r7, #22]
 8000efe:	b21b      	sxth	r3, r3
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b21a      	sxth	r2, r3
 8000f04:	4b24      	ldr	r3, [pc, #144]	@ (8000f98 <TrimRead+0x1a8>)
 8000f06:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8000f08:	7e3b      	ldrb	r3, [r7, #24]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	4b23      	ldr	r3, [pc, #140]	@ (8000f9c <TrimRead+0x1ac>)
 8000f0e:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8000f10:	7ebb      	ldrb	r3, [r7, #26]
 8000f12:	021b      	lsls	r3, r3, #8
 8000f14:	b21a      	sxth	r2, r3
 8000f16:	7e7b      	ldrb	r3, [r7, #25]
 8000f18:	b21b      	sxth	r3, r3
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	b21a      	sxth	r2, r3
 8000f1e:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <TrimRead+0x1b0>)
 8000f20:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8000f22:	7efb      	ldrb	r3, [r7, #27]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa4 <TrimRead+0x1b4>)
 8000f28:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8000f2a:	7f3b      	ldrb	r3, [r7, #28]
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	b21a      	sxth	r2, r3
 8000f30:	7f7b      	ldrb	r3, [r7, #29]
 8000f32:	b21b      	sxth	r3, r3
 8000f34:	f003 030f 	and.w	r3, r3, #15
 8000f38:	b21b      	sxth	r3, r3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b21a      	sxth	r2, r3
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <TrimRead+0x1b8>)
 8000f40:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8000f42:	7fbb      	ldrb	r3, [r7, #30]
 8000f44:	011b      	lsls	r3, r3, #4
 8000f46:	b21a      	sxth	r2, r3
 8000f48:	7f7b      	ldrb	r3, [r7, #29]
 8000f4a:	091b      	lsrs	r3, r3, #4
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	b21b      	sxth	r3, r3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	b21a      	sxth	r2, r3
 8000f54:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <TrimRead+0x1bc>)
 8000f56:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8000f58:	7ffb      	ldrb	r3, [r7, #31]
 8000f5a:	b21a      	sxth	r2, r3
 8000f5c:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <TrimRead+0x1c0>)
 8000f5e:	801a      	strh	r2, [r3, #0]
}
 8000f60:	bf00      	nop
 8000f62:	3720      	adds	r7, #32
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000284 	.word	0x20000284
 8000f6c:	20000208 	.word	0x20000208
 8000f70:	20000210 	.word	0x20000210
 8000f74:	20000212 	.word	0x20000212
 8000f78:	2000020a 	.word	0x2000020a
 8000f7c:	20000214 	.word	0x20000214
 8000f80:	20000216 	.word	0x20000216
 8000f84:	20000218 	.word	0x20000218
 8000f88:	2000021a 	.word	0x2000021a
 8000f8c:	2000021c 	.word	0x2000021c
 8000f90:	2000021e 	.word	0x2000021e
 8000f94:	20000220 	.word	0x20000220
 8000f98:	20000222 	.word	0x20000222
 8000f9c:	2000020c 	.word	0x2000020c
 8000fa0:	20000224 	.word	0x20000224
 8000fa4:	2000020e 	.word	0x2000020e
 8000fa8:	20000226 	.word	0x20000226
 8000fac:	20000228 	.word	0x20000228
 8000fb0:	2000022a 	.word	0x2000022a

08000fb4 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b089      	sub	sp, #36	@ 0x24
 8000fb8:	af04      	add	r7, sp, #16
 8000fba:	4604      	mov	r4, r0
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4623      	mov	r3, r4
 8000fc4:	71fb      	strb	r3, [r7, #7]
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71bb      	strb	r3, [r7, #6]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	717b      	strb	r3, [r7, #5]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8000fd2:	f7ff ff0d 	bl	8000df0 <TrimRead>


	uint8_t datatowrite = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8000fde:	23b6      	movs	r3, #182	@ 0xb6
 8000fe0:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000fe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe6:	9302      	str	r3, [sp, #8]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	f107 030f 	add.w	r3, r7, #15
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	22e0      	movs	r2, #224	@ 0xe0
 8000ff6:	21ec      	movs	r1, #236	@ 0xec
 8000ff8:	4858      	ldr	r0, [pc, #352]	@ (800115c <BME280_Config+0x1a8>)
 8000ffa:	f002 fbc1 	bl	8003780 <HAL_I2C_Mem_Write>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d002      	beq.n	800100a <BME280_Config+0x56>
	{
		return -1;
 8001004:	f04f 33ff 	mov.w	r3, #4294967295
 8001008:	e0a3      	b.n	8001152 <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 800100a:	2064      	movs	r0, #100	@ 0x64
 800100c:	f001 ff74 	bl	8002ef8 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8001010:	797b      	ldrb	r3, [r7, #5]
 8001012:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001014:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001018:	9302      	str	r3, [sp, #8]
 800101a:	2301      	movs	r3, #1
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	f107 030f 	add.w	r3, r7, #15
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2301      	movs	r3, #1
 8001026:	22f2      	movs	r2, #242	@ 0xf2
 8001028:	21ec      	movs	r1, #236	@ 0xec
 800102a:	484c      	ldr	r0, [pc, #304]	@ (800115c <BME280_Config+0x1a8>)
 800102c:	f002 fba8 	bl	8003780 <HAL_I2C_Mem_Write>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d002      	beq.n	800103c <BME280_Config+0x88>
	{
		return -1;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
 800103a:	e08a      	b.n	8001152 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 800103c:	2064      	movs	r0, #100	@ 0x64
 800103e:	f001 ff5b 	bl	8002ef8 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 8001042:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	2301      	movs	r3, #1
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	f107 030e 	add.w	r3, r7, #14
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	22f2      	movs	r2, #242	@ 0xf2
 8001056:	21ec      	movs	r1, #236	@ 0xec
 8001058:	4840      	ldr	r0, [pc, #256]	@ (800115c <BME280_Config+0x1a8>)
 800105a:	f002 fc8b 	bl	8003974 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800105e:	7bba      	ldrb	r2, [r7, #14]
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	429a      	cmp	r2, r3
 8001064:	d002      	beq.n	800106c <BME280_Config+0xb8>
	{
		return -1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	e072      	b.n	8001152 <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 800106c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001070:	015b      	lsls	r3, r3, #5
 8001072:	b25a      	sxtb	r2, r3
 8001074:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	b25b      	sxtb	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b25b      	sxtb	r3, r3
 8001080:	b2db      	uxtb	r3, r3
 8001082:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001084:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	2301      	movs	r3, #1
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	f107 030f 	add.w	r3, r7, #15
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	22f5      	movs	r2, #245	@ 0xf5
 8001098:	21ec      	movs	r1, #236	@ 0xec
 800109a:	4830      	ldr	r0, [pc, #192]	@ (800115c <BME280_Config+0x1a8>)
 800109c:	f002 fb70 	bl	8003780 <HAL_I2C_Mem_Write>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d002      	beq.n	80010ac <BME280_Config+0xf8>
	{
		return -1;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	e052      	b.n	8001152 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80010ac:	2064      	movs	r0, #100	@ 0x64
 80010ae:	f001 ff23 	bl	8002ef8 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 80010b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b6:	9302      	str	r3, [sp, #8]
 80010b8:	2301      	movs	r3, #1
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	f107 030e 	add.w	r3, r7, #14
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2301      	movs	r3, #1
 80010c4:	22f5      	movs	r2, #245	@ 0xf5
 80010c6:	21ec      	movs	r1, #236	@ 0xec
 80010c8:	4824      	ldr	r0, [pc, #144]	@ (800115c <BME280_Config+0x1a8>)
 80010ca:	f002 fc53 	bl	8003974 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80010ce:	7bba      	ldrb	r2, [r7, #14]
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d002      	beq.n	80010dc <BME280_Config+0x128>
	{
		return -1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	e03a      	b.n	8001152 <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	015b      	lsls	r3, r3, #5
 80010e0:	b25a      	sxtb	r2, r3
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b25a      	sxtb	r2, r3
 80010ec:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80010f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010fc:	9302      	str	r3, [sp, #8]
 80010fe:	2301      	movs	r3, #1
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	f107 030f 	add.w	r3, r7, #15
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2301      	movs	r3, #1
 800110a:	22f4      	movs	r2, #244	@ 0xf4
 800110c:	21ec      	movs	r1, #236	@ 0xec
 800110e:	4813      	ldr	r0, [pc, #76]	@ (800115c <BME280_Config+0x1a8>)
 8001110:	f002 fb36 	bl	8003780 <HAL_I2C_Mem_Write>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <BME280_Config+0x16c>
	{
		return -1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	e018      	b.n	8001152 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001120:	2064      	movs	r0, #100	@ 0x64
 8001122:	f001 fee9 	bl	8002ef8 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8001126:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800112a:	9302      	str	r3, [sp, #8]
 800112c:	2301      	movs	r3, #1
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	f107 030e 	add.w	r3, r7, #14
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2301      	movs	r3, #1
 8001138:	22f4      	movs	r2, #244	@ 0xf4
 800113a:	21ec      	movs	r1, #236	@ 0xec
 800113c:	4807      	ldr	r0, [pc, #28]	@ (800115c <BME280_Config+0x1a8>)
 800113e:	f002 fc19 	bl	8003974 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001142:	7bba      	ldrb	r2, [r7, #14]
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	429a      	cmp	r2, r3
 8001148:	d002      	beq.n	8001150 <BME280_Config+0x19c>
	{
		return -1;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295
 800114e:	e000      	b.n	8001152 <BME280_Config+0x19e>
	}

	return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	bd90      	pop	{r4, r7, pc}
 800115a:	bf00      	nop
 800115c:	20000284 	.word	0x20000284

08001160 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c2, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 8001166:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800116a:	9302      	str	r3, [sp, #8]
 800116c:	2301      	movs	r3, #1
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	4b1e      	ldr	r3, [pc, #120]	@ (80011ec <BMEReadRaw+0x8c>)
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2301      	movs	r3, #1
 8001176:	22d0      	movs	r2, #208	@ 0xd0
 8001178:	21ec      	movs	r1, #236	@ 0xec
 800117a:	481d      	ldr	r0, [pc, #116]	@ (80011f0 <BMEReadRaw+0x90>)
 800117c:	f002 fbfa 	bl	8003974 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001180:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <BMEReadRaw+0x8c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b60      	cmp	r3, #96	@ 0x60
 8001186:	d12a      	bne.n	80011de <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	2308      	movs	r3, #8
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	463b      	mov	r3, r7
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2301      	movs	r3, #1
 8001198:	22f7      	movs	r2, #247	@ 0xf7
 800119a:	21ec      	movs	r1, #236	@ 0xec
 800119c:	4814      	ldr	r0, [pc, #80]	@ (80011f0 <BMEReadRaw+0x90>)
 800119e:	f002 fbe9 	bl	8003974 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80011a2:	783b      	ldrb	r3, [r7, #0]
 80011a4:	031a      	lsls	r2, r3, #12
 80011a6:	787b      	ldrb	r3, [r7, #1]
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	4313      	orrs	r3, r2
 80011ac:	78ba      	ldrb	r2, [r7, #2]
 80011ae:	0912      	lsrs	r2, r2, #4
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	4313      	orrs	r3, r2
 80011b4:	4a0f      	ldr	r2, [pc, #60]	@ (80011f4 <BMEReadRaw+0x94>)
 80011b6:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80011b8:	78fb      	ldrb	r3, [r7, #3]
 80011ba:	031a      	lsls	r2, r3, #12
 80011bc:	793b      	ldrb	r3, [r7, #4]
 80011be:	011b      	lsls	r3, r3, #4
 80011c0:	4313      	orrs	r3, r2
 80011c2:	797a      	ldrb	r2, [r7, #5]
 80011c4:	0912      	lsrs	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	4313      	orrs	r3, r2
 80011ca:	4a0b      	ldr	r2, [pc, #44]	@ (80011f8 <BMEReadRaw+0x98>)
 80011cc:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 80011ce:	79bb      	ldrb	r3, [r7, #6]
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	79fa      	ldrb	r2, [r7, #7]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	4a09      	ldr	r2, [pc, #36]	@ (80011fc <BMEReadRaw+0x9c>)
 80011d8:	6013      	str	r3, [r2, #0]

		return 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	e001      	b.n	80011e2 <BMEReadRaw+0x82>
	}

	else return -1;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200001f8 	.word	0x200001f8
 80011f0:	20000284 	.word	0x20000284
 80011f4:	20000200 	.word	0x20000200
 80011f8:	200001fc 	.word	0x200001fc
 80011fc:	20000204 	.word	0x20000204

08001200 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001200:	b480      	push	{r7}
 8001202:	b087      	sub	sp, #28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	10da      	asrs	r2, r3, #3
 800120c:	4b18      	ldr	r3, [pc, #96]	@ (8001270 <BME280_compensate_T_int32+0x70>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	4a17      	ldr	r2, [pc, #92]	@ (8001274 <BME280_compensate_T_int32+0x74>)
 8001216:	f9b2 2000 	ldrsh.w	r2, [r2]
 800121a:	fb02 f303 	mul.w	r3, r2, r3
 800121e:	12db      	asrs	r3, r3, #11
 8001220:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	111b      	asrs	r3, r3, #4
 8001226:	4a12      	ldr	r2, [pc, #72]	@ (8001270 <BME280_compensate_T_int32+0x70>)
 8001228:	8812      	ldrh	r2, [r2, #0]
 800122a:	1a9b      	subs	r3, r3, r2
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	1112      	asrs	r2, r2, #4
 8001230:	490f      	ldr	r1, [pc, #60]	@ (8001270 <BME280_compensate_T_int32+0x70>)
 8001232:	8809      	ldrh	r1, [r1, #0]
 8001234:	1a52      	subs	r2, r2, r1
 8001236:	fb02 f303 	mul.w	r3, r2, r3
 800123a:	131b      	asrs	r3, r3, #12
 800123c:	4a0e      	ldr	r2, [pc, #56]	@ (8001278 <BME280_compensate_T_int32+0x78>)
 800123e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001242:	fb02 f303 	mul.w	r3, r2, r3
 8001246:	139b      	asrs	r3, r3, #14
 8001248:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	4413      	add	r3, r2
 8001250:	4a0a      	ldr	r2, [pc, #40]	@ (800127c <BME280_compensate_T_int32+0x7c>)
 8001252:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001254:	4b09      	ldr	r3, [pc, #36]	@ (800127c <BME280_compensate_T_int32+0x7c>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	3380      	adds	r3, #128	@ 0x80
 8001260:	121b      	asrs	r3, r3, #8
 8001262:	60fb      	str	r3, [r7, #12]
	return T;
 8001264:	68fb      	ldr	r3, [r7, #12]
}
 8001266:	4618      	mov	r0, r3
 8001268:	371c      	adds	r7, #28
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	20000208 	.word	0x20000208
 8001274:	20000210 	.word	0x20000210
 8001278:	20000212 	.word	0x20000212
 800127c:	2000022c 	.word	0x2000022c

08001280 <BME280_compensate_P_int32>:
}

#elif SUPPORT_32BIT
// Returns pressure in Pa as unsigned 32 bit integer. Output value of “96386” equals 96386 Pa = 963.86 hPa
uint32_t BME280_compensate_P_int32(int32_t adc_P)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	int32_t var1, var2;
	uint32_t p;
	var1 = (((int32_t)t_fine)>>1) - (int32_t)64000;
 8001288:	4b49      	ldr	r3, [pc, #292]	@ (80013b0 <BME280_compensate_P_int32+0x130>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	105b      	asrs	r3, r3, #1
 800128e:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 8001292:	613b      	str	r3, [r7, #16]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)dig_P6);
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	109b      	asrs	r3, r3, #2
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	1092      	asrs	r2, r2, #2
 800129c:	fb02 f303 	mul.w	r3, r2, r3
 80012a0:	12db      	asrs	r3, r3, #11
 80012a2:	4a44      	ldr	r2, [pc, #272]	@ (80013b4 <BME280_compensate_P_int32+0x134>)
 80012a4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012a8:	fb02 f303 	mul.w	r3, r2, r3
 80012ac:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1*((int32_t)dig_P5))<<1);
 80012ae:	4b42      	ldr	r3, [pc, #264]	@ (80013b8 <BME280_compensate_P_int32+0x138>)
 80012b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b4:	461a      	mov	r2, r3
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	fb02 f303 	mul.w	r3, r2, r3
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	4413      	add	r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]
	var2 = (var2>>2)+(((int32_t)dig_P4)<<16);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	109a      	asrs	r2, r3, #2
 80012c8:	4b3c      	ldr	r3, [pc, #240]	@ (80013bc <BME280_compensate_P_int32+0x13c>)
 80012ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ce:	041b      	lsls	r3, r3, #16
 80012d0:	4413      	add	r3, r2
 80012d2:	60fb      	str	r3, [r7, #12]
	var1 = (((dig_P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)dig_P2) *var1)>>1))>>18;
 80012d4:	4b3a      	ldr	r3, [pc, #232]	@ (80013c0 <BME280_compensate_P_int32+0x140>)
 80012d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012da:	4619      	mov	r1, r3
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	109b      	asrs	r3, r3, #2
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	1092      	asrs	r2, r2, #2
 80012e4:	fb02 f303 	mul.w	r3, r2, r3
 80012e8:	135b      	asrs	r3, r3, #13
 80012ea:	fb01 f303 	mul.w	r3, r1, r3
 80012ee:	10da      	asrs	r2, r3, #3
 80012f0:	4b34      	ldr	r3, [pc, #208]	@ (80013c4 <BME280_compensate_P_int32+0x144>)
 80012f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f6:	4619      	mov	r1, r3
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	fb01 f303 	mul.w	r3, r1, r3
 80012fe:	105b      	asrs	r3, r3, #1
 8001300:	4413      	add	r3, r2
 8001302:	149b      	asrs	r3, r3, #18
 8001304:	613b      	str	r3, [r7, #16]
	var1 =((((32768+var1))*((int32_t)dig_P1))>>15);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800130c:	4a2e      	ldr	r2, [pc, #184]	@ (80013c8 <BME280_compensate_P_int32+0x148>)
 800130e:	8812      	ldrh	r2, [r2, #0]
 8001310:	fb02 f303 	mul.w	r3, r2, r3
 8001314:	13db      	asrs	r3, r3, #15
 8001316:	613b      	str	r3, [r7, #16]
	if (var1 == 0)
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <BME280_compensate_P_int32+0xa2>
	{
		return 0; // avoid exception caused by division by zero
 800131e:	2300      	movs	r3, #0
 8001320:	e041      	b.n	80013a6 <BME280_compensate_P_int32+0x126>
	}
	p = (((uint32_t)(((int32_t)1048576)-adc_P)-(var2>>12)))*3125;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	131b      	asrs	r3, r3, #12
 8001326:	461a      	mov	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4413      	add	r3, r2
 800132c:	4a27      	ldr	r2, [pc, #156]	@ (80013cc <BME280_compensate_P_int32+0x14c>)
 800132e:	fb02 f303 	mul.w	r3, r2, r3
 8001332:	f103 4343 	add.w	r3, r3, #3271557120	@ 0xc3000000
 8001336:	f503 03a0 	add.w	r3, r3, #5242880	@ 0x500000
 800133a:	617b      	str	r3, [r7, #20]
	if (p < 0x80000000)
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	2b00      	cmp	r3, #0
 8001340:	db06      	blt.n	8001350 <BME280_compensate_P_int32+0xd0>
	{
		p = (p << 1) / ((uint32_t)var1);
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	005a      	lsls	r2, r3, #1
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	fbb2 f3f3 	udiv	r3, r2, r3
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	e005      	b.n	800135c <BME280_compensate_P_int32+0xdc>
	}
	else
	{
		p = (p / (uint32_t)var1) * 2;
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	fbb2 f3f3 	udiv	r3, r2, r3
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	617b      	str	r3, [r7, #20]
	}
	var1 = (((int32_t)dig_P9) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 800135c:	4b1c      	ldr	r3, [pc, #112]	@ (80013d0 <BME280_compensate_P_int32+0x150>)
 800135e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001362:	4619      	mov	r1, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	08db      	lsrs	r3, r3, #3
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	08d2      	lsrs	r2, r2, #3
 800136c:	fb02 f303 	mul.w	r3, r2, r3
 8001370:	0b5b      	lsrs	r3, r3, #13
 8001372:	fb01 f303 	mul.w	r3, r1, r3
 8001376:	131b      	asrs	r3, r3, #12
 8001378:	613b      	str	r3, [r7, #16]
	var2 = (((int32_t)(p>>2)) * ((int32_t)dig_P8))>>13;
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	461a      	mov	r2, r3
 8001380:	4b14      	ldr	r3, [pc, #80]	@ (80013d4 <BME280_compensate_P_int32+0x154>)
 8001382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001386:	fb02 f303 	mul.w	r3, r2, r3
 800138a:	135b      	asrs	r3, r3, #13
 800138c:	60fb      	str	r3, [r7, #12]
	p = (uint32_t)((int32_t)p + ((var1 + var2 + dig_P7) >> 4));
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4413      	add	r3, r2
 8001394:	4a10      	ldr	r2, [pc, #64]	@ (80013d8 <BME280_compensate_P_int32+0x158>)
 8001396:	f9b2 2000 	ldrsh.w	r2, [r2]
 800139a:	4413      	add	r3, r2
 800139c:	111a      	asrs	r2, r3, #4
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	4413      	add	r3, r2
 80013a2:	617b      	str	r3, [r7, #20]
	return p;
 80013a4:	697b      	ldr	r3, [r7, #20]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	371c      	adds	r7, #28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	2000022c 	.word	0x2000022c
 80013b4:	2000021c 	.word	0x2000021c
 80013b8:	2000021a 	.word	0x2000021a
 80013bc:	20000218 	.word	0x20000218
 80013c0:	20000216 	.word	0x20000216
 80013c4:	20000214 	.word	0x20000214
 80013c8:	2000020a 	.word	0x2000020a
 80013cc:	fffff3cb 	.word	0xfffff3cb
 80013d0:	20000222 	.word	0x20000222
 80013d4:	20000220 	.word	0x20000220
 80013d8:	2000021e 	.word	0x2000021e

080013dc <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 80013e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001498 <bme280_compensate_H_int32+0xbc>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 80013ec:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	039a      	lsls	r2, r3, #14
 80013f2:	4b2a      	ldr	r3, [pc, #168]	@ (800149c <bme280_compensate_H_int32+0xc0>)
 80013f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f8:	051b      	lsls	r3, r3, #20
 80013fa:	1ad2      	subs	r2, r2, r3
 80013fc:	4b28      	ldr	r3, [pc, #160]	@ (80014a0 <bme280_compensate_H_int32+0xc4>)
 80013fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001402:	4619      	mov	r1, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	fb01 f303 	mul.w	r3, r1, r3
 800140a:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 800140c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001410:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001412:	4a24      	ldr	r2, [pc, #144]	@ (80014a4 <bme280_compensate_H_int32+0xc8>)
 8001414:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001418:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001420:	1292      	asrs	r2, r2, #10
 8001422:	4921      	ldr	r1, [pc, #132]	@ (80014a8 <bme280_compensate_H_int32+0xcc>)
 8001424:	8809      	ldrh	r1, [r1, #0]
 8001426:	4608      	mov	r0, r1
 8001428:	68f9      	ldr	r1, [r7, #12]
 800142a:	fb00 f101 	mul.w	r1, r0, r1
 800142e:	12c9      	asrs	r1, r1, #11
 8001430:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001434:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001438:	1292      	asrs	r2, r2, #10
 800143a:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800143e:	491b      	ldr	r1, [pc, #108]	@ (80014ac <bme280_compensate_H_int32+0xd0>)
 8001440:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001444:	fb01 f202 	mul.w	r2, r1, r2
 8001448:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
					8192) >> 14));
 800144c:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	13db      	asrs	r3, r3, #15
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	13d2      	asrs	r2, r2, #15
 800145c:	fb02 f303 	mul.w	r3, r2, r3
 8001460:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001462:	4a13      	ldr	r2, [pc, #76]	@ (80014b0 <bme280_compensate_H_int32+0xd4>)
 8001464:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001466:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 800146a:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001478:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001480:	bfa8      	it	ge
 8001482:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001486:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	131b      	asrs	r3, r3, #12
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	2000022c 	.word	0x2000022c
 800149c:	20000226 	.word	0x20000226
 80014a0:	20000228 	.word	0x20000228
 80014a4:	2000022a 	.word	0x2000022a
 80014a8:	2000020e 	.word	0x2000020e
 80014ac:	20000224 	.word	0x20000224
 80014b0:	2000020c 	.word	0x2000020c

080014b4 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 80014b8:	f7ff fe52 	bl	8001160 <BMEReadRaw>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d158      	bne.n	8001574 <BME280_Measure+0xc0>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 80014c2:	4b33      	ldr	r3, [pc, #204]	@ (8001590 <BME280_Measure+0xdc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80014ca:	d104      	bne.n	80014d6 <BME280_Measure+0x22>
 80014cc:	4b31      	ldr	r3, [pc, #196]	@ (8001594 <BME280_Measure+0xe0>)
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	e016      	b.n	8001504 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 80014d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001590 <BME280_Measure+0xdc>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fe90 	bl	8001200 <BME280_compensate_T_int32>
 80014e0:	4603      	mov	r3, r0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7fe ff8e 	bl	8000404 <__aeabi_i2d>
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <BME280_Measure+0xe4>)
 80014ee:	f7ff f91d 	bl	800072c <__aeabi_ddiv>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4610      	mov	r0, r2
 80014f8:	4619      	mov	r1, r3
 80014fa:	f7ff fae5 	bl	8000ac8 <__aeabi_d2f>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a24      	ldr	r2, [pc, #144]	@ (8001594 <BME280_Measure+0xe0>)
 8001502:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001504:	4b25      	ldr	r3, [pc, #148]	@ (800159c <BME280_Measure+0xe8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800150c:	d104      	bne.n	8001518 <BME280_Measure+0x64>
 800150e:	4b24      	ldr	r3, [pc, #144]	@ (80015a0 <BME280_Measure+0xec>)
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	e00b      	b.n	8001530 <BME280_Measure+0x7c>
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256

#elif SUPPORT_32BIT
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa
 8001518:	4b20      	ldr	r3, [pc, #128]	@ (800159c <BME280_Measure+0xe8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff feaf 	bl	8001280 <BME280_compensate_P_int32>
 8001522:	4603      	mov	r3, r0
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fbd5 	bl	8000cd4 <__aeabi_ui2f>
 800152a:	4603      	mov	r3, r0
 800152c:	4a1c      	ldr	r2, [pc, #112]	@ (80015a0 <BME280_Measure+0xec>)
 800152e:	6013      	str	r3, [r2, #0]

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001530:	4b1c      	ldr	r3, [pc, #112]	@ (80015a4 <BME280_Measure+0xf0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001538:	d104      	bne.n	8001544 <BME280_Measure+0x90>
 800153a:	4b1b      	ldr	r3, [pc, #108]	@ (80015a8 <BME280_Measure+0xf4>)
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001542:	e023      	b.n	800158c <BME280_Measure+0xd8>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001544:	4b17      	ldr	r3, [pc, #92]	@ (80015a4 <BME280_Measure+0xf0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff47 	bl	80013dc <bme280_compensate_H_int32>
 800154e:	4603      	mov	r3, r0
 8001550:	4618      	mov	r0, r3
 8001552:	f7fe ff47 	bl	80003e4 <__aeabi_ui2d>
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	4b14      	ldr	r3, [pc, #80]	@ (80015ac <BME280_Measure+0xf8>)
 800155c:	f7ff f8e6 	bl	800072c <__aeabi_ddiv>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff faae 	bl	8000ac8 <__aeabi_d2f>
 800156c:	4603      	mov	r3, r0
 800156e:	4a0e      	ldr	r2, [pc, #56]	@ (80015a8 <BME280_Measure+0xf4>)
 8001570:	6013      	str	r3, [r2, #0]
}
 8001572:	e00b      	b.n	800158c <BME280_Measure+0xd8>
		Temperature = Pressure = Humidity = 0;
 8001574:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <BME280_Measure+0xf4>)
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <BME280_Measure+0xf4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a07      	ldr	r2, [pc, #28]	@ (80015a0 <BME280_Measure+0xec>)
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <BME280_Measure+0xec>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a02      	ldr	r2, [pc, #8]	@ (8001594 <BME280_Measure+0xe0>)
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200001fc 	.word	0x200001fc
 8001594:	20000334 	.word	0x20000334
 8001598:	40590000 	.word	0x40590000
 800159c:	20000200 	.word	0x20000200
 80015a0:	20000338 	.word	0x20000338
 80015a4:	20000204 	.word	0x20000204
 80015a8:	2000033c 	.word	0x2000033c
 80015ac:	40900000 	.word	0x40900000

080015b0 <DecimalToBCD>:
RTC_TimeTypeDef sTime = {0};
RTC_DateTypeDef DateToUpdate = {0};
RTC_AlarmTypeDef sAlarm = {0};
RTC_DateTypeDef sDate = {0};

uint8_t DecimalToBCD(uint8_t val) {
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
    return ((val / 10) << 4) | (val % 10);
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	4a0d      	ldr	r2, [pc, #52]	@ (80015f4 <DecimalToBCD+0x44>)
 80015be:	fba2 2303 	umull	r2, r3, r2, r3
 80015c2:	08db      	lsrs	r3, r3, #3
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	b258      	sxtb	r0, r3
 80015ca:	79fa      	ldrb	r2, [r7, #7]
 80015cc:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <DecimalToBCD+0x44>)
 80015ce:	fba3 1302 	umull	r1, r3, r3, r2
 80015d2:	08d9      	lsrs	r1, r3, #3
 80015d4:	460b      	mov	r3, r1
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	b25b      	sxtb	r3, r3
 80015e2:	4303      	orrs	r3, r0
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	b2db      	uxtb	r3, r3
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	cccccccd 	.word	0xcccccccd

080015f8 <BCD_to_Decimal>:

uint8_t BCD_to_Decimal(uint8_t bcd) {
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
   return ((bcd >> 4) * 10) + (bcd & 0x0F);
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	091b      	lsrs	r3, r3, #4
 8001606:	b2db      	uxtb	r3, r3
 8001608:	461a      	mov	r2, r3
 800160a:	0092      	lsls	r2, r2, #2
 800160c:	4413      	add	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	b2da      	uxtb	r2, r3
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	f003 030f 	and.w	r3, r3, #15
 8001618:	b2db      	uxtb	r3, r3
 800161a:	4413      	add	r3, r2
 800161c:	b2db      	uxtb	r3, r3
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <checkShouldGoToTimer.1>:
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);


  //  Not sure I need it
  void checkShouldGoToTimer()
  {
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	f8c7 c004 	str.w	ip, [r7, #4]
	uint8_t rawCounter = __HAL_TIM_GET_COUNTER(&htim2);
 8001632:	4b0a      	ldr	r3, [pc, #40]	@ (800165c <checkShouldGoToTimer.1+0x34>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001638:	73fb      	strb	r3, [r7, #15]

	if (rawCounter != prevCounter)
 800163a:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <checkShouldGoToTimer.1+0x38>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	7bfa      	ldrb	r2, [r7, #15]
 8001640:	429a      	cmp	r2, r3
 8001642:	d006      	beq.n	8001652 <checkShouldGoToTimer.1+0x2a>
	{
		activeScreen = screenTimer;
 8001644:	4b07      	ldr	r3, [pc, #28]	@ (8001664 <checkShouldGoToTimer.1+0x3c>)
 8001646:	781a      	ldrb	r2, [r3, #0]
 8001648:	4b07      	ldr	r3, [pc, #28]	@ (8001668 <checkShouldGoToTimer.1+0x40>)
 800164a:	701a      	strb	r2, [r3, #0]
		prevCounter = rawCounter;
 800164c:	4a04      	ldr	r2, [pc, #16]	@ (8001660 <checkShouldGoToTimer.1+0x38>)
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	7013      	strb	r3, [r2, #0]
	}
  }
 8001652:	bf00      	nop
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	200002ec 	.word	0x200002ec
 8001660:	2000034d 	.word	0x2000034d
 8001664:	20000001 	.word	0x20000001
 8001668:	20000343 	.word	0x20000343

0800166c <main>:
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af02      	add	r7, sp, #8
int main(void)
 8001672:	f107 0310 	add.w	r3, r7, #16
 8001676:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8001678:	f001 fbdc 	bl	8002e34 <HAL_Init>
  SystemClock_Config();
 800167c:	f000 fb30 	bl	8001ce0 <SystemClock_Config>
  MX_GPIO_Init();
 8001680:	f000 fc9a 	bl	8001fb8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001684:	f000 fb8a 	bl	8001d9c <MX_I2C1_Init>
  MX_RTC_Init();
 8001688:	f000 fbe4 	bl	8001e54 <MX_RTC_Init>
  MX_TIM2_Init();
 800168c:	f000 fc42 	bl	8001f14 <MX_TIM2_Init>
  MX_I2C2_Init();
 8001690:	f000 fbb2 	bl	8001df8 <MX_I2C2_Init>
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001694:	2304      	movs	r3, #4
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	2300      	movs	r3, #0
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2303      	movs	r3, #3
 800169e:	2201      	movs	r2, #1
 80016a0:	2105      	movs	r1, #5
 80016a2:	2002      	movs	r0, #2
 80016a4:	f7ff fc86 	bl	8000fb4 <BME280_Config>
  ssd1306_Init();
 80016a8:	f000 ff12 	bl	80024d0 <ssd1306_Init>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80016ac:	213c      	movs	r1, #60	@ 0x3c
 80016ae:	4821      	ldr	r0, [pc, #132]	@ (8001734 <main+0xc8>)
 80016b0:	f004 fc30 	bl	8005f14 <HAL_TIM_Encoder_Start>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  ssd1306_Fill(Black);
 80016b4:	2000      	movs	r0, #0
 80016b6:	f000 ff75 	bl	80025a4 <ssd1306_Fill>


	  if (activeScreen == screenTime)
 80016ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001738 <main+0xcc>)
 80016bc:	781a      	ldrb	r2, [r3, #0]
 80016be:	4b1f      	ldr	r3, [pc, #124]	@ (800173c <main+0xd0>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d104      	bne.n	80016d0 <main+0x64>
	  {
		  printTimeScreen();
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	469c      	mov	ip, r3
 80016ca:	f000 f841 	bl	8001750 <printTimeScreen.0>
 80016ce:	e02a      	b.n	8001726 <main+0xba>
	  } else if (activeScreen == screenWeather)
 80016d0:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <main+0xcc>)
 80016d2:	781a      	ldrb	r2, [r3, #0]
 80016d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001740 <main+0xd4>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d104      	bne.n	80016e6 <main+0x7a>
	  {
		  printWeatherScreen();
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	469c      	mov	ip, r3
 80016e0:	f000 f8b6 	bl	8001850 <printWeatherScreen.2>
 80016e4:	e01f      	b.n	8001726 <main+0xba>
	  } else if (activeScreen == screenTimer)
 80016e6:	4b14      	ldr	r3, [pc, #80]	@ (8001738 <main+0xcc>)
 80016e8:	781a      	ldrb	r2, [r3, #0]
 80016ea:	4b16      	ldr	r3, [pc, #88]	@ (8001744 <main+0xd8>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d104      	bne.n	80016fc <main+0x90>
	  {
		  printTimerScreen();
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	469c      	mov	ip, r3
 80016f6:	f000 f921 	bl	800193c <printTimerScreen.3>
 80016fa:	e014      	b.n	8001726 <main+0xba>
	  } else if (activeScreen == screenMenu)
 80016fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <main+0xcc>)
 80016fe:	781a      	ldrb	r2, [r3, #0]
 8001700:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <main+0xdc>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d104      	bne.n	8001712 <main+0xa6>
	  {
		  printMenuScreen();
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	469c      	mov	ip, r3
 800170c:	f000 f9b6 	bl	8001a7c <printMenuScreen.4>
 8001710:	e009      	b.n	8001726 <main+0xba>
	  } else if (activeScreen == screenSetTime)
 8001712:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <main+0xcc>)
 8001714:	781a      	ldrb	r2, [r3, #0]
 8001716:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <main+0xe0>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d103      	bne.n	8001726 <main+0xba>
	  {
		  printSetTimeScreen();
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	469c      	mov	ip, r3
 8001722:	f000 fa27 	bl	8001b74 <printSetTimeScreen.5>
	  }


	  ssd1306_UpdateScreen();
 8001726:	f000 ff55 	bl	80025d4 <ssd1306_UpdateScreen>

	  checkAlarm();
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	469c      	mov	ip, r3
 800172e:	f000 faad 	bl	8001c8c <checkAlarm.6>
	  ssd1306_Fill(Black);
 8001732:	e7bf      	b.n	80016b4 <main+0x48>
 8001734:	200002ec 	.word	0x200002ec
 8001738:	20000343 	.word	0x20000343
 800173c:	20000344 	.word	0x20000344
 8001740:	20000000 	.word	0x20000000
 8001744:	20000001 	.word	0x20000001
 8001748:	20000002 	.word	0x20000002
 800174c:	20000003 	.word	0x20000003

08001750 <printTimeScreen.0>:
  {
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af02      	add	r7, sp, #8
 8001756:	4663      	mov	r3, ip
 8001758:	f8c7 c004 	str.w	ip, [r7, #4]
	  checkShouldGoToTimer();
 800175c:	469c      	mov	ip, r3
 800175e:	f7ff ff63 	bl	8001628 <checkShouldGoToTimer.1>
	  HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BCD);
 8001762:	2201      	movs	r2, #1
 8001764:	4932      	ldr	r1, [pc, #200]	@ (8001830 <printTimeScreen.0+0xe0>)
 8001766:	4833      	ldr	r0, [pc, #204]	@ (8001834 <printTimeScreen.0+0xe4>)
 8001768:	f003 fdcc 	bl	8005304 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &DateToUpdate, FORMAT_BCD);
 800176c:	2201      	movs	r2, #1
 800176e:	4932      	ldr	r1, [pc, #200]	@ (8001838 <printTimeScreen.0+0xe8>)
 8001770:	4830      	ldr	r0, [pc, #192]	@ (8001834 <printTimeScreen.0+0xe4>)
 8001772:	f003 ff55 	bl	8005620 <HAL_RTC_GetDate>
	  uint8_t time_Hours = BCD_to_Decimal(sTime.Hours);
 8001776:	4b2e      	ldr	r3, [pc, #184]	@ (8001830 <printTimeScreen.0+0xe0>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff ff3c 	bl	80015f8 <BCD_to_Decimal>
 8001780:	4603      	mov	r3, r0
 8001782:	75fb      	strb	r3, [r7, #23]
	  uint8_t time_Minutes = BCD_to_Decimal(sTime.Minutes);
 8001784:	4b2a      	ldr	r3, [pc, #168]	@ (8001830 <printTimeScreen.0+0xe0>)
 8001786:	785b      	ldrb	r3, [r3, #1]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff35 	bl	80015f8 <BCD_to_Decimal>
 800178e:	4603      	mov	r3, r0
 8001790:	75bb      	strb	r3, [r7, #22]
	  uint8_t time_Seconds = BCD_to_Decimal(sTime.Seconds);
 8001792:	4b27      	ldr	r3, [pc, #156]	@ (8001830 <printTimeScreen.0+0xe0>)
 8001794:	789b      	ldrb	r3, [r3, #2]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ff2e 	bl	80015f8 <BCD_to_Decimal>
 800179c:	4603      	mov	r3, r0
 800179e:	757b      	strb	r3, [r7, #21]
	  sprintf(buffer_hours, "%02d", time_Hours);
 80017a0:	7dfa      	ldrb	r2, [r7, #23]
 80017a2:	f107 0310 	add.w	r3, r7, #16
 80017a6:	4925      	ldr	r1, [pc, #148]	@ (800183c <printTimeScreen.0+0xec>)
 80017a8:	4618      	mov	r0, r3
 80017aa:	f005 fc87 	bl	80070bc <siprintf>
	  sprintf(buffer_min, "%02d", time_Minutes);
 80017ae:	7dba      	ldrb	r2, [r7, #22]
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	4921      	ldr	r1, [pc, #132]	@ (800183c <printTimeScreen.0+0xec>)
 80017b6:	4618      	mov	r0, r3
 80017b8:	f005 fc80 	bl	80070bc <siprintf>
	  sprintf(buffer_sec, "%02d", time_Seconds);
 80017bc:	7d7a      	ldrb	r2, [r7, #21]
 80017be:	f107 0308 	add.w	r3, r7, #8
 80017c2:	491e      	ldr	r1, [pc, #120]	@ (800183c <printTimeScreen.0+0xec>)
 80017c4:	4618      	mov	r0, r3
 80017c6:	f005 fc79 	bl	80070bc <siprintf>
	  ssd1306_SetCursor(0, 0);
 80017ca:	2100      	movs	r1, #0
 80017cc:	2000      	movs	r0, #0
 80017ce:	f001 f831 	bl	8002834 <ssd1306_SetCursor>
	  ssd1306_WriteString(buffer_hours, Font_16x26, White);
 80017d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001840 <printTimeScreen.0+0xf0>)
 80017d4:	f107 0010 	add.w	r0, r7, #16
 80017d8:	2201      	movs	r2, #1
 80017da:	9200      	str	r2, [sp, #0]
 80017dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017de:	f001 f803 	bl	80027e8 <ssd1306_WriteString>
	  ssd1306_SetCursor(35, 0);
 80017e2:	2100      	movs	r1, #0
 80017e4:	2023      	movs	r0, #35	@ 0x23
 80017e6:	f001 f825 	bl	8002834 <ssd1306_SetCursor>
	  ssd1306_WriteString(":", Font_16x26, White);
 80017ea:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <printTimeScreen.0+0xf0>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	9200      	str	r2, [sp, #0]
 80017f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017f2:	4814      	ldr	r0, [pc, #80]	@ (8001844 <printTimeScreen.0+0xf4>)
 80017f4:	f000 fff8 	bl	80027e8 <ssd1306_WriteString>
	  ssd1306_SetCursor(55, 0);
 80017f8:	2100      	movs	r1, #0
 80017fa:	2037      	movs	r0, #55	@ 0x37
 80017fc:	f001 f81a 	bl	8002834 <ssd1306_SetCursor>
	  ssd1306_WriteString(buffer_min, Font_16x26, White);
 8001800:	4b0f      	ldr	r3, [pc, #60]	@ (8001840 <printTimeScreen.0+0xf0>)
 8001802:	f107 000c 	add.w	r0, r7, #12
 8001806:	2201      	movs	r2, #1
 8001808:	9200      	str	r2, [sp, #0]
 800180a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800180c:	f000 ffec 	bl	80027e8 <ssd1306_WriteString>
	  ssd1306_SetCursor(95, 0);
 8001810:	2100      	movs	r1, #0
 8001812:	205f      	movs	r0, #95	@ 0x5f
 8001814:	f001 f80e 	bl	8002834 <ssd1306_SetCursor>
	  ssd1306_WriteString(buffer_sec, Font_7x10, White);
 8001818:	4b0b      	ldr	r3, [pc, #44]	@ (8001848 <printTimeScreen.0+0xf8>)
 800181a:	f107 0008 	add.w	r0, r7, #8
 800181e:	2201      	movs	r2, #1
 8001820:	9200      	str	r2, [sp, #0]
 8001822:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001824:	f000 ffe0 	bl	80027e8 <ssd1306_WriteString>
  }
 8001828:	bf00      	nop
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000350 	.word	0x20000350
 8001834:	200002d8 	.word	0x200002d8
 8001838:	20000354 	.word	0x20000354
 800183c:	0800a930 	.word	0x0800a930
 8001840:	0800d1a8 	.word	0x0800d1a8
 8001844:	0800a938 	.word	0x0800a938
 8001848:	0800d190 	.word	0x0800d190
 800184c:	00000000 	.word	0x00000000

08001850 <printWeatherScreen.2>:
  {
 8001850:	b580      	push	{r7, lr}
 8001852:	b08e      	sub	sp, #56	@ 0x38
 8001854:	af02      	add	r7, sp, #8
 8001856:	f8c7 c004 	str.w	ip, [r7, #4]
	  BME280_Measure();
 800185a:	f7ff fe2b 	bl	80014b4 <BME280_Measure>
	  HAL_Delay(100);
 800185e:	2064      	movs	r0, #100	@ 0x64
 8001860:	f001 fb4a 	bl	8002ef8 <HAL_Delay>
	  snprintf(bufferTemp, sizeof(bufferTemp), "%05.2f C", Temperature);
 8001864:	4b2e      	ldr	r3, [pc, #184]	@ (8001920 <printWeatherScreen.2+0xd0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fddd 	bl	8000428 <__aeabi_f2d>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001876:	e9cd 2300 	strd	r2, r3, [sp]
 800187a:	4a2a      	ldr	r2, [pc, #168]	@ (8001924 <printWeatherScreen.2+0xd4>)
 800187c:	210a      	movs	r1, #10
 800187e:	f005 fbe9 	bl	8007054 <sniprintf>
	  snprintf(bufferPres, sizeof(bufferPres), "%06.2f mm p.c.", Pressure / 133.322);
 8001882:	4b29      	ldr	r3, [pc, #164]	@ (8001928 <printWeatherScreen.2+0xd8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fdce 	bl	8000428 <__aeabi_f2d>
 800188c:	a322      	add	r3, pc, #136	@ (adr r3, 8001918 <printWeatherScreen.2+0xc8>)
 800188e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001892:	f7fe ff4b 	bl	800072c <__aeabi_ddiv>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	f107 0014 	add.w	r0, r7, #20
 800189e:	e9cd 2300 	strd	r2, r3, [sp]
 80018a2:	4a22      	ldr	r2, [pc, #136]	@ (800192c <printWeatherScreen.2+0xdc>)
 80018a4:	210f      	movs	r1, #15
 80018a6:	f005 fbd5 	bl	8007054 <sniprintf>
	  snprintf(bufferHum, sizeof(bufferHum), "%05.2f %%", Humidity);
 80018aa:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <printWeatherScreen.2+0xe0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fdba 	bl	8000428 <__aeabi_f2d>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	f107 0008 	add.w	r0, r7, #8
 80018bc:	e9cd 2300 	strd	r2, r3, [sp]
 80018c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001934 <printWeatherScreen.2+0xe4>)
 80018c2:	210a      	movs	r1, #10
 80018c4:	f005 fbc6 	bl	8007054 <sniprintf>
	  ssd1306_SetCursor(0, 0);
 80018c8:	2100      	movs	r1, #0
 80018ca:	2000      	movs	r0, #0
 80018cc:	f000 ffb2 	bl	8002834 <ssd1306_SetCursor>
	  ssd1306_WriteString(bufferTemp, Font_11x18, White);
 80018d0:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <printWeatherScreen.2+0xe8>)
 80018d2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80018d6:	2201      	movs	r2, #1
 80018d8:	9200      	str	r2, [sp, #0]
 80018da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018dc:	f000 ff84 	bl	80027e8 <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 20);
 80018e0:	2114      	movs	r1, #20
 80018e2:	2000      	movs	r0, #0
 80018e4:	f000 ffa6 	bl	8002834 <ssd1306_SetCursor>
	  ssd1306_WriteString(bufferHum, Font_11x18, White);
 80018e8:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <printWeatherScreen.2+0xe8>)
 80018ea:	f107 0008 	add.w	r0, r7, #8
 80018ee:	2201      	movs	r2, #1
 80018f0:	9200      	str	r2, [sp, #0]
 80018f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018f4:	f000 ff78 	bl	80027e8 <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 40);
 80018f8:	2128      	movs	r1, #40	@ 0x28
 80018fa:	2000      	movs	r0, #0
 80018fc:	f000 ff9a 	bl	8002834 <ssd1306_SetCursor>
	  ssd1306_WriteString(bufferPres, Font_11x18, White);
 8001900:	4b0d      	ldr	r3, [pc, #52]	@ (8001938 <printWeatherScreen.2+0xe8>)
 8001902:	f107 0014 	add.w	r0, r7, #20
 8001906:	2201      	movs	r2, #1
 8001908:	9200      	str	r2, [sp, #0]
 800190a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800190c:	f000 ff6c 	bl	80027e8 <ssd1306_WriteString>
  }
 8001910:	bf00      	nop
 8001912:	3730      	adds	r7, #48	@ 0x30
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	d2f1a9fc 	.word	0xd2f1a9fc
 800191c:	4060aa4d 	.word	0x4060aa4d
 8001920:	20000334 	.word	0x20000334
 8001924:	0800a93c 	.word	0x0800a93c
 8001928:	20000338 	.word	0x20000338
 800192c:	0800a948 	.word	0x0800a948
 8001930:	2000033c 	.word	0x2000033c
 8001934:	0800a958 	.word	0x0800a958
 8001938:	0800d19c 	.word	0x0800d19c

0800193c <printTimerScreen.3>:
  {
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af02      	add	r7, sp, #8
 8001942:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BCD);
 8001946:	2201      	movs	r2, #1
 8001948:	4942      	ldr	r1, [pc, #264]	@ (8001a54 <printTimerScreen.3+0x118>)
 800194a:	4843      	ldr	r0, [pc, #268]	@ (8001a58 <printTimerScreen.3+0x11c>)
 800194c:	f003 fcda 	bl	8005304 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &DateToUpdate, FORMAT_BCD);
 8001950:	2201      	movs	r2, #1
 8001952:	4942      	ldr	r1, [pc, #264]	@ (8001a5c <printTimerScreen.3+0x120>)
 8001954:	4840      	ldr	r0, [pc, #256]	@ (8001a58 <printTimerScreen.3+0x11c>)
 8001956:	f003 fe63 	bl	8005620 <HAL_RTC_GetDate>
	  uint32_t rawCounter = __HAL_TIM_GET_COUNTER(&htim2);
 800195a:	4b41      	ldr	r3, [pc, #260]	@ (8001a60 <printTimerScreen.3+0x124>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001960:	617b      	str	r3, [r7, #20]
	  if (counterMode == 0) {
 8001962:	4b40      	ldr	r3, [pc, #256]	@ (8001a64 <printTimerScreen.3+0x128>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d104      	bne.n	8001974 <printTimerScreen.3+0x38>
		counter = rawCounter;
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a68 <printTimerScreen.3+0x12c>)
 8001970:	701a      	strb	r2, [r3, #0]
 8001972:	e01f      	b.n	80019b4 <printTimerScreen.3+0x78>
		if (rawCounter == 13) {
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	2b0d      	cmp	r3, #13
 8001978:	d107      	bne.n	800198a <printTimerScreen.3+0x4e>
			__HAL_TIM_SET_COUNTER(&htim2, 1); // 12 * 5 = 60
 800197a:	4b39      	ldr	r3, [pc, #228]	@ (8001a60 <printTimerScreen.3+0x124>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2201      	movs	r2, #1
 8001980:	625a      	str	r2, [r3, #36]	@ 0x24
			counter = 0;
 8001982:	4b39      	ldr	r3, [pc, #228]	@ (8001a68 <printTimerScreen.3+0x12c>)
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
 8001988:	e014      	b.n	80019b4 <printTimerScreen.3+0x78>
		} else if (rawCounter == 0) {
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d107      	bne.n	80019a0 <printTimerScreen.3+0x64>
			__HAL_TIM_SET_COUNTER(&htim2, 12); // 11 * 5 = 55
 8001990:	4b33      	ldr	r3, [pc, #204]	@ (8001a60 <printTimerScreen.3+0x124>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	220c      	movs	r2, #12
 8001996:	625a      	str	r2, [r3, #36]	@ 0x24
			counter = 55;
 8001998:	4b33      	ldr	r3, [pc, #204]	@ (8001a68 <printTimerScreen.3+0x12c>)
 800199a:	2237      	movs	r2, #55	@ 0x37
 800199c:	701a      	strb	r2, [r3, #0]
 800199e:	e009      	b.n	80019b4 <printTimerScreen.3+0x78>
			counter = (rawCounter - 1) * 5;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	461a      	mov	r2, r3
 80019a6:	0092      	lsls	r2, r2, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	3b05      	subs	r3, #5
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a68 <printTimerScreen.3+0x12c>)
 80019b2:	701a      	strb	r2, [r3, #0]
	  uint8_t timer_Minutes = BCD_to_Decimal(sAlarm.AlarmTime.Minutes);
 80019b4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a6c <printTimerScreen.3+0x130>)
 80019b6:	785b      	ldrb	r3, [r3, #1]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fe1d 	bl	80015f8 <BCD_to_Decimal>
 80019be:	4603      	mov	r3, r0
 80019c0:	74fb      	strb	r3, [r7, #19]
	  uint8_t time_Minutes = BCD_to_Decimal(sTime.Minutes);
 80019c2:	4b24      	ldr	r3, [pc, #144]	@ (8001a54 <printTimerScreen.3+0x118>)
 80019c4:	785b      	ldrb	r3, [r3, #1]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fe16 	bl	80015f8 <BCD_to_Decimal>
 80019cc:	4603      	mov	r3, r0
 80019ce:	74bb      	strb	r3, [r7, #18]
	  uint8_t timerMinutesLeft = timer_Minutes - time_Minutes;
 80019d0:	7cfa      	ldrb	r2, [r7, #19]
 80019d2:	7cbb      	ldrb	r3, [r7, #18]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	747b      	strb	r3, [r7, #17]
	  uint8_t time_Seconds = BCD_to_Decimal(sTime.Seconds);
 80019d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a54 <printTimerScreen.3+0x118>)
 80019da:	789b      	ldrb	r3, [r3, #2]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fe0b 	bl	80015f8 <BCD_to_Decimal>
 80019e2:	4603      	mov	r3, r0
 80019e4:	743b      	strb	r3, [r7, #16]
	  sprintf(bufferEncoderOrTimer, "%02d", alarmIsSet ? timerMinutesLeft : counter);
 80019e6:	4b22      	ldr	r3, [pc, #136]	@ (8001a70 <printTimerScreen.3+0x134>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <printTimerScreen.3+0xb6>
 80019ee:	7c7b      	ldrb	r3, [r7, #17]
 80019f0:	e001      	b.n	80019f6 <printTimerScreen.3+0xba>
 80019f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a68 <printTimerScreen.3+0x12c>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	f107 000c 	add.w	r0, r7, #12
 80019fa:	461a      	mov	r2, r3
 80019fc:	491d      	ldr	r1, [pc, #116]	@ (8001a74 <printTimerScreen.3+0x138>)
 80019fe:	f005 fb5d 	bl	80070bc <siprintf>
	  ssd1306_SetCursor(20, 0);
 8001a02:	2100      	movs	r1, #0
 8001a04:	2014      	movs	r0, #20
 8001a06:	f000 ff15 	bl	8002834 <ssd1306_SetCursor>
	  ssd1306_WriteString(bufferEncoderOrTimer, Font_16x26, White);
 8001a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a78 <printTimerScreen.3+0x13c>)
 8001a0c:	f107 000c 	add.w	r0, r7, #12
 8001a10:	2201      	movs	r2, #1
 8001a12:	9200      	str	r2, [sp, #0]
 8001a14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a16:	f000 fee7 	bl	80027e8 <ssd1306_WriteString>
  	  if (alarmIsSet == 1) {
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <printTimerScreen.3+0x134>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d113      	bne.n	8001a4a <printTimerScreen.3+0x10e>
  		  ssd1306_SetCursor(60, 30);
 8001a22:	211e      	movs	r1, #30
 8001a24:	203c      	movs	r0, #60	@ 0x3c
 8001a26:	f000 ff05 	bl	8002834 <ssd1306_SetCursor>
  		  ssd1306_FillRectangle(60, 30, 70, 40, time_Seconds % 2 == 0 ? White : Black);
 8001a2a:	7c3b      	ldrb	r3, [r7, #16]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	bf0c      	ite	eq
 8001a36:	2301      	moveq	r3, #1
 8001a38:	2300      	movne	r3, #0
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2328      	movs	r3, #40	@ 0x28
 8001a40:	2246      	movs	r2, #70	@ 0x46
 8001a42:	211e      	movs	r1, #30
 8001a44:	203c      	movs	r0, #60	@ 0x3c
 8001a46:	f000 ff0d 	bl	8002864 <ssd1306_FillRectangle>
  }
 8001a4a:	bf00      	nop
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000350 	.word	0x20000350
 8001a58:	200002d8 	.word	0x200002d8
 8001a5c:	20000354 	.word	0x20000354
 8001a60:	200002ec 	.word	0x200002ec
 8001a64:	20000340 	.word	0x20000340
 8001a68:	2000034c 	.word	0x2000034c
 8001a6c:	20000358 	.word	0x20000358
 8001a70:	20000342 	.word	0x20000342
 8001a74:	0800a930 	.word	0x0800a930
 8001a78:	0800d1a8 	.word	0x0800d1a8

08001a7c <printMenuScreen.4>:
  {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af02      	add	r7, sp, #8
 8001a82:	f8c7 c004 	str.w	ip, [r7, #4]
		uint8_t rawCounter = __HAL_TIM_GET_COUNTER(&htim2);
 8001a86:	4b33      	ldr	r3, [pc, #204]	@ (8001b54 <printMenuScreen.4+0xd8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8c:	73fb      	strb	r3, [r7, #15]
		if (rawCounter != prevCounter)
 8001a8e:	4b32      	ldr	r3, [pc, #200]	@ (8001b58 <printMenuScreen.4+0xdc>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	7bfa      	ldrb	r2, [r7, #15]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d011      	beq.n	8001abc <printMenuScreen.4+0x40>
			if (activeMenuOption == menuSetTime)
 8001a98:	4b30      	ldr	r3, [pc, #192]	@ (8001b5c <printMenuScreen.4+0xe0>)
 8001a9a:	781a      	ldrb	r2, [r3, #0]
 8001a9c:	4b30      	ldr	r3, [pc, #192]	@ (8001b60 <printMenuScreen.4+0xe4>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d104      	bne.n	8001aae <printMenuScreen.4+0x32>
				activeMenuOption = menuSetDate;
 8001aa4:	4b2f      	ldr	r3, [pc, #188]	@ (8001b64 <printMenuScreen.4+0xe8>)
 8001aa6:	781a      	ldrb	r2, [r3, #0]
 8001aa8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b5c <printMenuScreen.4+0xe0>)
 8001aaa:	701a      	strb	r2, [r3, #0]
 8001aac:	e003      	b.n	8001ab6 <printMenuScreen.4+0x3a>
				activeMenuOption = menuSetTime;
 8001aae:	4b2c      	ldr	r3, [pc, #176]	@ (8001b60 <printMenuScreen.4+0xe4>)
 8001ab0:	781a      	ldrb	r2, [r3, #0]
 8001ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b5c <printMenuScreen.4+0xe0>)
 8001ab4:	701a      	strb	r2, [r3, #0]
			prevCounter = rawCounter;
 8001ab6:	4a28      	ldr	r2, [pc, #160]	@ (8001b58 <printMenuScreen.4+0xdc>)
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	7013      	strb	r3, [r2, #0]
  	  ssd1306_SetCursor(0, 0);
 8001abc:	2100      	movs	r1, #0
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f000 feb8 	bl	8002834 <ssd1306_SetCursor>
  	  ssd1306_FillRectangle(0, 0, 128, 20, activeMenuOption == menuSetTime ? White : Black);
 8001ac4:	4b25      	ldr	r3, [pc, #148]	@ (8001b5c <printMenuScreen.4+0xe0>)
 8001ac6:	781a      	ldrb	r2, [r3, #0]
 8001ac8:	4b25      	ldr	r3, [pc, #148]	@ (8001b60 <printMenuScreen.4+0xe4>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	bf0c      	ite	eq
 8001ad0:	2301      	moveq	r3, #1
 8001ad2:	2300      	movne	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	2314      	movs	r3, #20
 8001ada:	2280      	movs	r2, #128	@ 0x80
 8001adc:	2100      	movs	r1, #0
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f000 fec0 	bl	8002864 <ssd1306_FillRectangle>
  	  ssd1306_WriteString("Set Time", Font_11x18, activeMenuOption == menuSetTime ? Black : White);
 8001ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b5c <printMenuScreen.4+0xe0>)
 8001ae6:	781a      	ldrb	r2, [r3, #0]
 8001ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b60 <printMenuScreen.4+0xe4>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	bf14      	ite	ne
 8001af0:	2301      	movne	r3, #1
 8001af2:	2300      	moveq	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	461a      	mov	r2, r3
 8001af8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b68 <printMenuScreen.4+0xec>)
 8001afa:	9200      	str	r2, [sp, #0]
 8001afc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001afe:	481b      	ldr	r0, [pc, #108]	@ (8001b6c <printMenuScreen.4+0xf0>)
 8001b00:	f000 fe72 	bl	80027e8 <ssd1306_WriteString>
  	  ssd1306_SetCursor(0, 25);
 8001b04:	2119      	movs	r1, #25
 8001b06:	2000      	movs	r0, #0
 8001b08:	f000 fe94 	bl	8002834 <ssd1306_SetCursor>
  	  ssd1306_FillRectangle(0, 25, 128, 20, activeMenuOption == menuSetDate ? White : Black);
 8001b0c:	4b13      	ldr	r3, [pc, #76]	@ (8001b5c <printMenuScreen.4+0xe0>)
 8001b0e:	781a      	ldrb	r2, [r3, #0]
 8001b10:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <printMenuScreen.4+0xe8>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	bf0c      	ite	eq
 8001b18:	2301      	moveq	r3, #1
 8001b1a:	2300      	movne	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2314      	movs	r3, #20
 8001b22:	2280      	movs	r2, #128	@ 0x80
 8001b24:	2119      	movs	r1, #25
 8001b26:	2000      	movs	r0, #0
 8001b28:	f000 fe9c 	bl	8002864 <ssd1306_FillRectangle>
  	  ssd1306_WriteString("Set Date", Font_11x18, activeMenuOption == menuSetDate ? Black : White);
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <printMenuScreen.4+0xe0>)
 8001b2e:	781a      	ldrb	r2, [r3, #0]
 8001b30:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <printMenuScreen.4+0xe8>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	bf14      	ite	ne
 8001b38:	2301      	movne	r3, #1
 8001b3a:	2300      	moveq	r3, #0
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b09      	ldr	r3, [pc, #36]	@ (8001b68 <printMenuScreen.4+0xec>)
 8001b42:	9200      	str	r2, [sp, #0]
 8001b44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b46:	480a      	ldr	r0, [pc, #40]	@ (8001b70 <printMenuScreen.4+0xf4>)
 8001b48:	f000 fe4e 	bl	80027e8 <ssd1306_WriteString>
  }
 8001b4c:	bf00      	nop
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	200002ec 	.word	0x200002ec
 8001b58:	2000034d 	.word	0x2000034d
 8001b5c:	20000345 	.word	0x20000345
 8001b60:	20000346 	.word	0x20000346
 8001b64:	20000004 	.word	0x20000004
 8001b68:	0800d19c 	.word	0x0800d19c
 8001b6c:	0800a964 	.word	0x0800a964
 8001b70:	0800a970 	.word	0x0800a970

08001b74 <printSetTimeScreen.5>:
  {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af02      	add	r7, sp, #8
 8001b7a:	f8c7 c004 	str.w	ip, [r7, #4]
	uint8_t rawCounter = __HAL_TIM_GET_COUNTER(&htim2);
 8001b7e:	4b37      	ldr	r3, [pc, #220]	@ (8001c5c <printSetTimeScreen.5+0xe8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b84:	75fb      	strb	r3, [r7, #23]
	  if (activeSetTimeOption == setTimeSeconds) {
 8001b86:	4b36      	ldr	r3, [pc, #216]	@ (8001c60 <printSetTimeScreen.5+0xec>)
 8001b88:	781a      	ldrb	r2, [r3, #0]
 8001b8a:	4b36      	ldr	r3, [pc, #216]	@ (8001c64 <printSetTimeScreen.5+0xf0>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d103      	bne.n	8001b9a <printSetTimeScreen.5+0x26>
		  setTime_Seconds = rawCounter;
 8001b92:	4a35      	ldr	r2, [pc, #212]	@ (8001c68 <printSetTimeScreen.5+0xf4>)
 8001b94:	7dfb      	ldrb	r3, [r7, #23]
 8001b96:	7013      	strb	r3, [r2, #0]
 8001b98:	e012      	b.n	8001bc0 <printSetTimeScreen.5+0x4c>
	  } else if (activeSetTimeOption == setTimeMinutes) {
 8001b9a:	4b31      	ldr	r3, [pc, #196]	@ (8001c60 <printSetTimeScreen.5+0xec>)
 8001b9c:	781a      	ldrb	r2, [r3, #0]
 8001b9e:	4b33      	ldr	r3, [pc, #204]	@ (8001c6c <printSetTimeScreen.5+0xf8>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d103      	bne.n	8001bae <printSetTimeScreen.5+0x3a>
		  setTime_Minutes = rawCounter;
 8001ba6:	4a32      	ldr	r2, [pc, #200]	@ (8001c70 <printSetTimeScreen.5+0xfc>)
 8001ba8:	7dfb      	ldrb	r3, [r7, #23]
 8001baa:	7013      	strb	r3, [r2, #0]
 8001bac:	e008      	b.n	8001bc0 <printSetTimeScreen.5+0x4c>
	  } else if (activeSetTimeOption == setTimeHours) {
 8001bae:	4b2c      	ldr	r3, [pc, #176]	@ (8001c60 <printSetTimeScreen.5+0xec>)
 8001bb0:	781a      	ldrb	r2, [r3, #0]
 8001bb2:	4b30      	ldr	r3, [pc, #192]	@ (8001c74 <printSetTimeScreen.5+0x100>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d102      	bne.n	8001bc0 <printSetTimeScreen.5+0x4c>
		  setTime_Hours = rawCounter;
 8001bba:	4a2f      	ldr	r2, [pc, #188]	@ (8001c78 <printSetTimeScreen.5+0x104>)
 8001bbc:	7dfb      	ldrb	r3, [r7, #23]
 8001bbe:	7013      	strb	r3, [r2, #0]
	  sprintf(buffer_hours, "%02d", setTime_Hours);
 8001bc0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c78 <printSetTimeScreen.5+0x104>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	f107 0310 	add.w	r3, r7, #16
 8001bca:	492c      	ldr	r1, [pc, #176]	@ (8001c7c <printSetTimeScreen.5+0x108>)
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f005 fa75 	bl	80070bc <siprintf>
	  sprintf(buffer_min, "%02d", setTime_Minutes);
 8001bd2:	4b27      	ldr	r3, [pc, #156]	@ (8001c70 <printSetTimeScreen.5+0xfc>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	f107 030c 	add.w	r3, r7, #12
 8001bdc:	4927      	ldr	r1, [pc, #156]	@ (8001c7c <printSetTimeScreen.5+0x108>)
 8001bde:	4618      	mov	r0, r3
 8001be0:	f005 fa6c 	bl	80070bc <siprintf>
	  sprintf(buffer_sec, "%02d", setTime_Seconds);
 8001be4:	4b20      	ldr	r3, [pc, #128]	@ (8001c68 <printSetTimeScreen.5+0xf4>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	461a      	mov	r2, r3
 8001bea:	f107 0308 	add.w	r3, r7, #8
 8001bee:	4923      	ldr	r1, [pc, #140]	@ (8001c7c <printSetTimeScreen.5+0x108>)
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f005 fa63 	bl	80070bc <siprintf>
	  ssd1306_SetCursor(0, 0);
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f000 fe1b 	bl	8002834 <ssd1306_SetCursor>
	  ssd1306_WriteString(buffer_hours, Font_16x26, White);
 8001bfe:	4b20      	ldr	r3, [pc, #128]	@ (8001c80 <printSetTimeScreen.5+0x10c>)
 8001c00:	f107 0010 	add.w	r0, r7, #16
 8001c04:	2201      	movs	r2, #1
 8001c06:	9200      	str	r2, [sp, #0]
 8001c08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c0a:	f000 fded 	bl	80027e8 <ssd1306_WriteString>
	  ssd1306_SetCursor(35, 0);
 8001c0e:	2100      	movs	r1, #0
 8001c10:	2023      	movs	r0, #35	@ 0x23
 8001c12:	f000 fe0f 	bl	8002834 <ssd1306_SetCursor>
	  ssd1306_WriteString(":", Font_16x26, White);
 8001c16:	4b1a      	ldr	r3, [pc, #104]	@ (8001c80 <printSetTimeScreen.5+0x10c>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	9200      	str	r2, [sp, #0]
 8001c1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c1e:	4819      	ldr	r0, [pc, #100]	@ (8001c84 <printSetTimeScreen.5+0x110>)
 8001c20:	f000 fde2 	bl	80027e8 <ssd1306_WriteString>
	  ssd1306_SetCursor(55, 0);
 8001c24:	2100      	movs	r1, #0
 8001c26:	2037      	movs	r0, #55	@ 0x37
 8001c28:	f000 fe04 	bl	8002834 <ssd1306_SetCursor>
	  ssd1306_WriteString(buffer_min, Font_16x26, White);
 8001c2c:	4b14      	ldr	r3, [pc, #80]	@ (8001c80 <printSetTimeScreen.5+0x10c>)
 8001c2e:	f107 000c 	add.w	r0, r7, #12
 8001c32:	2201      	movs	r2, #1
 8001c34:	9200      	str	r2, [sp, #0]
 8001c36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c38:	f000 fdd6 	bl	80027e8 <ssd1306_WriteString>
	  ssd1306_SetCursor(95, 0);
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	205f      	movs	r0, #95	@ 0x5f
 8001c40:	f000 fdf8 	bl	8002834 <ssd1306_SetCursor>
	  ssd1306_WriteString(buffer_sec, Font_7x10, White);
 8001c44:	4b10      	ldr	r3, [pc, #64]	@ (8001c88 <printSetTimeScreen.5+0x114>)
 8001c46:	f107 0008 	add.w	r0, r7, #8
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	9200      	str	r2, [sp, #0]
 8001c4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c50:	f000 fdca 	bl	80027e8 <ssd1306_WriteString>
  }
 8001c54:	bf00      	nop
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	200002ec 	.word	0x200002ec
 8001c60:	20000347 	.word	0x20000347
 8001c64:	20000348 	.word	0x20000348
 8001c68:	2000034b 	.word	0x2000034b
 8001c6c:	20000005 	.word	0x20000005
 8001c70:	2000034a 	.word	0x2000034a
 8001c74:	20000006 	.word	0x20000006
 8001c78:	20000349 	.word	0x20000349
 8001c7c:	0800a930 	.word	0x0800a930
 8001c80:	0800d1a8 	.word	0x0800d1a8
 8001c84:	0800a938 	.word	0x0800a938
 8001c88:	0800d190 	.word	0x0800d190

08001c8c <checkAlarm.6>:
  {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	f8c7 c004 	str.w	ip, [r7, #4]
	  if (isAlarm == 1)
 8001c96:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd4 <checkAlarm.6+0x48>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d111      	bne.n	8001cc2 <checkAlarm.6+0x36>
		 alarmIterations++;
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd8 <checkAlarm.6+0x4c>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd8 <checkAlarm.6+0x4c>)
 8001ca8:	701a      	strb	r2, [r3, #0]
		 if ((alarmIterations % 2) == 0)
 8001caa:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd8 <checkAlarm.6+0x4c>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d109      	bne.n	8001ccc <checkAlarm.6+0x40>
  			 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8001cb8:	2102      	movs	r1, #2
 8001cba:	4808      	ldr	r0, [pc, #32]	@ (8001cdc <checkAlarm.6+0x50>)
 8001cbc:	f001 fbea 	bl	8003494 <HAL_GPIO_TogglePin>
  }
 8001cc0:	e004      	b.n	8001ccc <checkAlarm.6+0x40>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2102      	movs	r1, #2
 8001cc6:	4805      	ldr	r0, [pc, #20]	@ (8001cdc <checkAlarm.6+0x50>)
 8001cc8:	f001 fbcc 	bl	8003464 <HAL_GPIO_WritePin>
  }
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20000341 	.word	0x20000341
 8001cd8:	2000034e 	.word	0x2000034e
 8001cdc:	40010800 	.word	0x40010800

08001ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b094      	sub	sp, #80	@ 0x50
 8001ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ce6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cea:	2228      	movs	r2, #40	@ 0x28
 8001cec:	2100      	movs	r1, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f005 fa61 	bl	80071b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001d10:	2305      	movs	r3, #5
 8001d12:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d22:	2301      	movs	r3, #1
 8001d24:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d26:	2302      	movs	r3, #2
 8001d28:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d30:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001d34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f002 fc42 	bl	80045c4 <HAL_RCC_OscConfig>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001d46:	f000 fb85 	bl	8002454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d4a:	230f      	movs	r3, #15
 8001d4c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d5a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	2102      	movs	r1, #2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f002 feae 	bl	8004ac8 <HAL_RCC_ClockConfig>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001d72:	f000 fb6f 	bl	8002454 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d76:	2301      	movs	r3, #1
 8001d78:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d7e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	4618      	mov	r0, r3
 8001d84:	f003 f82e 	bl	8004de4 <HAL_RCCEx_PeriphCLKConfig>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001d8e:	f000 fb61 	bl	8002454 <Error_Handler>
  }
}
 8001d92:	bf00      	nop
 8001d94:	3750      	adds	r7, #80	@ 0x50
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001da0:	4b12      	ldr	r3, [pc, #72]	@ (8001dec <MX_I2C1_Init+0x50>)
 8001da2:	4a13      	ldr	r2, [pc, #76]	@ (8001df0 <MX_I2C1_Init+0x54>)
 8001da4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001da6:	4b11      	ldr	r3, [pc, #68]	@ (8001dec <MX_I2C1_Init+0x50>)
 8001da8:	4a12      	ldr	r2, [pc, #72]	@ (8001df4 <MX_I2C1_Init+0x58>)
 8001daa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dac:	4b0f      	ldr	r3, [pc, #60]	@ (8001dec <MX_I2C1_Init+0x50>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001db2:	4b0e      	ldr	r3, [pc, #56]	@ (8001dec <MX_I2C1_Init+0x50>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001db8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dec <MX_I2C1_Init+0x50>)
 8001dba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001dec <MX_I2C1_Init+0x50>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dc6:	4b09      	ldr	r3, [pc, #36]	@ (8001dec <MX_I2C1_Init+0x50>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dcc:	4b07      	ldr	r3, [pc, #28]	@ (8001dec <MX_I2C1_Init+0x50>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dd2:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <MX_I2C1_Init+0x50>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dd8:	4804      	ldr	r0, [pc, #16]	@ (8001dec <MX_I2C1_Init+0x50>)
 8001dda:	f001 fb8d 	bl	80034f8 <HAL_I2C_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001de4:	f000 fb36 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000230 	.word	0x20000230
 8001df0:	40005400 	.word	0x40005400
 8001df4:	00061a80 	.word	0x00061a80

08001df8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001dfc:	4b12      	ldr	r3, [pc, #72]	@ (8001e48 <MX_I2C2_Init+0x50>)
 8001dfe:	4a13      	ldr	r2, [pc, #76]	@ (8001e4c <MX_I2C2_Init+0x54>)
 8001e00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001e02:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <MX_I2C2_Init+0x50>)
 8001e04:	4a12      	ldr	r2, [pc, #72]	@ (8001e50 <MX_I2C2_Init+0x58>)
 8001e06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e08:	4b0f      	ldr	r3, [pc, #60]	@ (8001e48 <MX_I2C2_Init+0x50>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e48 <MX_I2C2_Init+0x50>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e14:	4b0c      	ldr	r3, [pc, #48]	@ (8001e48 <MX_I2C2_Init+0x50>)
 8001e16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e1a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e48 <MX_I2C2_Init+0x50>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001e22:	4b09      	ldr	r3, [pc, #36]	@ (8001e48 <MX_I2C2_Init+0x50>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e28:	4b07      	ldr	r3, [pc, #28]	@ (8001e48 <MX_I2C2_Init+0x50>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e2e:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <MX_I2C2_Init+0x50>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e34:	4804      	ldr	r0, [pc, #16]	@ (8001e48 <MX_I2C2_Init+0x50>)
 8001e36:	f001 fb5f 	bl	80034f8 <HAL_I2C_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001e40:	f000 fb08 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000284 	.word	0x20000284
 8001e4c:	40005800 	.word	0x40005800
 8001e50:	00061a80 	.word	0x00061a80

08001e54 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e58:	4b29      	ldr	r3, [pc, #164]	@ (8001f00 <MX_RTC_Init+0xac>)
 8001e5a:	4a2a      	ldr	r2, [pc, #168]	@ (8001f04 <MX_RTC_Init+0xb0>)
 8001e5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001e5e:	4b28      	ldr	r3, [pc, #160]	@ (8001f00 <MX_RTC_Init+0xac>)
 8001e60:	f04f 32ff 	mov.w	r2, #4294967295
 8001e64:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001e66:	4b26      	ldr	r3, [pc, #152]	@ (8001f00 <MX_RTC_Init+0xac>)
 8001e68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e6c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e6e:	4824      	ldr	r0, [pc, #144]	@ (8001f00 <MX_RTC_Init+0xac>)
 8001e70:	f003 f924 	bl	80050bc <HAL_RTC_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8001e7a:	f000 faeb 	bl	8002454 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001e7e:	4b22      	ldr	r3, [pc, #136]	@ (8001f08 <MX_RTC_Init+0xb4>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8001e84:	4b20      	ldr	r3, [pc, #128]	@ (8001f08 <MX_RTC_Init+0xb4>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8001e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f08 <MX_RTC_Init+0xb4>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	709a      	strb	r2, [r3, #2]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001e90:	2201      	movs	r2, #1
 8001e92:	491d      	ldr	r1, [pc, #116]	@ (8001f08 <MX_RTC_Init+0xb4>)
 8001e94:	481a      	ldr	r0, [pc, #104]	@ (8001f00 <MX_RTC_Init+0xac>)
 8001e96:	f003 f99d 	bl	80051d4 <HAL_RTC_SetTime>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_RTC_Init+0x50>
  {
    Error_Handler();
 8001ea0:	f000 fad8 	bl	8002454 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001ea4:	4b19      	ldr	r3, [pc, #100]	@ (8001f0c <MX_RTC_Init+0xb8>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	701a      	strb	r2, [r3, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001eaa:	4b18      	ldr	r3, [pc, #96]	@ (8001f0c <MX_RTC_Init+0xb8>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	705a      	strb	r2, [r3, #1]
  DateToUpdate.Date = 0x1;
 8001eb0:	4b16      	ldr	r3, [pc, #88]	@ (8001f0c <MX_RTC_Init+0xb8>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	709a      	strb	r2, [r3, #2]
  DateToUpdate.Year = 0x0;
 8001eb6:	4b15      	ldr	r3, [pc, #84]	@ (8001f0c <MX_RTC_Init+0xb8>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	4913      	ldr	r1, [pc, #76]	@ (8001f0c <MX_RTC_Init+0xb8>)
 8001ec0:	480f      	ldr	r0, [pc, #60]	@ (8001f00 <MX_RTC_Init+0xac>)
 8001ec2:	f003 faf7 	bl	80054b4 <HAL_RTC_SetDate>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001ecc:	f000 fac2 	bl	8002454 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f10 <MX_RTC_Init+0xbc>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f10 <MX_RTC_Init+0xbc>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001edc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <MX_RTC_Init+0xbc>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	709a      	strb	r2, [r3, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f10 <MX_RTC_Init+0xbc>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	605a      	str	r2, [r3, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4909      	ldr	r1, [pc, #36]	@ (8001f10 <MX_RTC_Init+0xbc>)
 8001eec:	4804      	ldr	r0, [pc, #16]	@ (8001f00 <MX_RTC_Init+0xac>)
 8001eee:	f003 fbeb 	bl	80056c8 <HAL_RTC_SetAlarm_IT>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001ef8:	f000 faac 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	200002d8 	.word	0x200002d8
 8001f04:	40002800 	.word	0x40002800
 8001f08:	20000350 	.word	0x20000350
 8001f0c:	20000354 	.word	0x20000354
 8001f10:	20000358 	.word	0x20000358

08001f14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08c      	sub	sp, #48	@ 0x30
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f1a:	f107 030c 	add.w	r3, r7, #12
 8001f1e:	2224      	movs	r2, #36	@ 0x24
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f005 f947 	bl	80071b6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f30:	4b20      	ldr	r3, [pc, #128]	@ (8001fb4 <MX_TIM2_Init+0xa0>)
 8001f32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f38:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb4 <MX_TIM2_Init+0xa0>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb4 <MX_TIM2_Init+0xa0>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59;
 8001f44:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb4 <MX_TIM2_Init+0xa0>)
 8001f46:	223b      	movs	r2, #59	@ 0x3b
 8001f48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb4 <MX_TIM2_Init+0xa0>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f50:	4b18      	ldr	r3, [pc, #96]	@ (8001fb4 <MX_TIM2_Init+0xa0>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f56:	2301      	movs	r3, #1
 8001f58:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f72:	2300      	movs	r3, #0
 8001f74:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001f7a:	f107 030c 	add.w	r3, r7, #12
 8001f7e:	4619      	mov	r1, r3
 8001f80:	480c      	ldr	r0, [pc, #48]	@ (8001fb4 <MX_TIM2_Init+0xa0>)
 8001f82:	f003 ff25 	bl	8005dd0 <HAL_TIM_Encoder_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001f8c:	f000 fa62 	bl	8002454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f90:	2300      	movs	r3, #0
 8001f92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4805      	ldr	r0, [pc, #20]	@ (8001fb4 <MX_TIM2_Init+0xa0>)
 8001f9e:	f004 f8cd 	bl	800613c <HAL_TIMEx_MasterConfigSynchronization>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001fa8:	f000 fa54 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fac:	bf00      	nop
 8001fae:	3730      	adds	r7, #48	@ 0x30
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	200002ec 	.word	0x200002ec

08001fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbe:	f107 0310 	add.w	r3, r7, #16
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fcc:	4b37      	ldr	r3, [pc, #220]	@ (80020ac <MX_GPIO_Init+0xf4>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	4a36      	ldr	r2, [pc, #216]	@ (80020ac <MX_GPIO_Init+0xf4>)
 8001fd2:	f043 0310 	orr.w	r3, r3, #16
 8001fd6:	6193      	str	r3, [r2, #24]
 8001fd8:	4b34      	ldr	r3, [pc, #208]	@ (80020ac <MX_GPIO_Init+0xf4>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f003 0310 	and.w	r3, r3, #16
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fe4:	4b31      	ldr	r3, [pc, #196]	@ (80020ac <MX_GPIO_Init+0xf4>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	4a30      	ldr	r2, [pc, #192]	@ (80020ac <MX_GPIO_Init+0xf4>)
 8001fea:	f043 0320 	orr.w	r3, r3, #32
 8001fee:	6193      	str	r3, [r2, #24]
 8001ff0:	4b2e      	ldr	r3, [pc, #184]	@ (80020ac <MX_GPIO_Init+0xf4>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f003 0320 	and.w	r3, r3, #32
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffc:	4b2b      	ldr	r3, [pc, #172]	@ (80020ac <MX_GPIO_Init+0xf4>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	4a2a      	ldr	r2, [pc, #168]	@ (80020ac <MX_GPIO_Init+0xf4>)
 8002002:	f043 0304 	orr.w	r3, r3, #4
 8002006:	6193      	str	r3, [r2, #24]
 8002008:	4b28      	ldr	r3, [pc, #160]	@ (80020ac <MX_GPIO_Init+0xf4>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002014:	4b25      	ldr	r3, [pc, #148]	@ (80020ac <MX_GPIO_Init+0xf4>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	4a24      	ldr	r2, [pc, #144]	@ (80020ac <MX_GPIO_Init+0xf4>)
 800201a:	f043 0308 	orr.w	r3, r3, #8
 800201e:	6193      	str	r3, [r2, #24]
 8002020:	4b22      	ldr	r3, [pc, #136]	@ (80020ac <MX_GPIO_Init+0xf4>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	603b      	str	r3, [r7, #0]
 800202a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Alarm_Led_GPIO_Port, Alarm_Led_Pin, GPIO_PIN_RESET);
 800202c:	2200      	movs	r2, #0
 800202e:	2102      	movs	r1, #2
 8002030:	481f      	ldr	r0, [pc, #124]	@ (80020b0 <MX_GPIO_Init+0xf8>)
 8002032:	f001 fa17 	bl	8003464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Alarm_Led_Pin */
  GPIO_InitStruct.Pin = Alarm_Led_Pin;
 8002036:	2302      	movs	r3, #2
 8002038:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203a:	2301      	movs	r3, #1
 800203c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2302      	movs	r3, #2
 8002044:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Alarm_Led_GPIO_Port, &GPIO_InitStruct);
 8002046:	f107 0310 	add.w	r3, r7, #16
 800204a:	4619      	mov	r1, r3
 800204c:	4818      	ldr	r0, [pc, #96]	@ (80020b0 <MX_GPIO_Init+0xf8>)
 800204e:	f001 f885 	bl	800315c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002052:	2308      	movs	r3, #8
 8002054:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002056:	4b17      	ldr	r3, [pc, #92]	@ (80020b4 <MX_GPIO_Init+0xfc>)
 8002058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205e:	f107 0310 	add.w	r3, r7, #16
 8002062:	4619      	mov	r1, r3
 8002064:	4812      	ldr	r0, [pc, #72]	@ (80020b0 <MX_GPIO_Init+0xf8>)
 8002066:	f001 f879 	bl	800315c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800206a:	2302      	movs	r3, #2
 800206c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800206e:	4b11      	ldr	r3, [pc, #68]	@ (80020b4 <MX_GPIO_Init+0xfc>)
 8002070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002076:	f107 0310 	add.w	r3, r7, #16
 800207a:	4619      	mov	r1, r3
 800207c:	480e      	ldr	r0, [pc, #56]	@ (80020b8 <MX_GPIO_Init+0x100>)
 800207e:	f001 f86d 	bl	800315c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2100      	movs	r1, #0
 8002086:	2007      	movs	r0, #7
 8002088:	f001 f831 	bl	80030ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800208c:	2007      	movs	r0, #7
 800208e:	f001 f84a 	bl	8003126 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002092:	2200      	movs	r2, #0
 8002094:	2100      	movs	r1, #0
 8002096:	2009      	movs	r0, #9
 8002098:	f001 f829 	bl	80030ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800209c:	2009      	movs	r0, #9
 800209e:	f001 f842 	bl	8003126 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020a2:	bf00      	nop
 80020a4:	3720      	adds	r7, #32
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40010800 	.word	0x40010800
 80020b4:	10110000 	.word	0x10110000
 80020b8:	40010c00 	.word	0x40010c00

080020bc <Set_RTC_Alarm>:
/* USER CODE BEGIN 4 */



void Set_RTC_Alarm(uint32_t timerMinutes)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
    // Get the current time and date
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80020c4:	2201      	movs	r2, #1
 80020c6:	492c      	ldr	r1, [pc, #176]	@ (8002178 <Set_RTC_Alarm+0xbc>)
 80020c8:	482c      	ldr	r0, [pc, #176]	@ (800217c <Set_RTC_Alarm+0xc0>)
 80020ca:	f003 f91b 	bl	8005304 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD); // Needed to read date as well due to a quirk
 80020ce:	2201      	movs	r2, #1
 80020d0:	492b      	ldr	r1, [pc, #172]	@ (8002180 <Set_RTC_Alarm+0xc4>)
 80020d2:	482a      	ldr	r0, [pc, #168]	@ (800217c <Set_RTC_Alarm+0xc0>)
 80020d4:	f003 faa4 	bl	8005620 <HAL_RTC_GetDate>

    // Calculate the new alarm time
    uint32_t minutes = BCD_to_Decimal(sTime.Minutes) + timerMinutes;
 80020d8:	4b27      	ldr	r3, [pc, #156]	@ (8002178 <Set_RTC_Alarm+0xbc>)
 80020da:	785b      	ldrb	r3, [r3, #1]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fa8b 	bl	80015f8 <BCD_to_Decimal>
 80020e2:	4603      	mov	r3, r0
 80020e4:	461a      	mov	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]
    uint32_t new_minutes = minutes % 60;
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	4b25      	ldr	r3, [pc, #148]	@ (8002184 <Set_RTC_Alarm+0xc8>)
 80020f0:	fba3 1302 	umull	r1, r3, r3, r2
 80020f4:	0959      	lsrs	r1, r3, #5
 80020f6:	460b      	mov	r3, r1
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	1a5b      	subs	r3, r3, r1
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	613b      	str	r3, [r7, #16]
    uint32_t new_hours = (BCD_to_Decimal(sTime.Hours) + (minutes / 60)) % 24;
 8002102:	4b1d      	ldr	r3, [pc, #116]	@ (8002178 <Set_RTC_Alarm+0xbc>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fa76 	bl	80015f8 <BCD_to_Decimal>
 800210c:	4603      	mov	r3, r0
 800210e:	4619      	mov	r1, r3
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	4a1c      	ldr	r2, [pc, #112]	@ (8002184 <Set_RTC_Alarm+0xc8>)
 8002114:	fba2 2303 	umull	r2, r3, r2, r3
 8002118:	095b      	lsrs	r3, r3, #5
 800211a:	18ca      	adds	r2, r1, r3
 800211c:	4b1a      	ldr	r3, [pc, #104]	@ (8002188 <Set_RTC_Alarm+0xcc>)
 800211e:	fba3 1302 	umull	r1, r3, r3, r2
 8002122:	0919      	lsrs	r1, r3, #4
 8002124:	460b      	mov	r3, r1
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	440b      	add	r3, r1
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	60fb      	str	r3, [r7, #12]

    sAlarm.AlarmTime.Hours = DecimalToBCD(new_hours);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff fa3b 	bl	80015b0 <DecimalToBCD>
 800213a:	4603      	mov	r3, r0
 800213c:	461a      	mov	r2, r3
 800213e:	4b13      	ldr	r3, [pc, #76]	@ (800218c <Set_RTC_Alarm+0xd0>)
 8002140:	701a      	strb	r2, [r3, #0]
    sAlarm.AlarmTime.Minutes = DecimalToBCD(new_minutes);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fa32 	bl	80015b0 <DecimalToBCD>
 800214c:	4603      	mov	r3, r0
 800214e:	461a      	mov	r2, r3
 8002150:	4b0e      	ldr	r3, [pc, #56]	@ (800218c <Set_RTC_Alarm+0xd0>)
 8002152:	705a      	strb	r2, [r3, #1]
    // Set the alarm
    if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002154:	2201      	movs	r2, #1
 8002156:	490d      	ldr	r1, [pc, #52]	@ (800218c <Set_RTC_Alarm+0xd0>)
 8002158:	4808      	ldr	r0, [pc, #32]	@ (800217c <Set_RTC_Alarm+0xc0>)
 800215a:	f003 fab5 	bl	80056c8 <HAL_RTC_SetAlarm_IT>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <Set_RTC_Alarm+0xac>
    {
        // Initialization Error
        Error_Handler();
 8002164:	f000 f976 	bl	8002454 <Error_Handler>
    }

    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8002168:	4b09      	ldr	r3, [pc, #36]	@ (8002190 <Set_RTC_Alarm+0xd4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2200      	movs	r2, #0
 800216e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002170:	bf00      	nop
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000350 	.word	0x20000350
 800217c:	200002d8 	.word	0x200002d8
 8002180:	20000360 	.word	0x20000360
 8002184:	88888889 	.word	0x88888889
 8002188:	aaaaaaab 	.word	0xaaaaaaab
 800218c:	20000358 	.word	0x20000358
 8002190:	200002ec 	.word	0x200002ec

08002194 <Clear_RTC_Alarm>:

void Clear_RTC_Alarm()
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8002198:	2201      	movs	r2, #1
 800219a:	490c      	ldr	r1, [pc, #48]	@ (80021cc <Clear_RTC_Alarm+0x38>)
 800219c:	480c      	ldr	r0, [pc, #48]	@ (80021d0 <Clear_RTC_Alarm+0x3c>)
 800219e:	f003 f8b1 	bl	8005304 <HAL_RTC_GetTime>

	sAlarm.AlarmTime.Hours = sTime.Hours;
 80021a2:	4b0a      	ldr	r3, [pc, #40]	@ (80021cc <Clear_RTC_Alarm+0x38>)
 80021a4:	781a      	ldrb	r2, [r3, #0]
 80021a6:	4b0b      	ldr	r3, [pc, #44]	@ (80021d4 <Clear_RTC_Alarm+0x40>)
 80021a8:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmTime.Minutes = sTime.Minutes;
 80021aa:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <Clear_RTC_Alarm+0x38>)
 80021ac:	785a      	ldrb	r2, [r3, #1]
 80021ae:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <Clear_RTC_Alarm+0x40>)
 80021b0:	705a      	strb	r2, [r3, #1]
	sAlarm.AlarmTime.Seconds = sTime.Seconds;
 80021b2:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <Clear_RTC_Alarm+0x38>)
 80021b4:	789a      	ldrb	r2, [r3, #2]
 80021b6:	4b07      	ldr	r3, [pc, #28]	@ (80021d4 <Clear_RTC_Alarm+0x40>)
 80021b8:	709a      	strb	r2, [r3, #2]

	isAlarm = 0;
 80021ba:	4b07      	ldr	r3, [pc, #28]	@ (80021d8 <Clear_RTC_Alarm+0x44>)
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
	alarmIsSet = 0;
 80021c0:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <Clear_RTC_Alarm+0x48>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000350 	.word	0x20000350
 80021d0:	200002d8 	.word	0x200002d8
 80021d4:	20000358 	.word	0x20000358
 80021d8:	20000341 	.word	0x20000341
 80021dc:	20000342 	.word	0x20000342

080021e0 <HAL_GPIO_EXTI_Callback>:

volatile uint32_t lastInterruptTime1 = 0;
volatile uint32_t lastInterruptTime3 = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	80fb      	strh	r3, [r7, #6]

	if (isAlarm == 1) {
 80021ea:	4b78      	ldr	r3, [pc, #480]	@ (80023cc <HAL_GPIO_EXTI_Callback+0x1ec>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d102      	bne.n	80021f8 <HAL_GPIO_EXTI_Callback+0x18>
		Clear_RTC_Alarm();
 80021f2:	f7ff ffcf 	bl	8002194 <Clear_RTC_Alarm>

				lastInterruptTime1 = currentTime;
			}
		}
	}
}
 80021f6:	e0e5      	b.n	80023c4 <HAL_GPIO_EXTI_Callback+0x1e4>
		uint32_t currentTime = HAL_GetTick();
 80021f8:	f000 fe74 	bl	8002ee4 <HAL_GetTick>
 80021fc:	60f8      	str	r0, [r7, #12]
		if (GPIO_Pin == GPIO_PIN_3)
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	2b08      	cmp	r3, #8
 8002202:	d148      	bne.n	8002296 <HAL_GPIO_EXTI_Callback+0xb6>
			if (currentTime - lastInterruptTime3 > 300)
 8002204:	4b72      	ldr	r3, [pc, #456]	@ (80023d0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002210:	d941      	bls.n	8002296 <HAL_GPIO_EXTI_Callback+0xb6>
				if (activeScreen == screenTimer)
 8002212:	4b70      	ldr	r3, [pc, #448]	@ (80023d4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002214:	781a      	ldrb	r2, [r3, #0]
 8002216:	4b70      	ldr	r3, [pc, #448]	@ (80023d8 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d118      	bne.n	8002250 <HAL_GPIO_EXTI_Callback+0x70>
					uint8_t rawCounter = __HAL_TIM_GET_COUNTER(&htim2);
 800221e:	4b6f      	ldr	r3, [pc, #444]	@ (80023dc <HAL_GPIO_EXTI_Callback+0x1fc>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002224:	72fb      	strb	r3, [r7, #11]
					if (rawCounter != 0) {
 8002226:	7afb      	ldrb	r3, [r7, #11]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00e      	beq.n	800224a <HAL_GPIO_EXTI_Callback+0x6a>
						if (alarmIsSet == 1) {
 800222c:	4b6c      	ldr	r3, [pc, #432]	@ (80023e0 <HAL_GPIO_EXTI_Callback+0x200>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d102      	bne.n	800223a <HAL_GPIO_EXTI_Callback+0x5a>
							Clear_RTC_Alarm();
 8002234:	f7ff ffae 	bl	8002194 <Clear_RTC_Alarm>
 8002238:	e02a      	b.n	8002290 <HAL_GPIO_EXTI_Callback+0xb0>
							Set_RTC_Alarm(rawCounter);
 800223a:	7afb      	ldrb	r3, [r7, #11]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff3d 	bl	80020bc <Set_RTC_Alarm>
							alarmIsSet = 1;
 8002242:	4b67      	ldr	r3, [pc, #412]	@ (80023e0 <HAL_GPIO_EXTI_Callback+0x200>)
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]
 8002248:	e022      	b.n	8002290 <HAL_GPIO_EXTI_Callback+0xb0>
						Clear_RTC_Alarm();
 800224a:	f7ff ffa3 	bl	8002194 <Clear_RTC_Alarm>
 800224e:	e01f      	b.n	8002290 <HAL_GPIO_EXTI_Callback+0xb0>
					if (activeScreen == screenSetTime) {
 8002250:	4b60      	ldr	r3, [pc, #384]	@ (80023d4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002252:	781a      	ldrb	r2, [r3, #0]
 8002254:	4b63      	ldr	r3, [pc, #396]	@ (80023e4 <HAL_GPIO_EXTI_Callback+0x204>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d104      	bne.n	8002266 <HAL_GPIO_EXTI_Callback+0x86>
						activeScreen = screenMenu;
 800225c:	4b62      	ldr	r3, [pc, #392]	@ (80023e8 <HAL_GPIO_EXTI_Callback+0x208>)
 800225e:	781a      	ldrb	r2, [r3, #0]
 8002260:	4b5c      	ldr	r3, [pc, #368]	@ (80023d4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002262:	701a      	strb	r2, [r3, #0]
 8002264:	e014      	b.n	8002290 <HAL_GPIO_EXTI_Callback+0xb0>
					} else if (activeScreen == screenMenu) {
 8002266:	4b5b      	ldr	r3, [pc, #364]	@ (80023d4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	4b5f      	ldr	r3, [pc, #380]	@ (80023e8 <HAL_GPIO_EXTI_Callback+0x208>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d104      	bne.n	800227c <HAL_GPIO_EXTI_Callback+0x9c>
						activeScreen = screenTime;
 8002272:	4b5e      	ldr	r3, [pc, #376]	@ (80023ec <HAL_GPIO_EXTI_Callback+0x20c>)
 8002274:	781a      	ldrb	r2, [r3, #0]
 8002276:	4b57      	ldr	r3, [pc, #348]	@ (80023d4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002278:	701a      	strb	r2, [r3, #0]
 800227a:	e009      	b.n	8002290 <HAL_GPIO_EXTI_Callback+0xb0>
					} else if (activeScreen == screenTime) {
 800227c:	4b55      	ldr	r3, [pc, #340]	@ (80023d4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800227e:	781a      	ldrb	r2, [r3, #0]
 8002280:	4b5a      	ldr	r3, [pc, #360]	@ (80023ec <HAL_GPIO_EXTI_Callback+0x20c>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d103      	bne.n	8002290 <HAL_GPIO_EXTI_Callback+0xb0>
						activeScreen = screenMenu;
 8002288:	4b57      	ldr	r3, [pc, #348]	@ (80023e8 <HAL_GPIO_EXTI_Callback+0x208>)
 800228a:	781a      	ldrb	r2, [r3, #0]
 800228c:	4b51      	ldr	r3, [pc, #324]	@ (80023d4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800228e:	701a      	strb	r2, [r3, #0]
				lastInterruptTime3 = currentTime;
 8002290:	4a4f      	ldr	r2, [pc, #316]	@ (80023d0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6013      	str	r3, [r2, #0]
		if (GPIO_Pin == GPIO_PIN_1)
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	2b02      	cmp	r3, #2
 800229a:	f040 8093 	bne.w	80023c4 <HAL_GPIO_EXTI_Callback+0x1e4>
			if (currentTime - lastInterruptTime1 > 300)
 800229e:	4b54      	ldr	r3, [pc, #336]	@ (80023f0 <HAL_GPIO_EXTI_Callback+0x210>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80022aa:	f240 808b 	bls.w	80023c4 <HAL_GPIO_EXTI_Callback+0x1e4>
				if (activeScreen == screenTimer)
 80022ae:	4b49      	ldr	r3, [pc, #292]	@ (80023d4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80022b0:	781a      	ldrb	r2, [r3, #0]
 80022b2:	4b49      	ldr	r3, [pc, #292]	@ (80023d8 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d104      	bne.n	80022c4 <HAL_GPIO_EXTI_Callback+0xe4>
					activeScreen = screenTime;
 80022ba:	4b4c      	ldr	r3, [pc, #304]	@ (80023ec <HAL_GPIO_EXTI_Callback+0x20c>)
 80022bc:	781a      	ldrb	r2, [r3, #0]
 80022be:	4b45      	ldr	r3, [pc, #276]	@ (80023d4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80022c0:	701a      	strb	r2, [r3, #0]
 80022c2:	e07c      	b.n	80023be <HAL_GPIO_EXTI_Callback+0x1de>
				} else if (activeScreen == screenWeather)
 80022c4:	4b43      	ldr	r3, [pc, #268]	@ (80023d4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80022c6:	781a      	ldrb	r2, [r3, #0]
 80022c8:	4b4a      	ldr	r3, [pc, #296]	@ (80023f4 <HAL_GPIO_EXTI_Callback+0x214>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d104      	bne.n	80022da <HAL_GPIO_EXTI_Callback+0xfa>
					activeScreen = screenTimer;
 80022d0:	4b41      	ldr	r3, [pc, #260]	@ (80023d8 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80022d2:	781a      	ldrb	r2, [r3, #0]
 80022d4:	4b3f      	ldr	r3, [pc, #252]	@ (80023d4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80022d6:	701a      	strb	r2, [r3, #0]
 80022d8:	e071      	b.n	80023be <HAL_GPIO_EXTI_Callback+0x1de>
				} else if (activeScreen == screenTime)
 80022da:	4b3e      	ldr	r3, [pc, #248]	@ (80023d4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80022dc:	781a      	ldrb	r2, [r3, #0]
 80022de:	4b43      	ldr	r3, [pc, #268]	@ (80023ec <HAL_GPIO_EXTI_Callback+0x20c>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d104      	bne.n	80022f0 <HAL_GPIO_EXTI_Callback+0x110>
					activeScreen = screenWeather;
 80022e6:	4b43      	ldr	r3, [pc, #268]	@ (80023f4 <HAL_GPIO_EXTI_Callback+0x214>)
 80022e8:	781a      	ldrb	r2, [r3, #0]
 80022ea:	4b3a      	ldr	r3, [pc, #232]	@ (80023d4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80022ec:	701a      	strb	r2, [r3, #0]
 80022ee:	e066      	b.n	80023be <HAL_GPIO_EXTI_Callback+0x1de>
				} else if (activeScreen == screenMenu)
 80022f0:	4b38      	ldr	r3, [pc, #224]	@ (80023d4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80022f2:	781a      	ldrb	r2, [r3, #0]
 80022f4:	4b3c      	ldr	r3, [pc, #240]	@ (80023e8 <HAL_GPIO_EXTI_Callback+0x208>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d10a      	bne.n	8002312 <HAL_GPIO_EXTI_Callback+0x132>
					if (activeMenuOption == menuSetTime)
 80022fc:	4b3e      	ldr	r3, [pc, #248]	@ (80023f8 <HAL_GPIO_EXTI_Callback+0x218>)
 80022fe:	781a      	ldrb	r2, [r3, #0]
 8002300:	4b3e      	ldr	r3, [pc, #248]	@ (80023fc <HAL_GPIO_EXTI_Callback+0x21c>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d15a      	bne.n	80023be <HAL_GPIO_EXTI_Callback+0x1de>
						activeScreen = screenSetTime;
 8002308:	4b36      	ldr	r3, [pc, #216]	@ (80023e4 <HAL_GPIO_EXTI_Callback+0x204>)
 800230a:	781a      	ldrb	r2, [r3, #0]
 800230c:	4b31      	ldr	r3, [pc, #196]	@ (80023d4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800230e:	701a      	strb	r2, [r3, #0]
 8002310:	e055      	b.n	80023be <HAL_GPIO_EXTI_Callback+0x1de>
				} else if (activeScreen == screenSetTime) {
 8002312:	4b30      	ldr	r3, [pc, #192]	@ (80023d4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002314:	781a      	ldrb	r2, [r3, #0]
 8002316:	4b33      	ldr	r3, [pc, #204]	@ (80023e4 <HAL_GPIO_EXTI_Callback+0x204>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d14f      	bne.n	80023be <HAL_GPIO_EXTI_Callback+0x1de>
					  if (activeSetTimeOption == setTimeSeconds) {
 800231e:	4b38      	ldr	r3, [pc, #224]	@ (8002400 <HAL_GPIO_EXTI_Callback+0x220>)
 8002320:	781a      	ldrb	r2, [r3, #0]
 8002322:	4b38      	ldr	r3, [pc, #224]	@ (8002404 <HAL_GPIO_EXTI_Callback+0x224>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d111      	bne.n	800234e <HAL_GPIO_EXTI_Callback+0x16e>
						  sTime.Seconds = DecimalToBCD(setTime_Seconds);
 800232a:	4b37      	ldr	r3, [pc, #220]	@ (8002408 <HAL_GPIO_EXTI_Callback+0x228>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff f93e 	bl	80015b0 <DecimalToBCD>
 8002334:	4603      	mov	r3, r0
 8002336:	461a      	mov	r2, r3
 8002338:	4b34      	ldr	r3, [pc, #208]	@ (800240c <HAL_GPIO_EXTI_Callback+0x22c>)
 800233a:	709a      	strb	r2, [r3, #2]
						  __HAL_TIM_SET_COUNTER(&htim2, 0);
 800233c:	4b27      	ldr	r3, [pc, #156]	@ (80023dc <HAL_GPIO_EXTI_Callback+0x1fc>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2200      	movs	r2, #0
 8002342:	625a      	str	r2, [r3, #36]	@ 0x24
						  activeSetTimeOption = setTimeMinutes;
 8002344:	4b32      	ldr	r3, [pc, #200]	@ (8002410 <HAL_GPIO_EXTI_Callback+0x230>)
 8002346:	781a      	ldrb	r2, [r3, #0]
 8002348:	4b2d      	ldr	r3, [pc, #180]	@ (8002400 <HAL_GPIO_EXTI_Callback+0x220>)
 800234a:	701a      	strb	r2, [r3, #0]
 800234c:	e037      	b.n	80023be <HAL_GPIO_EXTI_Callback+0x1de>
					  } else if (activeSetTimeOption == setTimeMinutes) {
 800234e:	4b2c      	ldr	r3, [pc, #176]	@ (8002400 <HAL_GPIO_EXTI_Callback+0x220>)
 8002350:	781a      	ldrb	r2, [r3, #0]
 8002352:	4b2f      	ldr	r3, [pc, #188]	@ (8002410 <HAL_GPIO_EXTI_Callback+0x230>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d111      	bne.n	800237e <HAL_GPIO_EXTI_Callback+0x19e>
						  sTime.Minutes = DecimalToBCD(setTime_Minutes);
 800235a:	4b2e      	ldr	r3, [pc, #184]	@ (8002414 <HAL_GPIO_EXTI_Callback+0x234>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff f926 	bl	80015b0 <DecimalToBCD>
 8002364:	4603      	mov	r3, r0
 8002366:	461a      	mov	r2, r3
 8002368:	4b28      	ldr	r3, [pc, #160]	@ (800240c <HAL_GPIO_EXTI_Callback+0x22c>)
 800236a:	705a      	strb	r2, [r3, #1]
						  __HAL_TIM_SET_COUNTER(&htim2, 0);
 800236c:	4b1b      	ldr	r3, [pc, #108]	@ (80023dc <HAL_GPIO_EXTI_Callback+0x1fc>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2200      	movs	r2, #0
 8002372:	625a      	str	r2, [r3, #36]	@ 0x24
						  activeSetTimeOption = setTimeHours;
 8002374:	4b28      	ldr	r3, [pc, #160]	@ (8002418 <HAL_GPIO_EXTI_Callback+0x238>)
 8002376:	781a      	ldrb	r2, [r3, #0]
 8002378:	4b21      	ldr	r3, [pc, #132]	@ (8002400 <HAL_GPIO_EXTI_Callback+0x220>)
 800237a:	701a      	strb	r2, [r3, #0]
 800237c:	e01f      	b.n	80023be <HAL_GPIO_EXTI_Callback+0x1de>
					  } else if (activeSetTimeOption == setTimeHours) {
 800237e:	4b20      	ldr	r3, [pc, #128]	@ (8002400 <HAL_GPIO_EXTI_Callback+0x220>)
 8002380:	781a      	ldrb	r2, [r3, #0]
 8002382:	4b25      	ldr	r3, [pc, #148]	@ (8002418 <HAL_GPIO_EXTI_Callback+0x238>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d119      	bne.n	80023be <HAL_GPIO_EXTI_Callback+0x1de>
						  sTime.Hours = DecimalToBCD(setTime_Hours);
 800238a:	4b24      	ldr	r3, [pc, #144]	@ (800241c <HAL_GPIO_EXTI_Callback+0x23c>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff f90e 	bl	80015b0 <DecimalToBCD>
 8002394:	4603      	mov	r3, r0
 8002396:	461a      	mov	r2, r3
 8002398:	4b1c      	ldr	r3, [pc, #112]	@ (800240c <HAL_GPIO_EXTI_Callback+0x22c>)
 800239a:	701a      	strb	r2, [r3, #0]
						  __HAL_TIM_SET_COUNTER(&htim2, 0);
 800239c:	4b0f      	ldr	r3, [pc, #60]	@ (80023dc <HAL_GPIO_EXTI_Callback+0x1fc>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2200      	movs	r2, #0
 80023a2:	625a      	str	r2, [r3, #36]	@ 0x24
						  HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BCD);
 80023a4:	2201      	movs	r2, #1
 80023a6:	4919      	ldr	r1, [pc, #100]	@ (800240c <HAL_GPIO_EXTI_Callback+0x22c>)
 80023a8:	481d      	ldr	r0, [pc, #116]	@ (8002420 <HAL_GPIO_EXTI_Callback+0x240>)
 80023aa:	f002 ff13 	bl	80051d4 <HAL_RTC_SetTime>
						  activeSetTimeOption = setTimeSeconds;
 80023ae:	4b15      	ldr	r3, [pc, #84]	@ (8002404 <HAL_GPIO_EXTI_Callback+0x224>)
 80023b0:	781a      	ldrb	r2, [r3, #0]
 80023b2:	4b13      	ldr	r3, [pc, #76]	@ (8002400 <HAL_GPIO_EXTI_Callback+0x220>)
 80023b4:	701a      	strb	r2, [r3, #0]
						  activeScreen = screenMenu;
 80023b6:	4b0c      	ldr	r3, [pc, #48]	@ (80023e8 <HAL_GPIO_EXTI_Callback+0x208>)
 80023b8:	781a      	ldrb	r2, [r3, #0]
 80023ba:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80023bc:	701a      	strb	r2, [r3, #0]
				lastInterruptTime1 = currentTime;
 80023be:	4a0c      	ldr	r2, [pc, #48]	@ (80023f0 <HAL_GPIO_EXTI_Callback+0x210>)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6013      	str	r3, [r2, #0]
}
 80023c4:	bf00      	nop
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000341 	.word	0x20000341
 80023d0:	20000368 	.word	0x20000368
 80023d4:	20000343 	.word	0x20000343
 80023d8:	20000001 	.word	0x20000001
 80023dc:	200002ec 	.word	0x200002ec
 80023e0:	20000342 	.word	0x20000342
 80023e4:	20000003 	.word	0x20000003
 80023e8:	20000002 	.word	0x20000002
 80023ec:	20000344 	.word	0x20000344
 80023f0:	20000364 	.word	0x20000364
 80023f4:	20000000 	.word	0x20000000
 80023f8:	20000345 	.word	0x20000345
 80023fc:	20000346 	.word	0x20000346
 8002400:	20000347 	.word	0x20000347
 8002404:	20000348 	.word	0x20000348
 8002408:	2000034b 	.word	0x2000034b
 800240c:	20000350 	.word	0x20000350
 8002410:	20000005 	.word	0x20000005
 8002414:	2000034a 	.word	0x2000034a
 8002418:	20000006 	.word	0x20000006
 800241c:	20000349 	.word	0x20000349
 8002420:	200002d8 	.word	0x200002d8

08002424 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	if (alarmIsSet == 1) {
 800242c:	4b07      	ldr	r3, [pc, #28]	@ (800244c <HAL_RTC_AlarmAEventCallback+0x28>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d105      	bne.n	8002440 <HAL_RTC_AlarmAEventCallback+0x1c>
		isAlarm = 1;
 8002434:	4b06      	ldr	r3, [pc, #24]	@ (8002450 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8002436:	2201      	movs	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]
		alarmIsSet = 0;
 800243a:	4b04      	ldr	r3, [pc, #16]	@ (800244c <HAL_RTC_AlarmAEventCallback+0x28>)
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
	}
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	20000342 	.word	0x20000342
 8002450:	20000341 	.word	0x20000341

08002454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002458:	b672      	cpsid	i
}
 800245a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <Error_Handler+0x8>

08002460 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af04      	add	r7, sp, #16
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002476:	f04f 33ff 	mov.w	r3, #4294967295
 800247a:	9302      	str	r3, [sp, #8]
 800247c:	2301      	movs	r3, #1
 800247e:	9301      	str	r3, [sp, #4]
 8002480:	1dfb      	adds	r3, r7, #7
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2301      	movs	r3, #1
 8002486:	2200      	movs	r2, #0
 8002488:	2178      	movs	r1, #120	@ 0x78
 800248a:	4803      	ldr	r0, [pc, #12]	@ (8002498 <ssd1306_WriteCommand+0x2c>)
 800248c:	f001 f978 	bl	8003780 <HAL_I2C_Mem_Write>
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	20000230 	.word	0x20000230

0800249c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af04      	add	r7, sp, #16
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	f04f 32ff 	mov.w	r2, #4294967295
 80024ae:	9202      	str	r2, [sp, #8]
 80024b0:	9301      	str	r3, [sp, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	2301      	movs	r3, #1
 80024b8:	2240      	movs	r2, #64	@ 0x40
 80024ba:	2178      	movs	r1, #120	@ 0x78
 80024bc:	4803      	ldr	r0, [pc, #12]	@ (80024cc <ssd1306_WriteData+0x30>)
 80024be:	f001 f95f 	bl	8003780 <HAL_I2C_Mem_Write>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000230 	.word	0x20000230

080024d0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80024d4:	f7ff ffc4 	bl	8002460 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80024d8:	2064      	movs	r0, #100	@ 0x64
 80024da:	f000 fd0d 	bl	8002ef8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80024de:	2000      	movs	r0, #0
 80024e0:	f000 fa22 	bl	8002928 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80024e4:	2020      	movs	r0, #32
 80024e6:	f7ff ffc1 	bl	800246c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80024ea:	2000      	movs	r0, #0
 80024ec:	f7ff ffbe 	bl	800246c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80024f0:	20b0      	movs	r0, #176	@ 0xb0
 80024f2:	f7ff ffbb 	bl	800246c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80024f6:	20c8      	movs	r0, #200	@ 0xc8
 80024f8:	f7ff ffb8 	bl	800246c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80024fc:	2000      	movs	r0, #0
 80024fe:	f7ff ffb5 	bl	800246c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002502:	2010      	movs	r0, #16
 8002504:	f7ff ffb2 	bl	800246c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002508:	2040      	movs	r0, #64	@ 0x40
 800250a:	f7ff ffaf 	bl	800246c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800250e:	20ff      	movs	r0, #255	@ 0xff
 8002510:	f000 f9f6 	bl	8002900 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002514:	20a1      	movs	r0, #161	@ 0xa1
 8002516:	f7ff ffa9 	bl	800246c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800251a:	20a6      	movs	r0, #166	@ 0xa6
 800251c:	f7ff ffa6 	bl	800246c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002520:	20a8      	movs	r0, #168	@ 0xa8
 8002522:	f7ff ffa3 	bl	800246c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002526:	203f      	movs	r0, #63	@ 0x3f
 8002528:	f7ff ffa0 	bl	800246c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800252c:	20a4      	movs	r0, #164	@ 0xa4
 800252e:	f7ff ff9d 	bl	800246c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002532:	20d3      	movs	r0, #211	@ 0xd3
 8002534:	f7ff ff9a 	bl	800246c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002538:	2000      	movs	r0, #0
 800253a:	f7ff ff97 	bl	800246c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800253e:	20d5      	movs	r0, #213	@ 0xd5
 8002540:	f7ff ff94 	bl	800246c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002544:	20f0      	movs	r0, #240	@ 0xf0
 8002546:	f7ff ff91 	bl	800246c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800254a:	20d9      	movs	r0, #217	@ 0xd9
 800254c:	f7ff ff8e 	bl	800246c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002550:	2022      	movs	r0, #34	@ 0x22
 8002552:	f7ff ff8b 	bl	800246c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002556:	20da      	movs	r0, #218	@ 0xda
 8002558:	f7ff ff88 	bl	800246c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800255c:	2012      	movs	r0, #18
 800255e:	f7ff ff85 	bl	800246c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002562:	20db      	movs	r0, #219	@ 0xdb
 8002564:	f7ff ff82 	bl	800246c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002568:	2020      	movs	r0, #32
 800256a:	f7ff ff7f 	bl	800246c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800256e:	208d      	movs	r0, #141	@ 0x8d
 8002570:	f7ff ff7c 	bl	800246c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002574:	2014      	movs	r0, #20
 8002576:	f7ff ff79 	bl	800246c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800257a:	2001      	movs	r0, #1
 800257c:	f000 f9d4 	bl	8002928 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002580:	2000      	movs	r0, #0
 8002582:	f000 f80f 	bl	80025a4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002586:	f000 f825 	bl	80025d4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800258a:	4b05      	ldr	r3, [pc, #20]	@ (80025a0 <ssd1306_Init+0xd0>)
 800258c:	2200      	movs	r2, #0
 800258e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002590:	4b03      	ldr	r3, [pc, #12]	@ (80025a0 <ssd1306_Init+0xd0>)
 8002592:	2200      	movs	r2, #0
 8002594:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002596:	4b02      	ldr	r3, [pc, #8]	@ (80025a0 <ssd1306_Init+0xd0>)
 8002598:	2201      	movs	r2, #1
 800259a:	711a      	strb	r2, [r3, #4]
}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	2000076c 	.word	0x2000076c

080025a4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <ssd1306_Fill+0x14>
 80025b4:	2300      	movs	r3, #0
 80025b6:	e000      	b.n	80025ba <ssd1306_Fill+0x16>
 80025b8:	23ff      	movs	r3, #255	@ 0xff
 80025ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025be:	4619      	mov	r1, r3
 80025c0:	4803      	ldr	r0, [pc, #12]	@ (80025d0 <ssd1306_Fill+0x2c>)
 80025c2:	f004 fdf8 	bl	80071b6 <memset>
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	2000036c 	.word	0x2000036c

080025d4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80025da:	2300      	movs	r3, #0
 80025dc:	71fb      	strb	r3, [r7, #7]
 80025de:	e016      	b.n	800260e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	3b50      	subs	r3, #80	@ 0x50
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff ff40 	bl	800246c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80025ec:	2000      	movs	r0, #0
 80025ee:	f7ff ff3d 	bl	800246c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80025f2:	2010      	movs	r0, #16
 80025f4:	f7ff ff3a 	bl	800246c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	01db      	lsls	r3, r3, #7
 80025fc:	4a08      	ldr	r2, [pc, #32]	@ (8002620 <ssd1306_UpdateScreen+0x4c>)
 80025fe:	4413      	add	r3, r2
 8002600:	2180      	movs	r1, #128	@ 0x80
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff ff4a 	bl	800249c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	3301      	adds	r3, #1
 800260c:	71fb      	strb	r3, [r7, #7]
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	2b07      	cmp	r3, #7
 8002612:	d9e5      	bls.n	80025e0 <ssd1306_UpdateScreen+0xc>
    }
}
 8002614:	bf00      	nop
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	2000036c 	.word	0x2000036c

08002624 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	71fb      	strb	r3, [r7, #7]
 800262e:	460b      	mov	r3, r1
 8002630:	71bb      	strb	r3, [r7, #6]
 8002632:	4613      	mov	r3, r2
 8002634:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	2b00      	cmp	r3, #0
 800263c:	db3d      	blt.n	80026ba <ssd1306_DrawPixel+0x96>
 800263e:	79bb      	ldrb	r3, [r7, #6]
 8002640:	2b3f      	cmp	r3, #63	@ 0x3f
 8002642:	d83a      	bhi.n	80026ba <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002644:	797b      	ldrb	r3, [r7, #5]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d11a      	bne.n	8002680 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800264a:	79fa      	ldrb	r2, [r7, #7]
 800264c:	79bb      	ldrb	r3, [r7, #6]
 800264e:	08db      	lsrs	r3, r3, #3
 8002650:	b2d8      	uxtb	r0, r3
 8002652:	4603      	mov	r3, r0
 8002654:	01db      	lsls	r3, r3, #7
 8002656:	4413      	add	r3, r2
 8002658:	4a1a      	ldr	r2, [pc, #104]	@ (80026c4 <ssd1306_DrawPixel+0xa0>)
 800265a:	5cd3      	ldrb	r3, [r2, r3]
 800265c:	b25a      	sxtb	r2, r3
 800265e:	79bb      	ldrb	r3, [r7, #6]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	2101      	movs	r1, #1
 8002666:	fa01 f303 	lsl.w	r3, r1, r3
 800266a:	b25b      	sxtb	r3, r3
 800266c:	4313      	orrs	r3, r2
 800266e:	b259      	sxtb	r1, r3
 8002670:	79fa      	ldrb	r2, [r7, #7]
 8002672:	4603      	mov	r3, r0
 8002674:	01db      	lsls	r3, r3, #7
 8002676:	4413      	add	r3, r2
 8002678:	b2c9      	uxtb	r1, r1
 800267a:	4a12      	ldr	r2, [pc, #72]	@ (80026c4 <ssd1306_DrawPixel+0xa0>)
 800267c:	54d1      	strb	r1, [r2, r3]
 800267e:	e01d      	b.n	80026bc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002680:	79fa      	ldrb	r2, [r7, #7]
 8002682:	79bb      	ldrb	r3, [r7, #6]
 8002684:	08db      	lsrs	r3, r3, #3
 8002686:	b2d8      	uxtb	r0, r3
 8002688:	4603      	mov	r3, r0
 800268a:	01db      	lsls	r3, r3, #7
 800268c:	4413      	add	r3, r2
 800268e:	4a0d      	ldr	r2, [pc, #52]	@ (80026c4 <ssd1306_DrawPixel+0xa0>)
 8002690:	5cd3      	ldrb	r3, [r2, r3]
 8002692:	b25a      	sxtb	r2, r3
 8002694:	79bb      	ldrb	r3, [r7, #6]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	2101      	movs	r1, #1
 800269c:	fa01 f303 	lsl.w	r3, r1, r3
 80026a0:	b25b      	sxtb	r3, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	b25b      	sxtb	r3, r3
 80026a6:	4013      	ands	r3, r2
 80026a8:	b259      	sxtb	r1, r3
 80026aa:	79fa      	ldrb	r2, [r7, #7]
 80026ac:	4603      	mov	r3, r0
 80026ae:	01db      	lsls	r3, r3, #7
 80026b0:	4413      	add	r3, r2
 80026b2:	b2c9      	uxtb	r1, r1
 80026b4:	4a03      	ldr	r2, [pc, #12]	@ (80026c4 <ssd1306_DrawPixel+0xa0>)
 80026b6:	54d1      	strb	r1, [r2, r3]
 80026b8:	e000      	b.n	80026bc <ssd1306_DrawPixel+0x98>
        return;
 80026ba:	bf00      	nop
    }
}
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	2000036c 	.word	0x2000036c

080026c8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	b089      	sub	sp, #36	@ 0x24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4604      	mov	r4, r0
 80026d0:	4638      	mov	r0, r7
 80026d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80026d6:	4623      	mov	r3, r4
 80026d8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80026da:	7bfb      	ldrb	r3, [r7, #15]
 80026dc:	2b1f      	cmp	r3, #31
 80026de:	d902      	bls.n	80026e6 <ssd1306_WriteChar+0x1e>
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	2b7e      	cmp	r3, #126	@ 0x7e
 80026e4:	d901      	bls.n	80026ea <ssd1306_WriteChar+0x22>
        return 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	e077      	b.n	80027da <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80026ea:	4b3e      	ldr	r3, [pc, #248]	@ (80027e4 <ssd1306_WriteChar+0x11c>)
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	461a      	mov	r2, r3
 80026f0:	783b      	ldrb	r3, [r7, #0]
 80026f2:	4413      	add	r3, r2
 80026f4:	2b80      	cmp	r3, #128	@ 0x80
 80026f6:	dc06      	bgt.n	8002706 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80026f8:	4b3a      	ldr	r3, [pc, #232]	@ (80027e4 <ssd1306_WriteChar+0x11c>)
 80026fa:	885b      	ldrh	r3, [r3, #2]
 80026fc:	461a      	mov	r2, r3
 80026fe:	787b      	ldrb	r3, [r7, #1]
 8002700:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002702:	2b40      	cmp	r3, #64	@ 0x40
 8002704:	dd01      	ble.n	800270a <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8002706:	2300      	movs	r3, #0
 8002708:	e067      	b.n	80027da <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800270a:	2300      	movs	r3, #0
 800270c:	61fb      	str	r3, [r7, #28]
 800270e:	e04e      	b.n	80027ae <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	3b20      	subs	r3, #32
 8002716:	7879      	ldrb	r1, [r7, #1]
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	4619      	mov	r1, r3
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	440b      	add	r3, r1
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	4413      	add	r3, r2
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800272a:	2300      	movs	r3, #0
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	e036      	b.n	800279e <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d013      	beq.n	8002768 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002740:	4b28      	ldr	r3, [pc, #160]	@ (80027e4 <ssd1306_WriteChar+0x11c>)
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	4413      	add	r3, r2
 800274c:	b2d8      	uxtb	r0, r3
 800274e:	4b25      	ldr	r3, [pc, #148]	@ (80027e4 <ssd1306_WriteChar+0x11c>)
 8002750:	885b      	ldrh	r3, [r3, #2]
 8002752:	b2da      	uxtb	r2, r3
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	b2db      	uxtb	r3, r3
 8002758:	4413      	add	r3, r2
 800275a:	b2db      	uxtb	r3, r3
 800275c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002760:	4619      	mov	r1, r3
 8002762:	f7ff ff5f 	bl	8002624 <ssd1306_DrawPixel>
 8002766:	e017      	b.n	8002798 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002768:	4b1e      	ldr	r3, [pc, #120]	@ (80027e4 <ssd1306_WriteChar+0x11c>)
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	b2da      	uxtb	r2, r3
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	b2db      	uxtb	r3, r3
 8002772:	4413      	add	r3, r2
 8002774:	b2d8      	uxtb	r0, r3
 8002776:	4b1b      	ldr	r3, [pc, #108]	@ (80027e4 <ssd1306_WriteChar+0x11c>)
 8002778:	885b      	ldrh	r3, [r3, #2]
 800277a:	b2da      	uxtb	r2, r3
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	4413      	add	r3, r2
 8002782:	b2d9      	uxtb	r1, r3
 8002784:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002788:	2b00      	cmp	r3, #0
 800278a:	bf0c      	ite	eq
 800278c:	2301      	moveq	r3, #1
 800278e:	2300      	movne	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	461a      	mov	r2, r3
 8002794:	f7ff ff46 	bl	8002624 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	3301      	adds	r3, #1
 800279c:	61bb      	str	r3, [r7, #24]
 800279e:	783b      	ldrb	r3, [r7, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d3c3      	bcc.n	8002730 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	3301      	adds	r3, #1
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	787b      	ldrb	r3, [r7, #1]
 80027b0:	461a      	mov	r2, r3
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d3ab      	bcc.n	8002710 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80027b8:	4b0a      	ldr	r3, [pc, #40]	@ (80027e4 <ssd1306_WriteChar+0x11c>)
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	2a00      	cmp	r2, #0
 80027c0:	d005      	beq.n	80027ce <ssd1306_WriteChar+0x106>
 80027c2:	68b9      	ldr	r1, [r7, #8]
 80027c4:	7bfa      	ldrb	r2, [r7, #15]
 80027c6:	3a20      	subs	r2, #32
 80027c8:	440a      	add	r2, r1
 80027ca:	7812      	ldrb	r2, [r2, #0]
 80027cc:	e000      	b.n	80027d0 <ssd1306_WriteChar+0x108>
 80027ce:	783a      	ldrb	r2, [r7, #0]
 80027d0:	4413      	add	r3, r2
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	4b03      	ldr	r3, [pc, #12]	@ (80027e4 <ssd1306_WriteChar+0x11c>)
 80027d6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3724      	adds	r7, #36	@ 0x24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd90      	pop	{r4, r7, pc}
 80027e2:	bf00      	nop
 80027e4:	2000076c 	.word	0x2000076c

080027e8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	4638      	mov	r0, r7
 80027f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80027f6:	e013      	b.n	8002820 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	7818      	ldrb	r0, [r3, #0]
 80027fc:	7e3b      	ldrb	r3, [r7, #24]
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	463b      	mov	r3, r7
 8002802:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002804:	f7ff ff60 	bl	80026c8 <ssd1306_WriteChar>
 8002808:	4603      	mov	r3, r0
 800280a:	461a      	mov	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d002      	beq.n	800281a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	e008      	b.n	800282c <ssd1306_WriteString+0x44>
        }
        str++;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	3301      	adds	r3, #1
 800281e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1e7      	bne.n	80027f8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	781b      	ldrb	r3, [r3, #0]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	460a      	mov	r2, r1
 800283e:	71fb      	strb	r3, [r7, #7]
 8002840:	4613      	mov	r3, r2
 8002842:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	b29a      	uxth	r2, r3
 8002848:	4b05      	ldr	r3, [pc, #20]	@ (8002860 <ssd1306_SetCursor+0x2c>)
 800284a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800284c:	79bb      	ldrb	r3, [r7, #6]
 800284e:	b29a      	uxth	r2, r3
 8002850:	4b03      	ldr	r3, [pc, #12]	@ (8002860 <ssd1306_SetCursor+0x2c>)
 8002852:	805a      	strh	r2, [r3, #2]
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	2000076c 	.word	0x2000076c

08002864 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	4604      	mov	r4, r0
 800286c:	4608      	mov	r0, r1
 800286e:	4611      	mov	r1, r2
 8002870:	461a      	mov	r2, r3
 8002872:	4623      	mov	r3, r4
 8002874:	71fb      	strb	r3, [r7, #7]
 8002876:	4603      	mov	r3, r0
 8002878:	71bb      	strb	r3, [r7, #6]
 800287a:	460b      	mov	r3, r1
 800287c:	717b      	strb	r3, [r7, #5]
 800287e:	4613      	mov	r3, r2
 8002880:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8002882:	79fa      	ldrb	r2, [r7, #7]
 8002884:	797b      	ldrb	r3, [r7, #5]
 8002886:	4293      	cmp	r3, r2
 8002888:	bf28      	it	cs
 800288a:	4613      	movcs	r3, r2
 800288c:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 800288e:	797a      	ldrb	r2, [r7, #5]
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	4293      	cmp	r3, r2
 8002894:	bf38      	it	cc
 8002896:	4613      	movcc	r3, r2
 8002898:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 800289a:	79ba      	ldrb	r2, [r7, #6]
 800289c:	793b      	ldrb	r3, [r7, #4]
 800289e:	4293      	cmp	r3, r2
 80028a0:	bf28      	it	cs
 80028a2:	4613      	movcs	r3, r2
 80028a4:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 80028a6:	793a      	ldrb	r2, [r7, #4]
 80028a8:	79bb      	ldrb	r3, [r7, #6]
 80028aa:	4293      	cmp	r3, r2
 80028ac:	bf38      	it	cc
 80028ae:	4613      	movcc	r3, r2
 80028b0:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80028b2:	7afb      	ldrb	r3, [r7, #11]
 80028b4:	73fb      	strb	r3, [r7, #15]
 80028b6:	e017      	b.n	80028e8 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80028b8:	7b7b      	ldrb	r3, [r7, #13]
 80028ba:	73bb      	strb	r3, [r7, #14]
 80028bc:	e009      	b.n	80028d2 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 80028be:	f897 2020 	ldrb.w	r2, [r7, #32]
 80028c2:	7bf9      	ldrb	r1, [r7, #15]
 80028c4:	7bbb      	ldrb	r3, [r7, #14]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff feac 	bl	8002624 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80028cc:	7bbb      	ldrb	r3, [r7, #14]
 80028ce:	3301      	adds	r3, #1
 80028d0:	73bb      	strb	r3, [r7, #14]
 80028d2:	7bba      	ldrb	r2, [r7, #14]
 80028d4:	7b3b      	ldrb	r3, [r7, #12]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d803      	bhi.n	80028e2 <ssd1306_FillRectangle+0x7e>
 80028da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	daed      	bge.n	80028be <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	3301      	adds	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
 80028e8:	7bfa      	ldrb	r2, [r7, #15]
 80028ea:	7abb      	ldrb	r3, [r7, #10]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d803      	bhi.n	80028f8 <ssd1306_FillRectangle+0x94>
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80028f4:	d9e0      	bls.n	80028b8 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 80028f6:	bf00      	nop
 80028f8:	bf00      	nop
}
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd90      	pop	{r4, r7, pc}

08002900 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800290a:	2381      	movs	r3, #129	@ 0x81
 800290c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff fdab 	bl	800246c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fda7 	bl	800246c <ssd1306_WriteCommand>
}
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002938:	23af      	movs	r3, #175	@ 0xaf
 800293a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800293c:	4b08      	ldr	r3, [pc, #32]	@ (8002960 <ssd1306_SetDisplayOn+0x38>)
 800293e:	2201      	movs	r2, #1
 8002940:	715a      	strb	r2, [r3, #5]
 8002942:	e004      	b.n	800294e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002944:	23ae      	movs	r3, #174	@ 0xae
 8002946:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002948:	4b05      	ldr	r3, [pc, #20]	@ (8002960 <ssd1306_SetDisplayOn+0x38>)
 800294a:	2200      	movs	r2, #0
 800294c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800294e:	7bfb      	ldrb	r3, [r7, #15]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff fd8b 	bl	800246c <ssd1306_WriteCommand>
}
 8002956:	bf00      	nop
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	2000076c 	.word	0x2000076c

08002964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800296a:	4b15      	ldr	r3, [pc, #84]	@ (80029c0 <HAL_MspInit+0x5c>)
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	4a14      	ldr	r2, [pc, #80]	@ (80029c0 <HAL_MspInit+0x5c>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6193      	str	r3, [r2, #24]
 8002976:	4b12      	ldr	r3, [pc, #72]	@ (80029c0 <HAL_MspInit+0x5c>)
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002982:	4b0f      	ldr	r3, [pc, #60]	@ (80029c0 <HAL_MspInit+0x5c>)
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	4a0e      	ldr	r2, [pc, #56]	@ (80029c0 <HAL_MspInit+0x5c>)
 8002988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800298c:	61d3      	str	r3, [r2, #28]
 800298e:	4b0c      	ldr	r3, [pc, #48]	@ (80029c0 <HAL_MspInit+0x5c>)
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002996:	607b      	str	r3, [r7, #4]
 8002998:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800299a:	4b0a      	ldr	r3, [pc, #40]	@ (80029c4 <HAL_MspInit+0x60>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	4a04      	ldr	r2, [pc, #16]	@ (80029c4 <HAL_MspInit+0x60>)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40010000 	.word	0x40010000

080029c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08a      	sub	sp, #40	@ 0x28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d0:	f107 0318 	add.w	r3, r7, #24
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002a90 <HAL_I2C_MspInit+0xc8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d124      	bne.n	8002a32 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002a94 <HAL_I2C_MspInit+0xcc>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	4a29      	ldr	r2, [pc, #164]	@ (8002a94 <HAL_I2C_MspInit+0xcc>)
 80029ee:	f043 0308 	orr.w	r3, r3, #8
 80029f2:	6193      	str	r3, [r2, #24]
 80029f4:	4b27      	ldr	r3, [pc, #156]	@ (8002a94 <HAL_I2C_MspInit+0xcc>)
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a00:	23c0      	movs	r3, #192	@ 0xc0
 8002a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a04:	2312      	movs	r3, #18
 8002a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a0c:	f107 0318 	add.w	r3, r7, #24
 8002a10:	4619      	mov	r1, r3
 8002a12:	4821      	ldr	r0, [pc, #132]	@ (8002a98 <HAL_I2C_MspInit+0xd0>)
 8002a14:	f000 fba2 	bl	800315c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a18:	4b1e      	ldr	r3, [pc, #120]	@ (8002a94 <HAL_I2C_MspInit+0xcc>)
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8002a94 <HAL_I2C_MspInit+0xcc>)
 8002a1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a22:	61d3      	str	r3, [r2, #28]
 8002a24:	4b1b      	ldr	r3, [pc, #108]	@ (8002a94 <HAL_I2C_MspInit+0xcc>)
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002a30:	e029      	b.n	8002a86 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a19      	ldr	r2, [pc, #100]	@ (8002a9c <HAL_I2C_MspInit+0xd4>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d124      	bne.n	8002a86 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3c:	4b15      	ldr	r3, [pc, #84]	@ (8002a94 <HAL_I2C_MspInit+0xcc>)
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	4a14      	ldr	r2, [pc, #80]	@ (8002a94 <HAL_I2C_MspInit+0xcc>)
 8002a42:	f043 0308 	orr.w	r3, r3, #8
 8002a46:	6193      	str	r3, [r2, #24]
 8002a48:	4b12      	ldr	r3, [pc, #72]	@ (8002a94 <HAL_I2C_MspInit+0xcc>)
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a54:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a5a:	2312      	movs	r3, #18
 8002a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a62:	f107 0318 	add.w	r3, r7, #24
 8002a66:	4619      	mov	r1, r3
 8002a68:	480b      	ldr	r0, [pc, #44]	@ (8002a98 <HAL_I2C_MspInit+0xd0>)
 8002a6a:	f000 fb77 	bl	800315c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a6e:	4b09      	ldr	r3, [pc, #36]	@ (8002a94 <HAL_I2C_MspInit+0xcc>)
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	4a08      	ldr	r2, [pc, #32]	@ (8002a94 <HAL_I2C_MspInit+0xcc>)
 8002a74:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a78:	61d3      	str	r3, [r2, #28]
 8002a7a:	4b06      	ldr	r3, [pc, #24]	@ (8002a94 <HAL_I2C_MspInit+0xcc>)
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	68bb      	ldr	r3, [r7, #8]
}
 8002a86:	bf00      	nop
 8002a88:	3728      	adds	r7, #40	@ 0x28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40005400 	.word	0x40005400
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40010c00 	.word	0x40010c00
 8002a9c:	40005800 	.word	0x40005800

08002aa0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a0f      	ldr	r2, [pc, #60]	@ (8002aec <HAL_RTC_MspInit+0x4c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d118      	bne.n	8002ae4 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002ab2:	f001 fd7b 	bl	80045ac <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8002af0 <HAL_RTC_MspInit+0x50>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	4a0d      	ldr	r2, [pc, #52]	@ (8002af0 <HAL_RTC_MspInit+0x50>)
 8002abc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002ac0:	61d3      	str	r3, [r2, #28]
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8002af0 <HAL_RTC_MspInit+0x50>)
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ace:	4b09      	ldr	r3, [pc, #36]	@ (8002af4 <HAL_RTC_MspInit+0x54>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	2029      	movs	r0, #41	@ 0x29
 8002ada:	f000 fb08 	bl	80030ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002ade:	2029      	movs	r0, #41	@ 0x29
 8002ae0:	f000 fb21 	bl	8003126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ae4:	bf00      	nop
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40002800 	.word	0x40002800
 8002af0:	40021000 	.word	0x40021000
 8002af4:	4242043c 	.word	0x4242043c

08002af8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08a      	sub	sp, #40	@ 0x28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b00:	f107 0314 	add.w	r3, r7, #20
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b16:	d14e      	bne.n	8002bb6 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b18:	4b29      	ldr	r3, [pc, #164]	@ (8002bc0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	4a28      	ldr	r2, [pc, #160]	@ (8002bc0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	61d3      	str	r3, [r2, #28]
 8002b24:	4b26      	ldr	r3, [pc, #152]	@ (8002bc0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b30:	4b23      	ldr	r3, [pc, #140]	@ (8002bc0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	4a22      	ldr	r2, [pc, #136]	@ (8002bc0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b36:	f043 0304 	orr.w	r3, r3, #4
 8002b3a:	6193      	str	r3, [r2, #24]
 8002b3c:	4b20      	ldr	r3, [pc, #128]	@ (8002bc0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b48:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8002bc0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b4e:	f043 0308 	orr.w	r3, r3, #8
 8002b52:	6193      	str	r3, [r2, #24]
 8002b54:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6e:	f107 0314 	add.w	r3, r7, #20
 8002b72:	4619      	mov	r1, r3
 8002b74:	4813      	ldr	r0, [pc, #76]	@ (8002bc4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002b76:	f000 faf1 	bl	800315c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b7a:	2308      	movs	r3, #8
 8002b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b86:	f107 0314 	add.w	r3, r7, #20
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	480e      	ldr	r0, [pc, #56]	@ (8002bc8 <HAL_TIM_Encoder_MspInit+0xd0>)
 8002b8e:	f000 fae5 	bl	800315c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002b92:	4b0e      	ldr	r3, [pc, #56]	@ (8002bcc <HAL_TIM_Encoder_MspInit+0xd4>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002ba6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002baa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bb0:	4a06      	ldr	r2, [pc, #24]	@ (8002bcc <HAL_TIM_Encoder_MspInit+0xd4>)
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002bb6:	bf00      	nop
 8002bb8:	3728      	adds	r7, #40	@ 0x28
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	40010800 	.word	0x40010800
 8002bc8:	40010c00 	.word	0x40010c00
 8002bcc:	40010000 	.word	0x40010000

08002bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bd4:	bf00      	nop
 8002bd6:	e7fd      	b.n	8002bd4 <NMI_Handler+0x4>

08002bd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bdc:	bf00      	nop
 8002bde:	e7fd      	b.n	8002bdc <HardFault_Handler+0x4>

08002be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002be4:	bf00      	nop
 8002be6:	e7fd      	b.n	8002be4 <MemManage_Handler+0x4>

08002be8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bec:	bf00      	nop
 8002bee:	e7fd      	b.n	8002bec <BusFault_Handler+0x4>

08002bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bf4:	bf00      	nop
 8002bf6:	e7fd      	b.n	8002bf4 <UsageFault_Handler+0x4>

08002bf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr

08002c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c14:	bf00      	nop
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c20:	f000 f94e 	bl	8002ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c24:	bf00      	nop
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002c2c:	2002      	movs	r0, #2
 8002c2e:	f000 fc4b 	bl	80034c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002c3a:	2008      	movs	r0, #8
 8002c3c:	f000 fc44 	bl	80034c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002c48:	4802      	ldr	r0, [pc, #8]	@ (8002c54 <RTC_Alarm_IRQHandler+0x10>)
 8002c4a:	f002 fdf5 	bl	8005838 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	200002d8 	.word	0x200002d8

08002c58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  return 1;
 8002c5c:	2301      	movs	r3, #1
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr

08002c66 <_kill>:

int _kill(int pid, int sig)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b082      	sub	sp, #8
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c70:	f004 faf4 	bl	800725c <__errno>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2216      	movs	r2, #22
 8002c78:	601a      	str	r2, [r3, #0]
  return -1;
 8002c7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <_exit>:

void _exit (int status)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c8e:	f04f 31ff 	mov.w	r1, #4294967295
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff ffe7 	bl	8002c66 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c98:	bf00      	nop
 8002c9a:	e7fd      	b.n	8002c98 <_exit+0x12>

08002c9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	e00a      	b.n	8002cc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cae:	f3af 8000 	nop.w
 8002cb2:	4601      	mov	r1, r0
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	60ba      	str	r2, [r7, #8]
 8002cba:	b2ca      	uxtb	r2, r1
 8002cbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	dbf0      	blt.n	8002cae <_read+0x12>
  }

  return len;
 8002ccc:	687b      	ldr	r3, [r7, #4]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b086      	sub	sp, #24
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	e009      	b.n	8002cfc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	60ba      	str	r2, [r7, #8]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	617b      	str	r3, [r7, #20]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	dbf1      	blt.n	8002ce8 <_write+0x12>
  }
  return len;
 8002d04:	687b      	ldr	r3, [r7, #4]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <_close>:

int _close(int file)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d34:	605a      	str	r2, [r3, #4]
  return 0;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr

08002d42 <_isatty>:

int _isatty(int file)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d4a:	2301      	movs	r3, #1
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr

08002d56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b085      	sub	sp, #20
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr
	...

08002d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d78:	4a14      	ldr	r2, [pc, #80]	@ (8002dcc <_sbrk+0x5c>)
 8002d7a:	4b15      	ldr	r3, [pc, #84]	@ (8002dd0 <_sbrk+0x60>)
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d84:	4b13      	ldr	r3, [pc, #76]	@ (8002dd4 <_sbrk+0x64>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d102      	bne.n	8002d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d8c:	4b11      	ldr	r3, [pc, #68]	@ (8002dd4 <_sbrk+0x64>)
 8002d8e:	4a12      	ldr	r2, [pc, #72]	@ (8002dd8 <_sbrk+0x68>)
 8002d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d92:	4b10      	ldr	r3, [pc, #64]	@ (8002dd4 <_sbrk+0x64>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d207      	bcs.n	8002db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002da0:	f004 fa5c 	bl	800725c <__errno>
 8002da4:	4603      	mov	r3, r0
 8002da6:	220c      	movs	r2, #12
 8002da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002daa:	f04f 33ff 	mov.w	r3, #4294967295
 8002dae:	e009      	b.n	8002dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002db0:	4b08      	ldr	r3, [pc, #32]	@ (8002dd4 <_sbrk+0x64>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002db6:	4b07      	ldr	r3, [pc, #28]	@ (8002dd4 <_sbrk+0x64>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	4a05      	ldr	r2, [pc, #20]	@ (8002dd4 <_sbrk+0x64>)
 8002dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20005000 	.word	0x20005000
 8002dd0:	00000400 	.word	0x00000400
 8002dd4:	20000774 	.word	0x20000774
 8002dd8:	200008c8 	.word	0x200008c8

08002ddc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr

08002de8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002de8:	f7ff fff8 	bl	8002ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dec:	480b      	ldr	r0, [pc, #44]	@ (8002e1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002dee:	490c      	ldr	r1, [pc, #48]	@ (8002e20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002df0:	4a0c      	ldr	r2, [pc, #48]	@ (8002e24 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002df4:	e002      	b.n	8002dfc <LoopCopyDataInit>

08002df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dfa:	3304      	adds	r3, #4

08002dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e00:	d3f9      	bcc.n	8002df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e02:	4a09      	ldr	r2, [pc, #36]	@ (8002e28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002e04:	4c09      	ldr	r4, [pc, #36]	@ (8002e2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e08:	e001      	b.n	8002e0e <LoopFillZerobss>

08002e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e0c:	3204      	adds	r2, #4

08002e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e10:	d3fb      	bcc.n	8002e0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e12:	f004 fa29 	bl	8007268 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e16:	f7fe fc29 	bl	800166c <main>
  bx lr
 8002e1a:	4770      	bx	lr
  ldr r0, =_sdata
 8002e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e20:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002e24:	0800d630 	.word	0x0800d630
  ldr r2, =_sbss
 8002e28:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002e2c:	200008c8 	.word	0x200008c8

08002e30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e30:	e7fe      	b.n	8002e30 <ADC1_2_IRQHandler>
	...

08002e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e38:	4b08      	ldr	r3, [pc, #32]	@ (8002e5c <HAL_Init+0x28>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a07      	ldr	r2, [pc, #28]	@ (8002e5c <HAL_Init+0x28>)
 8002e3e:	f043 0310 	orr.w	r3, r3, #16
 8002e42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e44:	2003      	movs	r0, #3
 8002e46:	f000 f947 	bl	80030d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e4a:	200f      	movs	r0, #15
 8002e4c:	f000 f808 	bl	8002e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e50:	f7ff fd88 	bl	8002964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40022000 	.word	0x40022000

08002e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e68:	4b12      	ldr	r3, [pc, #72]	@ (8002eb4 <HAL_InitTick+0x54>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4b12      	ldr	r3, [pc, #72]	@ (8002eb8 <HAL_InitTick+0x58>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	4619      	mov	r1, r3
 8002e72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 f95f 	bl	8003142 <HAL_SYSTICK_Config>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e00e      	b.n	8002eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b0f      	cmp	r3, #15
 8002e92:	d80a      	bhi.n	8002eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e94:	2200      	movs	r2, #0
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	f04f 30ff 	mov.w	r0, #4294967295
 8002e9c:	f000 f927 	bl	80030ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ea0:	4a06      	ldr	r2, [pc, #24]	@ (8002ebc <HAL_InitTick+0x5c>)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	e000      	b.n	8002eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	20000008 	.word	0x20000008
 8002eb8:	20000010 	.word	0x20000010
 8002ebc:	2000000c 	.word	0x2000000c

08002ec0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ec4:	4b05      	ldr	r3, [pc, #20]	@ (8002edc <HAL_IncTick+0x1c>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4b05      	ldr	r3, [pc, #20]	@ (8002ee0 <HAL_IncTick+0x20>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4413      	add	r3, r2
 8002ed0:	4a03      	ldr	r2, [pc, #12]	@ (8002ee0 <HAL_IncTick+0x20>)
 8002ed2:	6013      	str	r3, [r2, #0]
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr
 8002edc:	20000010 	.word	0x20000010
 8002ee0:	20000778 	.word	0x20000778

08002ee4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ee8:	4b02      	ldr	r3, [pc, #8]	@ (8002ef4 <HAL_GetTick+0x10>)
 8002eea:	681b      	ldr	r3, [r3, #0]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr
 8002ef4:	20000778 	.word	0x20000778

08002ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f00:	f7ff fff0 	bl	8002ee4 <HAL_GetTick>
 8002f04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f10:	d005      	beq.n	8002f1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f12:	4b0a      	ldr	r3, [pc, #40]	@ (8002f3c <HAL_Delay+0x44>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f1e:	bf00      	nop
 8002f20:	f7ff ffe0 	bl	8002ee4 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d8f7      	bhi.n	8002f20 <HAL_Delay+0x28>
  {
  }
}
 8002f30:	bf00      	nop
 8002f32:	bf00      	nop
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20000010 	.word	0x20000010

08002f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f50:	4b0c      	ldr	r3, [pc, #48]	@ (8002f84 <__NVIC_SetPriorityGrouping+0x44>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f72:	4a04      	ldr	r2, [pc, #16]	@ (8002f84 <__NVIC_SetPriorityGrouping+0x44>)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	60d3      	str	r3, [r2, #12]
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f8c:	4b04      	ldr	r3, [pc, #16]	@ (8002fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	0a1b      	lsrs	r3, r3, #8
 8002f92:	f003 0307 	and.w	r3, r3, #7
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	e000ed00 	.word	0xe000ed00

08002fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	db0b      	blt.n	8002fce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	f003 021f 	and.w	r2, r3, #31
 8002fbc:	4906      	ldr	r1, [pc, #24]	@ (8002fd8 <__NVIC_EnableIRQ+0x34>)
 8002fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr
 8002fd8:	e000e100 	.word	0xe000e100

08002fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	6039      	str	r1, [r7, #0]
 8002fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	db0a      	blt.n	8003006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	490c      	ldr	r1, [pc, #48]	@ (8003028 <__NVIC_SetPriority+0x4c>)
 8002ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffa:	0112      	lsls	r2, r2, #4
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	440b      	add	r3, r1
 8003000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003004:	e00a      	b.n	800301c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	b2da      	uxtb	r2, r3
 800300a:	4908      	ldr	r1, [pc, #32]	@ (800302c <__NVIC_SetPriority+0x50>)
 800300c:	79fb      	ldrb	r3, [r7, #7]
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	3b04      	subs	r3, #4
 8003014:	0112      	lsls	r2, r2, #4
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	440b      	add	r3, r1
 800301a:	761a      	strb	r2, [r3, #24]
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	e000e100 	.word	0xe000e100
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003030:	b480      	push	{r7}
 8003032:	b089      	sub	sp, #36	@ 0x24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	f1c3 0307 	rsb	r3, r3, #7
 800304a:	2b04      	cmp	r3, #4
 800304c:	bf28      	it	cs
 800304e:	2304      	movcs	r3, #4
 8003050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	3304      	adds	r3, #4
 8003056:	2b06      	cmp	r3, #6
 8003058:	d902      	bls.n	8003060 <NVIC_EncodePriority+0x30>
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	3b03      	subs	r3, #3
 800305e:	e000      	b.n	8003062 <NVIC_EncodePriority+0x32>
 8003060:	2300      	movs	r3, #0
 8003062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003064:	f04f 32ff 	mov.w	r2, #4294967295
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	43da      	mvns	r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	401a      	ands	r2, r3
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003078:	f04f 31ff 	mov.w	r1, #4294967295
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	fa01 f303 	lsl.w	r3, r1, r3
 8003082:	43d9      	mvns	r1, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003088:	4313      	orrs	r3, r2
         );
}
 800308a:	4618      	mov	r0, r3
 800308c:	3724      	adds	r7, #36	@ 0x24
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr

08003094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3b01      	subs	r3, #1
 80030a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030a4:	d301      	bcc.n	80030aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030a6:	2301      	movs	r3, #1
 80030a8:	e00f      	b.n	80030ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030aa:	4a0a      	ldr	r2, [pc, #40]	@ (80030d4 <SysTick_Config+0x40>)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030b2:	210f      	movs	r1, #15
 80030b4:	f04f 30ff 	mov.w	r0, #4294967295
 80030b8:	f7ff ff90 	bl	8002fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030bc:	4b05      	ldr	r3, [pc, #20]	@ (80030d4 <SysTick_Config+0x40>)
 80030be:	2200      	movs	r2, #0
 80030c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030c2:	4b04      	ldr	r3, [pc, #16]	@ (80030d4 <SysTick_Config+0x40>)
 80030c4:	2207      	movs	r2, #7
 80030c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	e000e010 	.word	0xe000e010

080030d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7ff ff2d 	bl	8002f40 <__NVIC_SetPriorityGrouping>
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b086      	sub	sp, #24
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	4603      	mov	r3, r0
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	607a      	str	r2, [r7, #4]
 80030fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003100:	f7ff ff42 	bl	8002f88 <__NVIC_GetPriorityGrouping>
 8003104:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	68b9      	ldr	r1, [r7, #8]
 800310a:	6978      	ldr	r0, [r7, #20]
 800310c:	f7ff ff90 	bl	8003030 <NVIC_EncodePriority>
 8003110:	4602      	mov	r2, r0
 8003112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003116:	4611      	mov	r1, r2
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff ff5f 	bl	8002fdc <__NVIC_SetPriority>
}
 800311e:	bf00      	nop
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	4603      	mov	r3, r0
 800312e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff ff35 	bl	8002fa4 <__NVIC_EnableIRQ>
}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff ffa2 	bl	8003094 <SysTick_Config>
 8003150:	4603      	mov	r3, r0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800315c:	b480      	push	{r7}
 800315e:	b08b      	sub	sp, #44	@ 0x2c
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003166:	2300      	movs	r3, #0
 8003168:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800316a:	2300      	movs	r3, #0
 800316c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800316e:	e169      	b.n	8003444 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003170:	2201      	movs	r2, #1
 8003172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	4013      	ands	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	429a      	cmp	r2, r3
 800318a:	f040 8158 	bne.w	800343e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	4a9a      	ldr	r2, [pc, #616]	@ (80033fc <HAL_GPIO_Init+0x2a0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d05e      	beq.n	8003256 <HAL_GPIO_Init+0xfa>
 8003198:	4a98      	ldr	r2, [pc, #608]	@ (80033fc <HAL_GPIO_Init+0x2a0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d875      	bhi.n	800328a <HAL_GPIO_Init+0x12e>
 800319e:	4a98      	ldr	r2, [pc, #608]	@ (8003400 <HAL_GPIO_Init+0x2a4>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d058      	beq.n	8003256 <HAL_GPIO_Init+0xfa>
 80031a4:	4a96      	ldr	r2, [pc, #600]	@ (8003400 <HAL_GPIO_Init+0x2a4>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d86f      	bhi.n	800328a <HAL_GPIO_Init+0x12e>
 80031aa:	4a96      	ldr	r2, [pc, #600]	@ (8003404 <HAL_GPIO_Init+0x2a8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d052      	beq.n	8003256 <HAL_GPIO_Init+0xfa>
 80031b0:	4a94      	ldr	r2, [pc, #592]	@ (8003404 <HAL_GPIO_Init+0x2a8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d869      	bhi.n	800328a <HAL_GPIO_Init+0x12e>
 80031b6:	4a94      	ldr	r2, [pc, #592]	@ (8003408 <HAL_GPIO_Init+0x2ac>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d04c      	beq.n	8003256 <HAL_GPIO_Init+0xfa>
 80031bc:	4a92      	ldr	r2, [pc, #584]	@ (8003408 <HAL_GPIO_Init+0x2ac>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d863      	bhi.n	800328a <HAL_GPIO_Init+0x12e>
 80031c2:	4a92      	ldr	r2, [pc, #584]	@ (800340c <HAL_GPIO_Init+0x2b0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d046      	beq.n	8003256 <HAL_GPIO_Init+0xfa>
 80031c8:	4a90      	ldr	r2, [pc, #576]	@ (800340c <HAL_GPIO_Init+0x2b0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d85d      	bhi.n	800328a <HAL_GPIO_Init+0x12e>
 80031ce:	2b12      	cmp	r3, #18
 80031d0:	d82a      	bhi.n	8003228 <HAL_GPIO_Init+0xcc>
 80031d2:	2b12      	cmp	r3, #18
 80031d4:	d859      	bhi.n	800328a <HAL_GPIO_Init+0x12e>
 80031d6:	a201      	add	r2, pc, #4	@ (adr r2, 80031dc <HAL_GPIO_Init+0x80>)
 80031d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031dc:	08003257 	.word	0x08003257
 80031e0:	08003231 	.word	0x08003231
 80031e4:	08003243 	.word	0x08003243
 80031e8:	08003285 	.word	0x08003285
 80031ec:	0800328b 	.word	0x0800328b
 80031f0:	0800328b 	.word	0x0800328b
 80031f4:	0800328b 	.word	0x0800328b
 80031f8:	0800328b 	.word	0x0800328b
 80031fc:	0800328b 	.word	0x0800328b
 8003200:	0800328b 	.word	0x0800328b
 8003204:	0800328b 	.word	0x0800328b
 8003208:	0800328b 	.word	0x0800328b
 800320c:	0800328b 	.word	0x0800328b
 8003210:	0800328b 	.word	0x0800328b
 8003214:	0800328b 	.word	0x0800328b
 8003218:	0800328b 	.word	0x0800328b
 800321c:	0800328b 	.word	0x0800328b
 8003220:	08003239 	.word	0x08003239
 8003224:	0800324d 	.word	0x0800324d
 8003228:	4a79      	ldr	r2, [pc, #484]	@ (8003410 <HAL_GPIO_Init+0x2b4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d013      	beq.n	8003256 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800322e:	e02c      	b.n	800328a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	623b      	str	r3, [r7, #32]
          break;
 8003236:	e029      	b.n	800328c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	3304      	adds	r3, #4
 800323e:	623b      	str	r3, [r7, #32]
          break;
 8003240:	e024      	b.n	800328c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	3308      	adds	r3, #8
 8003248:	623b      	str	r3, [r7, #32]
          break;
 800324a:	e01f      	b.n	800328c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	330c      	adds	r3, #12
 8003252:	623b      	str	r3, [r7, #32]
          break;
 8003254:	e01a      	b.n	800328c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d102      	bne.n	8003264 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800325e:	2304      	movs	r3, #4
 8003260:	623b      	str	r3, [r7, #32]
          break;
 8003262:	e013      	b.n	800328c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d105      	bne.n	8003278 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800326c:	2308      	movs	r3, #8
 800326e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	611a      	str	r2, [r3, #16]
          break;
 8003276:	e009      	b.n	800328c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003278:	2308      	movs	r3, #8
 800327a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69fa      	ldr	r2, [r7, #28]
 8003280:	615a      	str	r2, [r3, #20]
          break;
 8003282:	e003      	b.n	800328c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003284:	2300      	movs	r3, #0
 8003286:	623b      	str	r3, [r7, #32]
          break;
 8003288:	e000      	b.n	800328c <HAL_GPIO_Init+0x130>
          break;
 800328a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	2bff      	cmp	r3, #255	@ 0xff
 8003290:	d801      	bhi.n	8003296 <HAL_GPIO_Init+0x13a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	e001      	b.n	800329a <HAL_GPIO_Init+0x13e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3304      	adds	r3, #4
 800329a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	2bff      	cmp	r3, #255	@ 0xff
 80032a0:	d802      	bhi.n	80032a8 <HAL_GPIO_Init+0x14c>
 80032a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	e002      	b.n	80032ae <HAL_GPIO_Init+0x152>
 80032a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032aa:	3b08      	subs	r3, #8
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	210f      	movs	r1, #15
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	fa01 f303 	lsl.w	r3, r1, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	401a      	ands	r2, r3
 80032c0:	6a39      	ldr	r1, [r7, #32]
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	fa01 f303 	lsl.w	r3, r1, r3
 80032c8:	431a      	orrs	r2, r3
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 80b1 	beq.w	800343e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032dc:	4b4d      	ldr	r3, [pc, #308]	@ (8003414 <HAL_GPIO_Init+0x2b8>)
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	4a4c      	ldr	r2, [pc, #304]	@ (8003414 <HAL_GPIO_Init+0x2b8>)
 80032e2:	f043 0301 	orr.w	r3, r3, #1
 80032e6:	6193      	str	r3, [r2, #24]
 80032e8:	4b4a      	ldr	r3, [pc, #296]	@ (8003414 <HAL_GPIO_Init+0x2b8>)
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80032f4:	4a48      	ldr	r2, [pc, #288]	@ (8003418 <HAL_GPIO_Init+0x2bc>)
 80032f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f8:	089b      	lsrs	r3, r3, #2
 80032fa:	3302      	adds	r3, #2
 80032fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003300:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	220f      	movs	r2, #15
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	4013      	ands	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a40      	ldr	r2, [pc, #256]	@ (800341c <HAL_GPIO_Init+0x2c0>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d013      	beq.n	8003348 <HAL_GPIO_Init+0x1ec>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a3f      	ldr	r2, [pc, #252]	@ (8003420 <HAL_GPIO_Init+0x2c4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00d      	beq.n	8003344 <HAL_GPIO_Init+0x1e8>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a3e      	ldr	r2, [pc, #248]	@ (8003424 <HAL_GPIO_Init+0x2c8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d007      	beq.n	8003340 <HAL_GPIO_Init+0x1e4>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a3d      	ldr	r2, [pc, #244]	@ (8003428 <HAL_GPIO_Init+0x2cc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d101      	bne.n	800333c <HAL_GPIO_Init+0x1e0>
 8003338:	2303      	movs	r3, #3
 800333a:	e006      	b.n	800334a <HAL_GPIO_Init+0x1ee>
 800333c:	2304      	movs	r3, #4
 800333e:	e004      	b.n	800334a <HAL_GPIO_Init+0x1ee>
 8003340:	2302      	movs	r3, #2
 8003342:	e002      	b.n	800334a <HAL_GPIO_Init+0x1ee>
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <HAL_GPIO_Init+0x1ee>
 8003348:	2300      	movs	r3, #0
 800334a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800334c:	f002 0203 	and.w	r2, r2, #3
 8003350:	0092      	lsls	r2, r2, #2
 8003352:	4093      	lsls	r3, r2
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800335a:	492f      	ldr	r1, [pc, #188]	@ (8003418 <HAL_GPIO_Init+0x2bc>)
 800335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335e:	089b      	lsrs	r3, r3, #2
 8003360:	3302      	adds	r3, #2
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d006      	beq.n	8003382 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003374:	4b2d      	ldr	r3, [pc, #180]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	492c      	ldr	r1, [pc, #176]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	4313      	orrs	r3, r2
 800337e:	608b      	str	r3, [r1, #8]
 8003380:	e006      	b.n	8003390 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003382:	4b2a      	ldr	r3, [pc, #168]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	43db      	mvns	r3, r3
 800338a:	4928      	ldr	r1, [pc, #160]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 800338c:	4013      	ands	r3, r2
 800338e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d006      	beq.n	80033aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800339c:	4b23      	ldr	r3, [pc, #140]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	4922      	ldr	r1, [pc, #136]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60cb      	str	r3, [r1, #12]
 80033a8:	e006      	b.n	80033b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033aa:	4b20      	ldr	r3, [pc, #128]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	43db      	mvns	r3, r3
 80033b2:	491e      	ldr	r1, [pc, #120]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d006      	beq.n	80033d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033c4:	4b19      	ldr	r3, [pc, #100]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	4918      	ldr	r1, [pc, #96]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	604b      	str	r3, [r1, #4]
 80033d0:	e006      	b.n	80033e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80033d2:	4b16      	ldr	r3, [pc, #88]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	43db      	mvns	r3, r3
 80033da:	4914      	ldr	r1, [pc, #80]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 80033dc:	4013      	ands	r3, r2
 80033de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d021      	beq.n	8003430 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80033ec:	4b0f      	ldr	r3, [pc, #60]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	490e      	ldr	r1, [pc, #56]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	600b      	str	r3, [r1, #0]
 80033f8:	e021      	b.n	800343e <HAL_GPIO_Init+0x2e2>
 80033fa:	bf00      	nop
 80033fc:	10320000 	.word	0x10320000
 8003400:	10310000 	.word	0x10310000
 8003404:	10220000 	.word	0x10220000
 8003408:	10210000 	.word	0x10210000
 800340c:	10120000 	.word	0x10120000
 8003410:	10110000 	.word	0x10110000
 8003414:	40021000 	.word	0x40021000
 8003418:	40010000 	.word	0x40010000
 800341c:	40010800 	.word	0x40010800
 8003420:	40010c00 	.word	0x40010c00
 8003424:	40011000 	.word	0x40011000
 8003428:	40011400 	.word	0x40011400
 800342c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003430:	4b0b      	ldr	r3, [pc, #44]	@ (8003460 <HAL_GPIO_Init+0x304>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	43db      	mvns	r3, r3
 8003438:	4909      	ldr	r1, [pc, #36]	@ (8003460 <HAL_GPIO_Init+0x304>)
 800343a:	4013      	ands	r3, r2
 800343c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800343e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003440:	3301      	adds	r3, #1
 8003442:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344a:	fa22 f303 	lsr.w	r3, r2, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	f47f ae8e 	bne.w	8003170 <HAL_GPIO_Init+0x14>
  }
}
 8003454:	bf00      	nop
 8003456:	bf00      	nop
 8003458:	372c      	adds	r7, #44	@ 0x2c
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr
 8003460:	40010400 	.word	0x40010400

08003464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	807b      	strh	r3, [r7, #2]
 8003470:	4613      	mov	r3, r2
 8003472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003474:	787b      	ldrb	r3, [r7, #1]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800347a:	887a      	ldrh	r2, [r7, #2]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003480:	e003      	b.n	800348a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003482:	887b      	ldrh	r3, [r7, #2]
 8003484:	041a      	lsls	r2, r3, #16
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	611a      	str	r2, [r3, #16]
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr

08003494 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034a6:	887a      	ldrh	r2, [r7, #2]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4013      	ands	r3, r2
 80034ac:	041a      	lsls	r2, r3, #16
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	43d9      	mvns	r1, r3
 80034b2:	887b      	ldrh	r3, [r7, #2]
 80034b4:	400b      	ands	r3, r1
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	611a      	str	r2, [r3, #16]
}
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bc80      	pop	{r7}
 80034c4:	4770      	bx	lr
	...

080034c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034d2:	4b08      	ldr	r3, [pc, #32]	@ (80034f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034d4:	695a      	ldr	r2, [r3, #20]
 80034d6:	88fb      	ldrh	r3, [r7, #6]
 80034d8:	4013      	ands	r3, r2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d006      	beq.n	80034ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034de:	4a05      	ldr	r2, [pc, #20]	@ (80034f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034e0:	88fb      	ldrh	r3, [r7, #6]
 80034e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fe fe7a 	bl	80021e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80034ec:	bf00      	nop
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40010400 	.word	0x40010400

080034f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e12b      	b.n	8003762 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff fa52 	bl	80029c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2224      	movs	r2, #36	@ 0x24
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0201 	bic.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800354a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800355a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800355c:	f001 fbfc 	bl	8004d58 <HAL_RCC_GetPCLK1Freq>
 8003560:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	4a81      	ldr	r2, [pc, #516]	@ (800376c <HAL_I2C_Init+0x274>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d807      	bhi.n	800357c <HAL_I2C_Init+0x84>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4a80      	ldr	r2, [pc, #512]	@ (8003770 <HAL_I2C_Init+0x278>)
 8003570:	4293      	cmp	r3, r2
 8003572:	bf94      	ite	ls
 8003574:	2301      	movls	r3, #1
 8003576:	2300      	movhi	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	e006      	b.n	800358a <HAL_I2C_Init+0x92>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4a7d      	ldr	r2, [pc, #500]	@ (8003774 <HAL_I2C_Init+0x27c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	bf94      	ite	ls
 8003584:	2301      	movls	r3, #1
 8003586:	2300      	movhi	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e0e7      	b.n	8003762 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4a78      	ldr	r2, [pc, #480]	@ (8003778 <HAL_I2C_Init+0x280>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	0c9b      	lsrs	r3, r3, #18
 800359c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	4a6a      	ldr	r2, [pc, #424]	@ (800376c <HAL_I2C_Init+0x274>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d802      	bhi.n	80035cc <HAL_I2C_Init+0xd4>
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	3301      	adds	r3, #1
 80035ca:	e009      	b.n	80035e0 <HAL_I2C_Init+0xe8>
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80035d2:	fb02 f303 	mul.w	r3, r2, r3
 80035d6:	4a69      	ldr	r2, [pc, #420]	@ (800377c <HAL_I2C_Init+0x284>)
 80035d8:	fba2 2303 	umull	r2, r3, r2, r3
 80035dc:	099b      	lsrs	r3, r3, #6
 80035de:	3301      	adds	r3, #1
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6812      	ldr	r2, [r2, #0]
 80035e4:	430b      	orrs	r3, r1
 80035e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80035f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	495c      	ldr	r1, [pc, #368]	@ (800376c <HAL_I2C_Init+0x274>)
 80035fc:	428b      	cmp	r3, r1
 80035fe:	d819      	bhi.n	8003634 <HAL_I2C_Init+0x13c>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	1e59      	subs	r1, r3, #1
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	fbb1 f3f3 	udiv	r3, r1, r3
 800360e:	1c59      	adds	r1, r3, #1
 8003610:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003614:	400b      	ands	r3, r1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <HAL_I2C_Init+0x138>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	1e59      	subs	r1, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	fbb1 f3f3 	udiv	r3, r1, r3
 8003628:	3301      	adds	r3, #1
 800362a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800362e:	e051      	b.n	80036d4 <HAL_I2C_Init+0x1dc>
 8003630:	2304      	movs	r3, #4
 8003632:	e04f      	b.n	80036d4 <HAL_I2C_Init+0x1dc>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d111      	bne.n	8003660 <HAL_I2C_Init+0x168>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	1e58      	subs	r0, r3, #1
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6859      	ldr	r1, [r3, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	440b      	add	r3, r1
 800364a:	fbb0 f3f3 	udiv	r3, r0, r3
 800364e:	3301      	adds	r3, #1
 8003650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003654:	2b00      	cmp	r3, #0
 8003656:	bf0c      	ite	eq
 8003658:	2301      	moveq	r3, #1
 800365a:	2300      	movne	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	e012      	b.n	8003686 <HAL_I2C_Init+0x18e>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	1e58      	subs	r0, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6859      	ldr	r1, [r3, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	0099      	lsls	r1, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	fbb0 f3f3 	udiv	r3, r0, r3
 8003676:	3301      	adds	r3, #1
 8003678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800367c:	2b00      	cmp	r3, #0
 800367e:	bf0c      	ite	eq
 8003680:	2301      	moveq	r3, #1
 8003682:	2300      	movne	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <HAL_I2C_Init+0x196>
 800368a:	2301      	movs	r3, #1
 800368c:	e022      	b.n	80036d4 <HAL_I2C_Init+0x1dc>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10e      	bne.n	80036b4 <HAL_I2C_Init+0x1bc>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	1e58      	subs	r0, r3, #1
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6859      	ldr	r1, [r3, #4]
 800369e:	460b      	mov	r3, r1
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	440b      	add	r3, r1
 80036a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80036a8:	3301      	adds	r3, #1
 80036aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036b2:	e00f      	b.n	80036d4 <HAL_I2C_Init+0x1dc>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	1e58      	subs	r0, r3, #1
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6859      	ldr	r1, [r3, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	0099      	lsls	r1, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ca:	3301      	adds	r3, #1
 80036cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	6809      	ldr	r1, [r1, #0]
 80036d8:	4313      	orrs	r3, r2
 80036da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69da      	ldr	r2, [r3, #28]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003702:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6911      	ldr	r1, [r2, #16]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	68d2      	ldr	r2, [r2, #12]
 800370e:	4311      	orrs	r1, r2
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	430b      	orrs	r3, r1
 8003716:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	695a      	ldr	r2, [r3, #20]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0201 	orr.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2220      	movs	r2, #32
 800374e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	000186a0 	.word	0x000186a0
 8003770:	001e847f 	.word	0x001e847f
 8003774:	003d08ff 	.word	0x003d08ff
 8003778:	431bde83 	.word	0x431bde83
 800377c:	10624dd3 	.word	0x10624dd3

08003780 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af02      	add	r7, sp, #8
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	4608      	mov	r0, r1
 800378a:	4611      	mov	r1, r2
 800378c:	461a      	mov	r2, r3
 800378e:	4603      	mov	r3, r0
 8003790:	817b      	strh	r3, [r7, #10]
 8003792:	460b      	mov	r3, r1
 8003794:	813b      	strh	r3, [r7, #8]
 8003796:	4613      	mov	r3, r2
 8003798:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800379a:	f7ff fba3 	bl	8002ee4 <HAL_GetTick>
 800379e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b20      	cmp	r3, #32
 80037aa:	f040 80d9 	bne.w	8003960 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	2319      	movs	r3, #25
 80037b4:	2201      	movs	r2, #1
 80037b6:	496d      	ldr	r1, [pc, #436]	@ (800396c <HAL_I2C_Mem_Write+0x1ec>)
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 fcc1 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80037c4:	2302      	movs	r3, #2
 80037c6:	e0cc      	b.n	8003962 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_I2C_Mem_Write+0x56>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e0c5      	b.n	8003962 <HAL_I2C_Mem_Write+0x1e2>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d007      	beq.n	80037fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0201 	orr.w	r2, r2, #1
 80037fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800380a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2221      	movs	r2, #33	@ 0x21
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2240      	movs	r2, #64	@ 0x40
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a3a      	ldr	r2, [r7, #32]
 8003826:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800382c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4a4d      	ldr	r2, [pc, #308]	@ (8003970 <HAL_I2C_Mem_Write+0x1f0>)
 800383c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800383e:	88f8      	ldrh	r0, [r7, #6]
 8003840:	893a      	ldrh	r2, [r7, #8]
 8003842:	8979      	ldrh	r1, [r7, #10]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	9301      	str	r3, [sp, #4]
 8003848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	4603      	mov	r3, r0
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 faf8 	bl	8003e44 <I2C_RequestMemoryWrite>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d052      	beq.n	8003900 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e081      	b.n	8003962 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 fd86 	bl	8004374 <I2C_WaitOnTXEFlagUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00d      	beq.n	800388a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003872:	2b04      	cmp	r3, #4
 8003874:	d107      	bne.n	8003886 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003884:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e06b      	b.n	8003962 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388e:	781a      	ldrb	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d11b      	bne.n	8003900 <HAL_I2C_Mem_Write+0x180>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d017      	beq.n	8003900 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d4:	781a      	ldrb	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1aa      	bne.n	800385e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 fd79 	bl	8004404 <I2C_WaitOnBTFFlagUntilTimeout>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00d      	beq.n	8003934 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391c:	2b04      	cmp	r3, #4
 800391e:	d107      	bne.n	8003930 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800392e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e016      	b.n	8003962 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003942:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800395c:	2300      	movs	r3, #0
 800395e:	e000      	b.n	8003962 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003960:	2302      	movs	r3, #2
  }
}
 8003962:	4618      	mov	r0, r3
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	00100002 	.word	0x00100002
 8003970:	ffff0000 	.word	0xffff0000

08003974 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08c      	sub	sp, #48	@ 0x30
 8003978:	af02      	add	r7, sp, #8
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	4608      	mov	r0, r1
 800397e:	4611      	mov	r1, r2
 8003980:	461a      	mov	r2, r3
 8003982:	4603      	mov	r3, r0
 8003984:	817b      	strh	r3, [r7, #10]
 8003986:	460b      	mov	r3, r1
 8003988:	813b      	strh	r3, [r7, #8]
 800398a:	4613      	mov	r3, r2
 800398c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003992:	f7ff faa7 	bl	8002ee4 <HAL_GetTick>
 8003996:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b20      	cmp	r3, #32
 80039a2:	f040 8244 	bne.w	8003e2e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	2319      	movs	r3, #25
 80039ac:	2201      	movs	r2, #1
 80039ae:	4982      	ldr	r1, [pc, #520]	@ (8003bb8 <HAL_I2C_Mem_Read+0x244>)
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 fbc5 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80039bc:	2302      	movs	r3, #2
 80039be:	e237      	b.n	8003e30 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d101      	bne.n	80039ce <HAL_I2C_Mem_Read+0x5a>
 80039ca:	2302      	movs	r3, #2
 80039cc:	e230      	b.n	8003e30 <HAL_I2C_Mem_Read+0x4bc>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d007      	beq.n	80039f4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0201 	orr.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2222      	movs	r2, #34	@ 0x22
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2240      	movs	r2, #64	@ 0x40
 8003a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003a24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4a62      	ldr	r2, [pc, #392]	@ (8003bbc <HAL_I2C_Mem_Read+0x248>)
 8003a34:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a36:	88f8      	ldrh	r0, [r7, #6]
 8003a38:	893a      	ldrh	r2, [r7, #8]
 8003a3a:	8979      	ldrh	r1, [r7, #10]
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3e:	9301      	str	r3, [sp, #4]
 8003a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	4603      	mov	r3, r0
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 fa92 	bl	8003f70 <I2C_RequestMemoryRead>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e1ec      	b.n	8003e30 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d113      	bne.n	8003a86 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61fb      	str	r3, [r7, #28]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	61fb      	str	r3, [r7, #28]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	61fb      	str	r3, [r7, #28]
 8003a72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	e1c0      	b.n	8003e08 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d11e      	bne.n	8003acc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a9e:	b672      	cpsid	i
}
 8003aa0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61bb      	str	r3, [r7, #24]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	61bb      	str	r3, [r7, #24]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	61bb      	str	r3, [r7, #24]
 8003ab6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ac6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ac8:	b662      	cpsie	i
}
 8003aca:	e035      	b.n	8003b38 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d11e      	bne.n	8003b12 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ae2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ae4:	b672      	cpsid	i
}
 8003ae6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b0e:	b662      	cpsie	i
}
 8003b10:	e012      	b.n	8003b38 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b20:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b22:	2300      	movs	r3, #0
 8003b24:	613b      	str	r3, [r7, #16]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	613b      	str	r3, [r7, #16]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003b38:	e166      	b.n	8003e08 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	f200 811f 	bhi.w	8003d82 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d123      	bne.n	8003b94 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b4e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 fc9f 	bl	8004494 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e167      	b.n	8003e30 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b92:	e139      	b.n	8003e08 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d152      	bne.n	8003c42 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	4906      	ldr	r1, [pc, #24]	@ (8003bc0 <HAL_I2C_Mem_Read+0x24c>)
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 faca 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d008      	beq.n	8003bc4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e13c      	b.n	8003e30 <HAL_I2C_Mem_Read+0x4bc>
 8003bb6:	bf00      	nop
 8003bb8:	00100002 	.word	0x00100002
 8003bbc:	ffff0000 	.word	0xffff0000
 8003bc0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003bc4:	b672      	cpsid	i
}
 8003bc6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691a      	ldr	r2, [r3, #16]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c0a:	b662      	cpsie	i
}
 8003c0c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c40:	e0e2      	b.n	8003e08 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c48:	2200      	movs	r2, #0
 8003c4a:	497b      	ldr	r1, [pc, #492]	@ (8003e38 <HAL_I2C_Mem_Read+0x4c4>)
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 fa77 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e0e9      	b.n	8003e30 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c6c:	b672      	cpsid	i
}
 8003c6e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691a      	ldr	r2, [r3, #16]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ca2:	4b66      	ldr	r3, [pc, #408]	@ (8003e3c <HAL_I2C_Mem_Read+0x4c8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	08db      	lsrs	r3, r3, #3
 8003ca8:	4a65      	ldr	r2, [pc, #404]	@ (8003e40 <HAL_I2C_Mem_Read+0x4cc>)
 8003caa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cae:	0a1a      	lsrs	r2, r3, #8
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	00da      	lsls	r2, r3, #3
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d118      	bne.n	8003cfa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce2:	f043 0220 	orr.w	r2, r3, #32
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003cea:	b662      	cpsie	i
}
 8003cec:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e09a      	b.n	8003e30 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d1d9      	bne.n	8003cbc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003d4a:	b662      	cpsie	i
}
 8003d4c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d80:	e042      	b.n	8003e08 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d84:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 fb84 	bl	8004494 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e04c      	b.n	8003e30 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	691a      	ldr	r2, [r3, #16]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da0:	b2d2      	uxtb	r2, r2
 8003da2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d118      	bne.n	8003e08 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f47f ae94 	bne.w	8003b3a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	e000      	b.n	8003e30 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003e2e:	2302      	movs	r3, #2
  }
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3728      	adds	r7, #40	@ 0x28
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	00010004 	.word	0x00010004
 8003e3c:	20000008 	.word	0x20000008
 8003e40:	14f8b589 	.word	0x14f8b589

08003e44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	4608      	mov	r0, r1
 8003e4e:	4611      	mov	r1, r2
 8003e50:	461a      	mov	r2, r3
 8003e52:	4603      	mov	r3, r0
 8003e54:	817b      	strh	r3, [r7, #10]
 8003e56:	460b      	mov	r3, r1
 8003e58:	813b      	strh	r3, [r7, #8]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f960 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00d      	beq.n	8003ea2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e94:	d103      	bne.n	8003e9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e05f      	b.n	8003f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ea2:	897b      	ldrh	r3, [r7, #10]
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003eb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	6a3a      	ldr	r2, [r7, #32]
 8003eb6:	492d      	ldr	r1, [pc, #180]	@ (8003f6c <I2C_RequestMemoryWrite+0x128>)
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f9bb 	bl	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e04c      	b.n	8003f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ee0:	6a39      	ldr	r1, [r7, #32]
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 fa46 	bl	8004374 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00d      	beq.n	8003f0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d107      	bne.n	8003f06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e02b      	b.n	8003f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f0a:	88fb      	ldrh	r3, [r7, #6]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d105      	bne.n	8003f1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f10:	893b      	ldrh	r3, [r7, #8]
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	611a      	str	r2, [r3, #16]
 8003f1a:	e021      	b.n	8003f60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f1c:	893b      	ldrh	r3, [r7, #8]
 8003f1e:	0a1b      	lsrs	r3, r3, #8
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f2c:	6a39      	ldr	r1, [r7, #32]
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 fa20 	bl	8004374 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00d      	beq.n	8003f56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d107      	bne.n	8003f52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e005      	b.n	8003f62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f56:	893b      	ldrh	r3, [r7, #8]
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	00010002 	.word	0x00010002

08003f70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	4608      	mov	r0, r1
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4603      	mov	r3, r0
 8003f80:	817b      	strh	r3, [r7, #10]
 8003f82:	460b      	mov	r3, r1
 8003f84:	813b      	strh	r3, [r7, #8]
 8003f86:	4613      	mov	r3, r2
 8003f88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fa8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 f8c2 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00d      	beq.n	8003fde <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fd0:	d103      	bne.n	8003fda <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fd8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e0aa      	b.n	8004134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fde:	897b      	ldrh	r3, [r7, #10]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff0:	6a3a      	ldr	r2, [r7, #32]
 8003ff2:	4952      	ldr	r1, [pc, #328]	@ (800413c <I2C_RequestMemoryRead+0x1cc>)
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 f91d 	bl	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e097      	b.n	8004134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800401a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800401c:	6a39      	ldr	r1, [r7, #32]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 f9a8 	bl	8004374 <I2C_WaitOnTXEFlagUntilTimeout>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00d      	beq.n	8004046 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402e:	2b04      	cmp	r3, #4
 8004030:	d107      	bne.n	8004042 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004040:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e076      	b.n	8004134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004046:	88fb      	ldrh	r3, [r7, #6]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d105      	bne.n	8004058 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800404c:	893b      	ldrh	r3, [r7, #8]
 800404e:	b2da      	uxtb	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	611a      	str	r2, [r3, #16]
 8004056:	e021      	b.n	800409c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004058:	893b      	ldrh	r3, [r7, #8]
 800405a:	0a1b      	lsrs	r3, r3, #8
 800405c:	b29b      	uxth	r3, r3
 800405e:	b2da      	uxtb	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004068:	6a39      	ldr	r1, [r7, #32]
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 f982 	bl	8004374 <I2C_WaitOnTXEFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00d      	beq.n	8004092 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407a:	2b04      	cmp	r3, #4
 800407c:	d107      	bne.n	800408e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800408c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e050      	b.n	8004134 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004092:	893b      	ldrh	r3, [r7, #8]
 8004094:	b2da      	uxtb	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800409c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800409e:	6a39      	ldr	r1, [r7, #32]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 f967 	bl	8004374 <I2C_WaitOnTXEFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00d      	beq.n	80040c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d107      	bne.n	80040c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e035      	b.n	8004134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	2200      	movs	r2, #0
 80040e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 f82b 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00d      	beq.n	800410c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040fe:	d103      	bne.n	8004108 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004106:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e013      	b.n	8004134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800410c:	897b      	ldrh	r3, [r7, #10]
 800410e:	b2db      	uxtb	r3, r3
 8004110:	f043 0301 	orr.w	r3, r3, #1
 8004114:	b2da      	uxtb	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800411c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411e:	6a3a      	ldr	r2, [r7, #32]
 8004120:	4906      	ldr	r1, [pc, #24]	@ (800413c <I2C_RequestMemoryRead+0x1cc>)
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 f886 	bl	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	00010002 	.word	0x00010002

08004140 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	4613      	mov	r3, r2
 800414e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004150:	e048      	b.n	80041e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004158:	d044      	beq.n	80041e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800415a:	f7fe fec3 	bl	8002ee4 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d302      	bcc.n	8004170 <I2C_WaitOnFlagUntilTimeout+0x30>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d139      	bne.n	80041e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	0c1b      	lsrs	r3, r3, #16
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b01      	cmp	r3, #1
 8004178:	d10d      	bne.n	8004196 <I2C_WaitOnFlagUntilTimeout+0x56>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	43da      	mvns	r2, r3
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	4013      	ands	r3, r2
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	bf0c      	ite	eq
 800418c:	2301      	moveq	r3, #1
 800418e:	2300      	movne	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	e00c      	b.n	80041b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	43da      	mvns	r2, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	4013      	ands	r3, r2
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	bf0c      	ite	eq
 80041a8:	2301      	moveq	r3, #1
 80041aa:	2300      	movne	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	461a      	mov	r2, r3
 80041b0:	79fb      	ldrb	r3, [r7, #7]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d116      	bne.n	80041e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d0:	f043 0220 	orr.w	r2, r3, #32
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e023      	b.n	800422c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	0c1b      	lsrs	r3, r3, #16
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d10d      	bne.n	800420a <I2C_WaitOnFlagUntilTimeout+0xca>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	43da      	mvns	r2, r3
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	4013      	ands	r3, r2
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bf0c      	ite	eq
 8004200:	2301      	moveq	r3, #1
 8004202:	2300      	movne	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	461a      	mov	r2, r3
 8004208:	e00c      	b.n	8004224 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	43da      	mvns	r2, r3
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	4013      	ands	r3, r2
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	bf0c      	ite	eq
 800421c:	2301      	moveq	r3, #1
 800421e:	2300      	movne	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	461a      	mov	r2, r3
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	429a      	cmp	r2, r3
 8004228:	d093      	beq.n	8004152 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004242:	e071      	b.n	8004328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800424e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004252:	d123      	bne.n	800429c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004262:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800426c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004288:	f043 0204 	orr.w	r2, r3, #4
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e067      	b.n	800436c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a2:	d041      	beq.n	8004328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a4:	f7fe fe1e 	bl	8002ee4 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d302      	bcc.n	80042ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d136      	bne.n	8004328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	0c1b      	lsrs	r3, r3, #16
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d10c      	bne.n	80042de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	43da      	mvns	r2, r3
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4013      	ands	r3, r2
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	bf14      	ite	ne
 80042d6:	2301      	movne	r3, #1
 80042d8:	2300      	moveq	r3, #0
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	e00b      	b.n	80042f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	43da      	mvns	r2, r3
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	4013      	ands	r3, r2
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	bf14      	ite	ne
 80042f0:	2301      	movne	r3, #1
 80042f2:	2300      	moveq	r3, #0
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d016      	beq.n	8004328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004314:	f043 0220 	orr.w	r2, r3, #32
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e021      	b.n	800436c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	0c1b      	lsrs	r3, r3, #16
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b01      	cmp	r3, #1
 8004330:	d10c      	bne.n	800434c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	43da      	mvns	r2, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	4013      	ands	r3, r2
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	bf14      	ite	ne
 8004344:	2301      	movne	r3, #1
 8004346:	2300      	moveq	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	e00b      	b.n	8004364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	43da      	mvns	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4013      	ands	r3, r2
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	bf14      	ite	ne
 800435e:	2301      	movne	r3, #1
 8004360:	2300      	moveq	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	f47f af6d 	bne.w	8004244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004380:	e034      	b.n	80043ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f8e3 	bl	800454e <I2C_IsAcknowledgeFailed>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e034      	b.n	80043fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004398:	d028      	beq.n	80043ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800439a:	f7fe fda3 	bl	8002ee4 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d302      	bcc.n	80043b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d11d      	bne.n	80043ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ba:	2b80      	cmp	r3, #128	@ 0x80
 80043bc:	d016      	beq.n	80043ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d8:	f043 0220 	orr.w	r2, r3, #32
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e007      	b.n	80043fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043f6:	2b80      	cmp	r3, #128	@ 0x80
 80043f8:	d1c3      	bne.n	8004382 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004410:	e034      	b.n	800447c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f89b 	bl	800454e <I2C_IsAcknowledgeFailed>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e034      	b.n	800448c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004428:	d028      	beq.n	800447c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442a:	f7fe fd5b 	bl	8002ee4 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	429a      	cmp	r2, r3
 8004438:	d302      	bcc.n	8004440 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d11d      	bne.n	800447c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b04      	cmp	r3, #4
 800444c:	d016      	beq.n	800447c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004468:	f043 0220 	orr.w	r2, r3, #32
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e007      	b.n	800448c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	2b04      	cmp	r3, #4
 8004488:	d1c3      	bne.n	8004412 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044a0:	e049      	b.n	8004536 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	f003 0310 	and.w	r3, r3, #16
 80044ac:	2b10      	cmp	r3, #16
 80044ae:	d119      	bne.n	80044e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f06f 0210 	mvn.w	r2, #16
 80044b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e030      	b.n	8004546 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e4:	f7fe fcfe 	bl	8002ee4 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d302      	bcc.n	80044fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d11d      	bne.n	8004536 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004504:	2b40      	cmp	r3, #64	@ 0x40
 8004506:	d016      	beq.n	8004536 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2220      	movs	r2, #32
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004522:	f043 0220 	orr.w	r2, r3, #32
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e007      	b.n	8004546 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004540:	2b40      	cmp	r3, #64	@ 0x40
 8004542:	d1ae      	bne.n	80044a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004560:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004564:	d11b      	bne.n	800459e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800456e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2220      	movs	r2, #32
 800457a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458a:	f043 0204 	orr.w	r2, r3, #4
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	4770      	bx	lr
	...

080045ac <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80045b0:	4b03      	ldr	r3, [pc, #12]	@ (80045c0 <HAL_PWR_EnableBkUpAccess+0x14>)
 80045b2:	2201      	movs	r2, #1
 80045b4:	601a      	str	r2, [r3, #0]
}
 80045b6:	bf00      	nop
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	420e0020 	.word	0x420e0020

080045c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e272      	b.n	8004abc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 8087 	beq.w	80046f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045e4:	4b92      	ldr	r3, [pc, #584]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f003 030c 	and.w	r3, r3, #12
 80045ec:	2b04      	cmp	r3, #4
 80045ee:	d00c      	beq.n	800460a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045f0:	4b8f      	ldr	r3, [pc, #572]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f003 030c 	and.w	r3, r3, #12
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d112      	bne.n	8004622 <HAL_RCC_OscConfig+0x5e>
 80045fc:	4b8c      	ldr	r3, [pc, #560]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004608:	d10b      	bne.n	8004622 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800460a:	4b89      	ldr	r3, [pc, #548]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d06c      	beq.n	80046f0 <HAL_RCC_OscConfig+0x12c>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d168      	bne.n	80046f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e24c      	b.n	8004abc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800462a:	d106      	bne.n	800463a <HAL_RCC_OscConfig+0x76>
 800462c:	4b80      	ldr	r3, [pc, #512]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a7f      	ldr	r2, [pc, #508]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 8004632:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004636:	6013      	str	r3, [r2, #0]
 8004638:	e02e      	b.n	8004698 <HAL_RCC_OscConfig+0xd4>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10c      	bne.n	800465c <HAL_RCC_OscConfig+0x98>
 8004642:	4b7b      	ldr	r3, [pc, #492]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a7a      	ldr	r2, [pc, #488]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 8004648:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800464c:	6013      	str	r3, [r2, #0]
 800464e:	4b78      	ldr	r3, [pc, #480]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a77      	ldr	r2, [pc, #476]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 8004654:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	e01d      	b.n	8004698 <HAL_RCC_OscConfig+0xd4>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004664:	d10c      	bne.n	8004680 <HAL_RCC_OscConfig+0xbc>
 8004666:	4b72      	ldr	r3, [pc, #456]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a71      	ldr	r2, [pc, #452]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 800466c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004670:	6013      	str	r3, [r2, #0]
 8004672:	4b6f      	ldr	r3, [pc, #444]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a6e      	ldr	r2, [pc, #440]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 8004678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800467c:	6013      	str	r3, [r2, #0]
 800467e:	e00b      	b.n	8004698 <HAL_RCC_OscConfig+0xd4>
 8004680:	4b6b      	ldr	r3, [pc, #428]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a6a      	ldr	r2, [pc, #424]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 8004686:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800468a:	6013      	str	r3, [r2, #0]
 800468c:	4b68      	ldr	r3, [pc, #416]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a67      	ldr	r2, [pc, #412]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 8004692:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004696:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d013      	beq.n	80046c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a0:	f7fe fc20 	bl	8002ee4 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046a8:	f7fe fc1c 	bl	8002ee4 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b64      	cmp	r3, #100	@ 0x64
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e200      	b.n	8004abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ba:	4b5d      	ldr	r3, [pc, #372]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0f0      	beq.n	80046a8 <HAL_RCC_OscConfig+0xe4>
 80046c6:	e014      	b.n	80046f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c8:	f7fe fc0c 	bl	8002ee4 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046d0:	f7fe fc08 	bl	8002ee4 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b64      	cmp	r3, #100	@ 0x64
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e1ec      	b.n	8004abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046e2:	4b53      	ldr	r3, [pc, #332]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1f0      	bne.n	80046d0 <HAL_RCC_OscConfig+0x10c>
 80046ee:	e000      	b.n	80046f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d063      	beq.n	80047c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046fe:	4b4c      	ldr	r3, [pc, #304]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f003 030c 	and.w	r3, r3, #12
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00b      	beq.n	8004722 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800470a:	4b49      	ldr	r3, [pc, #292]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f003 030c 	and.w	r3, r3, #12
 8004712:	2b08      	cmp	r3, #8
 8004714:	d11c      	bne.n	8004750 <HAL_RCC_OscConfig+0x18c>
 8004716:	4b46      	ldr	r3, [pc, #280]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d116      	bne.n	8004750 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004722:	4b43      	ldr	r3, [pc, #268]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d005      	beq.n	800473a <HAL_RCC_OscConfig+0x176>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d001      	beq.n	800473a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e1c0      	b.n	8004abc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800473a:	4b3d      	ldr	r3, [pc, #244]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	4939      	ldr	r1, [pc, #228]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 800474a:	4313      	orrs	r3, r2
 800474c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800474e:	e03a      	b.n	80047c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d020      	beq.n	800479a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004758:	4b36      	ldr	r3, [pc, #216]	@ (8004834 <HAL_RCC_OscConfig+0x270>)
 800475a:	2201      	movs	r2, #1
 800475c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475e:	f7fe fbc1 	bl	8002ee4 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004766:	f7fe fbbd 	bl	8002ee4 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e1a1      	b.n	8004abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004778:	4b2d      	ldr	r3, [pc, #180]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0f0      	beq.n	8004766 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004784:	4b2a      	ldr	r3, [pc, #168]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	4927      	ldr	r1, [pc, #156]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 8004794:	4313      	orrs	r3, r2
 8004796:	600b      	str	r3, [r1, #0]
 8004798:	e015      	b.n	80047c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800479a:	4b26      	ldr	r3, [pc, #152]	@ (8004834 <HAL_RCC_OscConfig+0x270>)
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a0:	f7fe fba0 	bl	8002ee4 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047a8:	f7fe fb9c 	bl	8002ee4 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e180      	b.n	8004abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f0      	bne.n	80047a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d03a      	beq.n	8004848 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d019      	beq.n	800480e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047da:	4b17      	ldr	r3, [pc, #92]	@ (8004838 <HAL_RCC_OscConfig+0x274>)
 80047dc:	2201      	movs	r2, #1
 80047de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047e0:	f7fe fb80 	bl	8002ee4 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047e8:	f7fe fb7c 	bl	8002ee4 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e160      	b.n	8004abc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004830 <HAL_RCC_OscConfig+0x26c>)
 80047fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0f0      	beq.n	80047e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004806:	2001      	movs	r0, #1
 8004808:	f000 face 	bl	8004da8 <RCC_Delay>
 800480c:	e01c      	b.n	8004848 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800480e:	4b0a      	ldr	r3, [pc, #40]	@ (8004838 <HAL_RCC_OscConfig+0x274>)
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004814:	f7fe fb66 	bl	8002ee4 <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800481a:	e00f      	b.n	800483c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800481c:	f7fe fb62 	bl	8002ee4 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d908      	bls.n	800483c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e146      	b.n	8004abc <HAL_RCC_OscConfig+0x4f8>
 800482e:	bf00      	nop
 8004830:	40021000 	.word	0x40021000
 8004834:	42420000 	.word	0x42420000
 8004838:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800483c:	4b92      	ldr	r3, [pc, #584]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 800483e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e9      	bne.n	800481c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 80a6 	beq.w	80049a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004856:	2300      	movs	r3, #0
 8004858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800485a:	4b8b      	ldr	r3, [pc, #556]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10d      	bne.n	8004882 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004866:	4b88      	ldr	r3, [pc, #544]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	4a87      	ldr	r2, [pc, #540]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 800486c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004870:	61d3      	str	r3, [r2, #28]
 8004872:	4b85      	ldr	r3, [pc, #532]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800487a:	60bb      	str	r3, [r7, #8]
 800487c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800487e:	2301      	movs	r3, #1
 8004880:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004882:	4b82      	ldr	r3, [pc, #520]	@ (8004a8c <HAL_RCC_OscConfig+0x4c8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800488a:	2b00      	cmp	r3, #0
 800488c:	d118      	bne.n	80048c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800488e:	4b7f      	ldr	r3, [pc, #508]	@ (8004a8c <HAL_RCC_OscConfig+0x4c8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a7e      	ldr	r2, [pc, #504]	@ (8004a8c <HAL_RCC_OscConfig+0x4c8>)
 8004894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800489a:	f7fe fb23 	bl	8002ee4 <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a0:	e008      	b.n	80048b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048a2:	f7fe fb1f 	bl	8002ee4 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b64      	cmp	r3, #100	@ 0x64
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e103      	b.n	8004abc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b4:	4b75      	ldr	r3, [pc, #468]	@ (8004a8c <HAL_RCC_OscConfig+0x4c8>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0f0      	beq.n	80048a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d106      	bne.n	80048d6 <HAL_RCC_OscConfig+0x312>
 80048c8:	4b6f      	ldr	r3, [pc, #444]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	4a6e      	ldr	r2, [pc, #440]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 80048ce:	f043 0301 	orr.w	r3, r3, #1
 80048d2:	6213      	str	r3, [r2, #32]
 80048d4:	e02d      	b.n	8004932 <HAL_RCC_OscConfig+0x36e>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10c      	bne.n	80048f8 <HAL_RCC_OscConfig+0x334>
 80048de:	4b6a      	ldr	r3, [pc, #424]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	4a69      	ldr	r2, [pc, #420]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 80048e4:	f023 0301 	bic.w	r3, r3, #1
 80048e8:	6213      	str	r3, [r2, #32]
 80048ea:	4b67      	ldr	r3, [pc, #412]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	4a66      	ldr	r2, [pc, #408]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 80048f0:	f023 0304 	bic.w	r3, r3, #4
 80048f4:	6213      	str	r3, [r2, #32]
 80048f6:	e01c      	b.n	8004932 <HAL_RCC_OscConfig+0x36e>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	2b05      	cmp	r3, #5
 80048fe:	d10c      	bne.n	800491a <HAL_RCC_OscConfig+0x356>
 8004900:	4b61      	ldr	r3, [pc, #388]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	4a60      	ldr	r2, [pc, #384]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 8004906:	f043 0304 	orr.w	r3, r3, #4
 800490a:	6213      	str	r3, [r2, #32]
 800490c:	4b5e      	ldr	r3, [pc, #376]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	4a5d      	ldr	r2, [pc, #372]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 8004912:	f043 0301 	orr.w	r3, r3, #1
 8004916:	6213      	str	r3, [r2, #32]
 8004918:	e00b      	b.n	8004932 <HAL_RCC_OscConfig+0x36e>
 800491a:	4b5b      	ldr	r3, [pc, #364]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	4a5a      	ldr	r2, [pc, #360]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 8004920:	f023 0301 	bic.w	r3, r3, #1
 8004924:	6213      	str	r3, [r2, #32]
 8004926:	4b58      	ldr	r3, [pc, #352]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	4a57      	ldr	r2, [pc, #348]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 800492c:	f023 0304 	bic.w	r3, r3, #4
 8004930:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d015      	beq.n	8004966 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800493a:	f7fe fad3 	bl	8002ee4 <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004940:	e00a      	b.n	8004958 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004942:	f7fe facf 	bl	8002ee4 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004950:	4293      	cmp	r3, r2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e0b1      	b.n	8004abc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004958:	4b4b      	ldr	r3, [pc, #300]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0ee      	beq.n	8004942 <HAL_RCC_OscConfig+0x37e>
 8004964:	e014      	b.n	8004990 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004966:	f7fe fabd 	bl	8002ee4 <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800496c:	e00a      	b.n	8004984 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800496e:	f7fe fab9 	bl	8002ee4 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800497c:	4293      	cmp	r3, r2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e09b      	b.n	8004abc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004984:	4b40      	ldr	r3, [pc, #256]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1ee      	bne.n	800496e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004990:	7dfb      	ldrb	r3, [r7, #23]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d105      	bne.n	80049a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004996:	4b3c      	ldr	r3, [pc, #240]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	4a3b      	ldr	r2, [pc, #236]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 800499c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 8087 	beq.w	8004aba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049ac:	4b36      	ldr	r3, [pc, #216]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f003 030c 	and.w	r3, r3, #12
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d061      	beq.n	8004a7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d146      	bne.n	8004a4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c0:	4b33      	ldr	r3, [pc, #204]	@ (8004a90 <HAL_RCC_OscConfig+0x4cc>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c6:	f7fe fa8d 	bl	8002ee4 <HAL_GetTick>
 80049ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ce:	f7fe fa89 	bl	8002ee4 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e06d      	b.n	8004abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049e0:	4b29      	ldr	r3, [pc, #164]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1f0      	bne.n	80049ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049f4:	d108      	bne.n	8004a08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80049f6:	4b24      	ldr	r3, [pc, #144]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	4921      	ldr	r1, [pc, #132]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a08:	4b1f      	ldr	r3, [pc, #124]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a19      	ldr	r1, [r3, #32]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a18:	430b      	orrs	r3, r1
 8004a1a:	491b      	ldr	r1, [pc, #108]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a20:	4b1b      	ldr	r3, [pc, #108]	@ (8004a90 <HAL_RCC_OscConfig+0x4cc>)
 8004a22:	2201      	movs	r2, #1
 8004a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a26:	f7fe fa5d 	bl	8002ee4 <HAL_GetTick>
 8004a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a2c:	e008      	b.n	8004a40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a2e:	f7fe fa59 	bl	8002ee4 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e03d      	b.n	8004abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a40:	4b11      	ldr	r3, [pc, #68]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0f0      	beq.n	8004a2e <HAL_RCC_OscConfig+0x46a>
 8004a4c:	e035      	b.n	8004aba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a4e:	4b10      	ldr	r3, [pc, #64]	@ (8004a90 <HAL_RCC_OscConfig+0x4cc>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a54:	f7fe fa46 	bl	8002ee4 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a5c:	f7fe fa42 	bl	8002ee4 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e026      	b.n	8004abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a6e:	4b06      	ldr	r3, [pc, #24]	@ (8004a88 <HAL_RCC_OscConfig+0x4c4>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0x498>
 8004a7a:	e01e      	b.n	8004aba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d107      	bne.n	8004a94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e019      	b.n	8004abc <HAL_RCC_OscConfig+0x4f8>
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	40007000 	.word	0x40007000
 8004a90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a94:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac4 <HAL_RCC_OscConfig+0x500>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d106      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d001      	beq.n	8004aba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e000      	b.n	8004abc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40021000 	.word	0x40021000

08004ac8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0d0      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004adc:	4b6a      	ldr	r3, [pc, #424]	@ (8004c88 <HAL_RCC_ClockConfig+0x1c0>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d910      	bls.n	8004b0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aea:	4b67      	ldr	r3, [pc, #412]	@ (8004c88 <HAL_RCC_ClockConfig+0x1c0>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f023 0207 	bic.w	r2, r3, #7
 8004af2:	4965      	ldr	r1, [pc, #404]	@ (8004c88 <HAL_RCC_ClockConfig+0x1c0>)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afa:	4b63      	ldr	r3, [pc, #396]	@ (8004c88 <HAL_RCC_ClockConfig+0x1c0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d001      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e0b8      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d020      	beq.n	8004b5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d005      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b24:	4b59      	ldr	r3, [pc, #356]	@ (8004c8c <HAL_RCC_ClockConfig+0x1c4>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	4a58      	ldr	r2, [pc, #352]	@ (8004c8c <HAL_RCC_ClockConfig+0x1c4>)
 8004b2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0308 	and.w	r3, r3, #8
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b3c:	4b53      	ldr	r3, [pc, #332]	@ (8004c8c <HAL_RCC_ClockConfig+0x1c4>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	4a52      	ldr	r2, [pc, #328]	@ (8004c8c <HAL_RCC_ClockConfig+0x1c4>)
 8004b42:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004b46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b48:	4b50      	ldr	r3, [pc, #320]	@ (8004c8c <HAL_RCC_ClockConfig+0x1c4>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	494d      	ldr	r1, [pc, #308]	@ (8004c8c <HAL_RCC_ClockConfig+0x1c4>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d040      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d107      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6e:	4b47      	ldr	r3, [pc, #284]	@ (8004c8c <HAL_RCC_ClockConfig+0x1c4>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d115      	bne.n	8004ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e07f      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d107      	bne.n	8004b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b86:	4b41      	ldr	r3, [pc, #260]	@ (8004c8c <HAL_RCC_ClockConfig+0x1c4>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d109      	bne.n	8004ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e073      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b96:	4b3d      	ldr	r3, [pc, #244]	@ (8004c8c <HAL_RCC_ClockConfig+0x1c4>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e06b      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ba6:	4b39      	ldr	r3, [pc, #228]	@ (8004c8c <HAL_RCC_ClockConfig+0x1c4>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f023 0203 	bic.w	r2, r3, #3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	4936      	ldr	r1, [pc, #216]	@ (8004c8c <HAL_RCC_ClockConfig+0x1c4>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bb8:	f7fe f994 	bl	8002ee4 <HAL_GetTick>
 8004bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bbe:	e00a      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bc0:	f7fe f990 	bl	8002ee4 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e053      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8004c8c <HAL_RCC_ClockConfig+0x1c4>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f003 020c 	and.w	r2, r3, #12
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d1eb      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004be8:	4b27      	ldr	r3, [pc, #156]	@ (8004c88 <HAL_RCC_ClockConfig+0x1c0>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d210      	bcs.n	8004c18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf6:	4b24      	ldr	r3, [pc, #144]	@ (8004c88 <HAL_RCC_ClockConfig+0x1c0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f023 0207 	bic.w	r2, r3, #7
 8004bfe:	4922      	ldr	r1, [pc, #136]	@ (8004c88 <HAL_RCC_ClockConfig+0x1c0>)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c06:	4b20      	ldr	r3, [pc, #128]	@ (8004c88 <HAL_RCC_ClockConfig+0x1c0>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d001      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e032      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d008      	beq.n	8004c36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c24:	4b19      	ldr	r3, [pc, #100]	@ (8004c8c <HAL_RCC_ClockConfig+0x1c4>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	4916      	ldr	r1, [pc, #88]	@ (8004c8c <HAL_RCC_ClockConfig+0x1c4>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0308 	and.w	r3, r3, #8
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d009      	beq.n	8004c56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c42:	4b12      	ldr	r3, [pc, #72]	@ (8004c8c <HAL_RCC_ClockConfig+0x1c4>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	490e      	ldr	r1, [pc, #56]	@ (8004c8c <HAL_RCC_ClockConfig+0x1c4>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c56:	f000 f821 	bl	8004c9c <HAL_RCC_GetSysClockFreq>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c8c <HAL_RCC_ClockConfig+0x1c4>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	091b      	lsrs	r3, r3, #4
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	490a      	ldr	r1, [pc, #40]	@ (8004c90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c68:	5ccb      	ldrb	r3, [r1, r3]
 8004c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c6e:	4a09      	ldr	r2, [pc, #36]	@ (8004c94 <HAL_RCC_ClockConfig+0x1cc>)
 8004c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c72:	4b09      	ldr	r3, [pc, #36]	@ (8004c98 <HAL_RCC_ClockConfig+0x1d0>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fe f8f2 	bl	8002e60 <HAL_InitTick>

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40022000 	.word	0x40022000
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	0800d1b4 	.word	0x0800d1b4
 8004c94:	20000008 	.word	0x20000008
 8004c98:	2000000c 	.word	0x2000000c

08004c9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60bb      	str	r3, [r7, #8]
 8004caa:	2300      	movs	r3, #0
 8004cac:	617b      	str	r3, [r7, #20]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8004d30 <HAL_RCC_GetSysClockFreq+0x94>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f003 030c 	and.w	r3, r3, #12
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d002      	beq.n	8004ccc <HAL_RCC_GetSysClockFreq+0x30>
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d003      	beq.n	8004cd2 <HAL_RCC_GetSysClockFreq+0x36>
 8004cca:	e027      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ccc:	4b19      	ldr	r3, [pc, #100]	@ (8004d34 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cce:	613b      	str	r3, [r7, #16]
      break;
 8004cd0:	e027      	b.n	8004d22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	0c9b      	lsrs	r3, r3, #18
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	4a17      	ldr	r2, [pc, #92]	@ (8004d38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004cdc:	5cd3      	ldrb	r3, [r2, r3]
 8004cde:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d010      	beq.n	8004d0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004cea:	4b11      	ldr	r3, [pc, #68]	@ (8004d30 <HAL_RCC_GetSysClockFreq+0x94>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	0c5b      	lsrs	r3, r3, #17
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	4a11      	ldr	r2, [pc, #68]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004cf6:	5cd3      	ldrb	r3, [r2, r3]
 8004cf8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8004d34 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cfe:	fb03 f202 	mul.w	r2, r3, r2
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d08:	617b      	str	r3, [r7, #20]
 8004d0a:	e004      	b.n	8004d16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d10:	fb02 f303 	mul.w	r3, r2, r3
 8004d14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	613b      	str	r3, [r7, #16]
      break;
 8004d1a:	e002      	b.n	8004d22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d1c:	4b05      	ldr	r3, [pc, #20]	@ (8004d34 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d1e:	613b      	str	r3, [r7, #16]
      break;
 8004d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d22:	693b      	ldr	r3, [r7, #16]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	371c      	adds	r7, #28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc80      	pop	{r7}
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40021000 	.word	0x40021000
 8004d34:	007a1200 	.word	0x007a1200
 8004d38:	0800d1cc 	.word	0x0800d1cc
 8004d3c:	0800d1dc 	.word	0x0800d1dc
 8004d40:	003d0900 	.word	0x003d0900

08004d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d48:	4b02      	ldr	r3, [pc, #8]	@ (8004d54 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr
 8004d54:	20000008 	.word	0x20000008

08004d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d5c:	f7ff fff2 	bl	8004d44 <HAL_RCC_GetHCLKFreq>
 8004d60:	4602      	mov	r2, r0
 8004d62:	4b05      	ldr	r3, [pc, #20]	@ (8004d78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	0a1b      	lsrs	r3, r3, #8
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	4903      	ldr	r1, [pc, #12]	@ (8004d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d6e:	5ccb      	ldrb	r3, [r1, r3]
 8004d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	0800d1c4 	.word	0x0800d1c4

08004d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d84:	f7ff ffde 	bl	8004d44 <HAL_RCC_GetHCLKFreq>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	4b05      	ldr	r3, [pc, #20]	@ (8004da0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	0adb      	lsrs	r3, r3, #11
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	4903      	ldr	r1, [pc, #12]	@ (8004da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d96:	5ccb      	ldrb	r3, [r1, r3]
 8004d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40021000 	.word	0x40021000
 8004da4:	0800d1c4 	.word	0x0800d1c4

08004da8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004db0:	4b0a      	ldr	r3, [pc, #40]	@ (8004ddc <RCC_Delay+0x34>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a0a      	ldr	r2, [pc, #40]	@ (8004de0 <RCC_Delay+0x38>)
 8004db6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dba:	0a5b      	lsrs	r3, r3, #9
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	fb02 f303 	mul.w	r3, r2, r3
 8004dc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004dc4:	bf00      	nop
  }
  while (Delay --);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	1e5a      	subs	r2, r3, #1
 8004dca:	60fa      	str	r2, [r7, #12]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1f9      	bne.n	8004dc4 <RCC_Delay+0x1c>
}
 8004dd0:	bf00      	nop
 8004dd2:	bf00      	nop
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bc80      	pop	{r7}
 8004dda:	4770      	bx	lr
 8004ddc:	20000008 	.word	0x20000008
 8004de0:	10624dd3 	.word	0x10624dd3

08004de4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	2300      	movs	r3, #0
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d07d      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e00:	2300      	movs	r3, #0
 8004e02:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e04:	4b4f      	ldr	r3, [pc, #316]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10d      	bne.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e10:	4b4c      	ldr	r3, [pc, #304]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	4a4b      	ldr	r2, [pc, #300]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e1a:	61d3      	str	r3, [r2, #28]
 8004e1c:	4b49      	ldr	r3, [pc, #292]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e24:	60bb      	str	r3, [r7, #8]
 8004e26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e2c:	4b46      	ldr	r3, [pc, #280]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d118      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e38:	4b43      	ldr	r3, [pc, #268]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a42      	ldr	r2, [pc, #264]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e44:	f7fe f84e 	bl	8002ee4 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e4a:	e008      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e4c:	f7fe f84a 	bl	8002ee4 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b64      	cmp	r3, #100	@ 0x64
 8004e58:	d901      	bls.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e06d      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e5e:	4b3a      	ldr	r3, [pc, #232]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d0f0      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e6a:	4b36      	ldr	r3, [pc, #216]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e72:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d02e      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d027      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e88:	4b2e      	ldr	r3, [pc, #184]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e90:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e92:	4b2e      	ldr	r3, [pc, #184]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e94:	2201      	movs	r2, #1
 8004e96:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e98:	4b2c      	ldr	r3, [pc, #176]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e9e:	4a29      	ldr	r2, [pc, #164]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d014      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eae:	f7fe f819 	bl	8002ee4 <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb4:	e00a      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb6:	f7fe f815 	bl	8002ee4 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e036      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0ee      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	4917      	ldr	r1, [pc, #92]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004eea:	7dfb      	ldrb	r3, [r7, #23]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d105      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ef0:	4b14      	ldr	r3, [pc, #80]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	4a13      	ldr	r2, [pc, #76]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004efa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d008      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f08:	4b0e      	ldr	r3, [pc, #56]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	490b      	ldr	r1, [pc, #44]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0310 	and.w	r3, r3, #16
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d008      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f26:	4b07      	ldr	r3, [pc, #28]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	4904      	ldr	r1, [pc, #16]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	40021000 	.word	0x40021000
 8004f48:	40007000 	.word	0x40007000
 8004f4c:	42420440 	.word	0x42420440

08004f50 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b088      	sub	sp, #32
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	61fb      	str	r3, [r7, #28]
 8004f60:	2300      	movs	r3, #0
 8004f62:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	2300      	movs	r3, #0
 8004f6a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b10      	cmp	r3, #16
 8004f70:	d00a      	beq.n	8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b10      	cmp	r3, #16
 8004f76:	f200 808a 	bhi.w	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d045      	beq.n	800500c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d075      	beq.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004f86:	e082      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004f88:	4b46      	ldr	r3, [pc, #280]	@ (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004f8e:	4b45      	ldr	r3, [pc, #276]	@ (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d07b      	beq.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	0c9b      	lsrs	r3, r3, #18
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	4a41      	ldr	r2, [pc, #260]	@ (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004fa4:	5cd3      	ldrb	r3, [r2, r3]
 8004fa6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d015      	beq.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004fb2:	4b3c      	ldr	r3, [pc, #240]	@ (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	0c5b      	lsrs	r3, r3, #17
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	4a3b      	ldr	r2, [pc, #236]	@ (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004fbe:	5cd3      	ldrb	r3, [r2, r3]
 8004fc0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00d      	beq.n	8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004fcc:	4a38      	ldr	r2, [pc, #224]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	fb02 f303 	mul.w	r3, r2, r3
 8004fda:	61fb      	str	r3, [r7, #28]
 8004fdc:	e004      	b.n	8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	4a34      	ldr	r2, [pc, #208]	@ (80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004fe2:	fb02 f303 	mul.w	r3, r2, r3
 8004fe6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004fe8:	4b2e      	ldr	r3, [pc, #184]	@ (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ff0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ff4:	d102      	bne.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	61bb      	str	r3, [r7, #24]
      break;
 8004ffa:	e04a      	b.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	4a2d      	ldr	r2, [pc, #180]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005002:	fba2 2303 	umull	r2, r3, r2, r3
 8005006:	085b      	lsrs	r3, r3, #1
 8005008:	61bb      	str	r3, [r7, #24]
      break;
 800500a:	e042      	b.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800500c:	4b25      	ldr	r3, [pc, #148]	@ (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005018:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800501c:	d108      	bne.n	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005028:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800502c:	61bb      	str	r3, [r7, #24]
 800502e:	e01f      	b.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005036:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800503a:	d109      	bne.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800503c:	4b19      	ldr	r3, [pc, #100]	@ (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800503e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005048:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800504c:	61bb      	str	r3, [r7, #24]
 800504e:	e00f      	b.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005056:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800505a:	d11c      	bne.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800505c:	4b11      	ldr	r3, [pc, #68]	@ (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d016      	beq.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005068:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800506c:	61bb      	str	r3, [r7, #24]
      break;
 800506e:	e012      	b.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005070:	e011      	b.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005072:	f7ff fe85 	bl	8004d80 <HAL_RCC_GetPCLK2Freq>
 8005076:	4602      	mov	r2, r0
 8005078:	4b0a      	ldr	r3, [pc, #40]	@ (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	0b9b      	lsrs	r3, r3, #14
 800507e:	f003 0303 	and.w	r3, r3, #3
 8005082:	3301      	adds	r3, #1
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	fbb2 f3f3 	udiv	r3, r2, r3
 800508a:	61bb      	str	r3, [r7, #24]
      break;
 800508c:	e004      	b.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800508e:	bf00      	nop
 8005090:	e002      	b.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005092:	bf00      	nop
 8005094:	e000      	b.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005096:	bf00      	nop
    }
  }
  return (frequency);
 8005098:	69bb      	ldr	r3, [r7, #24]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3720      	adds	r7, #32
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	40021000 	.word	0x40021000
 80050a8:	0800d1e0 	.word	0x0800d1e0
 80050ac:	0800d1f0 	.word	0x0800d1f0
 80050b0:	007a1200 	.word	0x007a1200
 80050b4:	003d0900 	.word	0x003d0900
 80050b8:	aaaaaaab 	.word	0xaaaaaaab

080050bc <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e07a      	b.n	80051c8 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	7c5b      	ldrb	r3, [r3, #17]
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d105      	bne.n	80050e8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7fd fcdc 	bl	8002aa0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2202      	movs	r2, #2
 80050ec:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fbcc 	bl	800588c <HAL_RTC_WaitForSynchro>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d004      	beq.n	8005104 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2204      	movs	r2, #4
 80050fe:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e061      	b.n	80051c8 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fc85 	bl	8005a14 <RTC_EnterInitMode>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d004      	beq.n	800511a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2204      	movs	r2, #4
 8005114:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e056      	b.n	80051c8 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0207 	bic.w	r2, r2, #7
 8005128:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d005      	beq.n	800513e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8005132:	4b27      	ldr	r3, [pc, #156]	@ (80051d0 <HAL_RTC_Init+0x114>)
 8005134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005136:	4a26      	ldr	r2, [pc, #152]	@ (80051d0 <HAL_RTC_Init+0x114>)
 8005138:	f023 0301 	bic.w	r3, r3, #1
 800513c:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800513e:	4b24      	ldr	r3, [pc, #144]	@ (80051d0 <HAL_RTC_Init+0x114>)
 8005140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005142:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	4921      	ldr	r1, [pc, #132]	@ (80051d0 <HAL_RTC_Init+0x114>)
 800514c:	4313      	orrs	r3, r2
 800514e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005158:	d003      	beq.n	8005162 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	e00e      	b.n	8005180 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005162:	2001      	movs	r0, #1
 8005164:	f7ff fef4 	bl	8004f50 <HAL_RCCEx_GetPeriphCLKFreq>
 8005168:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d104      	bne.n	800517a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2204      	movs	r2, #4
 8005174:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e026      	b.n	80051c8 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	3b01      	subs	r3, #1
 800517e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	0c1a      	lsrs	r2, r3, #16
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f002 020f 	and.w	r2, r2, #15
 800518c:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	b292      	uxth	r2, r2
 8005196:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 fc63 	bl	8005a64 <RTC_ExitInitMode>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d004      	beq.n	80051ae <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2204      	movs	r2, #4
 80051a8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e00c      	b.n	80051c8 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80051c6:	2300      	movs	r3, #0
  }
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40006c00 	.word	0x40006c00

080051d4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80051d4:	b590      	push	{r4, r7, lr}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	2300      	movs	r3, #0
 80051e6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <HAL_RTC_SetTime+0x20>
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e080      	b.n	80052fa <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	7c1b      	ldrb	r3, [r3, #16]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_RTC_SetTime+0x30>
 8005200:	2302      	movs	r3, #2
 8005202:	e07a      	b.n	80052fa <HAL_RTC_SetTime+0x126>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2201      	movs	r2, #1
 8005208:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2202      	movs	r2, #2
 800520e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d113      	bne.n	800523e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005220:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	785b      	ldrb	r3, [r3, #1]
 8005228:	4619      	mov	r1, r3
 800522a:	460b      	mov	r3, r1
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	1a5b      	subs	r3, r3, r1
 8005230:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005232:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005238:	4413      	add	r3, r2
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	e01e      	b.n	800527c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	4618      	mov	r0, r3
 8005244:	f000 fc53 	bl	8005aee <RTC_Bcd2ToByte>
 8005248:	4603      	mov	r3, r0
 800524a:	461a      	mov	r2, r3
 800524c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005250:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	785b      	ldrb	r3, [r3, #1]
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fc48 	bl	8005aee <RTC_Bcd2ToByte>
 800525e:	4603      	mov	r3, r0
 8005260:	461a      	mov	r2, r3
 8005262:	4613      	mov	r3, r2
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	1a9b      	subs	r3, r3, r2
 8005268:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800526a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	789b      	ldrb	r3, [r3, #2]
 8005270:	4618      	mov	r0, r3
 8005272:	f000 fc3c 	bl	8005aee <RTC_Bcd2ToByte>
 8005276:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005278:	4423      	add	r3, r4
 800527a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800527c:	6979      	ldr	r1, [r7, #20]
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 fb61 	bl	8005946 <RTC_WriteTimeCounter>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d007      	beq.n	800529a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2204      	movs	r2, #4
 800528e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e02f      	b.n	80052fa <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 0205 	bic.w	r2, r2, #5
 80052a8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 fb72 	bl	8005994 <RTC_ReadAlarmCounter>
 80052b0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b8:	d018      	beq.n	80052ec <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d214      	bcs.n	80052ec <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80052c8:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80052cc:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80052ce:	6939      	ldr	r1, [r7, #16]
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 fb78 	bl	80059c6 <RTC_WriteAlarmCounter>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d007      	beq.n	80052ec <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2204      	movs	r2, #4
 80052e0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e006      	b.n	80052fa <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2201      	movs	r2, #1
 80052f0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80052f8:	2300      	movs	r3, #0
  }
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	371c      	adds	r7, #28
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd90      	pop	{r4, r7, pc}
	...

08005304 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b088      	sub	sp, #32
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	61bb      	str	r3, [r7, #24]
 8005314:	2300      	movs	r3, #0
 8005316:	61fb      	str	r3, [r7, #28]
 8005318:	2300      	movs	r3, #0
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	2300      	movs	r3, #0
 800531e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <HAL_RTC_GetTime+0x28>
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e0b5      	b.n	800549c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f003 0304 	and.w	r3, r3, #4
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e0ac      	b.n	800549c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 facf 	bl	80058e6 <RTC_ReadTimeCounter>
 8005348:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	4a55      	ldr	r2, [pc, #340]	@ (80054a4 <HAL_RTC_GetTime+0x1a0>)
 800534e:	fba2 2303 	umull	r2, r3, r2, r3
 8005352:	0adb      	lsrs	r3, r3, #11
 8005354:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	4b52      	ldr	r3, [pc, #328]	@ (80054a4 <HAL_RTC_GetTime+0x1a0>)
 800535a:	fba3 1302 	umull	r1, r3, r3, r2
 800535e:	0adb      	lsrs	r3, r3, #11
 8005360:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8005364:	fb01 f303 	mul.w	r3, r1, r3
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	4a4f      	ldr	r2, [pc, #316]	@ (80054a8 <HAL_RTC_GetTime+0x1a4>)
 800536c:	fba2 2303 	umull	r2, r3, r2, r3
 8005370:	095b      	lsrs	r3, r3, #5
 8005372:	b2da      	uxtb	r2, r3
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	4a4a      	ldr	r2, [pc, #296]	@ (80054a4 <HAL_RTC_GetTime+0x1a0>)
 800537c:	fba2 1203 	umull	r1, r2, r2, r3
 8005380:	0ad2      	lsrs	r2, r2, #11
 8005382:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8005386:	fb01 f202 	mul.w	r2, r1, r2
 800538a:	1a9a      	subs	r2, r3, r2
 800538c:	4b46      	ldr	r3, [pc, #280]	@ (80054a8 <HAL_RTC_GetTime+0x1a4>)
 800538e:	fba3 1302 	umull	r1, r3, r3, r2
 8005392:	0959      	lsrs	r1, r3, #5
 8005394:	460b      	mov	r3, r1
 8005396:	011b      	lsls	r3, r3, #4
 8005398:	1a5b      	subs	r3, r3, r1
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	1ad1      	subs	r1, r2, r3
 800539e:	b2ca      	uxtb	r2, r1
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	2b17      	cmp	r3, #23
 80053a8:	d955      	bls.n	8005456 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	4a3f      	ldr	r2, [pc, #252]	@ (80054ac <HAL_RTC_GetTime+0x1a8>)
 80053ae:	fba2 2303 	umull	r2, r3, r2, r3
 80053b2:	091b      	lsrs	r3, r3, #4
 80053b4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80053b6:	6939      	ldr	r1, [r7, #16]
 80053b8:	4b3c      	ldr	r3, [pc, #240]	@ (80054ac <HAL_RTC_GetTime+0x1a8>)
 80053ba:	fba3 2301 	umull	r2, r3, r3, r1
 80053be:	091a      	lsrs	r2, r3, #4
 80053c0:	4613      	mov	r3, r2
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	4413      	add	r3, r2
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	1aca      	subs	r2, r1, r3
 80053ca:	b2d2      	uxtb	r2, r2
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 fadf 	bl	8005994 <RTC_ReadAlarmCounter>
 80053d6:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053de:	d008      	beq.n	80053f2 <HAL_RTC_GetTime+0xee>
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d904      	bls.n	80053f2 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80053e8:	69fa      	ldr	r2, [r7, #28]
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	61fb      	str	r3, [r7, #28]
 80053f0:	e002      	b.n	80053f8 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80053f2:	f04f 33ff 	mov.w	r3, #4294967295
 80053f6:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	4a2d      	ldr	r2, [pc, #180]	@ (80054b0 <HAL_RTC_GetTime+0x1ac>)
 80053fc:	fb02 f303 	mul.w	r3, r2, r3
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005406:	69b9      	ldr	r1, [r7, #24]
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 fa9c 	bl	8005946 <RTC_WriteTimeCounter>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e041      	b.n	800549c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541e:	d00c      	beq.n	800543a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8005420:	69fa      	ldr	r2, [r7, #28]
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	4413      	add	r3, r2
 8005426:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005428:	69f9      	ldr	r1, [r7, #28]
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 facb 	bl	80059c6 <RTC_WriteAlarmCounter>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00a      	beq.n	800544c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e030      	b.n	800549c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800543a:	69f9      	ldr	r1, [r7, #28]
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 fac2 	bl	80059c6 <RTC_WriteAlarmCounter>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e027      	b.n	800549c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800544c:	6979      	ldr	r1, [r7, #20]
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 fb6a 	bl	8005b28 <RTC_DateUpdate>
 8005454:	e003      	b.n	800545e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	b2da      	uxtb	r2, r3
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d01a      	beq.n	800549a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	4618      	mov	r0, r3
 800546a:	f000 fb23 	bl	8005ab4 <RTC_ByteToBcd2>
 800546e:	4603      	mov	r3, r0
 8005470:	461a      	mov	r2, r3
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	785b      	ldrb	r3, [r3, #1]
 800547a:	4618      	mov	r0, r3
 800547c:	f000 fb1a 	bl	8005ab4 <RTC_ByteToBcd2>
 8005480:	4603      	mov	r3, r0
 8005482:	461a      	mov	r2, r3
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	789b      	ldrb	r3, [r3, #2]
 800548c:	4618      	mov	r0, r3
 800548e:	f000 fb11 	bl	8005ab4 <RTC_ByteToBcd2>
 8005492:	4603      	mov	r3, r0
 8005494:	461a      	mov	r2, r3
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3720      	adds	r7, #32
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	91a2b3c5 	.word	0x91a2b3c5
 80054a8:	88888889 	.word	0x88888889
 80054ac:	aaaaaaab 	.word	0xaaaaaaab
 80054b0:	00015180 	.word	0x00015180

080054b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b088      	sub	sp, #32
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	61fb      	str	r3, [r7, #28]
 80054c4:	2300      	movs	r3, #0
 80054c6:	61bb      	str	r3, [r7, #24]
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <HAL_RTC_SetDate+0x24>
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e097      	b.n	800560c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	7c1b      	ldrb	r3, [r3, #16]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_RTC_SetDate+0x34>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e091      	b.n	800560c <HAL_RTC_SetDate+0x158>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2201      	movs	r2, #1
 80054ec:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2202      	movs	r2, #2
 80054f2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10c      	bne.n	8005514 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	78da      	ldrb	r2, [r3, #3]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	785a      	ldrb	r2, [r3, #1]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	789a      	ldrb	r2, [r3, #2]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	739a      	strb	r2, [r3, #14]
 8005512:	e01a      	b.n	800554a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	78db      	ldrb	r3, [r3, #3]
 8005518:	4618      	mov	r0, r3
 800551a:	f000 fae8 	bl	8005aee <RTC_Bcd2ToByte>
 800551e:	4603      	mov	r3, r0
 8005520:	461a      	mov	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	785b      	ldrb	r3, [r3, #1]
 800552a:	4618      	mov	r0, r3
 800552c:	f000 fadf 	bl	8005aee <RTC_Bcd2ToByte>
 8005530:	4603      	mov	r3, r0
 8005532:	461a      	mov	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	789b      	ldrb	r3, [r3, #2]
 800553c:	4618      	mov	r0, r3
 800553e:	f000 fad6 	bl	8005aee <RTC_Bcd2ToByte>
 8005542:	4603      	mov	r3, r0
 8005544:	461a      	mov	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	7bdb      	ldrb	r3, [r3, #15]
 800554e:	4618      	mov	r0, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	7b59      	ldrb	r1, [r3, #13]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	7b9b      	ldrb	r3, [r3, #14]
 8005558:	461a      	mov	r2, r3
 800555a:	f000 fbc1 	bl	8005ce0 <RTC_WeekDayNum>
 800555e:	4603      	mov	r3, r0
 8005560:	461a      	mov	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	7b1a      	ldrb	r2, [r3, #12]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 f9b9 	bl	80058e6 <RTC_ReadTimeCounter>
 8005574:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	4a26      	ldr	r2, [pc, #152]	@ (8005614 <HAL_RTC_SetDate+0x160>)
 800557a:	fba2 2303 	umull	r2, r3, r2, r3
 800557e:	0adb      	lsrs	r3, r3, #11
 8005580:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2b18      	cmp	r3, #24
 8005586:	d93a      	bls.n	80055fe <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	4a23      	ldr	r2, [pc, #140]	@ (8005618 <HAL_RTC_SetDate+0x164>)
 800558c:	fba2 2303 	umull	r2, r3, r2, r3
 8005590:	091b      	lsrs	r3, r3, #4
 8005592:	4a22      	ldr	r2, [pc, #136]	@ (800561c <HAL_RTC_SetDate+0x168>)
 8005594:	fb02 f303 	mul.w	r3, r2, r3
 8005598:	69fa      	ldr	r2, [r7, #28]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800559e:	69f9      	ldr	r1, [r7, #28]
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 f9d0 	bl	8005946 <RTC_WriteTimeCounter>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d007      	beq.n	80055bc <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2204      	movs	r2, #4
 80055b0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e027      	b.n	800560c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 f9e9 	bl	8005994 <RTC_ReadAlarmCounter>
 80055c2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ca:	d018      	beq.n	80055fe <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d214      	bcs.n	80055fe <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80055da:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80055de:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80055e0:	69b9      	ldr	r1, [r7, #24]
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 f9ef 	bl	80059c6 <RTC_WriteAlarmCounter>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d007      	beq.n	80055fe <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2204      	movs	r2, #4
 80055f2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e006      	b.n	800560c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2201      	movs	r2, #1
 8005602:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3720      	adds	r7, #32
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	91a2b3c5 	.word	0x91a2b3c5
 8005618:	aaaaaaab 	.word	0xaaaaaaab
 800561c:	00015180 	.word	0x00015180

08005620 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 800562c:	f107 0314 	add.w	r3, r7, #20
 8005630:	2100      	movs	r1, #0
 8005632:	460a      	mov	r2, r1
 8005634:	801a      	strh	r2, [r3, #0]
 8005636:	460a      	mov	r2, r1
 8005638:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <HAL_RTC_GetDate+0x26>
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e03a      	b.n	80056c0 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800564a:	f107 0314 	add.w	r3, r7, #20
 800564e:	2200      	movs	r2, #0
 8005650:	4619      	mov	r1, r3
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f7ff fe56 	bl	8005304 <HAL_RTC_GetTime>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e02e      	b.n	80056c0 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	7b1a      	ldrb	r2, [r3, #12]
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	7bda      	ldrb	r2, [r3, #15]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	7b5a      	ldrb	r2, [r3, #13]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	7b9a      	ldrb	r2, [r3, #14]
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d01a      	beq.n	80056be <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	78db      	ldrb	r3, [r3, #3]
 800568c:	4618      	mov	r0, r3
 800568e:	f000 fa11 	bl	8005ab4 <RTC_ByteToBcd2>
 8005692:	4603      	mov	r3, r0
 8005694:	461a      	mov	r2, r3
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	785b      	ldrb	r3, [r3, #1]
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 fa08 	bl	8005ab4 <RTC_ByteToBcd2>
 80056a4:	4603      	mov	r3, r0
 80056a6:	461a      	mov	r2, r3
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	789b      	ldrb	r3, [r3, #2]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 f9ff 	bl	8005ab4 <RTC_ByteToBcd2>
 80056b6:	4603      	mov	r3, r0
 80056b8:	461a      	mov	r2, r3
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80056c8:	b590      	push	{r4, r7, lr}
 80056ca:	b089      	sub	sp, #36	@ 0x24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 80056d4:	2300      	movs	r3, #0
 80056d6:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 80056d8:	f107 0314 	add.w	r3, r7, #20
 80056dc:	2100      	movs	r1, #0
 80056de:	460a      	mov	r2, r1
 80056e0:	801a      	strh	r2, [r3, #0]
 80056e2:	460a      	mov	r2, r1
 80056e4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <HAL_RTC_SetAlarm_IT+0x2a>
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e099      	b.n	800582a <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	7c1b      	ldrb	r3, [r3, #16]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d101      	bne.n	8005702 <HAL_RTC_SetAlarm_IT+0x3a>
 80056fe:	2302      	movs	r3, #2
 8005700:	e093      	b.n	800582a <HAL_RTC_SetAlarm_IT+0x162>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2201      	movs	r2, #1
 8005706:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2202      	movs	r2, #2
 800570c:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800570e:	f107 0314 	add.w	r3, r7, #20
 8005712:	2200      	movs	r2, #0
 8005714:	4619      	mov	r1, r3
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f7ff fdf4 	bl	8005304 <HAL_RTC_GetTime>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e081      	b.n	800582a <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005726:	7d3b      	ldrb	r3, [r7, #20]
 8005728:	461a      	mov	r2, r3
 800572a:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800572e:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8005732:	7d7b      	ldrb	r3, [r7, #21]
 8005734:	4619      	mov	r1, r3
 8005736:	460b      	mov	r3, r1
 8005738:	011b      	lsls	r3, r3, #4
 800573a:	1a5b      	subs	r3, r3, r1
 800573c:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800573e:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8005740:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005742:	4413      	add	r3, r2
 8005744:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d113      	bne.n	8005774 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	461a      	mov	r2, r3
 8005752:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005756:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	785b      	ldrb	r3, [r3, #1]
 800575e:	4619      	mov	r1, r3
 8005760:	460b      	mov	r3, r1
 8005762:	011b      	lsls	r3, r3, #4
 8005764:	1a5b      	subs	r3, r3, r1
 8005766:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8005768:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800576e:	4413      	add	r3, r2
 8005770:	61fb      	str	r3, [r7, #28]
 8005772:	e01e      	b.n	80057b2 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	4618      	mov	r0, r3
 800577a:	f000 f9b8 	bl	8005aee <RTC_Bcd2ToByte>
 800577e:	4603      	mov	r3, r0
 8005780:	461a      	mov	r2, r3
 8005782:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005786:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	785b      	ldrb	r3, [r3, #1]
 800578e:	4618      	mov	r0, r3
 8005790:	f000 f9ad 	bl	8005aee <RTC_Bcd2ToByte>
 8005794:	4603      	mov	r3, r0
 8005796:	461a      	mov	r2, r3
 8005798:	4613      	mov	r3, r2
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	1a9b      	subs	r3, r3, r2
 800579e:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80057a0:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	789b      	ldrb	r3, [r3, #2]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 f9a1 	bl	8005aee <RTC_Bcd2ToByte>
 80057ac:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80057ae:	4423      	add	r3, r4
 80057b0:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 80057b2:	69fa      	ldr	r2, [r7, #28]
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d205      	bcs.n	80057c6 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80057c0:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80057c4:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80057c6:	69f9      	ldr	r1, [r7, #28]
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 f8fc 	bl	80059c6 <RTC_WriteAlarmCounter>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d007      	beq.n	80057e4 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2204      	movs	r2, #4
 80057d8:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e022      	b.n	800582a <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 0202 	bic.w	r2, r2, #2
 80057f2:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 0202 	orr.w	r2, r2, #2
 8005802:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005804:	4b0b      	ldr	r3, [pc, #44]	@ (8005834 <HAL_RTC_SetAlarm_IT+0x16c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a0a      	ldr	r2, [pc, #40]	@ (8005834 <HAL_RTC_SetAlarm_IT+0x16c>)
 800580a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800580e:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005810:	4b08      	ldr	r3, [pc, #32]	@ (8005834 <HAL_RTC_SetAlarm_IT+0x16c>)
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	4a07      	ldr	r2, [pc, #28]	@ (8005834 <HAL_RTC_SetAlarm_IT+0x16c>)
 8005816:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800581a:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2201      	movs	r2, #1
 8005820:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005828:	2300      	movs	r3, #0
  }
}
 800582a:	4618      	mov	r0, r3
 800582c:	3724      	adds	r7, #36	@ 0x24
 800582e:	46bd      	mov	sp, r7
 8005830:	bd90      	pop	{r4, r7, pc}
 8005832:	bf00      	nop
 8005834:	40010400 	.word	0x40010400

08005838 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d011      	beq.n	8005872 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7fc fde1 	bl	8002424 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0202 	bic.w	r2, r2, #2
 8005870:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005872:	4b05      	ldr	r3, [pc, #20]	@ (8005888 <HAL_RTC_AlarmIRQHandler+0x50>)
 8005874:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005878:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	745a      	strb	r2, [r3, #17]
}
 8005880:	bf00      	nop
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40010400 	.word	0x40010400

0800588c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005894:	2300      	movs	r3, #0
 8005896:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e01d      	b.n	80058de <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 0208 	bic.w	r2, r2, #8
 80058b0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80058b2:	f7fd fb17 	bl	8002ee4 <HAL_GetTick>
 80058b6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80058b8:	e009      	b.n	80058ce <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80058ba:	f7fd fb13 	bl	8002ee4 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80058c8:	d901      	bls.n	80058ce <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e007      	b.n	80058de <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0ee      	beq.n	80058ba <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b087      	sub	sp, #28
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	827b      	strh	r3, [r7, #18]
 80058f2:	2300      	movs	r3, #0
 80058f4:	823b      	strh	r3, [r7, #16]
 80058f6:	2300      	movs	r3, #0
 80058f8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005916:	8a7a      	ldrh	r2, [r7, #18]
 8005918:	8a3b      	ldrh	r3, [r7, #16]
 800591a:	429a      	cmp	r2, r3
 800591c:	d008      	beq.n	8005930 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800591e:	8a3b      	ldrh	r3, [r7, #16]
 8005920:	041a      	lsls	r2, r3, #16
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	b29b      	uxth	r3, r3
 800592a:	4313      	orrs	r3, r2
 800592c:	617b      	str	r3, [r7, #20]
 800592e:	e004      	b.n	800593a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005930:	8a7b      	ldrh	r3, [r7, #18]
 8005932:	041a      	lsls	r2, r3, #16
 8005934:	89fb      	ldrh	r3, [r7, #14]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800593a:	697b      	ldr	r3, [r7, #20]
}
 800593c:	4618      	mov	r0, r3
 800593e:	371c      	adds	r7, #28
 8005940:	46bd      	mov	sp, r7
 8005942:	bc80      	pop	{r7}
 8005944:	4770      	bx	lr

08005946 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b084      	sub	sp, #16
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
 800594e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f85d 	bl	8005a14 <RTC_EnterInitMode>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	73fb      	strb	r3, [r7, #15]
 8005964:	e011      	b.n	800598a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	0c12      	lsrs	r2, r2, #16
 800596e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	b292      	uxth	r2, r2
 8005978:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f872 	bl	8005a64 <RTC_ExitInitMode>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800598a:	7bfb      	ldrb	r3, [r7, #15]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800599c:	2300      	movs	r3, #0
 800599e:	81fb      	strh	r3, [r7, #14]
 80059a0:	2300      	movs	r3, #0
 80059a2:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80059b4:	89fb      	ldrh	r3, [r7, #14]
 80059b6:	041a      	lsls	r2, r3, #16
 80059b8:	89bb      	ldrh	r3, [r7, #12]
 80059ba:	4313      	orrs	r3, r2
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bc80      	pop	{r7}
 80059c4:	4770      	bx	lr

080059c6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b084      	sub	sp, #16
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 f81d 	bl	8005a14 <RTC_EnterInitMode>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	73fb      	strb	r3, [r7, #15]
 80059e4:	e011      	b.n	8005a0a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	0c12      	lsrs	r2, r2, #16
 80059ee:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	b292      	uxth	r2, r2
 80059f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f832 	bl	8005a64 <RTC_ExitInitMode>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005a20:	f7fd fa60 	bl	8002ee4 <HAL_GetTick>
 8005a24:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005a26:	e009      	b.n	8005a3c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005a28:	f7fd fa5c 	bl	8002ee4 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a36:	d901      	bls.n	8005a3c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e00f      	b.n	8005a5c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f003 0320 	and.w	r3, r3, #32
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0ee      	beq.n	8005a28 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f042 0210 	orr.w	r2, r2, #16
 8005a58:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0210 	bic.w	r2, r2, #16
 8005a7e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005a80:	f7fd fa30 	bl	8002ee4 <HAL_GetTick>
 8005a84:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005a86:	e009      	b.n	8005a9c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005a88:	f7fd fa2c 	bl	8002ee4 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a96:	d901      	bls.n	8005a9c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e007      	b.n	8005aac <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f003 0320 	and.w	r3, r3, #32
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d0ee      	beq.n	8005a88 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	4603      	mov	r3, r0
 8005abc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005ac2:	e005      	b.n	8005ad0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	3b0a      	subs	r3, #10
 8005ace:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005ad0:	79fb      	ldrb	r3, [r7, #7]
 8005ad2:	2b09      	cmp	r3, #9
 8005ad4:	d8f6      	bhi.n	8005ac4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	011b      	lsls	r3, r3, #4
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	79fb      	ldrb	r3, [r7, #7]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	b2db      	uxtb	r3, r3
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bc80      	pop	{r7}
 8005aec:	4770      	bx	lr

08005aee <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b085      	sub	sp, #20
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	4603      	mov	r3, r0
 8005af6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005af8:	2300      	movs	r3, #0
 8005afa:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005afc:	79fb      	ldrb	r3, [r7, #7]
 8005afe:	091b      	lsrs	r3, r3, #4
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	461a      	mov	r2, r3
 8005b04:	4613      	mov	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005b0e:	79fb      	ldrb	r3, [r7, #7]
 8005b10:	f003 030f 	and.w	r3, r3, #15
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	4413      	add	r3, r2
 8005b1c:	b2db      	uxtb	r3, r3
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bc80      	pop	{r7}
 8005b26:	4770      	bx	lr

08005b28 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005b32:	2300      	movs	r3, #0
 8005b34:	617b      	str	r3, [r7, #20]
 8005b36:	2300      	movs	r3, #0
 8005b38:	613b      	str	r3, [r7, #16]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	7bdb      	ldrb	r3, [r3, #15]
 8005b46:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	7b5b      	ldrb	r3, [r3, #13]
 8005b4c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	7b9b      	ldrb	r3, [r3, #14]
 8005b52:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005b54:	2300      	movs	r3, #0
 8005b56:	60bb      	str	r3, [r7, #8]
 8005b58:	e06f      	b.n	8005c3a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d011      	beq.n	8005b84 <RTC_DateUpdate+0x5c>
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	2b03      	cmp	r3, #3
 8005b64:	d00e      	beq.n	8005b84 <RTC_DateUpdate+0x5c>
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	2b05      	cmp	r3, #5
 8005b6a:	d00b      	beq.n	8005b84 <RTC_DateUpdate+0x5c>
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	2b07      	cmp	r3, #7
 8005b70:	d008      	beq.n	8005b84 <RTC_DateUpdate+0x5c>
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	d005      	beq.n	8005b84 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	2b0a      	cmp	r3, #10
 8005b7c:	d002      	beq.n	8005b84 <RTC_DateUpdate+0x5c>
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	2b0c      	cmp	r3, #12
 8005b82:	d117      	bne.n	8005bb4 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b1e      	cmp	r3, #30
 8005b88:	d803      	bhi.n	8005b92 <RTC_DateUpdate+0x6a>
      {
        day++;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005b90:	e050      	b.n	8005c34 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	2b0c      	cmp	r3, #12
 8005b96:	d005      	beq.n	8005ba4 <RTC_DateUpdate+0x7c>
        {
          month++;
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005ba2:	e047      	b.n	8005c34 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	60fb      	str	r3, [r7, #12]
          year++;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005bb2:	e03f      	b.n	8005c34 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	d008      	beq.n	8005bcc <RTC_DateUpdate+0xa4>
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	2b06      	cmp	r3, #6
 8005bbe:	d005      	beq.n	8005bcc <RTC_DateUpdate+0xa4>
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	2b09      	cmp	r3, #9
 8005bc4:	d002      	beq.n	8005bcc <RTC_DateUpdate+0xa4>
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	2b0b      	cmp	r3, #11
 8005bca:	d10c      	bne.n	8005be6 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2b1d      	cmp	r3, #29
 8005bd0:	d803      	bhi.n	8005bda <RTC_DateUpdate+0xb2>
      {
        day++;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005bd8:	e02c      	b.n	8005c34 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005be0:	2301      	movs	r3, #1
 8005be2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005be4:	e026      	b.n	8005c34 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d123      	bne.n	8005c34 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2b1b      	cmp	r3, #27
 8005bf0:	d803      	bhi.n	8005bfa <RTC_DateUpdate+0xd2>
      {
        day++;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	e01c      	b.n	8005c34 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b1c      	cmp	r3, #28
 8005bfe:	d111      	bne.n	8005c24 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 f839 	bl	8005c7c <RTC_IsLeapYear>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d003      	beq.n	8005c18 <RTC_DateUpdate+0xf0>
        {
          day++;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3301      	adds	r3, #1
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	e00d      	b.n	8005c34 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	e007      	b.n	8005c34 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b1d      	cmp	r3, #29
 8005c28:	d104      	bne.n	8005c34 <RTC_DateUpdate+0x10c>
      {
        month++;
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005c30:	2301      	movs	r3, #1
 8005c32:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	3301      	adds	r3, #1
 8005c38:	60bb      	str	r3, [r7, #8]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d38b      	bcc.n	8005b5a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	4619      	mov	r1, r3
 8005c64:	6978      	ldr	r0, [r7, #20]
 8005c66:	f000 f83b 	bl	8005ce0 <RTC_WeekDayNum>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	731a      	strb	r2, [r3, #12]
}
 8005c72:	bf00      	nop
 8005c74:	3718      	adds	r7, #24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
	...

08005c7c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	4603      	mov	r3, r0
 8005c84:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005c86:	88fb      	ldrh	r3, [r7, #6]
 8005c88:	f003 0303 	and.w	r3, r3, #3
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	e01d      	b.n	8005cd2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005c96:	88fb      	ldrh	r3, [r7, #6]
 8005c98:	4a10      	ldr	r2, [pc, #64]	@ (8005cdc <RTC_IsLeapYear+0x60>)
 8005c9a:	fba2 1203 	umull	r1, r2, r2, r3
 8005c9e:	0952      	lsrs	r2, r2, #5
 8005ca0:	2164      	movs	r1, #100	@ 0x64
 8005ca2:	fb01 f202 	mul.w	r2, r1, r2
 8005ca6:	1a9b      	subs	r3, r3, r2
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e00f      	b.n	8005cd2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005cb2:	88fb      	ldrh	r3, [r7, #6]
 8005cb4:	4a09      	ldr	r2, [pc, #36]	@ (8005cdc <RTC_IsLeapYear+0x60>)
 8005cb6:	fba2 1203 	umull	r1, r2, r2, r3
 8005cba:	09d2      	lsrs	r2, r2, #7
 8005cbc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005cc0:	fb01 f202 	mul.w	r2, r1, r2
 8005cc4:	1a9b      	subs	r3, r3, r2
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e000      	b.n	8005cd2 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005cd0:	2300      	movs	r3, #0
  }
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bc80      	pop	{r7}
 8005cda:	4770      	bx	lr
 8005cdc:	51eb851f 	.word	0x51eb851f

08005ce0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	460b      	mov	r3, r1
 8005cea:	70fb      	strb	r3, [r7, #3]
 8005cec:	4613      	mov	r3, r2
 8005cee:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	60bb      	str	r3, [r7, #8]
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8005cfe:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005d00:	78fb      	ldrb	r3, [r7, #3]
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d82d      	bhi.n	8005d62 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005d06:	78fa      	ldrb	r2, [r7, #3]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	005b      	lsls	r3, r3, #1
 8005d0c:	4413      	add	r3, r2
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	1a9b      	subs	r3, r3, r2
 8005d12:	4a2c      	ldr	r2, [pc, #176]	@ (8005dc4 <RTC_WeekDayNum+0xe4>)
 8005d14:	fba2 2303 	umull	r2, r3, r2, r3
 8005d18:	085a      	lsrs	r2, r3, #1
 8005d1a:	78bb      	ldrb	r3, [r7, #2]
 8005d1c:	441a      	add	r2, r3
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	441a      	add	r2, r3
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	3b01      	subs	r3, #1
 8005d26:	089b      	lsrs	r3, r3, #2
 8005d28:	441a      	add	r2, r3
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	4926      	ldr	r1, [pc, #152]	@ (8005dc8 <RTC_WeekDayNum+0xe8>)
 8005d30:	fba1 1303 	umull	r1, r3, r1, r3
 8005d34:	095b      	lsrs	r3, r3, #5
 8005d36:	1ad2      	subs	r2, r2, r3
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	4922      	ldr	r1, [pc, #136]	@ (8005dc8 <RTC_WeekDayNum+0xe8>)
 8005d3e:	fba1 1303 	umull	r1, r3, r1, r3
 8005d42:	09db      	lsrs	r3, r3, #7
 8005d44:	4413      	add	r3, r2
 8005d46:	1d1a      	adds	r2, r3, #4
 8005d48:	4b20      	ldr	r3, [pc, #128]	@ (8005dcc <RTC_WeekDayNum+0xec>)
 8005d4a:	fba3 1302 	umull	r1, r3, r3, r2
 8005d4e:	1ad1      	subs	r1, r2, r3
 8005d50:	0849      	lsrs	r1, r1, #1
 8005d52:	440b      	add	r3, r1
 8005d54:	0899      	lsrs	r1, r3, #2
 8005d56:	460b      	mov	r3, r1
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	1a5b      	subs	r3, r3, r1
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	e029      	b.n	8005db6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005d62:	78fa      	ldrb	r2, [r7, #3]
 8005d64:	4613      	mov	r3, r2
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	4413      	add	r3, r2
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	1a9b      	subs	r3, r3, r2
 8005d6e:	4a15      	ldr	r2, [pc, #84]	@ (8005dc4 <RTC_WeekDayNum+0xe4>)
 8005d70:	fba2 2303 	umull	r2, r3, r2, r3
 8005d74:	085a      	lsrs	r2, r3, #1
 8005d76:	78bb      	ldrb	r3, [r7, #2]
 8005d78:	441a      	add	r2, r3
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	441a      	add	r2, r3
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	089b      	lsrs	r3, r3, #2
 8005d82:	441a      	add	r2, r3
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	4910      	ldr	r1, [pc, #64]	@ (8005dc8 <RTC_WeekDayNum+0xe8>)
 8005d88:	fba1 1303 	umull	r1, r3, r1, r3
 8005d8c:	095b      	lsrs	r3, r3, #5
 8005d8e:	1ad2      	subs	r2, r2, r3
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	490d      	ldr	r1, [pc, #52]	@ (8005dc8 <RTC_WeekDayNum+0xe8>)
 8005d94:	fba1 1303 	umull	r1, r3, r1, r3
 8005d98:	09db      	lsrs	r3, r3, #7
 8005d9a:	4413      	add	r3, r2
 8005d9c:	1c9a      	adds	r2, r3, #2
 8005d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8005dcc <RTC_WeekDayNum+0xec>)
 8005da0:	fba3 1302 	umull	r1, r3, r3, r2
 8005da4:	1ad1      	subs	r1, r2, r3
 8005da6:	0849      	lsrs	r1, r1, #1
 8005da8:	440b      	add	r3, r1
 8005daa:	0899      	lsrs	r1, r3, #2
 8005dac:	460b      	mov	r3, r1
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	1a5b      	subs	r3, r3, r1
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	b2db      	uxtb	r3, r3
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bc80      	pop	{r7}
 8005dc2:	4770      	bx	lr
 8005dc4:	38e38e39 	.word	0x38e38e39
 8005dc8:	51eb851f 	.word	0x51eb851f
 8005dcc:	24924925 	.word	0x24924925

08005dd0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e093      	b.n	8005f0c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d106      	bne.n	8005dfe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7fc fe7d 	bl	8002af8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2202      	movs	r2, #2
 8005e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	6812      	ldr	r2, [r2, #0]
 8005e10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e14:	f023 0307 	bic.w	r3, r3, #7
 8005e18:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	3304      	adds	r3, #4
 8005e22:	4619      	mov	r1, r3
 8005e24:	4610      	mov	r0, r2
 8005e26:	f000 f903 	bl	8006030 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e52:	f023 0303 	bic.w	r3, r3, #3
 8005e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	689a      	ldr	r2, [r3, #8]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	021b      	lsls	r3, r3, #8
 8005e62:	4313      	orrs	r3, r2
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005e70:	f023 030c 	bic.w	r3, r3, #12
 8005e74:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	021b      	lsls	r3, r3, #8
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	011a      	lsls	r2, r3, #4
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	031b      	lsls	r3, r3, #12
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005eae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	011b      	lsls	r3, r3, #4
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f24:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f2c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f34:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f3c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d110      	bne.n	8005f66 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d102      	bne.n	8005f50 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f4a:	7b7b      	ldrb	r3, [r7, #13]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d001      	beq.n	8005f54 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e069      	b.n	8006028 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f64:	e031      	b.n	8005fca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b04      	cmp	r3, #4
 8005f6a:	d110      	bne.n	8005f8e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f6c:	7bbb      	ldrb	r3, [r7, #14]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d102      	bne.n	8005f78 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f72:	7b3b      	ldrb	r3, [r7, #12]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d001      	beq.n	8005f7c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e055      	b.n	8006028 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f8c:	e01d      	b.n	8005fca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d108      	bne.n	8005fa6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f94:	7bbb      	ldrb	r3, [r7, #14]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d105      	bne.n	8005fa6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f9a:	7b7b      	ldrb	r3, [r7, #13]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d102      	bne.n	8005fa6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fa0:	7b3b      	ldrb	r3, [r7, #12]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d001      	beq.n	8005faa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e03e      	b.n	8006028 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2202      	movs	r2, #2
 8005fae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2202      	movs	r2, #2
 8005fbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <HAL_TIM_Encoder_Start+0xc4>
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2b04      	cmp	r3, #4
 8005fd4:	d008      	beq.n	8005fe8 <HAL_TIM_Encoder_Start+0xd4>
 8005fd6:	e00f      	b.n	8005ff8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	2100      	movs	r1, #0
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 f887 	bl	80060f4 <TIM_CCxChannelCmd>
      break;
 8005fe6:	e016      	b.n	8006016 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2201      	movs	r2, #1
 8005fee:	2104      	movs	r1, #4
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 f87f 	bl	80060f4 <TIM_CCxChannelCmd>
      break;
 8005ff6:	e00e      	b.n	8006016 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	2100      	movs	r1, #0
 8006000:	4618      	mov	r0, r3
 8006002:	f000 f877 	bl	80060f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2201      	movs	r2, #1
 800600c:	2104      	movs	r1, #4
 800600e:	4618      	mov	r0, r3
 8006010:	f000 f870 	bl	80060f4 <TIM_CCxChannelCmd>
      break;
 8006014:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f042 0201 	orr.w	r2, r2, #1
 8006024:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a29      	ldr	r2, [pc, #164]	@ (80060e8 <TIM_Base_SetConfig+0xb8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d00b      	beq.n	8006060 <TIM_Base_SetConfig+0x30>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800604e:	d007      	beq.n	8006060 <TIM_Base_SetConfig+0x30>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a26      	ldr	r2, [pc, #152]	@ (80060ec <TIM_Base_SetConfig+0xbc>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d003      	beq.n	8006060 <TIM_Base_SetConfig+0x30>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a25      	ldr	r2, [pc, #148]	@ (80060f0 <TIM_Base_SetConfig+0xc0>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d108      	bne.n	8006072 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a1c      	ldr	r2, [pc, #112]	@ (80060e8 <TIM_Base_SetConfig+0xb8>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d00b      	beq.n	8006092 <TIM_Base_SetConfig+0x62>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006080:	d007      	beq.n	8006092 <TIM_Base_SetConfig+0x62>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a19      	ldr	r2, [pc, #100]	@ (80060ec <TIM_Base_SetConfig+0xbc>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d003      	beq.n	8006092 <TIM_Base_SetConfig+0x62>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a18      	ldr	r2, [pc, #96]	@ (80060f0 <TIM_Base_SetConfig+0xc0>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d108      	bne.n	80060a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a07      	ldr	r2, [pc, #28]	@ (80060e8 <TIM_Base_SetConfig+0xb8>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d103      	bne.n	80060d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	691a      	ldr	r2, [r3, #16]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	615a      	str	r2, [r3, #20]
}
 80060de:	bf00      	nop
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bc80      	pop	{r7}
 80060e6:	4770      	bx	lr
 80060e8:	40012c00 	.word	0x40012c00
 80060ec:	40000400 	.word	0x40000400
 80060f0:	40000800 	.word	0x40000800

080060f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	f003 031f 	and.w	r3, r3, #31
 8006106:	2201      	movs	r2, #1
 8006108:	fa02 f303 	lsl.w	r3, r2, r3
 800610c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6a1a      	ldr	r2, [r3, #32]
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	43db      	mvns	r3, r3
 8006116:	401a      	ands	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6a1a      	ldr	r2, [r3, #32]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f003 031f 	and.w	r3, r3, #31
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	fa01 f303 	lsl.w	r3, r1, r3
 800612c:	431a      	orrs	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	621a      	str	r2, [r3, #32]
}
 8006132:	bf00      	nop
 8006134:	371c      	adds	r7, #28
 8006136:	46bd      	mov	sp, r7
 8006138:	bc80      	pop	{r7}
 800613a:	4770      	bx	lr

0800613c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800614c:	2b01      	cmp	r3, #1
 800614e:	d101      	bne.n	8006154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006150:	2302      	movs	r3, #2
 8006152:	e046      	b.n	80061e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800617a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a16      	ldr	r2, [pc, #88]	@ (80061ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d00e      	beq.n	80061b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061a0:	d009      	beq.n	80061b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a12      	ldr	r2, [pc, #72]	@ (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d004      	beq.n	80061b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a10      	ldr	r2, [pc, #64]	@ (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d10c      	bne.n	80061d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3714      	adds	r7, #20
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bc80      	pop	{r7}
 80061ea:	4770      	bx	lr
 80061ec:	40012c00 	.word	0x40012c00
 80061f0:	40000400 	.word	0x40000400
 80061f4:	40000800 	.word	0x40000800

080061f8 <__cvt>:
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061fe:	461d      	mov	r5, r3
 8006200:	bfbb      	ittet	lt
 8006202:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006206:	461d      	movlt	r5, r3
 8006208:	2300      	movge	r3, #0
 800620a:	232d      	movlt	r3, #45	@ 0x2d
 800620c:	b088      	sub	sp, #32
 800620e:	4614      	mov	r4, r2
 8006210:	bfb8      	it	lt
 8006212:	4614      	movlt	r4, r2
 8006214:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006216:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006218:	7013      	strb	r3, [r2, #0]
 800621a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800621c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006220:	f023 0820 	bic.w	r8, r3, #32
 8006224:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006228:	d005      	beq.n	8006236 <__cvt+0x3e>
 800622a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800622e:	d100      	bne.n	8006232 <__cvt+0x3a>
 8006230:	3601      	adds	r6, #1
 8006232:	2302      	movs	r3, #2
 8006234:	e000      	b.n	8006238 <__cvt+0x40>
 8006236:	2303      	movs	r3, #3
 8006238:	aa07      	add	r2, sp, #28
 800623a:	9204      	str	r2, [sp, #16]
 800623c:	aa06      	add	r2, sp, #24
 800623e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006242:	e9cd 3600 	strd	r3, r6, [sp]
 8006246:	4622      	mov	r2, r4
 8006248:	462b      	mov	r3, r5
 800624a:	f001 f8dd 	bl	8007408 <_dtoa_r>
 800624e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006252:	4607      	mov	r7, r0
 8006254:	d119      	bne.n	800628a <__cvt+0x92>
 8006256:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006258:	07db      	lsls	r3, r3, #31
 800625a:	d50e      	bpl.n	800627a <__cvt+0x82>
 800625c:	eb00 0906 	add.w	r9, r0, r6
 8006260:	2200      	movs	r2, #0
 8006262:	2300      	movs	r3, #0
 8006264:	4620      	mov	r0, r4
 8006266:	4629      	mov	r1, r5
 8006268:	f7fa fb9e 	bl	80009a8 <__aeabi_dcmpeq>
 800626c:	b108      	cbz	r0, 8006272 <__cvt+0x7a>
 800626e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006272:	2230      	movs	r2, #48	@ 0x30
 8006274:	9b07      	ldr	r3, [sp, #28]
 8006276:	454b      	cmp	r3, r9
 8006278:	d31e      	bcc.n	80062b8 <__cvt+0xc0>
 800627a:	4638      	mov	r0, r7
 800627c:	9b07      	ldr	r3, [sp, #28]
 800627e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006280:	1bdb      	subs	r3, r3, r7
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	b008      	add	sp, #32
 8006286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800628a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800628e:	eb00 0906 	add.w	r9, r0, r6
 8006292:	d1e5      	bne.n	8006260 <__cvt+0x68>
 8006294:	7803      	ldrb	r3, [r0, #0]
 8006296:	2b30      	cmp	r3, #48	@ 0x30
 8006298:	d10a      	bne.n	80062b0 <__cvt+0xb8>
 800629a:	2200      	movs	r2, #0
 800629c:	2300      	movs	r3, #0
 800629e:	4620      	mov	r0, r4
 80062a0:	4629      	mov	r1, r5
 80062a2:	f7fa fb81 	bl	80009a8 <__aeabi_dcmpeq>
 80062a6:	b918      	cbnz	r0, 80062b0 <__cvt+0xb8>
 80062a8:	f1c6 0601 	rsb	r6, r6, #1
 80062ac:	f8ca 6000 	str.w	r6, [sl]
 80062b0:	f8da 3000 	ldr.w	r3, [sl]
 80062b4:	4499      	add	r9, r3
 80062b6:	e7d3      	b.n	8006260 <__cvt+0x68>
 80062b8:	1c59      	adds	r1, r3, #1
 80062ba:	9107      	str	r1, [sp, #28]
 80062bc:	701a      	strb	r2, [r3, #0]
 80062be:	e7d9      	b.n	8006274 <__cvt+0x7c>

080062c0 <__exponent>:
 80062c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062c2:	2900      	cmp	r1, #0
 80062c4:	bfb6      	itet	lt
 80062c6:	232d      	movlt	r3, #45	@ 0x2d
 80062c8:	232b      	movge	r3, #43	@ 0x2b
 80062ca:	4249      	neglt	r1, r1
 80062cc:	2909      	cmp	r1, #9
 80062ce:	7002      	strb	r2, [r0, #0]
 80062d0:	7043      	strb	r3, [r0, #1]
 80062d2:	dd29      	ble.n	8006328 <__exponent+0x68>
 80062d4:	f10d 0307 	add.w	r3, sp, #7
 80062d8:	461d      	mov	r5, r3
 80062da:	270a      	movs	r7, #10
 80062dc:	fbb1 f6f7 	udiv	r6, r1, r7
 80062e0:	461a      	mov	r2, r3
 80062e2:	fb07 1416 	mls	r4, r7, r6, r1
 80062e6:	3430      	adds	r4, #48	@ 0x30
 80062e8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80062ec:	460c      	mov	r4, r1
 80062ee:	2c63      	cmp	r4, #99	@ 0x63
 80062f0:	4631      	mov	r1, r6
 80062f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80062f6:	dcf1      	bgt.n	80062dc <__exponent+0x1c>
 80062f8:	3130      	adds	r1, #48	@ 0x30
 80062fa:	1e94      	subs	r4, r2, #2
 80062fc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006300:	4623      	mov	r3, r4
 8006302:	1c41      	adds	r1, r0, #1
 8006304:	42ab      	cmp	r3, r5
 8006306:	d30a      	bcc.n	800631e <__exponent+0x5e>
 8006308:	f10d 0309 	add.w	r3, sp, #9
 800630c:	1a9b      	subs	r3, r3, r2
 800630e:	42ac      	cmp	r4, r5
 8006310:	bf88      	it	hi
 8006312:	2300      	movhi	r3, #0
 8006314:	3302      	adds	r3, #2
 8006316:	4403      	add	r3, r0
 8006318:	1a18      	subs	r0, r3, r0
 800631a:	b003      	add	sp, #12
 800631c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800631e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006322:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006326:	e7ed      	b.n	8006304 <__exponent+0x44>
 8006328:	2330      	movs	r3, #48	@ 0x30
 800632a:	3130      	adds	r1, #48	@ 0x30
 800632c:	7083      	strb	r3, [r0, #2]
 800632e:	70c1      	strb	r1, [r0, #3]
 8006330:	1d03      	adds	r3, r0, #4
 8006332:	e7f1      	b.n	8006318 <__exponent+0x58>

08006334 <_printf_float>:
 8006334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006338:	b091      	sub	sp, #68	@ 0x44
 800633a:	460c      	mov	r4, r1
 800633c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006340:	4616      	mov	r6, r2
 8006342:	461f      	mov	r7, r3
 8006344:	4605      	mov	r5, r0
 8006346:	f000 ff3f 	bl	80071c8 <_localeconv_r>
 800634a:	6803      	ldr	r3, [r0, #0]
 800634c:	4618      	mov	r0, r3
 800634e:	9308      	str	r3, [sp, #32]
 8006350:	f7f9 fefe 	bl	8000150 <strlen>
 8006354:	2300      	movs	r3, #0
 8006356:	930e      	str	r3, [sp, #56]	@ 0x38
 8006358:	f8d8 3000 	ldr.w	r3, [r8]
 800635c:	9009      	str	r0, [sp, #36]	@ 0x24
 800635e:	3307      	adds	r3, #7
 8006360:	f023 0307 	bic.w	r3, r3, #7
 8006364:	f103 0208 	add.w	r2, r3, #8
 8006368:	f894 a018 	ldrb.w	sl, [r4, #24]
 800636c:	f8d4 b000 	ldr.w	fp, [r4]
 8006370:	f8c8 2000 	str.w	r2, [r8]
 8006374:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006378:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800637c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800637e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006382:	f04f 32ff 	mov.w	r2, #4294967295
 8006386:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800638a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800638e:	4b9c      	ldr	r3, [pc, #624]	@ (8006600 <_printf_float+0x2cc>)
 8006390:	f7fa fb3c 	bl	8000a0c <__aeabi_dcmpun>
 8006394:	bb70      	cbnz	r0, 80063f4 <_printf_float+0xc0>
 8006396:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800639a:	f04f 32ff 	mov.w	r2, #4294967295
 800639e:	4b98      	ldr	r3, [pc, #608]	@ (8006600 <_printf_float+0x2cc>)
 80063a0:	f7fa fb16 	bl	80009d0 <__aeabi_dcmple>
 80063a4:	bb30      	cbnz	r0, 80063f4 <_printf_float+0xc0>
 80063a6:	2200      	movs	r2, #0
 80063a8:	2300      	movs	r3, #0
 80063aa:	4640      	mov	r0, r8
 80063ac:	4649      	mov	r1, r9
 80063ae:	f7fa fb05 	bl	80009bc <__aeabi_dcmplt>
 80063b2:	b110      	cbz	r0, 80063ba <_printf_float+0x86>
 80063b4:	232d      	movs	r3, #45	@ 0x2d
 80063b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063ba:	4a92      	ldr	r2, [pc, #584]	@ (8006604 <_printf_float+0x2d0>)
 80063bc:	4b92      	ldr	r3, [pc, #584]	@ (8006608 <_printf_float+0x2d4>)
 80063be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80063c2:	bf94      	ite	ls
 80063c4:	4690      	movls	r8, r2
 80063c6:	4698      	movhi	r8, r3
 80063c8:	2303      	movs	r3, #3
 80063ca:	f04f 0900 	mov.w	r9, #0
 80063ce:	6123      	str	r3, [r4, #16]
 80063d0:	f02b 0304 	bic.w	r3, fp, #4
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	4633      	mov	r3, r6
 80063d8:	4621      	mov	r1, r4
 80063da:	4628      	mov	r0, r5
 80063dc:	9700      	str	r7, [sp, #0]
 80063de:	aa0f      	add	r2, sp, #60	@ 0x3c
 80063e0:	f000 f9d4 	bl	800678c <_printf_common>
 80063e4:	3001      	adds	r0, #1
 80063e6:	f040 8090 	bne.w	800650a <_printf_float+0x1d6>
 80063ea:	f04f 30ff 	mov.w	r0, #4294967295
 80063ee:	b011      	add	sp, #68	@ 0x44
 80063f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f4:	4642      	mov	r2, r8
 80063f6:	464b      	mov	r3, r9
 80063f8:	4640      	mov	r0, r8
 80063fa:	4649      	mov	r1, r9
 80063fc:	f7fa fb06 	bl	8000a0c <__aeabi_dcmpun>
 8006400:	b148      	cbz	r0, 8006416 <_printf_float+0xe2>
 8006402:	464b      	mov	r3, r9
 8006404:	2b00      	cmp	r3, #0
 8006406:	bfb8      	it	lt
 8006408:	232d      	movlt	r3, #45	@ 0x2d
 800640a:	4a80      	ldr	r2, [pc, #512]	@ (800660c <_printf_float+0x2d8>)
 800640c:	bfb8      	it	lt
 800640e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006412:	4b7f      	ldr	r3, [pc, #508]	@ (8006610 <_printf_float+0x2dc>)
 8006414:	e7d3      	b.n	80063be <_printf_float+0x8a>
 8006416:	6863      	ldr	r3, [r4, #4]
 8006418:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	d13f      	bne.n	80064a0 <_printf_float+0x16c>
 8006420:	2306      	movs	r3, #6
 8006422:	6063      	str	r3, [r4, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800642a:	6023      	str	r3, [r4, #0]
 800642c:	9206      	str	r2, [sp, #24]
 800642e:	aa0e      	add	r2, sp, #56	@ 0x38
 8006430:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006434:	aa0d      	add	r2, sp, #52	@ 0x34
 8006436:	9203      	str	r2, [sp, #12]
 8006438:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800643c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006440:	6863      	ldr	r3, [r4, #4]
 8006442:	4642      	mov	r2, r8
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	4628      	mov	r0, r5
 8006448:	464b      	mov	r3, r9
 800644a:	910a      	str	r1, [sp, #40]	@ 0x28
 800644c:	f7ff fed4 	bl	80061f8 <__cvt>
 8006450:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006452:	4680      	mov	r8, r0
 8006454:	2947      	cmp	r1, #71	@ 0x47
 8006456:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006458:	d128      	bne.n	80064ac <_printf_float+0x178>
 800645a:	1cc8      	adds	r0, r1, #3
 800645c:	db02      	blt.n	8006464 <_printf_float+0x130>
 800645e:	6863      	ldr	r3, [r4, #4]
 8006460:	4299      	cmp	r1, r3
 8006462:	dd40      	ble.n	80064e6 <_printf_float+0x1b2>
 8006464:	f1aa 0a02 	sub.w	sl, sl, #2
 8006468:	fa5f fa8a 	uxtb.w	sl, sl
 800646c:	4652      	mov	r2, sl
 800646e:	3901      	subs	r1, #1
 8006470:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006474:	910d      	str	r1, [sp, #52]	@ 0x34
 8006476:	f7ff ff23 	bl	80062c0 <__exponent>
 800647a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800647c:	4681      	mov	r9, r0
 800647e:	1813      	adds	r3, r2, r0
 8006480:	2a01      	cmp	r2, #1
 8006482:	6123      	str	r3, [r4, #16]
 8006484:	dc02      	bgt.n	800648c <_printf_float+0x158>
 8006486:	6822      	ldr	r2, [r4, #0]
 8006488:	07d2      	lsls	r2, r2, #31
 800648a:	d501      	bpl.n	8006490 <_printf_float+0x15c>
 800648c:	3301      	adds	r3, #1
 800648e:	6123      	str	r3, [r4, #16]
 8006490:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006494:	2b00      	cmp	r3, #0
 8006496:	d09e      	beq.n	80063d6 <_printf_float+0xa2>
 8006498:	232d      	movs	r3, #45	@ 0x2d
 800649a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800649e:	e79a      	b.n	80063d6 <_printf_float+0xa2>
 80064a0:	2947      	cmp	r1, #71	@ 0x47
 80064a2:	d1bf      	bne.n	8006424 <_printf_float+0xf0>
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1bd      	bne.n	8006424 <_printf_float+0xf0>
 80064a8:	2301      	movs	r3, #1
 80064aa:	e7ba      	b.n	8006422 <_printf_float+0xee>
 80064ac:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80064b0:	d9dc      	bls.n	800646c <_printf_float+0x138>
 80064b2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80064b6:	d118      	bne.n	80064ea <_printf_float+0x1b6>
 80064b8:	2900      	cmp	r1, #0
 80064ba:	6863      	ldr	r3, [r4, #4]
 80064bc:	dd0b      	ble.n	80064d6 <_printf_float+0x1a2>
 80064be:	6121      	str	r1, [r4, #16]
 80064c0:	b913      	cbnz	r3, 80064c8 <_printf_float+0x194>
 80064c2:	6822      	ldr	r2, [r4, #0]
 80064c4:	07d0      	lsls	r0, r2, #31
 80064c6:	d502      	bpl.n	80064ce <_printf_float+0x19a>
 80064c8:	3301      	adds	r3, #1
 80064ca:	440b      	add	r3, r1
 80064cc:	6123      	str	r3, [r4, #16]
 80064ce:	f04f 0900 	mov.w	r9, #0
 80064d2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80064d4:	e7dc      	b.n	8006490 <_printf_float+0x15c>
 80064d6:	b913      	cbnz	r3, 80064de <_printf_float+0x1aa>
 80064d8:	6822      	ldr	r2, [r4, #0]
 80064da:	07d2      	lsls	r2, r2, #31
 80064dc:	d501      	bpl.n	80064e2 <_printf_float+0x1ae>
 80064de:	3302      	adds	r3, #2
 80064e0:	e7f4      	b.n	80064cc <_printf_float+0x198>
 80064e2:	2301      	movs	r3, #1
 80064e4:	e7f2      	b.n	80064cc <_printf_float+0x198>
 80064e6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80064ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064ec:	4299      	cmp	r1, r3
 80064ee:	db05      	blt.n	80064fc <_printf_float+0x1c8>
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	6121      	str	r1, [r4, #16]
 80064f4:	07d8      	lsls	r0, r3, #31
 80064f6:	d5ea      	bpl.n	80064ce <_printf_float+0x19a>
 80064f8:	1c4b      	adds	r3, r1, #1
 80064fa:	e7e7      	b.n	80064cc <_printf_float+0x198>
 80064fc:	2900      	cmp	r1, #0
 80064fe:	bfcc      	ite	gt
 8006500:	2201      	movgt	r2, #1
 8006502:	f1c1 0202 	rsble	r2, r1, #2
 8006506:	4413      	add	r3, r2
 8006508:	e7e0      	b.n	80064cc <_printf_float+0x198>
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	055a      	lsls	r2, r3, #21
 800650e:	d407      	bmi.n	8006520 <_printf_float+0x1ec>
 8006510:	6923      	ldr	r3, [r4, #16]
 8006512:	4642      	mov	r2, r8
 8006514:	4631      	mov	r1, r6
 8006516:	4628      	mov	r0, r5
 8006518:	47b8      	blx	r7
 800651a:	3001      	adds	r0, #1
 800651c:	d12b      	bne.n	8006576 <_printf_float+0x242>
 800651e:	e764      	b.n	80063ea <_printf_float+0xb6>
 8006520:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006524:	f240 80dc 	bls.w	80066e0 <_printf_float+0x3ac>
 8006528:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800652c:	2200      	movs	r2, #0
 800652e:	2300      	movs	r3, #0
 8006530:	f7fa fa3a 	bl	80009a8 <__aeabi_dcmpeq>
 8006534:	2800      	cmp	r0, #0
 8006536:	d033      	beq.n	80065a0 <_printf_float+0x26c>
 8006538:	2301      	movs	r3, #1
 800653a:	4631      	mov	r1, r6
 800653c:	4628      	mov	r0, r5
 800653e:	4a35      	ldr	r2, [pc, #212]	@ (8006614 <_printf_float+0x2e0>)
 8006540:	47b8      	blx	r7
 8006542:	3001      	adds	r0, #1
 8006544:	f43f af51 	beq.w	80063ea <_printf_float+0xb6>
 8006548:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800654c:	4543      	cmp	r3, r8
 800654e:	db02      	blt.n	8006556 <_printf_float+0x222>
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	07d8      	lsls	r0, r3, #31
 8006554:	d50f      	bpl.n	8006576 <_printf_float+0x242>
 8006556:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800655a:	4631      	mov	r1, r6
 800655c:	4628      	mov	r0, r5
 800655e:	47b8      	blx	r7
 8006560:	3001      	adds	r0, #1
 8006562:	f43f af42 	beq.w	80063ea <_printf_float+0xb6>
 8006566:	f04f 0900 	mov.w	r9, #0
 800656a:	f108 38ff 	add.w	r8, r8, #4294967295
 800656e:	f104 0a1a 	add.w	sl, r4, #26
 8006572:	45c8      	cmp	r8, r9
 8006574:	dc09      	bgt.n	800658a <_printf_float+0x256>
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	079b      	lsls	r3, r3, #30
 800657a:	f100 8102 	bmi.w	8006782 <_printf_float+0x44e>
 800657e:	68e0      	ldr	r0, [r4, #12]
 8006580:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006582:	4298      	cmp	r0, r3
 8006584:	bfb8      	it	lt
 8006586:	4618      	movlt	r0, r3
 8006588:	e731      	b.n	80063ee <_printf_float+0xba>
 800658a:	2301      	movs	r3, #1
 800658c:	4652      	mov	r2, sl
 800658e:	4631      	mov	r1, r6
 8006590:	4628      	mov	r0, r5
 8006592:	47b8      	blx	r7
 8006594:	3001      	adds	r0, #1
 8006596:	f43f af28 	beq.w	80063ea <_printf_float+0xb6>
 800659a:	f109 0901 	add.w	r9, r9, #1
 800659e:	e7e8      	b.n	8006572 <_printf_float+0x23e>
 80065a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	dc38      	bgt.n	8006618 <_printf_float+0x2e4>
 80065a6:	2301      	movs	r3, #1
 80065a8:	4631      	mov	r1, r6
 80065aa:	4628      	mov	r0, r5
 80065ac:	4a19      	ldr	r2, [pc, #100]	@ (8006614 <_printf_float+0x2e0>)
 80065ae:	47b8      	blx	r7
 80065b0:	3001      	adds	r0, #1
 80065b2:	f43f af1a 	beq.w	80063ea <_printf_float+0xb6>
 80065b6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80065ba:	ea59 0303 	orrs.w	r3, r9, r3
 80065be:	d102      	bne.n	80065c6 <_printf_float+0x292>
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	07d9      	lsls	r1, r3, #31
 80065c4:	d5d7      	bpl.n	8006576 <_printf_float+0x242>
 80065c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80065ca:	4631      	mov	r1, r6
 80065cc:	4628      	mov	r0, r5
 80065ce:	47b8      	blx	r7
 80065d0:	3001      	adds	r0, #1
 80065d2:	f43f af0a 	beq.w	80063ea <_printf_float+0xb6>
 80065d6:	f04f 0a00 	mov.w	sl, #0
 80065da:	f104 0b1a 	add.w	fp, r4, #26
 80065de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065e0:	425b      	negs	r3, r3
 80065e2:	4553      	cmp	r3, sl
 80065e4:	dc01      	bgt.n	80065ea <_printf_float+0x2b6>
 80065e6:	464b      	mov	r3, r9
 80065e8:	e793      	b.n	8006512 <_printf_float+0x1de>
 80065ea:	2301      	movs	r3, #1
 80065ec:	465a      	mov	r2, fp
 80065ee:	4631      	mov	r1, r6
 80065f0:	4628      	mov	r0, r5
 80065f2:	47b8      	blx	r7
 80065f4:	3001      	adds	r0, #1
 80065f6:	f43f aef8 	beq.w	80063ea <_printf_float+0xb6>
 80065fa:	f10a 0a01 	add.w	sl, sl, #1
 80065fe:	e7ee      	b.n	80065de <_printf_float+0x2aa>
 8006600:	7fefffff 	.word	0x7fefffff
 8006604:	0800d1f2 	.word	0x0800d1f2
 8006608:	0800d1f6 	.word	0x0800d1f6
 800660c:	0800d1fa 	.word	0x0800d1fa
 8006610:	0800d1fe 	.word	0x0800d1fe
 8006614:	0800d202 	.word	0x0800d202
 8006618:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800661a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800661e:	4553      	cmp	r3, sl
 8006620:	bfa8      	it	ge
 8006622:	4653      	movge	r3, sl
 8006624:	2b00      	cmp	r3, #0
 8006626:	4699      	mov	r9, r3
 8006628:	dc36      	bgt.n	8006698 <_printf_float+0x364>
 800662a:	f04f 0b00 	mov.w	fp, #0
 800662e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006632:	f104 021a 	add.w	r2, r4, #26
 8006636:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006638:	930a      	str	r3, [sp, #40]	@ 0x28
 800663a:	eba3 0309 	sub.w	r3, r3, r9
 800663e:	455b      	cmp	r3, fp
 8006640:	dc31      	bgt.n	80066a6 <_printf_float+0x372>
 8006642:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006644:	459a      	cmp	sl, r3
 8006646:	dc3a      	bgt.n	80066be <_printf_float+0x38a>
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	07da      	lsls	r2, r3, #31
 800664c:	d437      	bmi.n	80066be <_printf_float+0x38a>
 800664e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006650:	ebaa 0903 	sub.w	r9, sl, r3
 8006654:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006656:	ebaa 0303 	sub.w	r3, sl, r3
 800665a:	4599      	cmp	r9, r3
 800665c:	bfa8      	it	ge
 800665e:	4699      	movge	r9, r3
 8006660:	f1b9 0f00 	cmp.w	r9, #0
 8006664:	dc33      	bgt.n	80066ce <_printf_float+0x39a>
 8006666:	f04f 0800 	mov.w	r8, #0
 800666a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800666e:	f104 0b1a 	add.w	fp, r4, #26
 8006672:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006674:	ebaa 0303 	sub.w	r3, sl, r3
 8006678:	eba3 0309 	sub.w	r3, r3, r9
 800667c:	4543      	cmp	r3, r8
 800667e:	f77f af7a 	ble.w	8006576 <_printf_float+0x242>
 8006682:	2301      	movs	r3, #1
 8006684:	465a      	mov	r2, fp
 8006686:	4631      	mov	r1, r6
 8006688:	4628      	mov	r0, r5
 800668a:	47b8      	blx	r7
 800668c:	3001      	adds	r0, #1
 800668e:	f43f aeac 	beq.w	80063ea <_printf_float+0xb6>
 8006692:	f108 0801 	add.w	r8, r8, #1
 8006696:	e7ec      	b.n	8006672 <_printf_float+0x33e>
 8006698:	4642      	mov	r2, r8
 800669a:	4631      	mov	r1, r6
 800669c:	4628      	mov	r0, r5
 800669e:	47b8      	blx	r7
 80066a0:	3001      	adds	r0, #1
 80066a2:	d1c2      	bne.n	800662a <_printf_float+0x2f6>
 80066a4:	e6a1      	b.n	80063ea <_printf_float+0xb6>
 80066a6:	2301      	movs	r3, #1
 80066a8:	4631      	mov	r1, r6
 80066aa:	4628      	mov	r0, r5
 80066ac:	920a      	str	r2, [sp, #40]	@ 0x28
 80066ae:	47b8      	blx	r7
 80066b0:	3001      	adds	r0, #1
 80066b2:	f43f ae9a 	beq.w	80063ea <_printf_float+0xb6>
 80066b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80066b8:	f10b 0b01 	add.w	fp, fp, #1
 80066bc:	e7bb      	b.n	8006636 <_printf_float+0x302>
 80066be:	4631      	mov	r1, r6
 80066c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80066c4:	4628      	mov	r0, r5
 80066c6:	47b8      	blx	r7
 80066c8:	3001      	adds	r0, #1
 80066ca:	d1c0      	bne.n	800664e <_printf_float+0x31a>
 80066cc:	e68d      	b.n	80063ea <_printf_float+0xb6>
 80066ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80066d0:	464b      	mov	r3, r9
 80066d2:	4631      	mov	r1, r6
 80066d4:	4628      	mov	r0, r5
 80066d6:	4442      	add	r2, r8
 80066d8:	47b8      	blx	r7
 80066da:	3001      	adds	r0, #1
 80066dc:	d1c3      	bne.n	8006666 <_printf_float+0x332>
 80066de:	e684      	b.n	80063ea <_printf_float+0xb6>
 80066e0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80066e4:	f1ba 0f01 	cmp.w	sl, #1
 80066e8:	dc01      	bgt.n	80066ee <_printf_float+0x3ba>
 80066ea:	07db      	lsls	r3, r3, #31
 80066ec:	d536      	bpl.n	800675c <_printf_float+0x428>
 80066ee:	2301      	movs	r3, #1
 80066f0:	4642      	mov	r2, r8
 80066f2:	4631      	mov	r1, r6
 80066f4:	4628      	mov	r0, r5
 80066f6:	47b8      	blx	r7
 80066f8:	3001      	adds	r0, #1
 80066fa:	f43f ae76 	beq.w	80063ea <_printf_float+0xb6>
 80066fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006702:	4631      	mov	r1, r6
 8006704:	4628      	mov	r0, r5
 8006706:	47b8      	blx	r7
 8006708:	3001      	adds	r0, #1
 800670a:	f43f ae6e 	beq.w	80063ea <_printf_float+0xb6>
 800670e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006712:	2200      	movs	r2, #0
 8006714:	2300      	movs	r3, #0
 8006716:	f10a 3aff 	add.w	sl, sl, #4294967295
 800671a:	f7fa f945 	bl	80009a8 <__aeabi_dcmpeq>
 800671e:	b9c0      	cbnz	r0, 8006752 <_printf_float+0x41e>
 8006720:	4653      	mov	r3, sl
 8006722:	f108 0201 	add.w	r2, r8, #1
 8006726:	4631      	mov	r1, r6
 8006728:	4628      	mov	r0, r5
 800672a:	47b8      	blx	r7
 800672c:	3001      	adds	r0, #1
 800672e:	d10c      	bne.n	800674a <_printf_float+0x416>
 8006730:	e65b      	b.n	80063ea <_printf_float+0xb6>
 8006732:	2301      	movs	r3, #1
 8006734:	465a      	mov	r2, fp
 8006736:	4631      	mov	r1, r6
 8006738:	4628      	mov	r0, r5
 800673a:	47b8      	blx	r7
 800673c:	3001      	adds	r0, #1
 800673e:	f43f ae54 	beq.w	80063ea <_printf_float+0xb6>
 8006742:	f108 0801 	add.w	r8, r8, #1
 8006746:	45d0      	cmp	r8, sl
 8006748:	dbf3      	blt.n	8006732 <_printf_float+0x3fe>
 800674a:	464b      	mov	r3, r9
 800674c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006750:	e6e0      	b.n	8006514 <_printf_float+0x1e0>
 8006752:	f04f 0800 	mov.w	r8, #0
 8006756:	f104 0b1a 	add.w	fp, r4, #26
 800675a:	e7f4      	b.n	8006746 <_printf_float+0x412>
 800675c:	2301      	movs	r3, #1
 800675e:	4642      	mov	r2, r8
 8006760:	e7e1      	b.n	8006726 <_printf_float+0x3f2>
 8006762:	2301      	movs	r3, #1
 8006764:	464a      	mov	r2, r9
 8006766:	4631      	mov	r1, r6
 8006768:	4628      	mov	r0, r5
 800676a:	47b8      	blx	r7
 800676c:	3001      	adds	r0, #1
 800676e:	f43f ae3c 	beq.w	80063ea <_printf_float+0xb6>
 8006772:	f108 0801 	add.w	r8, r8, #1
 8006776:	68e3      	ldr	r3, [r4, #12]
 8006778:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800677a:	1a5b      	subs	r3, r3, r1
 800677c:	4543      	cmp	r3, r8
 800677e:	dcf0      	bgt.n	8006762 <_printf_float+0x42e>
 8006780:	e6fd      	b.n	800657e <_printf_float+0x24a>
 8006782:	f04f 0800 	mov.w	r8, #0
 8006786:	f104 0919 	add.w	r9, r4, #25
 800678a:	e7f4      	b.n	8006776 <_printf_float+0x442>

0800678c <_printf_common>:
 800678c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006790:	4616      	mov	r6, r2
 8006792:	4698      	mov	r8, r3
 8006794:	688a      	ldr	r2, [r1, #8]
 8006796:	690b      	ldr	r3, [r1, #16]
 8006798:	4607      	mov	r7, r0
 800679a:	4293      	cmp	r3, r2
 800679c:	bfb8      	it	lt
 800679e:	4613      	movlt	r3, r2
 80067a0:	6033      	str	r3, [r6, #0]
 80067a2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80067a6:	460c      	mov	r4, r1
 80067a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067ac:	b10a      	cbz	r2, 80067b2 <_printf_common+0x26>
 80067ae:	3301      	adds	r3, #1
 80067b0:	6033      	str	r3, [r6, #0]
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	0699      	lsls	r1, r3, #26
 80067b6:	bf42      	ittt	mi
 80067b8:	6833      	ldrmi	r3, [r6, #0]
 80067ba:	3302      	addmi	r3, #2
 80067bc:	6033      	strmi	r3, [r6, #0]
 80067be:	6825      	ldr	r5, [r4, #0]
 80067c0:	f015 0506 	ands.w	r5, r5, #6
 80067c4:	d106      	bne.n	80067d4 <_printf_common+0x48>
 80067c6:	f104 0a19 	add.w	sl, r4, #25
 80067ca:	68e3      	ldr	r3, [r4, #12]
 80067cc:	6832      	ldr	r2, [r6, #0]
 80067ce:	1a9b      	subs	r3, r3, r2
 80067d0:	42ab      	cmp	r3, r5
 80067d2:	dc2b      	bgt.n	800682c <_printf_common+0xa0>
 80067d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80067d8:	6822      	ldr	r2, [r4, #0]
 80067da:	3b00      	subs	r3, #0
 80067dc:	bf18      	it	ne
 80067de:	2301      	movne	r3, #1
 80067e0:	0692      	lsls	r2, r2, #26
 80067e2:	d430      	bmi.n	8006846 <_printf_common+0xba>
 80067e4:	4641      	mov	r1, r8
 80067e6:	4638      	mov	r0, r7
 80067e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80067ec:	47c8      	blx	r9
 80067ee:	3001      	adds	r0, #1
 80067f0:	d023      	beq.n	800683a <_printf_common+0xae>
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	6922      	ldr	r2, [r4, #16]
 80067f6:	f003 0306 	and.w	r3, r3, #6
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	bf14      	ite	ne
 80067fe:	2500      	movne	r5, #0
 8006800:	6833      	ldreq	r3, [r6, #0]
 8006802:	f04f 0600 	mov.w	r6, #0
 8006806:	bf08      	it	eq
 8006808:	68e5      	ldreq	r5, [r4, #12]
 800680a:	f104 041a 	add.w	r4, r4, #26
 800680e:	bf08      	it	eq
 8006810:	1aed      	subeq	r5, r5, r3
 8006812:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006816:	bf08      	it	eq
 8006818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800681c:	4293      	cmp	r3, r2
 800681e:	bfc4      	itt	gt
 8006820:	1a9b      	subgt	r3, r3, r2
 8006822:	18ed      	addgt	r5, r5, r3
 8006824:	42b5      	cmp	r5, r6
 8006826:	d11a      	bne.n	800685e <_printf_common+0xd2>
 8006828:	2000      	movs	r0, #0
 800682a:	e008      	b.n	800683e <_printf_common+0xb2>
 800682c:	2301      	movs	r3, #1
 800682e:	4652      	mov	r2, sl
 8006830:	4641      	mov	r1, r8
 8006832:	4638      	mov	r0, r7
 8006834:	47c8      	blx	r9
 8006836:	3001      	adds	r0, #1
 8006838:	d103      	bne.n	8006842 <_printf_common+0xb6>
 800683a:	f04f 30ff 	mov.w	r0, #4294967295
 800683e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006842:	3501      	adds	r5, #1
 8006844:	e7c1      	b.n	80067ca <_printf_common+0x3e>
 8006846:	2030      	movs	r0, #48	@ 0x30
 8006848:	18e1      	adds	r1, r4, r3
 800684a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006854:	4422      	add	r2, r4
 8006856:	3302      	adds	r3, #2
 8006858:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800685c:	e7c2      	b.n	80067e4 <_printf_common+0x58>
 800685e:	2301      	movs	r3, #1
 8006860:	4622      	mov	r2, r4
 8006862:	4641      	mov	r1, r8
 8006864:	4638      	mov	r0, r7
 8006866:	47c8      	blx	r9
 8006868:	3001      	adds	r0, #1
 800686a:	d0e6      	beq.n	800683a <_printf_common+0xae>
 800686c:	3601      	adds	r6, #1
 800686e:	e7d9      	b.n	8006824 <_printf_common+0x98>

08006870 <_printf_i>:
 8006870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006874:	7e0f      	ldrb	r7, [r1, #24]
 8006876:	4691      	mov	r9, r2
 8006878:	2f78      	cmp	r7, #120	@ 0x78
 800687a:	4680      	mov	r8, r0
 800687c:	460c      	mov	r4, r1
 800687e:	469a      	mov	sl, r3
 8006880:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006882:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006886:	d807      	bhi.n	8006898 <_printf_i+0x28>
 8006888:	2f62      	cmp	r7, #98	@ 0x62
 800688a:	d80a      	bhi.n	80068a2 <_printf_i+0x32>
 800688c:	2f00      	cmp	r7, #0
 800688e:	f000 80d3 	beq.w	8006a38 <_printf_i+0x1c8>
 8006892:	2f58      	cmp	r7, #88	@ 0x58
 8006894:	f000 80ba 	beq.w	8006a0c <_printf_i+0x19c>
 8006898:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800689c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80068a0:	e03a      	b.n	8006918 <_printf_i+0xa8>
 80068a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80068a6:	2b15      	cmp	r3, #21
 80068a8:	d8f6      	bhi.n	8006898 <_printf_i+0x28>
 80068aa:	a101      	add	r1, pc, #4	@ (adr r1, 80068b0 <_printf_i+0x40>)
 80068ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068b0:	08006909 	.word	0x08006909
 80068b4:	0800691d 	.word	0x0800691d
 80068b8:	08006899 	.word	0x08006899
 80068bc:	08006899 	.word	0x08006899
 80068c0:	08006899 	.word	0x08006899
 80068c4:	08006899 	.word	0x08006899
 80068c8:	0800691d 	.word	0x0800691d
 80068cc:	08006899 	.word	0x08006899
 80068d0:	08006899 	.word	0x08006899
 80068d4:	08006899 	.word	0x08006899
 80068d8:	08006899 	.word	0x08006899
 80068dc:	08006a1f 	.word	0x08006a1f
 80068e0:	08006947 	.word	0x08006947
 80068e4:	080069d9 	.word	0x080069d9
 80068e8:	08006899 	.word	0x08006899
 80068ec:	08006899 	.word	0x08006899
 80068f0:	08006a41 	.word	0x08006a41
 80068f4:	08006899 	.word	0x08006899
 80068f8:	08006947 	.word	0x08006947
 80068fc:	08006899 	.word	0x08006899
 8006900:	08006899 	.word	0x08006899
 8006904:	080069e1 	.word	0x080069e1
 8006908:	6833      	ldr	r3, [r6, #0]
 800690a:	1d1a      	adds	r2, r3, #4
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	6032      	str	r2, [r6, #0]
 8006910:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006914:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006918:	2301      	movs	r3, #1
 800691a:	e09e      	b.n	8006a5a <_printf_i+0x1ea>
 800691c:	6833      	ldr	r3, [r6, #0]
 800691e:	6820      	ldr	r0, [r4, #0]
 8006920:	1d19      	adds	r1, r3, #4
 8006922:	6031      	str	r1, [r6, #0]
 8006924:	0606      	lsls	r6, r0, #24
 8006926:	d501      	bpl.n	800692c <_printf_i+0xbc>
 8006928:	681d      	ldr	r5, [r3, #0]
 800692a:	e003      	b.n	8006934 <_printf_i+0xc4>
 800692c:	0645      	lsls	r5, r0, #25
 800692e:	d5fb      	bpl.n	8006928 <_printf_i+0xb8>
 8006930:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006934:	2d00      	cmp	r5, #0
 8006936:	da03      	bge.n	8006940 <_printf_i+0xd0>
 8006938:	232d      	movs	r3, #45	@ 0x2d
 800693a:	426d      	negs	r5, r5
 800693c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006940:	230a      	movs	r3, #10
 8006942:	4859      	ldr	r0, [pc, #356]	@ (8006aa8 <_printf_i+0x238>)
 8006944:	e011      	b.n	800696a <_printf_i+0xfa>
 8006946:	6821      	ldr	r1, [r4, #0]
 8006948:	6833      	ldr	r3, [r6, #0]
 800694a:	0608      	lsls	r0, r1, #24
 800694c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006950:	d402      	bmi.n	8006958 <_printf_i+0xe8>
 8006952:	0649      	lsls	r1, r1, #25
 8006954:	bf48      	it	mi
 8006956:	b2ad      	uxthmi	r5, r5
 8006958:	2f6f      	cmp	r7, #111	@ 0x6f
 800695a:	6033      	str	r3, [r6, #0]
 800695c:	bf14      	ite	ne
 800695e:	230a      	movne	r3, #10
 8006960:	2308      	moveq	r3, #8
 8006962:	4851      	ldr	r0, [pc, #324]	@ (8006aa8 <_printf_i+0x238>)
 8006964:	2100      	movs	r1, #0
 8006966:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800696a:	6866      	ldr	r6, [r4, #4]
 800696c:	2e00      	cmp	r6, #0
 800696e:	bfa8      	it	ge
 8006970:	6821      	ldrge	r1, [r4, #0]
 8006972:	60a6      	str	r6, [r4, #8]
 8006974:	bfa4      	itt	ge
 8006976:	f021 0104 	bicge.w	r1, r1, #4
 800697a:	6021      	strge	r1, [r4, #0]
 800697c:	b90d      	cbnz	r5, 8006982 <_printf_i+0x112>
 800697e:	2e00      	cmp	r6, #0
 8006980:	d04b      	beq.n	8006a1a <_printf_i+0x1aa>
 8006982:	4616      	mov	r6, r2
 8006984:	fbb5 f1f3 	udiv	r1, r5, r3
 8006988:	fb03 5711 	mls	r7, r3, r1, r5
 800698c:	5dc7      	ldrb	r7, [r0, r7]
 800698e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006992:	462f      	mov	r7, r5
 8006994:	42bb      	cmp	r3, r7
 8006996:	460d      	mov	r5, r1
 8006998:	d9f4      	bls.n	8006984 <_printf_i+0x114>
 800699a:	2b08      	cmp	r3, #8
 800699c:	d10b      	bne.n	80069b6 <_printf_i+0x146>
 800699e:	6823      	ldr	r3, [r4, #0]
 80069a0:	07df      	lsls	r7, r3, #31
 80069a2:	d508      	bpl.n	80069b6 <_printf_i+0x146>
 80069a4:	6923      	ldr	r3, [r4, #16]
 80069a6:	6861      	ldr	r1, [r4, #4]
 80069a8:	4299      	cmp	r1, r3
 80069aa:	bfde      	ittt	le
 80069ac:	2330      	movle	r3, #48	@ 0x30
 80069ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069b6:	1b92      	subs	r2, r2, r6
 80069b8:	6122      	str	r2, [r4, #16]
 80069ba:	464b      	mov	r3, r9
 80069bc:	4621      	mov	r1, r4
 80069be:	4640      	mov	r0, r8
 80069c0:	f8cd a000 	str.w	sl, [sp]
 80069c4:	aa03      	add	r2, sp, #12
 80069c6:	f7ff fee1 	bl	800678c <_printf_common>
 80069ca:	3001      	adds	r0, #1
 80069cc:	d14a      	bne.n	8006a64 <_printf_i+0x1f4>
 80069ce:	f04f 30ff 	mov.w	r0, #4294967295
 80069d2:	b004      	add	sp, #16
 80069d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	f043 0320 	orr.w	r3, r3, #32
 80069de:	6023      	str	r3, [r4, #0]
 80069e0:	2778      	movs	r7, #120	@ 0x78
 80069e2:	4832      	ldr	r0, [pc, #200]	@ (8006aac <_printf_i+0x23c>)
 80069e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	6831      	ldr	r1, [r6, #0]
 80069ec:	061f      	lsls	r7, r3, #24
 80069ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80069f2:	d402      	bmi.n	80069fa <_printf_i+0x18a>
 80069f4:	065f      	lsls	r7, r3, #25
 80069f6:	bf48      	it	mi
 80069f8:	b2ad      	uxthmi	r5, r5
 80069fa:	6031      	str	r1, [r6, #0]
 80069fc:	07d9      	lsls	r1, r3, #31
 80069fe:	bf44      	itt	mi
 8006a00:	f043 0320 	orrmi.w	r3, r3, #32
 8006a04:	6023      	strmi	r3, [r4, #0]
 8006a06:	b11d      	cbz	r5, 8006a10 <_printf_i+0x1a0>
 8006a08:	2310      	movs	r3, #16
 8006a0a:	e7ab      	b.n	8006964 <_printf_i+0xf4>
 8006a0c:	4826      	ldr	r0, [pc, #152]	@ (8006aa8 <_printf_i+0x238>)
 8006a0e:	e7e9      	b.n	80069e4 <_printf_i+0x174>
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	f023 0320 	bic.w	r3, r3, #32
 8006a16:	6023      	str	r3, [r4, #0]
 8006a18:	e7f6      	b.n	8006a08 <_printf_i+0x198>
 8006a1a:	4616      	mov	r6, r2
 8006a1c:	e7bd      	b.n	800699a <_printf_i+0x12a>
 8006a1e:	6833      	ldr	r3, [r6, #0]
 8006a20:	6825      	ldr	r5, [r4, #0]
 8006a22:	1d18      	adds	r0, r3, #4
 8006a24:	6961      	ldr	r1, [r4, #20]
 8006a26:	6030      	str	r0, [r6, #0]
 8006a28:	062e      	lsls	r6, r5, #24
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	d501      	bpl.n	8006a32 <_printf_i+0x1c2>
 8006a2e:	6019      	str	r1, [r3, #0]
 8006a30:	e002      	b.n	8006a38 <_printf_i+0x1c8>
 8006a32:	0668      	lsls	r0, r5, #25
 8006a34:	d5fb      	bpl.n	8006a2e <_printf_i+0x1be>
 8006a36:	8019      	strh	r1, [r3, #0]
 8006a38:	2300      	movs	r3, #0
 8006a3a:	4616      	mov	r6, r2
 8006a3c:	6123      	str	r3, [r4, #16]
 8006a3e:	e7bc      	b.n	80069ba <_printf_i+0x14a>
 8006a40:	6833      	ldr	r3, [r6, #0]
 8006a42:	2100      	movs	r1, #0
 8006a44:	1d1a      	adds	r2, r3, #4
 8006a46:	6032      	str	r2, [r6, #0]
 8006a48:	681e      	ldr	r6, [r3, #0]
 8006a4a:	6862      	ldr	r2, [r4, #4]
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	f000 fc32 	bl	80072b6 <memchr>
 8006a52:	b108      	cbz	r0, 8006a58 <_printf_i+0x1e8>
 8006a54:	1b80      	subs	r0, r0, r6
 8006a56:	6060      	str	r0, [r4, #4]
 8006a58:	6863      	ldr	r3, [r4, #4]
 8006a5a:	6123      	str	r3, [r4, #16]
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a62:	e7aa      	b.n	80069ba <_printf_i+0x14a>
 8006a64:	4632      	mov	r2, r6
 8006a66:	4649      	mov	r1, r9
 8006a68:	4640      	mov	r0, r8
 8006a6a:	6923      	ldr	r3, [r4, #16]
 8006a6c:	47d0      	blx	sl
 8006a6e:	3001      	adds	r0, #1
 8006a70:	d0ad      	beq.n	80069ce <_printf_i+0x15e>
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	079b      	lsls	r3, r3, #30
 8006a76:	d413      	bmi.n	8006aa0 <_printf_i+0x230>
 8006a78:	68e0      	ldr	r0, [r4, #12]
 8006a7a:	9b03      	ldr	r3, [sp, #12]
 8006a7c:	4298      	cmp	r0, r3
 8006a7e:	bfb8      	it	lt
 8006a80:	4618      	movlt	r0, r3
 8006a82:	e7a6      	b.n	80069d2 <_printf_i+0x162>
 8006a84:	2301      	movs	r3, #1
 8006a86:	4632      	mov	r2, r6
 8006a88:	4649      	mov	r1, r9
 8006a8a:	4640      	mov	r0, r8
 8006a8c:	47d0      	blx	sl
 8006a8e:	3001      	adds	r0, #1
 8006a90:	d09d      	beq.n	80069ce <_printf_i+0x15e>
 8006a92:	3501      	adds	r5, #1
 8006a94:	68e3      	ldr	r3, [r4, #12]
 8006a96:	9903      	ldr	r1, [sp, #12]
 8006a98:	1a5b      	subs	r3, r3, r1
 8006a9a:	42ab      	cmp	r3, r5
 8006a9c:	dcf2      	bgt.n	8006a84 <_printf_i+0x214>
 8006a9e:	e7eb      	b.n	8006a78 <_printf_i+0x208>
 8006aa0:	2500      	movs	r5, #0
 8006aa2:	f104 0619 	add.w	r6, r4, #25
 8006aa6:	e7f5      	b.n	8006a94 <_printf_i+0x224>
 8006aa8:	0800d204 	.word	0x0800d204
 8006aac:	0800d215 	.word	0x0800d215

08006ab0 <_scanf_float>:
 8006ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab4:	b087      	sub	sp, #28
 8006ab6:	9303      	str	r3, [sp, #12]
 8006ab8:	688b      	ldr	r3, [r1, #8]
 8006aba:	4617      	mov	r7, r2
 8006abc:	1e5a      	subs	r2, r3, #1
 8006abe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006ac2:	bf82      	ittt	hi
 8006ac4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006ac8:	eb03 0b05 	addhi.w	fp, r3, r5
 8006acc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006ad0:	460a      	mov	r2, r1
 8006ad2:	f04f 0500 	mov.w	r5, #0
 8006ad6:	bf88      	it	hi
 8006ad8:	608b      	strhi	r3, [r1, #8]
 8006ada:	680b      	ldr	r3, [r1, #0]
 8006adc:	4680      	mov	r8, r0
 8006ade:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006ae2:	f842 3b1c 	str.w	r3, [r2], #28
 8006ae6:	460c      	mov	r4, r1
 8006ae8:	bf98      	it	ls
 8006aea:	f04f 0b00 	movls.w	fp, #0
 8006aee:	4616      	mov	r6, r2
 8006af0:	46aa      	mov	sl, r5
 8006af2:	46a9      	mov	r9, r5
 8006af4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006af8:	9201      	str	r2, [sp, #4]
 8006afa:	9502      	str	r5, [sp, #8]
 8006afc:	68a2      	ldr	r2, [r4, #8]
 8006afe:	b152      	cbz	r2, 8006b16 <_scanf_float+0x66>
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	2b4e      	cmp	r3, #78	@ 0x4e
 8006b06:	d865      	bhi.n	8006bd4 <_scanf_float+0x124>
 8006b08:	2b40      	cmp	r3, #64	@ 0x40
 8006b0a:	d83d      	bhi.n	8006b88 <_scanf_float+0xd8>
 8006b0c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006b10:	b2c8      	uxtb	r0, r1
 8006b12:	280e      	cmp	r0, #14
 8006b14:	d93b      	bls.n	8006b8e <_scanf_float+0xde>
 8006b16:	f1b9 0f00 	cmp.w	r9, #0
 8006b1a:	d003      	beq.n	8006b24 <_scanf_float+0x74>
 8006b1c:	6823      	ldr	r3, [r4, #0]
 8006b1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b22:	6023      	str	r3, [r4, #0]
 8006b24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b28:	f1ba 0f01 	cmp.w	sl, #1
 8006b2c:	f200 8118 	bhi.w	8006d60 <_scanf_float+0x2b0>
 8006b30:	9b01      	ldr	r3, [sp, #4]
 8006b32:	429e      	cmp	r6, r3
 8006b34:	f200 8109 	bhi.w	8006d4a <_scanf_float+0x29a>
 8006b38:	2001      	movs	r0, #1
 8006b3a:	b007      	add	sp, #28
 8006b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b40:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006b44:	2a0d      	cmp	r2, #13
 8006b46:	d8e6      	bhi.n	8006b16 <_scanf_float+0x66>
 8006b48:	a101      	add	r1, pc, #4	@ (adr r1, 8006b50 <_scanf_float+0xa0>)
 8006b4a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006b4e:	bf00      	nop
 8006b50:	08006c97 	.word	0x08006c97
 8006b54:	08006b17 	.word	0x08006b17
 8006b58:	08006b17 	.word	0x08006b17
 8006b5c:	08006b17 	.word	0x08006b17
 8006b60:	08006cf7 	.word	0x08006cf7
 8006b64:	08006ccf 	.word	0x08006ccf
 8006b68:	08006b17 	.word	0x08006b17
 8006b6c:	08006b17 	.word	0x08006b17
 8006b70:	08006ca5 	.word	0x08006ca5
 8006b74:	08006b17 	.word	0x08006b17
 8006b78:	08006b17 	.word	0x08006b17
 8006b7c:	08006b17 	.word	0x08006b17
 8006b80:	08006b17 	.word	0x08006b17
 8006b84:	08006c5d 	.word	0x08006c5d
 8006b88:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006b8c:	e7da      	b.n	8006b44 <_scanf_float+0x94>
 8006b8e:	290e      	cmp	r1, #14
 8006b90:	d8c1      	bhi.n	8006b16 <_scanf_float+0x66>
 8006b92:	a001      	add	r0, pc, #4	@ (adr r0, 8006b98 <_scanf_float+0xe8>)
 8006b94:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006b98:	08006c4d 	.word	0x08006c4d
 8006b9c:	08006b17 	.word	0x08006b17
 8006ba0:	08006c4d 	.word	0x08006c4d
 8006ba4:	08006ce3 	.word	0x08006ce3
 8006ba8:	08006b17 	.word	0x08006b17
 8006bac:	08006bf5 	.word	0x08006bf5
 8006bb0:	08006c33 	.word	0x08006c33
 8006bb4:	08006c33 	.word	0x08006c33
 8006bb8:	08006c33 	.word	0x08006c33
 8006bbc:	08006c33 	.word	0x08006c33
 8006bc0:	08006c33 	.word	0x08006c33
 8006bc4:	08006c33 	.word	0x08006c33
 8006bc8:	08006c33 	.word	0x08006c33
 8006bcc:	08006c33 	.word	0x08006c33
 8006bd0:	08006c33 	.word	0x08006c33
 8006bd4:	2b6e      	cmp	r3, #110	@ 0x6e
 8006bd6:	d809      	bhi.n	8006bec <_scanf_float+0x13c>
 8006bd8:	2b60      	cmp	r3, #96	@ 0x60
 8006bda:	d8b1      	bhi.n	8006b40 <_scanf_float+0x90>
 8006bdc:	2b54      	cmp	r3, #84	@ 0x54
 8006bde:	d07b      	beq.n	8006cd8 <_scanf_float+0x228>
 8006be0:	2b59      	cmp	r3, #89	@ 0x59
 8006be2:	d198      	bne.n	8006b16 <_scanf_float+0x66>
 8006be4:	2d07      	cmp	r5, #7
 8006be6:	d196      	bne.n	8006b16 <_scanf_float+0x66>
 8006be8:	2508      	movs	r5, #8
 8006bea:	e02c      	b.n	8006c46 <_scanf_float+0x196>
 8006bec:	2b74      	cmp	r3, #116	@ 0x74
 8006bee:	d073      	beq.n	8006cd8 <_scanf_float+0x228>
 8006bf0:	2b79      	cmp	r3, #121	@ 0x79
 8006bf2:	e7f6      	b.n	8006be2 <_scanf_float+0x132>
 8006bf4:	6821      	ldr	r1, [r4, #0]
 8006bf6:	05c8      	lsls	r0, r1, #23
 8006bf8:	d51b      	bpl.n	8006c32 <_scanf_float+0x182>
 8006bfa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006bfe:	6021      	str	r1, [r4, #0]
 8006c00:	f109 0901 	add.w	r9, r9, #1
 8006c04:	f1bb 0f00 	cmp.w	fp, #0
 8006c08:	d003      	beq.n	8006c12 <_scanf_float+0x162>
 8006c0a:	3201      	adds	r2, #1
 8006c0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c10:	60a2      	str	r2, [r4, #8]
 8006c12:	68a3      	ldr	r3, [r4, #8]
 8006c14:	3b01      	subs	r3, #1
 8006c16:	60a3      	str	r3, [r4, #8]
 8006c18:	6923      	ldr	r3, [r4, #16]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	6123      	str	r3, [r4, #16]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	3b01      	subs	r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	607b      	str	r3, [r7, #4]
 8006c26:	f340 8087 	ble.w	8006d38 <_scanf_float+0x288>
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	603b      	str	r3, [r7, #0]
 8006c30:	e764      	b.n	8006afc <_scanf_float+0x4c>
 8006c32:	eb1a 0105 	adds.w	r1, sl, r5
 8006c36:	f47f af6e 	bne.w	8006b16 <_scanf_float+0x66>
 8006c3a:	460d      	mov	r5, r1
 8006c3c:	468a      	mov	sl, r1
 8006c3e:	6822      	ldr	r2, [r4, #0]
 8006c40:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006c44:	6022      	str	r2, [r4, #0]
 8006c46:	f806 3b01 	strb.w	r3, [r6], #1
 8006c4a:	e7e2      	b.n	8006c12 <_scanf_float+0x162>
 8006c4c:	6822      	ldr	r2, [r4, #0]
 8006c4e:	0610      	lsls	r0, r2, #24
 8006c50:	f57f af61 	bpl.w	8006b16 <_scanf_float+0x66>
 8006c54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c58:	6022      	str	r2, [r4, #0]
 8006c5a:	e7f4      	b.n	8006c46 <_scanf_float+0x196>
 8006c5c:	f1ba 0f00 	cmp.w	sl, #0
 8006c60:	d10e      	bne.n	8006c80 <_scanf_float+0x1d0>
 8006c62:	f1b9 0f00 	cmp.w	r9, #0
 8006c66:	d10e      	bne.n	8006c86 <_scanf_float+0x1d6>
 8006c68:	6822      	ldr	r2, [r4, #0]
 8006c6a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006c6e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006c72:	d108      	bne.n	8006c86 <_scanf_float+0x1d6>
 8006c74:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006c78:	f04f 0a01 	mov.w	sl, #1
 8006c7c:	6022      	str	r2, [r4, #0]
 8006c7e:	e7e2      	b.n	8006c46 <_scanf_float+0x196>
 8006c80:	f1ba 0f02 	cmp.w	sl, #2
 8006c84:	d055      	beq.n	8006d32 <_scanf_float+0x282>
 8006c86:	2d01      	cmp	r5, #1
 8006c88:	d002      	beq.n	8006c90 <_scanf_float+0x1e0>
 8006c8a:	2d04      	cmp	r5, #4
 8006c8c:	f47f af43 	bne.w	8006b16 <_scanf_float+0x66>
 8006c90:	3501      	adds	r5, #1
 8006c92:	b2ed      	uxtb	r5, r5
 8006c94:	e7d7      	b.n	8006c46 <_scanf_float+0x196>
 8006c96:	f1ba 0f01 	cmp.w	sl, #1
 8006c9a:	f47f af3c 	bne.w	8006b16 <_scanf_float+0x66>
 8006c9e:	f04f 0a02 	mov.w	sl, #2
 8006ca2:	e7d0      	b.n	8006c46 <_scanf_float+0x196>
 8006ca4:	b97d      	cbnz	r5, 8006cc6 <_scanf_float+0x216>
 8006ca6:	f1b9 0f00 	cmp.w	r9, #0
 8006caa:	f47f af37 	bne.w	8006b1c <_scanf_float+0x6c>
 8006cae:	6822      	ldr	r2, [r4, #0]
 8006cb0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006cb4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006cb8:	f040 8103 	bne.w	8006ec2 <_scanf_float+0x412>
 8006cbc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006cc0:	2501      	movs	r5, #1
 8006cc2:	6022      	str	r2, [r4, #0]
 8006cc4:	e7bf      	b.n	8006c46 <_scanf_float+0x196>
 8006cc6:	2d03      	cmp	r5, #3
 8006cc8:	d0e2      	beq.n	8006c90 <_scanf_float+0x1e0>
 8006cca:	2d05      	cmp	r5, #5
 8006ccc:	e7de      	b.n	8006c8c <_scanf_float+0x1dc>
 8006cce:	2d02      	cmp	r5, #2
 8006cd0:	f47f af21 	bne.w	8006b16 <_scanf_float+0x66>
 8006cd4:	2503      	movs	r5, #3
 8006cd6:	e7b6      	b.n	8006c46 <_scanf_float+0x196>
 8006cd8:	2d06      	cmp	r5, #6
 8006cda:	f47f af1c 	bne.w	8006b16 <_scanf_float+0x66>
 8006cde:	2507      	movs	r5, #7
 8006ce0:	e7b1      	b.n	8006c46 <_scanf_float+0x196>
 8006ce2:	6822      	ldr	r2, [r4, #0]
 8006ce4:	0591      	lsls	r1, r2, #22
 8006ce6:	f57f af16 	bpl.w	8006b16 <_scanf_float+0x66>
 8006cea:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006cee:	6022      	str	r2, [r4, #0]
 8006cf0:	f8cd 9008 	str.w	r9, [sp, #8]
 8006cf4:	e7a7      	b.n	8006c46 <_scanf_float+0x196>
 8006cf6:	6822      	ldr	r2, [r4, #0]
 8006cf8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006cfc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006d00:	d006      	beq.n	8006d10 <_scanf_float+0x260>
 8006d02:	0550      	lsls	r0, r2, #21
 8006d04:	f57f af07 	bpl.w	8006b16 <_scanf_float+0x66>
 8006d08:	f1b9 0f00 	cmp.w	r9, #0
 8006d0c:	f000 80d9 	beq.w	8006ec2 <_scanf_float+0x412>
 8006d10:	0591      	lsls	r1, r2, #22
 8006d12:	bf58      	it	pl
 8006d14:	9902      	ldrpl	r1, [sp, #8]
 8006d16:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006d1a:	bf58      	it	pl
 8006d1c:	eba9 0101 	subpl.w	r1, r9, r1
 8006d20:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006d24:	f04f 0900 	mov.w	r9, #0
 8006d28:	bf58      	it	pl
 8006d2a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006d2e:	6022      	str	r2, [r4, #0]
 8006d30:	e789      	b.n	8006c46 <_scanf_float+0x196>
 8006d32:	f04f 0a03 	mov.w	sl, #3
 8006d36:	e786      	b.n	8006c46 <_scanf_float+0x196>
 8006d38:	4639      	mov	r1, r7
 8006d3a:	4640      	mov	r0, r8
 8006d3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006d40:	4798      	blx	r3
 8006d42:	2800      	cmp	r0, #0
 8006d44:	f43f aeda 	beq.w	8006afc <_scanf_float+0x4c>
 8006d48:	e6e5      	b.n	8006b16 <_scanf_float+0x66>
 8006d4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d4e:	463a      	mov	r2, r7
 8006d50:	4640      	mov	r0, r8
 8006d52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d56:	4798      	blx	r3
 8006d58:	6923      	ldr	r3, [r4, #16]
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	6123      	str	r3, [r4, #16]
 8006d5e:	e6e7      	b.n	8006b30 <_scanf_float+0x80>
 8006d60:	1e6b      	subs	r3, r5, #1
 8006d62:	2b06      	cmp	r3, #6
 8006d64:	d824      	bhi.n	8006db0 <_scanf_float+0x300>
 8006d66:	2d02      	cmp	r5, #2
 8006d68:	d836      	bhi.n	8006dd8 <_scanf_float+0x328>
 8006d6a:	9b01      	ldr	r3, [sp, #4]
 8006d6c:	429e      	cmp	r6, r3
 8006d6e:	f67f aee3 	bls.w	8006b38 <_scanf_float+0x88>
 8006d72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d76:	463a      	mov	r2, r7
 8006d78:	4640      	mov	r0, r8
 8006d7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d7e:	4798      	blx	r3
 8006d80:	6923      	ldr	r3, [r4, #16]
 8006d82:	3b01      	subs	r3, #1
 8006d84:	6123      	str	r3, [r4, #16]
 8006d86:	e7f0      	b.n	8006d6a <_scanf_float+0x2ba>
 8006d88:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d8c:	463a      	mov	r2, r7
 8006d8e:	4640      	mov	r0, r8
 8006d90:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006d94:	4798      	blx	r3
 8006d96:	6923      	ldr	r3, [r4, #16]
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	6123      	str	r3, [r4, #16]
 8006d9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006da0:	fa5f fa8a 	uxtb.w	sl, sl
 8006da4:	f1ba 0f02 	cmp.w	sl, #2
 8006da8:	d1ee      	bne.n	8006d88 <_scanf_float+0x2d8>
 8006daa:	3d03      	subs	r5, #3
 8006dac:	b2ed      	uxtb	r5, r5
 8006dae:	1b76      	subs	r6, r6, r5
 8006db0:	6823      	ldr	r3, [r4, #0]
 8006db2:	05da      	lsls	r2, r3, #23
 8006db4:	d530      	bpl.n	8006e18 <_scanf_float+0x368>
 8006db6:	055b      	lsls	r3, r3, #21
 8006db8:	d511      	bpl.n	8006dde <_scanf_float+0x32e>
 8006dba:	9b01      	ldr	r3, [sp, #4]
 8006dbc:	429e      	cmp	r6, r3
 8006dbe:	f67f aebb 	bls.w	8006b38 <_scanf_float+0x88>
 8006dc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006dc6:	463a      	mov	r2, r7
 8006dc8:	4640      	mov	r0, r8
 8006dca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006dce:	4798      	blx	r3
 8006dd0:	6923      	ldr	r3, [r4, #16]
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	6123      	str	r3, [r4, #16]
 8006dd6:	e7f0      	b.n	8006dba <_scanf_float+0x30a>
 8006dd8:	46aa      	mov	sl, r5
 8006dda:	46b3      	mov	fp, r6
 8006ddc:	e7de      	b.n	8006d9c <_scanf_float+0x2ec>
 8006dde:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006de2:	6923      	ldr	r3, [r4, #16]
 8006de4:	2965      	cmp	r1, #101	@ 0x65
 8006de6:	f103 33ff 	add.w	r3, r3, #4294967295
 8006dea:	f106 35ff 	add.w	r5, r6, #4294967295
 8006dee:	6123      	str	r3, [r4, #16]
 8006df0:	d00c      	beq.n	8006e0c <_scanf_float+0x35c>
 8006df2:	2945      	cmp	r1, #69	@ 0x45
 8006df4:	d00a      	beq.n	8006e0c <_scanf_float+0x35c>
 8006df6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006dfa:	463a      	mov	r2, r7
 8006dfc:	4640      	mov	r0, r8
 8006dfe:	4798      	blx	r3
 8006e00:	6923      	ldr	r3, [r4, #16]
 8006e02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006e06:	3b01      	subs	r3, #1
 8006e08:	1eb5      	subs	r5, r6, #2
 8006e0a:	6123      	str	r3, [r4, #16]
 8006e0c:	463a      	mov	r2, r7
 8006e0e:	4640      	mov	r0, r8
 8006e10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006e14:	4798      	blx	r3
 8006e16:	462e      	mov	r6, r5
 8006e18:	6822      	ldr	r2, [r4, #0]
 8006e1a:	f012 0210 	ands.w	r2, r2, #16
 8006e1e:	d001      	beq.n	8006e24 <_scanf_float+0x374>
 8006e20:	2000      	movs	r0, #0
 8006e22:	e68a      	b.n	8006b3a <_scanf_float+0x8a>
 8006e24:	7032      	strb	r2, [r6, #0]
 8006e26:	6823      	ldr	r3, [r4, #0]
 8006e28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006e2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e30:	d11c      	bne.n	8006e6c <_scanf_float+0x3bc>
 8006e32:	9b02      	ldr	r3, [sp, #8]
 8006e34:	454b      	cmp	r3, r9
 8006e36:	eba3 0209 	sub.w	r2, r3, r9
 8006e3a:	d123      	bne.n	8006e84 <_scanf_float+0x3d4>
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	4640      	mov	r0, r8
 8006e40:	9901      	ldr	r1, [sp, #4]
 8006e42:	f002 fc49 	bl	80096d8 <_strtod_r>
 8006e46:	9b03      	ldr	r3, [sp, #12]
 8006e48:	6825      	ldr	r5, [r4, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f015 0f02 	tst.w	r5, #2
 8006e50:	4606      	mov	r6, r0
 8006e52:	460f      	mov	r7, r1
 8006e54:	f103 0204 	add.w	r2, r3, #4
 8006e58:	d01f      	beq.n	8006e9a <_scanf_float+0x3ea>
 8006e5a:	9903      	ldr	r1, [sp, #12]
 8006e5c:	600a      	str	r2, [r1, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	e9c3 6700 	strd	r6, r7, [r3]
 8006e64:	68e3      	ldr	r3, [r4, #12]
 8006e66:	3301      	adds	r3, #1
 8006e68:	60e3      	str	r3, [r4, #12]
 8006e6a:	e7d9      	b.n	8006e20 <_scanf_float+0x370>
 8006e6c:	9b04      	ldr	r3, [sp, #16]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d0e4      	beq.n	8006e3c <_scanf_float+0x38c>
 8006e72:	9905      	ldr	r1, [sp, #20]
 8006e74:	230a      	movs	r3, #10
 8006e76:	4640      	mov	r0, r8
 8006e78:	3101      	adds	r1, #1
 8006e7a:	f002 fcad 	bl	80097d8 <_strtol_r>
 8006e7e:	9b04      	ldr	r3, [sp, #16]
 8006e80:	9e05      	ldr	r6, [sp, #20]
 8006e82:	1ac2      	subs	r2, r0, r3
 8006e84:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006e88:	429e      	cmp	r6, r3
 8006e8a:	bf28      	it	cs
 8006e8c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006e90:	4630      	mov	r0, r6
 8006e92:	490d      	ldr	r1, [pc, #52]	@ (8006ec8 <_scanf_float+0x418>)
 8006e94:	f000 f912 	bl	80070bc <siprintf>
 8006e98:	e7d0      	b.n	8006e3c <_scanf_float+0x38c>
 8006e9a:	076d      	lsls	r5, r5, #29
 8006e9c:	d4dd      	bmi.n	8006e5a <_scanf_float+0x3aa>
 8006e9e:	9d03      	ldr	r5, [sp, #12]
 8006ea0:	602a      	str	r2, [r5, #0]
 8006ea2:	681d      	ldr	r5, [r3, #0]
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	f7f9 fdb0 	bl	8000a0c <__aeabi_dcmpun>
 8006eac:	b120      	cbz	r0, 8006eb8 <_scanf_float+0x408>
 8006eae:	4807      	ldr	r0, [pc, #28]	@ (8006ecc <_scanf_float+0x41c>)
 8006eb0:	f000 fa1e 	bl	80072f0 <nanf>
 8006eb4:	6028      	str	r0, [r5, #0]
 8006eb6:	e7d5      	b.n	8006e64 <_scanf_float+0x3b4>
 8006eb8:	4630      	mov	r0, r6
 8006eba:	4639      	mov	r1, r7
 8006ebc:	f7f9 fe04 	bl	8000ac8 <__aeabi_d2f>
 8006ec0:	e7f8      	b.n	8006eb4 <_scanf_float+0x404>
 8006ec2:	f04f 0900 	mov.w	r9, #0
 8006ec6:	e62d      	b.n	8006b24 <_scanf_float+0x74>
 8006ec8:	0800d226 	.word	0x0800d226
 8006ecc:	0800d5bd 	.word	0x0800d5bd

08006ed0 <std>:
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	b510      	push	{r4, lr}
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	e9c0 3300 	strd	r3, r3, [r0]
 8006eda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ede:	6083      	str	r3, [r0, #8]
 8006ee0:	8181      	strh	r1, [r0, #12]
 8006ee2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006ee4:	81c2      	strh	r2, [r0, #14]
 8006ee6:	6183      	str	r3, [r0, #24]
 8006ee8:	4619      	mov	r1, r3
 8006eea:	2208      	movs	r2, #8
 8006eec:	305c      	adds	r0, #92	@ 0x5c
 8006eee:	f000 f962 	bl	80071b6 <memset>
 8006ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8006f28 <std+0x58>)
 8006ef4:	6224      	str	r4, [r4, #32]
 8006ef6:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8006f2c <std+0x5c>)
 8006efa:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006efc:	4b0c      	ldr	r3, [pc, #48]	@ (8006f30 <std+0x60>)
 8006efe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006f00:	4b0c      	ldr	r3, [pc, #48]	@ (8006f34 <std+0x64>)
 8006f02:	6323      	str	r3, [r4, #48]	@ 0x30
 8006f04:	4b0c      	ldr	r3, [pc, #48]	@ (8006f38 <std+0x68>)
 8006f06:	429c      	cmp	r4, r3
 8006f08:	d006      	beq.n	8006f18 <std+0x48>
 8006f0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006f0e:	4294      	cmp	r4, r2
 8006f10:	d002      	beq.n	8006f18 <std+0x48>
 8006f12:	33d0      	adds	r3, #208	@ 0xd0
 8006f14:	429c      	cmp	r4, r3
 8006f16:	d105      	bne.n	8006f24 <std+0x54>
 8006f18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f20:	f000 b9c6 	b.w	80072b0 <__retarget_lock_init_recursive>
 8006f24:	bd10      	pop	{r4, pc}
 8006f26:	bf00      	nop
 8006f28:	080070fd 	.word	0x080070fd
 8006f2c:	0800711f 	.word	0x0800711f
 8006f30:	08007157 	.word	0x08007157
 8006f34:	0800717b 	.word	0x0800717b
 8006f38:	2000077c 	.word	0x2000077c

08006f3c <stdio_exit_handler>:
 8006f3c:	4a02      	ldr	r2, [pc, #8]	@ (8006f48 <stdio_exit_handler+0xc>)
 8006f3e:	4903      	ldr	r1, [pc, #12]	@ (8006f4c <stdio_exit_handler+0x10>)
 8006f40:	4803      	ldr	r0, [pc, #12]	@ (8006f50 <stdio_exit_handler+0x14>)
 8006f42:	f000 b869 	b.w	8007018 <_fwalk_sglue>
 8006f46:	bf00      	nop
 8006f48:	20000014 	.word	0x20000014
 8006f4c:	08009b8d 	.word	0x08009b8d
 8006f50:	20000024 	.word	0x20000024

08006f54 <cleanup_stdio>:
 8006f54:	6841      	ldr	r1, [r0, #4]
 8006f56:	4b0c      	ldr	r3, [pc, #48]	@ (8006f88 <cleanup_stdio+0x34>)
 8006f58:	b510      	push	{r4, lr}
 8006f5a:	4299      	cmp	r1, r3
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	d001      	beq.n	8006f64 <cleanup_stdio+0x10>
 8006f60:	f002 fe14 	bl	8009b8c <_fflush_r>
 8006f64:	68a1      	ldr	r1, [r4, #8]
 8006f66:	4b09      	ldr	r3, [pc, #36]	@ (8006f8c <cleanup_stdio+0x38>)
 8006f68:	4299      	cmp	r1, r3
 8006f6a:	d002      	beq.n	8006f72 <cleanup_stdio+0x1e>
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	f002 fe0d 	bl	8009b8c <_fflush_r>
 8006f72:	68e1      	ldr	r1, [r4, #12]
 8006f74:	4b06      	ldr	r3, [pc, #24]	@ (8006f90 <cleanup_stdio+0x3c>)
 8006f76:	4299      	cmp	r1, r3
 8006f78:	d004      	beq.n	8006f84 <cleanup_stdio+0x30>
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f80:	f002 be04 	b.w	8009b8c <_fflush_r>
 8006f84:	bd10      	pop	{r4, pc}
 8006f86:	bf00      	nop
 8006f88:	2000077c 	.word	0x2000077c
 8006f8c:	200007e4 	.word	0x200007e4
 8006f90:	2000084c 	.word	0x2000084c

08006f94 <global_stdio_init.part.0>:
 8006f94:	b510      	push	{r4, lr}
 8006f96:	4b0b      	ldr	r3, [pc, #44]	@ (8006fc4 <global_stdio_init.part.0+0x30>)
 8006f98:	4c0b      	ldr	r4, [pc, #44]	@ (8006fc8 <global_stdio_init.part.0+0x34>)
 8006f9a:	4a0c      	ldr	r2, [pc, #48]	@ (8006fcc <global_stdio_init.part.0+0x38>)
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	2104      	movs	r1, #4
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f7ff ff94 	bl	8006ed0 <std>
 8006fa8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006fac:	2201      	movs	r2, #1
 8006fae:	2109      	movs	r1, #9
 8006fb0:	f7ff ff8e 	bl	8006ed0 <std>
 8006fb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006fb8:	2202      	movs	r2, #2
 8006fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fbe:	2112      	movs	r1, #18
 8006fc0:	f7ff bf86 	b.w	8006ed0 <std>
 8006fc4:	200008b4 	.word	0x200008b4
 8006fc8:	2000077c 	.word	0x2000077c
 8006fcc:	08006f3d 	.word	0x08006f3d

08006fd0 <__sfp_lock_acquire>:
 8006fd0:	4801      	ldr	r0, [pc, #4]	@ (8006fd8 <__sfp_lock_acquire+0x8>)
 8006fd2:	f000 b96e 	b.w	80072b2 <__retarget_lock_acquire_recursive>
 8006fd6:	bf00      	nop
 8006fd8:	200008bd 	.word	0x200008bd

08006fdc <__sfp_lock_release>:
 8006fdc:	4801      	ldr	r0, [pc, #4]	@ (8006fe4 <__sfp_lock_release+0x8>)
 8006fde:	f000 b969 	b.w	80072b4 <__retarget_lock_release_recursive>
 8006fe2:	bf00      	nop
 8006fe4:	200008bd 	.word	0x200008bd

08006fe8 <__sinit>:
 8006fe8:	b510      	push	{r4, lr}
 8006fea:	4604      	mov	r4, r0
 8006fec:	f7ff fff0 	bl	8006fd0 <__sfp_lock_acquire>
 8006ff0:	6a23      	ldr	r3, [r4, #32]
 8006ff2:	b11b      	cbz	r3, 8006ffc <__sinit+0x14>
 8006ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ff8:	f7ff bff0 	b.w	8006fdc <__sfp_lock_release>
 8006ffc:	4b04      	ldr	r3, [pc, #16]	@ (8007010 <__sinit+0x28>)
 8006ffe:	6223      	str	r3, [r4, #32]
 8007000:	4b04      	ldr	r3, [pc, #16]	@ (8007014 <__sinit+0x2c>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1f5      	bne.n	8006ff4 <__sinit+0xc>
 8007008:	f7ff ffc4 	bl	8006f94 <global_stdio_init.part.0>
 800700c:	e7f2      	b.n	8006ff4 <__sinit+0xc>
 800700e:	bf00      	nop
 8007010:	08006f55 	.word	0x08006f55
 8007014:	200008b4 	.word	0x200008b4

08007018 <_fwalk_sglue>:
 8007018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800701c:	4607      	mov	r7, r0
 800701e:	4688      	mov	r8, r1
 8007020:	4614      	mov	r4, r2
 8007022:	2600      	movs	r6, #0
 8007024:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007028:	f1b9 0901 	subs.w	r9, r9, #1
 800702c:	d505      	bpl.n	800703a <_fwalk_sglue+0x22>
 800702e:	6824      	ldr	r4, [r4, #0]
 8007030:	2c00      	cmp	r4, #0
 8007032:	d1f7      	bne.n	8007024 <_fwalk_sglue+0xc>
 8007034:	4630      	mov	r0, r6
 8007036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800703a:	89ab      	ldrh	r3, [r5, #12]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d907      	bls.n	8007050 <_fwalk_sglue+0x38>
 8007040:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007044:	3301      	adds	r3, #1
 8007046:	d003      	beq.n	8007050 <_fwalk_sglue+0x38>
 8007048:	4629      	mov	r1, r5
 800704a:	4638      	mov	r0, r7
 800704c:	47c0      	blx	r8
 800704e:	4306      	orrs	r6, r0
 8007050:	3568      	adds	r5, #104	@ 0x68
 8007052:	e7e9      	b.n	8007028 <_fwalk_sglue+0x10>

08007054 <sniprintf>:
 8007054:	b40c      	push	{r2, r3}
 8007056:	b530      	push	{r4, r5, lr}
 8007058:	4b17      	ldr	r3, [pc, #92]	@ (80070b8 <sniprintf+0x64>)
 800705a:	1e0c      	subs	r4, r1, #0
 800705c:	681d      	ldr	r5, [r3, #0]
 800705e:	b09d      	sub	sp, #116	@ 0x74
 8007060:	da08      	bge.n	8007074 <sniprintf+0x20>
 8007062:	238b      	movs	r3, #139	@ 0x8b
 8007064:	f04f 30ff 	mov.w	r0, #4294967295
 8007068:	602b      	str	r3, [r5, #0]
 800706a:	b01d      	add	sp, #116	@ 0x74
 800706c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007070:	b002      	add	sp, #8
 8007072:	4770      	bx	lr
 8007074:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007078:	f8ad 3014 	strh.w	r3, [sp, #20]
 800707c:	bf0c      	ite	eq
 800707e:	4623      	moveq	r3, r4
 8007080:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007084:	9304      	str	r3, [sp, #16]
 8007086:	9307      	str	r3, [sp, #28]
 8007088:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800708c:	9002      	str	r0, [sp, #8]
 800708e:	9006      	str	r0, [sp, #24]
 8007090:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007094:	4628      	mov	r0, r5
 8007096:	ab21      	add	r3, sp, #132	@ 0x84
 8007098:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800709a:	a902      	add	r1, sp, #8
 800709c:	9301      	str	r3, [sp, #4]
 800709e:	f002 fbf9 	bl	8009894 <_svfiprintf_r>
 80070a2:	1c43      	adds	r3, r0, #1
 80070a4:	bfbc      	itt	lt
 80070a6:	238b      	movlt	r3, #139	@ 0x8b
 80070a8:	602b      	strlt	r3, [r5, #0]
 80070aa:	2c00      	cmp	r4, #0
 80070ac:	d0dd      	beq.n	800706a <sniprintf+0x16>
 80070ae:	2200      	movs	r2, #0
 80070b0:	9b02      	ldr	r3, [sp, #8]
 80070b2:	701a      	strb	r2, [r3, #0]
 80070b4:	e7d9      	b.n	800706a <sniprintf+0x16>
 80070b6:	bf00      	nop
 80070b8:	20000020 	.word	0x20000020

080070bc <siprintf>:
 80070bc:	b40e      	push	{r1, r2, r3}
 80070be:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80070c2:	b500      	push	{lr}
 80070c4:	b09c      	sub	sp, #112	@ 0x70
 80070c6:	ab1d      	add	r3, sp, #116	@ 0x74
 80070c8:	9002      	str	r0, [sp, #8]
 80070ca:	9006      	str	r0, [sp, #24]
 80070cc:	9107      	str	r1, [sp, #28]
 80070ce:	9104      	str	r1, [sp, #16]
 80070d0:	4808      	ldr	r0, [pc, #32]	@ (80070f4 <siprintf+0x38>)
 80070d2:	4909      	ldr	r1, [pc, #36]	@ (80070f8 <siprintf+0x3c>)
 80070d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80070d8:	9105      	str	r1, [sp, #20]
 80070da:	6800      	ldr	r0, [r0, #0]
 80070dc:	a902      	add	r1, sp, #8
 80070de:	9301      	str	r3, [sp, #4]
 80070e0:	f002 fbd8 	bl	8009894 <_svfiprintf_r>
 80070e4:	2200      	movs	r2, #0
 80070e6:	9b02      	ldr	r3, [sp, #8]
 80070e8:	701a      	strb	r2, [r3, #0]
 80070ea:	b01c      	add	sp, #112	@ 0x70
 80070ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80070f0:	b003      	add	sp, #12
 80070f2:	4770      	bx	lr
 80070f4:	20000020 	.word	0x20000020
 80070f8:	ffff0208 	.word	0xffff0208

080070fc <__sread>:
 80070fc:	b510      	push	{r4, lr}
 80070fe:	460c      	mov	r4, r1
 8007100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007104:	f000 f886 	bl	8007214 <_read_r>
 8007108:	2800      	cmp	r0, #0
 800710a:	bfab      	itete	ge
 800710c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800710e:	89a3      	ldrhlt	r3, [r4, #12]
 8007110:	181b      	addge	r3, r3, r0
 8007112:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007116:	bfac      	ite	ge
 8007118:	6563      	strge	r3, [r4, #84]	@ 0x54
 800711a:	81a3      	strhlt	r3, [r4, #12]
 800711c:	bd10      	pop	{r4, pc}

0800711e <__swrite>:
 800711e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007122:	461f      	mov	r7, r3
 8007124:	898b      	ldrh	r3, [r1, #12]
 8007126:	4605      	mov	r5, r0
 8007128:	05db      	lsls	r3, r3, #23
 800712a:	460c      	mov	r4, r1
 800712c:	4616      	mov	r6, r2
 800712e:	d505      	bpl.n	800713c <__swrite+0x1e>
 8007130:	2302      	movs	r3, #2
 8007132:	2200      	movs	r2, #0
 8007134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007138:	f000 f85a 	bl	80071f0 <_lseek_r>
 800713c:	89a3      	ldrh	r3, [r4, #12]
 800713e:	4632      	mov	r2, r6
 8007140:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007144:	81a3      	strh	r3, [r4, #12]
 8007146:	4628      	mov	r0, r5
 8007148:	463b      	mov	r3, r7
 800714a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800714e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007152:	f000 b871 	b.w	8007238 <_write_r>

08007156 <__sseek>:
 8007156:	b510      	push	{r4, lr}
 8007158:	460c      	mov	r4, r1
 800715a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800715e:	f000 f847 	bl	80071f0 <_lseek_r>
 8007162:	1c43      	adds	r3, r0, #1
 8007164:	89a3      	ldrh	r3, [r4, #12]
 8007166:	bf15      	itete	ne
 8007168:	6560      	strne	r0, [r4, #84]	@ 0x54
 800716a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800716e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007172:	81a3      	strheq	r3, [r4, #12]
 8007174:	bf18      	it	ne
 8007176:	81a3      	strhne	r3, [r4, #12]
 8007178:	bd10      	pop	{r4, pc}

0800717a <__sclose>:
 800717a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800717e:	f000 b827 	b.w	80071d0 <_close_r>

08007182 <memmove>:
 8007182:	4288      	cmp	r0, r1
 8007184:	b510      	push	{r4, lr}
 8007186:	eb01 0402 	add.w	r4, r1, r2
 800718a:	d902      	bls.n	8007192 <memmove+0x10>
 800718c:	4284      	cmp	r4, r0
 800718e:	4623      	mov	r3, r4
 8007190:	d807      	bhi.n	80071a2 <memmove+0x20>
 8007192:	1e43      	subs	r3, r0, #1
 8007194:	42a1      	cmp	r1, r4
 8007196:	d008      	beq.n	80071aa <memmove+0x28>
 8007198:	f811 2b01 	ldrb.w	r2, [r1], #1
 800719c:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071a0:	e7f8      	b.n	8007194 <memmove+0x12>
 80071a2:	4601      	mov	r1, r0
 80071a4:	4402      	add	r2, r0
 80071a6:	428a      	cmp	r2, r1
 80071a8:	d100      	bne.n	80071ac <memmove+0x2a>
 80071aa:	bd10      	pop	{r4, pc}
 80071ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071b0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071b4:	e7f7      	b.n	80071a6 <memmove+0x24>

080071b6 <memset>:
 80071b6:	4603      	mov	r3, r0
 80071b8:	4402      	add	r2, r0
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d100      	bne.n	80071c0 <memset+0xa>
 80071be:	4770      	bx	lr
 80071c0:	f803 1b01 	strb.w	r1, [r3], #1
 80071c4:	e7f9      	b.n	80071ba <memset+0x4>
	...

080071c8 <_localeconv_r>:
 80071c8:	4800      	ldr	r0, [pc, #0]	@ (80071cc <_localeconv_r+0x4>)
 80071ca:	4770      	bx	lr
 80071cc:	20000160 	.word	0x20000160

080071d0 <_close_r>:
 80071d0:	b538      	push	{r3, r4, r5, lr}
 80071d2:	2300      	movs	r3, #0
 80071d4:	4d05      	ldr	r5, [pc, #20]	@ (80071ec <_close_r+0x1c>)
 80071d6:	4604      	mov	r4, r0
 80071d8:	4608      	mov	r0, r1
 80071da:	602b      	str	r3, [r5, #0]
 80071dc:	f7fb fd97 	bl	8002d0e <_close>
 80071e0:	1c43      	adds	r3, r0, #1
 80071e2:	d102      	bne.n	80071ea <_close_r+0x1a>
 80071e4:	682b      	ldr	r3, [r5, #0]
 80071e6:	b103      	cbz	r3, 80071ea <_close_r+0x1a>
 80071e8:	6023      	str	r3, [r4, #0]
 80071ea:	bd38      	pop	{r3, r4, r5, pc}
 80071ec:	200008b8 	.word	0x200008b8

080071f0 <_lseek_r>:
 80071f0:	b538      	push	{r3, r4, r5, lr}
 80071f2:	4604      	mov	r4, r0
 80071f4:	4608      	mov	r0, r1
 80071f6:	4611      	mov	r1, r2
 80071f8:	2200      	movs	r2, #0
 80071fa:	4d05      	ldr	r5, [pc, #20]	@ (8007210 <_lseek_r+0x20>)
 80071fc:	602a      	str	r2, [r5, #0]
 80071fe:	461a      	mov	r2, r3
 8007200:	f7fb fda9 	bl	8002d56 <_lseek>
 8007204:	1c43      	adds	r3, r0, #1
 8007206:	d102      	bne.n	800720e <_lseek_r+0x1e>
 8007208:	682b      	ldr	r3, [r5, #0]
 800720a:	b103      	cbz	r3, 800720e <_lseek_r+0x1e>
 800720c:	6023      	str	r3, [r4, #0]
 800720e:	bd38      	pop	{r3, r4, r5, pc}
 8007210:	200008b8 	.word	0x200008b8

08007214 <_read_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	4604      	mov	r4, r0
 8007218:	4608      	mov	r0, r1
 800721a:	4611      	mov	r1, r2
 800721c:	2200      	movs	r2, #0
 800721e:	4d05      	ldr	r5, [pc, #20]	@ (8007234 <_read_r+0x20>)
 8007220:	602a      	str	r2, [r5, #0]
 8007222:	461a      	mov	r2, r3
 8007224:	f7fb fd3a 	bl	8002c9c <_read>
 8007228:	1c43      	adds	r3, r0, #1
 800722a:	d102      	bne.n	8007232 <_read_r+0x1e>
 800722c:	682b      	ldr	r3, [r5, #0]
 800722e:	b103      	cbz	r3, 8007232 <_read_r+0x1e>
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	bd38      	pop	{r3, r4, r5, pc}
 8007234:	200008b8 	.word	0x200008b8

08007238 <_write_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	4604      	mov	r4, r0
 800723c:	4608      	mov	r0, r1
 800723e:	4611      	mov	r1, r2
 8007240:	2200      	movs	r2, #0
 8007242:	4d05      	ldr	r5, [pc, #20]	@ (8007258 <_write_r+0x20>)
 8007244:	602a      	str	r2, [r5, #0]
 8007246:	461a      	mov	r2, r3
 8007248:	f7fb fd45 	bl	8002cd6 <_write>
 800724c:	1c43      	adds	r3, r0, #1
 800724e:	d102      	bne.n	8007256 <_write_r+0x1e>
 8007250:	682b      	ldr	r3, [r5, #0]
 8007252:	b103      	cbz	r3, 8007256 <_write_r+0x1e>
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	bd38      	pop	{r3, r4, r5, pc}
 8007258:	200008b8 	.word	0x200008b8

0800725c <__errno>:
 800725c:	4b01      	ldr	r3, [pc, #4]	@ (8007264 <__errno+0x8>)
 800725e:	6818      	ldr	r0, [r3, #0]
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	20000020 	.word	0x20000020

08007268 <__libc_init_array>:
 8007268:	b570      	push	{r4, r5, r6, lr}
 800726a:	2600      	movs	r6, #0
 800726c:	4d0c      	ldr	r5, [pc, #48]	@ (80072a0 <__libc_init_array+0x38>)
 800726e:	4c0d      	ldr	r4, [pc, #52]	@ (80072a4 <__libc_init_array+0x3c>)
 8007270:	1b64      	subs	r4, r4, r5
 8007272:	10a4      	asrs	r4, r4, #2
 8007274:	42a6      	cmp	r6, r4
 8007276:	d109      	bne.n	800728c <__libc_init_array+0x24>
 8007278:	f003 fb4c 	bl	800a914 <_init>
 800727c:	2600      	movs	r6, #0
 800727e:	4d0a      	ldr	r5, [pc, #40]	@ (80072a8 <__libc_init_array+0x40>)
 8007280:	4c0a      	ldr	r4, [pc, #40]	@ (80072ac <__libc_init_array+0x44>)
 8007282:	1b64      	subs	r4, r4, r5
 8007284:	10a4      	asrs	r4, r4, #2
 8007286:	42a6      	cmp	r6, r4
 8007288:	d105      	bne.n	8007296 <__libc_init_array+0x2e>
 800728a:	bd70      	pop	{r4, r5, r6, pc}
 800728c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007290:	4798      	blx	r3
 8007292:	3601      	adds	r6, #1
 8007294:	e7ee      	b.n	8007274 <__libc_init_array+0xc>
 8007296:	f855 3b04 	ldr.w	r3, [r5], #4
 800729a:	4798      	blx	r3
 800729c:	3601      	adds	r6, #1
 800729e:	e7f2      	b.n	8007286 <__libc_init_array+0x1e>
 80072a0:	0800d628 	.word	0x0800d628
 80072a4:	0800d628 	.word	0x0800d628
 80072a8:	0800d628 	.word	0x0800d628
 80072ac:	0800d62c 	.word	0x0800d62c

080072b0 <__retarget_lock_init_recursive>:
 80072b0:	4770      	bx	lr

080072b2 <__retarget_lock_acquire_recursive>:
 80072b2:	4770      	bx	lr

080072b4 <__retarget_lock_release_recursive>:
 80072b4:	4770      	bx	lr

080072b6 <memchr>:
 80072b6:	4603      	mov	r3, r0
 80072b8:	b510      	push	{r4, lr}
 80072ba:	b2c9      	uxtb	r1, r1
 80072bc:	4402      	add	r2, r0
 80072be:	4293      	cmp	r3, r2
 80072c0:	4618      	mov	r0, r3
 80072c2:	d101      	bne.n	80072c8 <memchr+0x12>
 80072c4:	2000      	movs	r0, #0
 80072c6:	e003      	b.n	80072d0 <memchr+0x1a>
 80072c8:	7804      	ldrb	r4, [r0, #0]
 80072ca:	3301      	adds	r3, #1
 80072cc:	428c      	cmp	r4, r1
 80072ce:	d1f6      	bne.n	80072be <memchr+0x8>
 80072d0:	bd10      	pop	{r4, pc}

080072d2 <memcpy>:
 80072d2:	440a      	add	r2, r1
 80072d4:	4291      	cmp	r1, r2
 80072d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80072da:	d100      	bne.n	80072de <memcpy+0xc>
 80072dc:	4770      	bx	lr
 80072de:	b510      	push	{r4, lr}
 80072e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072e4:	4291      	cmp	r1, r2
 80072e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072ea:	d1f9      	bne.n	80072e0 <memcpy+0xe>
 80072ec:	bd10      	pop	{r4, pc}
	...

080072f0 <nanf>:
 80072f0:	4800      	ldr	r0, [pc, #0]	@ (80072f4 <nanf+0x4>)
 80072f2:	4770      	bx	lr
 80072f4:	7fc00000 	.word	0x7fc00000

080072f8 <quorem>:
 80072f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072fc:	6903      	ldr	r3, [r0, #16]
 80072fe:	690c      	ldr	r4, [r1, #16]
 8007300:	4607      	mov	r7, r0
 8007302:	42a3      	cmp	r3, r4
 8007304:	db7e      	blt.n	8007404 <quorem+0x10c>
 8007306:	3c01      	subs	r4, #1
 8007308:	00a3      	lsls	r3, r4, #2
 800730a:	f100 0514 	add.w	r5, r0, #20
 800730e:	f101 0814 	add.w	r8, r1, #20
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007318:	9301      	str	r3, [sp, #4]
 800731a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800731e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007322:	3301      	adds	r3, #1
 8007324:	429a      	cmp	r2, r3
 8007326:	fbb2 f6f3 	udiv	r6, r2, r3
 800732a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800732e:	d32e      	bcc.n	800738e <quorem+0x96>
 8007330:	f04f 0a00 	mov.w	sl, #0
 8007334:	46c4      	mov	ip, r8
 8007336:	46ae      	mov	lr, r5
 8007338:	46d3      	mov	fp, sl
 800733a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800733e:	b298      	uxth	r0, r3
 8007340:	fb06 a000 	mla	r0, r6, r0, sl
 8007344:	0c1b      	lsrs	r3, r3, #16
 8007346:	0c02      	lsrs	r2, r0, #16
 8007348:	fb06 2303 	mla	r3, r6, r3, r2
 800734c:	f8de 2000 	ldr.w	r2, [lr]
 8007350:	b280      	uxth	r0, r0
 8007352:	b292      	uxth	r2, r2
 8007354:	1a12      	subs	r2, r2, r0
 8007356:	445a      	add	r2, fp
 8007358:	f8de 0000 	ldr.w	r0, [lr]
 800735c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007360:	b29b      	uxth	r3, r3
 8007362:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007366:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800736a:	b292      	uxth	r2, r2
 800736c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007370:	45e1      	cmp	r9, ip
 8007372:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007376:	f84e 2b04 	str.w	r2, [lr], #4
 800737a:	d2de      	bcs.n	800733a <quorem+0x42>
 800737c:	9b00      	ldr	r3, [sp, #0]
 800737e:	58eb      	ldr	r3, [r5, r3]
 8007380:	b92b      	cbnz	r3, 800738e <quorem+0x96>
 8007382:	9b01      	ldr	r3, [sp, #4]
 8007384:	3b04      	subs	r3, #4
 8007386:	429d      	cmp	r5, r3
 8007388:	461a      	mov	r2, r3
 800738a:	d32f      	bcc.n	80073ec <quorem+0xf4>
 800738c:	613c      	str	r4, [r7, #16]
 800738e:	4638      	mov	r0, r7
 8007390:	f001 f9c2 	bl	8008718 <__mcmp>
 8007394:	2800      	cmp	r0, #0
 8007396:	db25      	blt.n	80073e4 <quorem+0xec>
 8007398:	4629      	mov	r1, r5
 800739a:	2000      	movs	r0, #0
 800739c:	f858 2b04 	ldr.w	r2, [r8], #4
 80073a0:	f8d1 c000 	ldr.w	ip, [r1]
 80073a4:	fa1f fe82 	uxth.w	lr, r2
 80073a8:	fa1f f38c 	uxth.w	r3, ip
 80073ac:	eba3 030e 	sub.w	r3, r3, lr
 80073b0:	4403      	add	r3, r0
 80073b2:	0c12      	lsrs	r2, r2, #16
 80073b4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80073b8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80073bc:	b29b      	uxth	r3, r3
 80073be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073c2:	45c1      	cmp	r9, r8
 80073c4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80073c8:	f841 3b04 	str.w	r3, [r1], #4
 80073cc:	d2e6      	bcs.n	800739c <quorem+0xa4>
 80073ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073d6:	b922      	cbnz	r2, 80073e2 <quorem+0xea>
 80073d8:	3b04      	subs	r3, #4
 80073da:	429d      	cmp	r5, r3
 80073dc:	461a      	mov	r2, r3
 80073de:	d30b      	bcc.n	80073f8 <quorem+0x100>
 80073e0:	613c      	str	r4, [r7, #16]
 80073e2:	3601      	adds	r6, #1
 80073e4:	4630      	mov	r0, r6
 80073e6:	b003      	add	sp, #12
 80073e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ec:	6812      	ldr	r2, [r2, #0]
 80073ee:	3b04      	subs	r3, #4
 80073f0:	2a00      	cmp	r2, #0
 80073f2:	d1cb      	bne.n	800738c <quorem+0x94>
 80073f4:	3c01      	subs	r4, #1
 80073f6:	e7c6      	b.n	8007386 <quorem+0x8e>
 80073f8:	6812      	ldr	r2, [r2, #0]
 80073fa:	3b04      	subs	r3, #4
 80073fc:	2a00      	cmp	r2, #0
 80073fe:	d1ef      	bne.n	80073e0 <quorem+0xe8>
 8007400:	3c01      	subs	r4, #1
 8007402:	e7ea      	b.n	80073da <quorem+0xe2>
 8007404:	2000      	movs	r0, #0
 8007406:	e7ee      	b.n	80073e6 <quorem+0xee>

08007408 <_dtoa_r>:
 8007408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800740c:	4614      	mov	r4, r2
 800740e:	461d      	mov	r5, r3
 8007410:	69c7      	ldr	r7, [r0, #28]
 8007412:	b097      	sub	sp, #92	@ 0x5c
 8007414:	4683      	mov	fp, r0
 8007416:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800741a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800741c:	b97f      	cbnz	r7, 800743e <_dtoa_r+0x36>
 800741e:	2010      	movs	r0, #16
 8007420:	f000 fe02 	bl	8008028 <malloc>
 8007424:	4602      	mov	r2, r0
 8007426:	f8cb 001c 	str.w	r0, [fp, #28]
 800742a:	b920      	cbnz	r0, 8007436 <_dtoa_r+0x2e>
 800742c:	21ef      	movs	r1, #239	@ 0xef
 800742e:	4ba8      	ldr	r3, [pc, #672]	@ (80076d0 <_dtoa_r+0x2c8>)
 8007430:	48a8      	ldr	r0, [pc, #672]	@ (80076d4 <_dtoa_r+0x2cc>)
 8007432:	f002 fbfb 	bl	8009c2c <__assert_func>
 8007436:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800743a:	6007      	str	r7, [r0, #0]
 800743c:	60c7      	str	r7, [r0, #12]
 800743e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007442:	6819      	ldr	r1, [r3, #0]
 8007444:	b159      	cbz	r1, 800745e <_dtoa_r+0x56>
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	2301      	movs	r3, #1
 800744a:	4093      	lsls	r3, r2
 800744c:	604a      	str	r2, [r1, #4]
 800744e:	608b      	str	r3, [r1, #8]
 8007450:	4658      	mov	r0, fp
 8007452:	f000 fedf 	bl	8008214 <_Bfree>
 8007456:	2200      	movs	r2, #0
 8007458:	f8db 301c 	ldr.w	r3, [fp, #28]
 800745c:	601a      	str	r2, [r3, #0]
 800745e:	1e2b      	subs	r3, r5, #0
 8007460:	bfaf      	iteee	ge
 8007462:	2300      	movge	r3, #0
 8007464:	2201      	movlt	r2, #1
 8007466:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800746a:	9303      	strlt	r3, [sp, #12]
 800746c:	bfa8      	it	ge
 800746e:	6033      	strge	r3, [r6, #0]
 8007470:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007474:	4b98      	ldr	r3, [pc, #608]	@ (80076d8 <_dtoa_r+0x2d0>)
 8007476:	bfb8      	it	lt
 8007478:	6032      	strlt	r2, [r6, #0]
 800747a:	ea33 0308 	bics.w	r3, r3, r8
 800747e:	d112      	bne.n	80074a6 <_dtoa_r+0x9e>
 8007480:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007484:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007486:	6013      	str	r3, [r2, #0]
 8007488:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800748c:	4323      	orrs	r3, r4
 800748e:	f000 8550 	beq.w	8007f32 <_dtoa_r+0xb2a>
 8007492:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007494:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80076dc <_dtoa_r+0x2d4>
 8007498:	2b00      	cmp	r3, #0
 800749a:	f000 8552 	beq.w	8007f42 <_dtoa_r+0xb3a>
 800749e:	f10a 0303 	add.w	r3, sl, #3
 80074a2:	f000 bd4c 	b.w	8007f3e <_dtoa_r+0xb36>
 80074a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074aa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80074ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074b2:	2200      	movs	r2, #0
 80074b4:	2300      	movs	r3, #0
 80074b6:	f7f9 fa77 	bl	80009a8 <__aeabi_dcmpeq>
 80074ba:	4607      	mov	r7, r0
 80074bc:	b158      	cbz	r0, 80074d6 <_dtoa_r+0xce>
 80074be:	2301      	movs	r3, #1
 80074c0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80074c2:	6013      	str	r3, [r2, #0]
 80074c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80074c6:	b113      	cbz	r3, 80074ce <_dtoa_r+0xc6>
 80074c8:	4b85      	ldr	r3, [pc, #532]	@ (80076e0 <_dtoa_r+0x2d8>)
 80074ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80074cc:	6013      	str	r3, [r2, #0]
 80074ce:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80076e4 <_dtoa_r+0x2dc>
 80074d2:	f000 bd36 	b.w	8007f42 <_dtoa_r+0xb3a>
 80074d6:	ab14      	add	r3, sp, #80	@ 0x50
 80074d8:	9301      	str	r3, [sp, #4]
 80074da:	ab15      	add	r3, sp, #84	@ 0x54
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	4658      	mov	r0, fp
 80074e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80074e4:	f001 fa30 	bl	8008948 <__d2b>
 80074e8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80074ec:	4681      	mov	r9, r0
 80074ee:	2e00      	cmp	r6, #0
 80074f0:	d077      	beq.n	80075e2 <_dtoa_r+0x1da>
 80074f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074f8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80074fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007500:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007504:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007508:	9712      	str	r7, [sp, #72]	@ 0x48
 800750a:	4619      	mov	r1, r3
 800750c:	2200      	movs	r2, #0
 800750e:	4b76      	ldr	r3, [pc, #472]	@ (80076e8 <_dtoa_r+0x2e0>)
 8007510:	f7f8 fe2a 	bl	8000168 <__aeabi_dsub>
 8007514:	a368      	add	r3, pc, #416	@ (adr r3, 80076b8 <_dtoa_r+0x2b0>)
 8007516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751a:	f7f8 ffdd 	bl	80004d8 <__aeabi_dmul>
 800751e:	a368      	add	r3, pc, #416	@ (adr r3, 80076c0 <_dtoa_r+0x2b8>)
 8007520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007524:	f7f8 fe22 	bl	800016c <__adddf3>
 8007528:	4604      	mov	r4, r0
 800752a:	4630      	mov	r0, r6
 800752c:	460d      	mov	r5, r1
 800752e:	f7f8 ff69 	bl	8000404 <__aeabi_i2d>
 8007532:	a365      	add	r3, pc, #404	@ (adr r3, 80076c8 <_dtoa_r+0x2c0>)
 8007534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007538:	f7f8 ffce 	bl	80004d8 <__aeabi_dmul>
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	4620      	mov	r0, r4
 8007542:	4629      	mov	r1, r5
 8007544:	f7f8 fe12 	bl	800016c <__adddf3>
 8007548:	4604      	mov	r4, r0
 800754a:	460d      	mov	r5, r1
 800754c:	f7f9 fa74 	bl	8000a38 <__aeabi_d2iz>
 8007550:	2200      	movs	r2, #0
 8007552:	4607      	mov	r7, r0
 8007554:	2300      	movs	r3, #0
 8007556:	4620      	mov	r0, r4
 8007558:	4629      	mov	r1, r5
 800755a:	f7f9 fa2f 	bl	80009bc <__aeabi_dcmplt>
 800755e:	b140      	cbz	r0, 8007572 <_dtoa_r+0x16a>
 8007560:	4638      	mov	r0, r7
 8007562:	f7f8 ff4f 	bl	8000404 <__aeabi_i2d>
 8007566:	4622      	mov	r2, r4
 8007568:	462b      	mov	r3, r5
 800756a:	f7f9 fa1d 	bl	80009a8 <__aeabi_dcmpeq>
 800756e:	b900      	cbnz	r0, 8007572 <_dtoa_r+0x16a>
 8007570:	3f01      	subs	r7, #1
 8007572:	2f16      	cmp	r7, #22
 8007574:	d853      	bhi.n	800761e <_dtoa_r+0x216>
 8007576:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800757a:	4b5c      	ldr	r3, [pc, #368]	@ (80076ec <_dtoa_r+0x2e4>)
 800757c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007584:	f7f9 fa1a 	bl	80009bc <__aeabi_dcmplt>
 8007588:	2800      	cmp	r0, #0
 800758a:	d04a      	beq.n	8007622 <_dtoa_r+0x21a>
 800758c:	2300      	movs	r3, #0
 800758e:	3f01      	subs	r7, #1
 8007590:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007592:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007594:	1b9b      	subs	r3, r3, r6
 8007596:	1e5a      	subs	r2, r3, #1
 8007598:	bf46      	itte	mi
 800759a:	f1c3 0801 	rsbmi	r8, r3, #1
 800759e:	2300      	movmi	r3, #0
 80075a0:	f04f 0800 	movpl.w	r8, #0
 80075a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80075a6:	bf48      	it	mi
 80075a8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80075aa:	2f00      	cmp	r7, #0
 80075ac:	db3b      	blt.n	8007626 <_dtoa_r+0x21e>
 80075ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075b0:	970e      	str	r7, [sp, #56]	@ 0x38
 80075b2:	443b      	add	r3, r7
 80075b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80075b6:	2300      	movs	r3, #0
 80075b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80075ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80075bc:	2b09      	cmp	r3, #9
 80075be:	d866      	bhi.n	800768e <_dtoa_r+0x286>
 80075c0:	2b05      	cmp	r3, #5
 80075c2:	bfc4      	itt	gt
 80075c4:	3b04      	subgt	r3, #4
 80075c6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80075c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80075ca:	bfc8      	it	gt
 80075cc:	2400      	movgt	r4, #0
 80075ce:	f1a3 0302 	sub.w	r3, r3, #2
 80075d2:	bfd8      	it	le
 80075d4:	2401      	movle	r4, #1
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	d864      	bhi.n	80076a4 <_dtoa_r+0x29c>
 80075da:	e8df f003 	tbb	[pc, r3]
 80075de:	382b      	.short	0x382b
 80075e0:	5636      	.short	0x5636
 80075e2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80075e6:	441e      	add	r6, r3
 80075e8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80075ec:	2b20      	cmp	r3, #32
 80075ee:	bfc1      	itttt	gt
 80075f0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80075f4:	fa08 f803 	lslgt.w	r8, r8, r3
 80075f8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80075fc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007600:	bfd6      	itet	le
 8007602:	f1c3 0320 	rsble	r3, r3, #32
 8007606:	ea48 0003 	orrgt.w	r0, r8, r3
 800760a:	fa04 f003 	lslle.w	r0, r4, r3
 800760e:	f7f8 fee9 	bl	80003e4 <__aeabi_ui2d>
 8007612:	2201      	movs	r2, #1
 8007614:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007618:	3e01      	subs	r6, #1
 800761a:	9212      	str	r2, [sp, #72]	@ 0x48
 800761c:	e775      	b.n	800750a <_dtoa_r+0x102>
 800761e:	2301      	movs	r3, #1
 8007620:	e7b6      	b.n	8007590 <_dtoa_r+0x188>
 8007622:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007624:	e7b5      	b.n	8007592 <_dtoa_r+0x18a>
 8007626:	427b      	negs	r3, r7
 8007628:	930a      	str	r3, [sp, #40]	@ 0x28
 800762a:	2300      	movs	r3, #0
 800762c:	eba8 0807 	sub.w	r8, r8, r7
 8007630:	930e      	str	r3, [sp, #56]	@ 0x38
 8007632:	e7c2      	b.n	80075ba <_dtoa_r+0x1b2>
 8007634:	2300      	movs	r3, #0
 8007636:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007638:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800763a:	2b00      	cmp	r3, #0
 800763c:	dc35      	bgt.n	80076aa <_dtoa_r+0x2a2>
 800763e:	2301      	movs	r3, #1
 8007640:	461a      	mov	r2, r3
 8007642:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007646:	9221      	str	r2, [sp, #132]	@ 0x84
 8007648:	e00b      	b.n	8007662 <_dtoa_r+0x25a>
 800764a:	2301      	movs	r3, #1
 800764c:	e7f3      	b.n	8007636 <_dtoa_r+0x22e>
 800764e:	2300      	movs	r3, #0
 8007650:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007652:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007654:	18fb      	adds	r3, r7, r3
 8007656:	9308      	str	r3, [sp, #32]
 8007658:	3301      	adds	r3, #1
 800765a:	2b01      	cmp	r3, #1
 800765c:	9307      	str	r3, [sp, #28]
 800765e:	bfb8      	it	lt
 8007660:	2301      	movlt	r3, #1
 8007662:	2100      	movs	r1, #0
 8007664:	2204      	movs	r2, #4
 8007666:	f8db 001c 	ldr.w	r0, [fp, #28]
 800766a:	f102 0514 	add.w	r5, r2, #20
 800766e:	429d      	cmp	r5, r3
 8007670:	d91f      	bls.n	80076b2 <_dtoa_r+0x2aa>
 8007672:	6041      	str	r1, [r0, #4]
 8007674:	4658      	mov	r0, fp
 8007676:	f000 fd8d 	bl	8008194 <_Balloc>
 800767a:	4682      	mov	sl, r0
 800767c:	2800      	cmp	r0, #0
 800767e:	d139      	bne.n	80076f4 <_dtoa_r+0x2ec>
 8007680:	4602      	mov	r2, r0
 8007682:	f240 11af 	movw	r1, #431	@ 0x1af
 8007686:	4b1a      	ldr	r3, [pc, #104]	@ (80076f0 <_dtoa_r+0x2e8>)
 8007688:	e6d2      	b.n	8007430 <_dtoa_r+0x28>
 800768a:	2301      	movs	r3, #1
 800768c:	e7e0      	b.n	8007650 <_dtoa_r+0x248>
 800768e:	2401      	movs	r4, #1
 8007690:	2300      	movs	r3, #0
 8007692:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007694:	9320      	str	r3, [sp, #128]	@ 0x80
 8007696:	f04f 33ff 	mov.w	r3, #4294967295
 800769a:	2200      	movs	r2, #0
 800769c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80076a0:	2312      	movs	r3, #18
 80076a2:	e7d0      	b.n	8007646 <_dtoa_r+0x23e>
 80076a4:	2301      	movs	r3, #1
 80076a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076a8:	e7f5      	b.n	8007696 <_dtoa_r+0x28e>
 80076aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80076ac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80076b0:	e7d7      	b.n	8007662 <_dtoa_r+0x25a>
 80076b2:	3101      	adds	r1, #1
 80076b4:	0052      	lsls	r2, r2, #1
 80076b6:	e7d8      	b.n	800766a <_dtoa_r+0x262>
 80076b8:	636f4361 	.word	0x636f4361
 80076bc:	3fd287a7 	.word	0x3fd287a7
 80076c0:	8b60c8b3 	.word	0x8b60c8b3
 80076c4:	3fc68a28 	.word	0x3fc68a28
 80076c8:	509f79fb 	.word	0x509f79fb
 80076cc:	3fd34413 	.word	0x3fd34413
 80076d0:	0800d238 	.word	0x0800d238
 80076d4:	0800d24f 	.word	0x0800d24f
 80076d8:	7ff00000 	.word	0x7ff00000
 80076dc:	0800d234 	.word	0x0800d234
 80076e0:	0800d203 	.word	0x0800d203
 80076e4:	0800d202 	.word	0x0800d202
 80076e8:	3ff80000 	.word	0x3ff80000
 80076ec:	0800d348 	.word	0x0800d348
 80076f0:	0800d2a7 	.word	0x0800d2a7
 80076f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80076f8:	6018      	str	r0, [r3, #0]
 80076fa:	9b07      	ldr	r3, [sp, #28]
 80076fc:	2b0e      	cmp	r3, #14
 80076fe:	f200 80a4 	bhi.w	800784a <_dtoa_r+0x442>
 8007702:	2c00      	cmp	r4, #0
 8007704:	f000 80a1 	beq.w	800784a <_dtoa_r+0x442>
 8007708:	2f00      	cmp	r7, #0
 800770a:	dd33      	ble.n	8007774 <_dtoa_r+0x36c>
 800770c:	4b86      	ldr	r3, [pc, #536]	@ (8007928 <_dtoa_r+0x520>)
 800770e:	f007 020f 	and.w	r2, r7, #15
 8007712:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007716:	05f8      	lsls	r0, r7, #23
 8007718:	e9d3 3400 	ldrd	r3, r4, [r3]
 800771c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007720:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007724:	d516      	bpl.n	8007754 <_dtoa_r+0x34c>
 8007726:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800772a:	4b80      	ldr	r3, [pc, #512]	@ (800792c <_dtoa_r+0x524>)
 800772c:	2603      	movs	r6, #3
 800772e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007732:	f7f8 fffb 	bl	800072c <__aeabi_ddiv>
 8007736:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800773a:	f004 040f 	and.w	r4, r4, #15
 800773e:	4d7b      	ldr	r5, [pc, #492]	@ (800792c <_dtoa_r+0x524>)
 8007740:	b954      	cbnz	r4, 8007758 <_dtoa_r+0x350>
 8007742:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800774a:	f7f8 ffef 	bl	800072c <__aeabi_ddiv>
 800774e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007752:	e028      	b.n	80077a6 <_dtoa_r+0x39e>
 8007754:	2602      	movs	r6, #2
 8007756:	e7f2      	b.n	800773e <_dtoa_r+0x336>
 8007758:	07e1      	lsls	r1, r4, #31
 800775a:	d508      	bpl.n	800776e <_dtoa_r+0x366>
 800775c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007760:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007764:	f7f8 feb8 	bl	80004d8 <__aeabi_dmul>
 8007768:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800776c:	3601      	adds	r6, #1
 800776e:	1064      	asrs	r4, r4, #1
 8007770:	3508      	adds	r5, #8
 8007772:	e7e5      	b.n	8007740 <_dtoa_r+0x338>
 8007774:	f000 80d2 	beq.w	800791c <_dtoa_r+0x514>
 8007778:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800777c:	427c      	negs	r4, r7
 800777e:	4b6a      	ldr	r3, [pc, #424]	@ (8007928 <_dtoa_r+0x520>)
 8007780:	f004 020f 	and.w	r2, r4, #15
 8007784:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778c:	f7f8 fea4 	bl	80004d8 <__aeabi_dmul>
 8007790:	2602      	movs	r6, #2
 8007792:	2300      	movs	r3, #0
 8007794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007798:	4d64      	ldr	r5, [pc, #400]	@ (800792c <_dtoa_r+0x524>)
 800779a:	1124      	asrs	r4, r4, #4
 800779c:	2c00      	cmp	r4, #0
 800779e:	f040 80b2 	bne.w	8007906 <_dtoa_r+0x4fe>
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1d3      	bne.n	800774e <_dtoa_r+0x346>
 80077a6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80077aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f000 80b7 	beq.w	8007920 <_dtoa_r+0x518>
 80077b2:	2200      	movs	r2, #0
 80077b4:	4620      	mov	r0, r4
 80077b6:	4629      	mov	r1, r5
 80077b8:	4b5d      	ldr	r3, [pc, #372]	@ (8007930 <_dtoa_r+0x528>)
 80077ba:	f7f9 f8ff 	bl	80009bc <__aeabi_dcmplt>
 80077be:	2800      	cmp	r0, #0
 80077c0:	f000 80ae 	beq.w	8007920 <_dtoa_r+0x518>
 80077c4:	9b07      	ldr	r3, [sp, #28]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	f000 80aa 	beq.w	8007920 <_dtoa_r+0x518>
 80077cc:	9b08      	ldr	r3, [sp, #32]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	dd37      	ble.n	8007842 <_dtoa_r+0x43a>
 80077d2:	1e7b      	subs	r3, r7, #1
 80077d4:	4620      	mov	r0, r4
 80077d6:	9304      	str	r3, [sp, #16]
 80077d8:	2200      	movs	r2, #0
 80077da:	4629      	mov	r1, r5
 80077dc:	4b55      	ldr	r3, [pc, #340]	@ (8007934 <_dtoa_r+0x52c>)
 80077de:	f7f8 fe7b 	bl	80004d8 <__aeabi_dmul>
 80077e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077e6:	9c08      	ldr	r4, [sp, #32]
 80077e8:	3601      	adds	r6, #1
 80077ea:	4630      	mov	r0, r6
 80077ec:	f7f8 fe0a 	bl	8000404 <__aeabi_i2d>
 80077f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077f4:	f7f8 fe70 	bl	80004d8 <__aeabi_dmul>
 80077f8:	2200      	movs	r2, #0
 80077fa:	4b4f      	ldr	r3, [pc, #316]	@ (8007938 <_dtoa_r+0x530>)
 80077fc:	f7f8 fcb6 	bl	800016c <__adddf3>
 8007800:	4605      	mov	r5, r0
 8007802:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007806:	2c00      	cmp	r4, #0
 8007808:	f040 809a 	bne.w	8007940 <_dtoa_r+0x538>
 800780c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007810:	2200      	movs	r2, #0
 8007812:	4b4a      	ldr	r3, [pc, #296]	@ (800793c <_dtoa_r+0x534>)
 8007814:	f7f8 fca8 	bl	8000168 <__aeabi_dsub>
 8007818:	4602      	mov	r2, r0
 800781a:	460b      	mov	r3, r1
 800781c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007820:	462a      	mov	r2, r5
 8007822:	4633      	mov	r3, r6
 8007824:	f7f9 f8e8 	bl	80009f8 <__aeabi_dcmpgt>
 8007828:	2800      	cmp	r0, #0
 800782a:	f040 828e 	bne.w	8007d4a <_dtoa_r+0x942>
 800782e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007832:	462a      	mov	r2, r5
 8007834:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007838:	f7f9 f8c0 	bl	80009bc <__aeabi_dcmplt>
 800783c:	2800      	cmp	r0, #0
 800783e:	f040 8127 	bne.w	8007a90 <_dtoa_r+0x688>
 8007842:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007846:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800784a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800784c:	2b00      	cmp	r3, #0
 800784e:	f2c0 8163 	blt.w	8007b18 <_dtoa_r+0x710>
 8007852:	2f0e      	cmp	r7, #14
 8007854:	f300 8160 	bgt.w	8007b18 <_dtoa_r+0x710>
 8007858:	4b33      	ldr	r3, [pc, #204]	@ (8007928 <_dtoa_r+0x520>)
 800785a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800785e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007862:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007866:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007868:	2b00      	cmp	r3, #0
 800786a:	da03      	bge.n	8007874 <_dtoa_r+0x46c>
 800786c:	9b07      	ldr	r3, [sp, #28]
 800786e:	2b00      	cmp	r3, #0
 8007870:	f340 8100 	ble.w	8007a74 <_dtoa_r+0x66c>
 8007874:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007878:	4656      	mov	r6, sl
 800787a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800787e:	4620      	mov	r0, r4
 8007880:	4629      	mov	r1, r5
 8007882:	f7f8 ff53 	bl	800072c <__aeabi_ddiv>
 8007886:	f7f9 f8d7 	bl	8000a38 <__aeabi_d2iz>
 800788a:	4680      	mov	r8, r0
 800788c:	f7f8 fdba 	bl	8000404 <__aeabi_i2d>
 8007890:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007894:	f7f8 fe20 	bl	80004d8 <__aeabi_dmul>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	4620      	mov	r0, r4
 800789e:	4629      	mov	r1, r5
 80078a0:	f7f8 fc62 	bl	8000168 <__aeabi_dsub>
 80078a4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80078a8:	9d07      	ldr	r5, [sp, #28]
 80078aa:	f806 4b01 	strb.w	r4, [r6], #1
 80078ae:	eba6 040a 	sub.w	r4, r6, sl
 80078b2:	42a5      	cmp	r5, r4
 80078b4:	4602      	mov	r2, r0
 80078b6:	460b      	mov	r3, r1
 80078b8:	f040 8116 	bne.w	8007ae8 <_dtoa_r+0x6e0>
 80078bc:	f7f8 fc56 	bl	800016c <__adddf3>
 80078c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078c4:	4604      	mov	r4, r0
 80078c6:	460d      	mov	r5, r1
 80078c8:	f7f9 f896 	bl	80009f8 <__aeabi_dcmpgt>
 80078cc:	2800      	cmp	r0, #0
 80078ce:	f040 80f8 	bne.w	8007ac2 <_dtoa_r+0x6ba>
 80078d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078d6:	4620      	mov	r0, r4
 80078d8:	4629      	mov	r1, r5
 80078da:	f7f9 f865 	bl	80009a8 <__aeabi_dcmpeq>
 80078de:	b118      	cbz	r0, 80078e8 <_dtoa_r+0x4e0>
 80078e0:	f018 0f01 	tst.w	r8, #1
 80078e4:	f040 80ed 	bne.w	8007ac2 <_dtoa_r+0x6ba>
 80078e8:	4649      	mov	r1, r9
 80078ea:	4658      	mov	r0, fp
 80078ec:	f000 fc92 	bl	8008214 <_Bfree>
 80078f0:	2300      	movs	r3, #0
 80078f2:	7033      	strb	r3, [r6, #0]
 80078f4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80078f6:	3701      	adds	r7, #1
 80078f8:	601f      	str	r7, [r3, #0]
 80078fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 8320 	beq.w	8007f42 <_dtoa_r+0xb3a>
 8007902:	601e      	str	r6, [r3, #0]
 8007904:	e31d      	b.n	8007f42 <_dtoa_r+0xb3a>
 8007906:	07e2      	lsls	r2, r4, #31
 8007908:	d505      	bpl.n	8007916 <_dtoa_r+0x50e>
 800790a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800790e:	f7f8 fde3 	bl	80004d8 <__aeabi_dmul>
 8007912:	2301      	movs	r3, #1
 8007914:	3601      	adds	r6, #1
 8007916:	1064      	asrs	r4, r4, #1
 8007918:	3508      	adds	r5, #8
 800791a:	e73f      	b.n	800779c <_dtoa_r+0x394>
 800791c:	2602      	movs	r6, #2
 800791e:	e742      	b.n	80077a6 <_dtoa_r+0x39e>
 8007920:	9c07      	ldr	r4, [sp, #28]
 8007922:	9704      	str	r7, [sp, #16]
 8007924:	e761      	b.n	80077ea <_dtoa_r+0x3e2>
 8007926:	bf00      	nop
 8007928:	0800d348 	.word	0x0800d348
 800792c:	0800d320 	.word	0x0800d320
 8007930:	3ff00000 	.word	0x3ff00000
 8007934:	40240000 	.word	0x40240000
 8007938:	401c0000 	.word	0x401c0000
 800793c:	40140000 	.word	0x40140000
 8007940:	4b70      	ldr	r3, [pc, #448]	@ (8007b04 <_dtoa_r+0x6fc>)
 8007942:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007944:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007948:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800794c:	4454      	add	r4, sl
 800794e:	2900      	cmp	r1, #0
 8007950:	d045      	beq.n	80079de <_dtoa_r+0x5d6>
 8007952:	2000      	movs	r0, #0
 8007954:	496c      	ldr	r1, [pc, #432]	@ (8007b08 <_dtoa_r+0x700>)
 8007956:	f7f8 fee9 	bl	800072c <__aeabi_ddiv>
 800795a:	4633      	mov	r3, r6
 800795c:	462a      	mov	r2, r5
 800795e:	f7f8 fc03 	bl	8000168 <__aeabi_dsub>
 8007962:	4656      	mov	r6, sl
 8007964:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007968:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800796c:	f7f9 f864 	bl	8000a38 <__aeabi_d2iz>
 8007970:	4605      	mov	r5, r0
 8007972:	f7f8 fd47 	bl	8000404 <__aeabi_i2d>
 8007976:	4602      	mov	r2, r0
 8007978:	460b      	mov	r3, r1
 800797a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800797e:	f7f8 fbf3 	bl	8000168 <__aeabi_dsub>
 8007982:	4602      	mov	r2, r0
 8007984:	460b      	mov	r3, r1
 8007986:	3530      	adds	r5, #48	@ 0x30
 8007988:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800798c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007990:	f806 5b01 	strb.w	r5, [r6], #1
 8007994:	f7f9 f812 	bl	80009bc <__aeabi_dcmplt>
 8007998:	2800      	cmp	r0, #0
 800799a:	d163      	bne.n	8007a64 <_dtoa_r+0x65c>
 800799c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079a0:	2000      	movs	r0, #0
 80079a2:	495a      	ldr	r1, [pc, #360]	@ (8007b0c <_dtoa_r+0x704>)
 80079a4:	f7f8 fbe0 	bl	8000168 <__aeabi_dsub>
 80079a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80079ac:	f7f9 f806 	bl	80009bc <__aeabi_dcmplt>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	f040 8087 	bne.w	8007ac4 <_dtoa_r+0x6bc>
 80079b6:	42a6      	cmp	r6, r4
 80079b8:	f43f af43 	beq.w	8007842 <_dtoa_r+0x43a>
 80079bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80079c0:	2200      	movs	r2, #0
 80079c2:	4b53      	ldr	r3, [pc, #332]	@ (8007b10 <_dtoa_r+0x708>)
 80079c4:	f7f8 fd88 	bl	80004d8 <__aeabi_dmul>
 80079c8:	2200      	movs	r2, #0
 80079ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80079ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079d2:	4b4f      	ldr	r3, [pc, #316]	@ (8007b10 <_dtoa_r+0x708>)
 80079d4:	f7f8 fd80 	bl	80004d8 <__aeabi_dmul>
 80079d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079dc:	e7c4      	b.n	8007968 <_dtoa_r+0x560>
 80079de:	4631      	mov	r1, r6
 80079e0:	4628      	mov	r0, r5
 80079e2:	f7f8 fd79 	bl	80004d8 <__aeabi_dmul>
 80079e6:	4656      	mov	r6, sl
 80079e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80079ec:	9413      	str	r4, [sp, #76]	@ 0x4c
 80079ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079f2:	f7f9 f821 	bl	8000a38 <__aeabi_d2iz>
 80079f6:	4605      	mov	r5, r0
 80079f8:	f7f8 fd04 	bl	8000404 <__aeabi_i2d>
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a04:	f7f8 fbb0 	bl	8000168 <__aeabi_dsub>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	3530      	adds	r5, #48	@ 0x30
 8007a0e:	f806 5b01 	strb.w	r5, [r6], #1
 8007a12:	42a6      	cmp	r6, r4
 8007a14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a18:	f04f 0200 	mov.w	r2, #0
 8007a1c:	d124      	bne.n	8007a68 <_dtoa_r+0x660>
 8007a1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007a22:	4b39      	ldr	r3, [pc, #228]	@ (8007b08 <_dtoa_r+0x700>)
 8007a24:	f7f8 fba2 	bl	800016c <__adddf3>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a30:	f7f8 ffe2 	bl	80009f8 <__aeabi_dcmpgt>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	d145      	bne.n	8007ac4 <_dtoa_r+0x6bc>
 8007a38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	4932      	ldr	r1, [pc, #200]	@ (8007b08 <_dtoa_r+0x700>)
 8007a40:	f7f8 fb92 	bl	8000168 <__aeabi_dsub>
 8007a44:	4602      	mov	r2, r0
 8007a46:	460b      	mov	r3, r1
 8007a48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a4c:	f7f8 ffb6 	bl	80009bc <__aeabi_dcmplt>
 8007a50:	2800      	cmp	r0, #0
 8007a52:	f43f aef6 	beq.w	8007842 <_dtoa_r+0x43a>
 8007a56:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007a58:	1e73      	subs	r3, r6, #1
 8007a5a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007a5c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007a60:	2b30      	cmp	r3, #48	@ 0x30
 8007a62:	d0f8      	beq.n	8007a56 <_dtoa_r+0x64e>
 8007a64:	9f04      	ldr	r7, [sp, #16]
 8007a66:	e73f      	b.n	80078e8 <_dtoa_r+0x4e0>
 8007a68:	4b29      	ldr	r3, [pc, #164]	@ (8007b10 <_dtoa_r+0x708>)
 8007a6a:	f7f8 fd35 	bl	80004d8 <__aeabi_dmul>
 8007a6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a72:	e7bc      	b.n	80079ee <_dtoa_r+0x5e6>
 8007a74:	d10c      	bne.n	8007a90 <_dtoa_r+0x688>
 8007a76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	4b25      	ldr	r3, [pc, #148]	@ (8007b14 <_dtoa_r+0x70c>)
 8007a7e:	f7f8 fd2b 	bl	80004d8 <__aeabi_dmul>
 8007a82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a86:	f7f8 ffad 	bl	80009e4 <__aeabi_dcmpge>
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	f000 815b 	beq.w	8007d46 <_dtoa_r+0x93e>
 8007a90:	2400      	movs	r4, #0
 8007a92:	4625      	mov	r5, r4
 8007a94:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a96:	4656      	mov	r6, sl
 8007a98:	43db      	mvns	r3, r3
 8007a9a:	9304      	str	r3, [sp, #16]
 8007a9c:	2700      	movs	r7, #0
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	4658      	mov	r0, fp
 8007aa2:	f000 fbb7 	bl	8008214 <_Bfree>
 8007aa6:	2d00      	cmp	r5, #0
 8007aa8:	d0dc      	beq.n	8007a64 <_dtoa_r+0x65c>
 8007aaa:	b12f      	cbz	r7, 8007ab8 <_dtoa_r+0x6b0>
 8007aac:	42af      	cmp	r7, r5
 8007aae:	d003      	beq.n	8007ab8 <_dtoa_r+0x6b0>
 8007ab0:	4639      	mov	r1, r7
 8007ab2:	4658      	mov	r0, fp
 8007ab4:	f000 fbae 	bl	8008214 <_Bfree>
 8007ab8:	4629      	mov	r1, r5
 8007aba:	4658      	mov	r0, fp
 8007abc:	f000 fbaa 	bl	8008214 <_Bfree>
 8007ac0:	e7d0      	b.n	8007a64 <_dtoa_r+0x65c>
 8007ac2:	9704      	str	r7, [sp, #16]
 8007ac4:	4633      	mov	r3, r6
 8007ac6:	461e      	mov	r6, r3
 8007ac8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007acc:	2a39      	cmp	r2, #57	@ 0x39
 8007ace:	d107      	bne.n	8007ae0 <_dtoa_r+0x6d8>
 8007ad0:	459a      	cmp	sl, r3
 8007ad2:	d1f8      	bne.n	8007ac6 <_dtoa_r+0x6be>
 8007ad4:	9a04      	ldr	r2, [sp, #16]
 8007ad6:	3201      	adds	r2, #1
 8007ad8:	9204      	str	r2, [sp, #16]
 8007ada:	2230      	movs	r2, #48	@ 0x30
 8007adc:	f88a 2000 	strb.w	r2, [sl]
 8007ae0:	781a      	ldrb	r2, [r3, #0]
 8007ae2:	3201      	adds	r2, #1
 8007ae4:	701a      	strb	r2, [r3, #0]
 8007ae6:	e7bd      	b.n	8007a64 <_dtoa_r+0x65c>
 8007ae8:	2200      	movs	r2, #0
 8007aea:	4b09      	ldr	r3, [pc, #36]	@ (8007b10 <_dtoa_r+0x708>)
 8007aec:	f7f8 fcf4 	bl	80004d8 <__aeabi_dmul>
 8007af0:	2200      	movs	r2, #0
 8007af2:	2300      	movs	r3, #0
 8007af4:	4604      	mov	r4, r0
 8007af6:	460d      	mov	r5, r1
 8007af8:	f7f8 ff56 	bl	80009a8 <__aeabi_dcmpeq>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	f43f aebc 	beq.w	800787a <_dtoa_r+0x472>
 8007b02:	e6f1      	b.n	80078e8 <_dtoa_r+0x4e0>
 8007b04:	0800d348 	.word	0x0800d348
 8007b08:	3fe00000 	.word	0x3fe00000
 8007b0c:	3ff00000 	.word	0x3ff00000
 8007b10:	40240000 	.word	0x40240000
 8007b14:	40140000 	.word	0x40140000
 8007b18:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007b1a:	2a00      	cmp	r2, #0
 8007b1c:	f000 80db 	beq.w	8007cd6 <_dtoa_r+0x8ce>
 8007b20:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007b22:	2a01      	cmp	r2, #1
 8007b24:	f300 80bf 	bgt.w	8007ca6 <_dtoa_r+0x89e>
 8007b28:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007b2a:	2a00      	cmp	r2, #0
 8007b2c:	f000 80b7 	beq.w	8007c9e <_dtoa_r+0x896>
 8007b30:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007b34:	4646      	mov	r6, r8
 8007b36:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007b38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b3a:	2101      	movs	r1, #1
 8007b3c:	441a      	add	r2, r3
 8007b3e:	4658      	mov	r0, fp
 8007b40:	4498      	add	r8, r3
 8007b42:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b44:	f000 fc64 	bl	8008410 <__i2b>
 8007b48:	4605      	mov	r5, r0
 8007b4a:	b15e      	cbz	r6, 8007b64 <_dtoa_r+0x75c>
 8007b4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	dd08      	ble.n	8007b64 <_dtoa_r+0x75c>
 8007b52:	42b3      	cmp	r3, r6
 8007b54:	bfa8      	it	ge
 8007b56:	4633      	movge	r3, r6
 8007b58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b5a:	eba8 0803 	sub.w	r8, r8, r3
 8007b5e:	1af6      	subs	r6, r6, r3
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b66:	b1f3      	cbz	r3, 8007ba6 <_dtoa_r+0x79e>
 8007b68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f000 80b7 	beq.w	8007cde <_dtoa_r+0x8d6>
 8007b70:	b18c      	cbz	r4, 8007b96 <_dtoa_r+0x78e>
 8007b72:	4629      	mov	r1, r5
 8007b74:	4622      	mov	r2, r4
 8007b76:	4658      	mov	r0, fp
 8007b78:	f000 fd08 	bl	800858c <__pow5mult>
 8007b7c:	464a      	mov	r2, r9
 8007b7e:	4601      	mov	r1, r0
 8007b80:	4605      	mov	r5, r0
 8007b82:	4658      	mov	r0, fp
 8007b84:	f000 fc5a 	bl	800843c <__multiply>
 8007b88:	4649      	mov	r1, r9
 8007b8a:	9004      	str	r0, [sp, #16]
 8007b8c:	4658      	mov	r0, fp
 8007b8e:	f000 fb41 	bl	8008214 <_Bfree>
 8007b92:	9b04      	ldr	r3, [sp, #16]
 8007b94:	4699      	mov	r9, r3
 8007b96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b98:	1b1a      	subs	r2, r3, r4
 8007b9a:	d004      	beq.n	8007ba6 <_dtoa_r+0x79e>
 8007b9c:	4649      	mov	r1, r9
 8007b9e:	4658      	mov	r0, fp
 8007ba0:	f000 fcf4 	bl	800858c <__pow5mult>
 8007ba4:	4681      	mov	r9, r0
 8007ba6:	2101      	movs	r1, #1
 8007ba8:	4658      	mov	r0, fp
 8007baa:	f000 fc31 	bl	8008410 <__i2b>
 8007bae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 81c9 	beq.w	8007f4a <_dtoa_r+0xb42>
 8007bb8:	461a      	mov	r2, r3
 8007bba:	4601      	mov	r1, r0
 8007bbc:	4658      	mov	r0, fp
 8007bbe:	f000 fce5 	bl	800858c <__pow5mult>
 8007bc2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007bc4:	4604      	mov	r4, r0
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	f300 808f 	bgt.w	8007cea <_dtoa_r+0x8e2>
 8007bcc:	9b02      	ldr	r3, [sp, #8]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f040 8087 	bne.w	8007ce2 <_dtoa_r+0x8da>
 8007bd4:	9b03      	ldr	r3, [sp, #12]
 8007bd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f040 8083 	bne.w	8007ce6 <_dtoa_r+0x8de>
 8007be0:	9b03      	ldr	r3, [sp, #12]
 8007be2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007be6:	0d1b      	lsrs	r3, r3, #20
 8007be8:	051b      	lsls	r3, r3, #20
 8007bea:	b12b      	cbz	r3, 8007bf8 <_dtoa_r+0x7f0>
 8007bec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bee:	f108 0801 	add.w	r8, r8, #1
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f000 81aa 	beq.w	8007f56 <_dtoa_r+0xb4e>
 8007c02:	6923      	ldr	r3, [r4, #16]
 8007c04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c08:	6918      	ldr	r0, [r3, #16]
 8007c0a:	f000 fbb5 	bl	8008378 <__hi0bits>
 8007c0e:	f1c0 0020 	rsb	r0, r0, #32
 8007c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c14:	4418      	add	r0, r3
 8007c16:	f010 001f 	ands.w	r0, r0, #31
 8007c1a:	d071      	beq.n	8007d00 <_dtoa_r+0x8f8>
 8007c1c:	f1c0 0320 	rsb	r3, r0, #32
 8007c20:	2b04      	cmp	r3, #4
 8007c22:	dd65      	ble.n	8007cf0 <_dtoa_r+0x8e8>
 8007c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c26:	f1c0 001c 	rsb	r0, r0, #28
 8007c2a:	4403      	add	r3, r0
 8007c2c:	4480      	add	r8, r0
 8007c2e:	4406      	add	r6, r0
 8007c30:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c32:	f1b8 0f00 	cmp.w	r8, #0
 8007c36:	dd05      	ble.n	8007c44 <_dtoa_r+0x83c>
 8007c38:	4649      	mov	r1, r9
 8007c3a:	4642      	mov	r2, r8
 8007c3c:	4658      	mov	r0, fp
 8007c3e:	f000 fcff 	bl	8008640 <__lshift>
 8007c42:	4681      	mov	r9, r0
 8007c44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	dd05      	ble.n	8007c56 <_dtoa_r+0x84e>
 8007c4a:	4621      	mov	r1, r4
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	4658      	mov	r0, fp
 8007c50:	f000 fcf6 	bl	8008640 <__lshift>
 8007c54:	4604      	mov	r4, r0
 8007c56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d053      	beq.n	8007d04 <_dtoa_r+0x8fc>
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	4648      	mov	r0, r9
 8007c60:	f000 fd5a 	bl	8008718 <__mcmp>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	da4d      	bge.n	8007d04 <_dtoa_r+0x8fc>
 8007c68:	1e7b      	subs	r3, r7, #1
 8007c6a:	4649      	mov	r1, r9
 8007c6c:	9304      	str	r3, [sp, #16]
 8007c6e:	220a      	movs	r2, #10
 8007c70:	2300      	movs	r3, #0
 8007c72:	4658      	mov	r0, fp
 8007c74:	f000 faf0 	bl	8008258 <__multadd>
 8007c78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c7a:	4681      	mov	r9, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 816c 	beq.w	8007f5a <_dtoa_r+0xb52>
 8007c82:	2300      	movs	r3, #0
 8007c84:	4629      	mov	r1, r5
 8007c86:	220a      	movs	r2, #10
 8007c88:	4658      	mov	r0, fp
 8007c8a:	f000 fae5 	bl	8008258 <__multadd>
 8007c8e:	9b08      	ldr	r3, [sp, #32]
 8007c90:	4605      	mov	r5, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	dc61      	bgt.n	8007d5a <_dtoa_r+0x952>
 8007c96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	dc3b      	bgt.n	8007d14 <_dtoa_r+0x90c>
 8007c9c:	e05d      	b.n	8007d5a <_dtoa_r+0x952>
 8007c9e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007ca0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007ca4:	e746      	b.n	8007b34 <_dtoa_r+0x72c>
 8007ca6:	9b07      	ldr	r3, [sp, #28]
 8007ca8:	1e5c      	subs	r4, r3, #1
 8007caa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cac:	42a3      	cmp	r3, r4
 8007cae:	bfbf      	itttt	lt
 8007cb0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007cb2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007cb4:	1ae3      	sublt	r3, r4, r3
 8007cb6:	18d2      	addlt	r2, r2, r3
 8007cb8:	bfa8      	it	ge
 8007cba:	1b1c      	subge	r4, r3, r4
 8007cbc:	9b07      	ldr	r3, [sp, #28]
 8007cbe:	bfbe      	ittt	lt
 8007cc0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007cc2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007cc4:	2400      	movlt	r4, #0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	bfb5      	itete	lt
 8007cca:	eba8 0603 	sublt.w	r6, r8, r3
 8007cce:	4646      	movge	r6, r8
 8007cd0:	2300      	movlt	r3, #0
 8007cd2:	9b07      	ldrge	r3, [sp, #28]
 8007cd4:	e730      	b.n	8007b38 <_dtoa_r+0x730>
 8007cd6:	4646      	mov	r6, r8
 8007cd8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007cda:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007cdc:	e735      	b.n	8007b4a <_dtoa_r+0x742>
 8007cde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ce0:	e75c      	b.n	8007b9c <_dtoa_r+0x794>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	e788      	b.n	8007bf8 <_dtoa_r+0x7f0>
 8007ce6:	9b02      	ldr	r3, [sp, #8]
 8007ce8:	e786      	b.n	8007bf8 <_dtoa_r+0x7f0>
 8007cea:	2300      	movs	r3, #0
 8007cec:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cee:	e788      	b.n	8007c02 <_dtoa_r+0x7fa>
 8007cf0:	d09f      	beq.n	8007c32 <_dtoa_r+0x82a>
 8007cf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cf4:	331c      	adds	r3, #28
 8007cf6:	441a      	add	r2, r3
 8007cf8:	4498      	add	r8, r3
 8007cfa:	441e      	add	r6, r3
 8007cfc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007cfe:	e798      	b.n	8007c32 <_dtoa_r+0x82a>
 8007d00:	4603      	mov	r3, r0
 8007d02:	e7f6      	b.n	8007cf2 <_dtoa_r+0x8ea>
 8007d04:	9b07      	ldr	r3, [sp, #28]
 8007d06:	9704      	str	r7, [sp, #16]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	dc20      	bgt.n	8007d4e <_dtoa_r+0x946>
 8007d0c:	9308      	str	r3, [sp, #32]
 8007d0e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	dd1e      	ble.n	8007d52 <_dtoa_r+0x94a>
 8007d14:	9b08      	ldr	r3, [sp, #32]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f47f aebc 	bne.w	8007a94 <_dtoa_r+0x68c>
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	2205      	movs	r2, #5
 8007d20:	4658      	mov	r0, fp
 8007d22:	f000 fa99 	bl	8008258 <__multadd>
 8007d26:	4601      	mov	r1, r0
 8007d28:	4604      	mov	r4, r0
 8007d2a:	4648      	mov	r0, r9
 8007d2c:	f000 fcf4 	bl	8008718 <__mcmp>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	f77f aeaf 	ble.w	8007a94 <_dtoa_r+0x68c>
 8007d36:	2331      	movs	r3, #49	@ 0x31
 8007d38:	4656      	mov	r6, sl
 8007d3a:	f806 3b01 	strb.w	r3, [r6], #1
 8007d3e:	9b04      	ldr	r3, [sp, #16]
 8007d40:	3301      	adds	r3, #1
 8007d42:	9304      	str	r3, [sp, #16]
 8007d44:	e6aa      	b.n	8007a9c <_dtoa_r+0x694>
 8007d46:	9c07      	ldr	r4, [sp, #28]
 8007d48:	9704      	str	r7, [sp, #16]
 8007d4a:	4625      	mov	r5, r4
 8007d4c:	e7f3      	b.n	8007d36 <_dtoa_r+0x92e>
 8007d4e:	9b07      	ldr	r3, [sp, #28]
 8007d50:	9308      	str	r3, [sp, #32]
 8007d52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f000 8104 	beq.w	8007f62 <_dtoa_r+0xb5a>
 8007d5a:	2e00      	cmp	r6, #0
 8007d5c:	dd05      	ble.n	8007d6a <_dtoa_r+0x962>
 8007d5e:	4629      	mov	r1, r5
 8007d60:	4632      	mov	r2, r6
 8007d62:	4658      	mov	r0, fp
 8007d64:	f000 fc6c 	bl	8008640 <__lshift>
 8007d68:	4605      	mov	r5, r0
 8007d6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d05a      	beq.n	8007e26 <_dtoa_r+0xa1e>
 8007d70:	4658      	mov	r0, fp
 8007d72:	6869      	ldr	r1, [r5, #4]
 8007d74:	f000 fa0e 	bl	8008194 <_Balloc>
 8007d78:	4606      	mov	r6, r0
 8007d7a:	b928      	cbnz	r0, 8007d88 <_dtoa_r+0x980>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007d82:	4b83      	ldr	r3, [pc, #524]	@ (8007f90 <_dtoa_r+0xb88>)
 8007d84:	f7ff bb54 	b.w	8007430 <_dtoa_r+0x28>
 8007d88:	692a      	ldr	r2, [r5, #16]
 8007d8a:	f105 010c 	add.w	r1, r5, #12
 8007d8e:	3202      	adds	r2, #2
 8007d90:	0092      	lsls	r2, r2, #2
 8007d92:	300c      	adds	r0, #12
 8007d94:	f7ff fa9d 	bl	80072d2 <memcpy>
 8007d98:	2201      	movs	r2, #1
 8007d9a:	4631      	mov	r1, r6
 8007d9c:	4658      	mov	r0, fp
 8007d9e:	f000 fc4f 	bl	8008640 <__lshift>
 8007da2:	462f      	mov	r7, r5
 8007da4:	4605      	mov	r5, r0
 8007da6:	f10a 0301 	add.w	r3, sl, #1
 8007daa:	9307      	str	r3, [sp, #28]
 8007dac:	9b08      	ldr	r3, [sp, #32]
 8007dae:	4453      	add	r3, sl
 8007db0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007db2:	9b02      	ldr	r3, [sp, #8]
 8007db4:	f003 0301 	and.w	r3, r3, #1
 8007db8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dba:	9b07      	ldr	r3, [sp, #28]
 8007dbc:	4621      	mov	r1, r4
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	4648      	mov	r0, r9
 8007dc2:	9302      	str	r3, [sp, #8]
 8007dc4:	f7ff fa98 	bl	80072f8 <quorem>
 8007dc8:	4639      	mov	r1, r7
 8007dca:	9008      	str	r0, [sp, #32]
 8007dcc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007dd0:	4648      	mov	r0, r9
 8007dd2:	f000 fca1 	bl	8008718 <__mcmp>
 8007dd6:	462a      	mov	r2, r5
 8007dd8:	9009      	str	r0, [sp, #36]	@ 0x24
 8007dda:	4621      	mov	r1, r4
 8007ddc:	4658      	mov	r0, fp
 8007dde:	f000 fcb7 	bl	8008750 <__mdiff>
 8007de2:	68c2      	ldr	r2, [r0, #12]
 8007de4:	4606      	mov	r6, r0
 8007de6:	bb02      	cbnz	r2, 8007e2a <_dtoa_r+0xa22>
 8007de8:	4601      	mov	r1, r0
 8007dea:	4648      	mov	r0, r9
 8007dec:	f000 fc94 	bl	8008718 <__mcmp>
 8007df0:	4602      	mov	r2, r0
 8007df2:	4631      	mov	r1, r6
 8007df4:	4658      	mov	r0, fp
 8007df6:	920c      	str	r2, [sp, #48]	@ 0x30
 8007df8:	f000 fa0c 	bl	8008214 <_Bfree>
 8007dfc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007dfe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007e00:	9e07      	ldr	r6, [sp, #28]
 8007e02:	ea43 0102 	orr.w	r1, r3, r2
 8007e06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e08:	4319      	orrs	r1, r3
 8007e0a:	d110      	bne.n	8007e2e <_dtoa_r+0xa26>
 8007e0c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007e10:	d029      	beq.n	8007e66 <_dtoa_r+0xa5e>
 8007e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	dd02      	ble.n	8007e1e <_dtoa_r+0xa16>
 8007e18:	9b08      	ldr	r3, [sp, #32]
 8007e1a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007e1e:	9b02      	ldr	r3, [sp, #8]
 8007e20:	f883 8000 	strb.w	r8, [r3]
 8007e24:	e63b      	b.n	8007a9e <_dtoa_r+0x696>
 8007e26:	4628      	mov	r0, r5
 8007e28:	e7bb      	b.n	8007da2 <_dtoa_r+0x99a>
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	e7e1      	b.n	8007df2 <_dtoa_r+0x9ea>
 8007e2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	db04      	blt.n	8007e3e <_dtoa_r+0xa36>
 8007e34:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007e36:	430b      	orrs	r3, r1
 8007e38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007e3a:	430b      	orrs	r3, r1
 8007e3c:	d120      	bne.n	8007e80 <_dtoa_r+0xa78>
 8007e3e:	2a00      	cmp	r2, #0
 8007e40:	dded      	ble.n	8007e1e <_dtoa_r+0xa16>
 8007e42:	4649      	mov	r1, r9
 8007e44:	2201      	movs	r2, #1
 8007e46:	4658      	mov	r0, fp
 8007e48:	f000 fbfa 	bl	8008640 <__lshift>
 8007e4c:	4621      	mov	r1, r4
 8007e4e:	4681      	mov	r9, r0
 8007e50:	f000 fc62 	bl	8008718 <__mcmp>
 8007e54:	2800      	cmp	r0, #0
 8007e56:	dc03      	bgt.n	8007e60 <_dtoa_r+0xa58>
 8007e58:	d1e1      	bne.n	8007e1e <_dtoa_r+0xa16>
 8007e5a:	f018 0f01 	tst.w	r8, #1
 8007e5e:	d0de      	beq.n	8007e1e <_dtoa_r+0xa16>
 8007e60:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007e64:	d1d8      	bne.n	8007e18 <_dtoa_r+0xa10>
 8007e66:	2339      	movs	r3, #57	@ 0x39
 8007e68:	9a02      	ldr	r2, [sp, #8]
 8007e6a:	7013      	strb	r3, [r2, #0]
 8007e6c:	4633      	mov	r3, r6
 8007e6e:	461e      	mov	r6, r3
 8007e70:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007e74:	3b01      	subs	r3, #1
 8007e76:	2a39      	cmp	r2, #57	@ 0x39
 8007e78:	d052      	beq.n	8007f20 <_dtoa_r+0xb18>
 8007e7a:	3201      	adds	r2, #1
 8007e7c:	701a      	strb	r2, [r3, #0]
 8007e7e:	e60e      	b.n	8007a9e <_dtoa_r+0x696>
 8007e80:	2a00      	cmp	r2, #0
 8007e82:	dd07      	ble.n	8007e94 <_dtoa_r+0xa8c>
 8007e84:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007e88:	d0ed      	beq.n	8007e66 <_dtoa_r+0xa5e>
 8007e8a:	9a02      	ldr	r2, [sp, #8]
 8007e8c:	f108 0301 	add.w	r3, r8, #1
 8007e90:	7013      	strb	r3, [r2, #0]
 8007e92:	e604      	b.n	8007a9e <_dtoa_r+0x696>
 8007e94:	9b07      	ldr	r3, [sp, #28]
 8007e96:	9a07      	ldr	r2, [sp, #28]
 8007e98:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007e9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d028      	beq.n	8007ef4 <_dtoa_r+0xaec>
 8007ea2:	4649      	mov	r1, r9
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	220a      	movs	r2, #10
 8007ea8:	4658      	mov	r0, fp
 8007eaa:	f000 f9d5 	bl	8008258 <__multadd>
 8007eae:	42af      	cmp	r7, r5
 8007eb0:	4681      	mov	r9, r0
 8007eb2:	f04f 0300 	mov.w	r3, #0
 8007eb6:	f04f 020a 	mov.w	r2, #10
 8007eba:	4639      	mov	r1, r7
 8007ebc:	4658      	mov	r0, fp
 8007ebe:	d107      	bne.n	8007ed0 <_dtoa_r+0xac8>
 8007ec0:	f000 f9ca 	bl	8008258 <__multadd>
 8007ec4:	4607      	mov	r7, r0
 8007ec6:	4605      	mov	r5, r0
 8007ec8:	9b07      	ldr	r3, [sp, #28]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	9307      	str	r3, [sp, #28]
 8007ece:	e774      	b.n	8007dba <_dtoa_r+0x9b2>
 8007ed0:	f000 f9c2 	bl	8008258 <__multadd>
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	4607      	mov	r7, r0
 8007ed8:	2300      	movs	r3, #0
 8007eda:	220a      	movs	r2, #10
 8007edc:	4658      	mov	r0, fp
 8007ede:	f000 f9bb 	bl	8008258 <__multadd>
 8007ee2:	4605      	mov	r5, r0
 8007ee4:	e7f0      	b.n	8007ec8 <_dtoa_r+0xac0>
 8007ee6:	9b08      	ldr	r3, [sp, #32]
 8007ee8:	2700      	movs	r7, #0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	bfcc      	ite	gt
 8007eee:	461e      	movgt	r6, r3
 8007ef0:	2601      	movle	r6, #1
 8007ef2:	4456      	add	r6, sl
 8007ef4:	4649      	mov	r1, r9
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	4658      	mov	r0, fp
 8007efa:	f000 fba1 	bl	8008640 <__lshift>
 8007efe:	4621      	mov	r1, r4
 8007f00:	4681      	mov	r9, r0
 8007f02:	f000 fc09 	bl	8008718 <__mcmp>
 8007f06:	2800      	cmp	r0, #0
 8007f08:	dcb0      	bgt.n	8007e6c <_dtoa_r+0xa64>
 8007f0a:	d102      	bne.n	8007f12 <_dtoa_r+0xb0a>
 8007f0c:	f018 0f01 	tst.w	r8, #1
 8007f10:	d1ac      	bne.n	8007e6c <_dtoa_r+0xa64>
 8007f12:	4633      	mov	r3, r6
 8007f14:	461e      	mov	r6, r3
 8007f16:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f1a:	2a30      	cmp	r2, #48	@ 0x30
 8007f1c:	d0fa      	beq.n	8007f14 <_dtoa_r+0xb0c>
 8007f1e:	e5be      	b.n	8007a9e <_dtoa_r+0x696>
 8007f20:	459a      	cmp	sl, r3
 8007f22:	d1a4      	bne.n	8007e6e <_dtoa_r+0xa66>
 8007f24:	9b04      	ldr	r3, [sp, #16]
 8007f26:	3301      	adds	r3, #1
 8007f28:	9304      	str	r3, [sp, #16]
 8007f2a:	2331      	movs	r3, #49	@ 0x31
 8007f2c:	f88a 3000 	strb.w	r3, [sl]
 8007f30:	e5b5      	b.n	8007a9e <_dtoa_r+0x696>
 8007f32:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007f34:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007f94 <_dtoa_r+0xb8c>
 8007f38:	b11b      	cbz	r3, 8007f42 <_dtoa_r+0xb3a>
 8007f3a:	f10a 0308 	add.w	r3, sl, #8
 8007f3e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007f40:	6013      	str	r3, [r2, #0]
 8007f42:	4650      	mov	r0, sl
 8007f44:	b017      	add	sp, #92	@ 0x5c
 8007f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f4a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	f77f ae3d 	ble.w	8007bcc <_dtoa_r+0x7c4>
 8007f52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f54:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f56:	2001      	movs	r0, #1
 8007f58:	e65b      	b.n	8007c12 <_dtoa_r+0x80a>
 8007f5a:	9b08      	ldr	r3, [sp, #32]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f77f aed6 	ble.w	8007d0e <_dtoa_r+0x906>
 8007f62:	4656      	mov	r6, sl
 8007f64:	4621      	mov	r1, r4
 8007f66:	4648      	mov	r0, r9
 8007f68:	f7ff f9c6 	bl	80072f8 <quorem>
 8007f6c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007f70:	9b08      	ldr	r3, [sp, #32]
 8007f72:	f806 8b01 	strb.w	r8, [r6], #1
 8007f76:	eba6 020a 	sub.w	r2, r6, sl
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	ddb3      	ble.n	8007ee6 <_dtoa_r+0xade>
 8007f7e:	4649      	mov	r1, r9
 8007f80:	2300      	movs	r3, #0
 8007f82:	220a      	movs	r2, #10
 8007f84:	4658      	mov	r0, fp
 8007f86:	f000 f967 	bl	8008258 <__multadd>
 8007f8a:	4681      	mov	r9, r0
 8007f8c:	e7ea      	b.n	8007f64 <_dtoa_r+0xb5c>
 8007f8e:	bf00      	nop
 8007f90:	0800d2a7 	.word	0x0800d2a7
 8007f94:	0800d22b 	.word	0x0800d22b

08007f98 <_free_r>:
 8007f98:	b538      	push	{r3, r4, r5, lr}
 8007f9a:	4605      	mov	r5, r0
 8007f9c:	2900      	cmp	r1, #0
 8007f9e:	d040      	beq.n	8008022 <_free_r+0x8a>
 8007fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fa4:	1f0c      	subs	r4, r1, #4
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	bfb8      	it	lt
 8007faa:	18e4      	addlt	r4, r4, r3
 8007fac:	f000 f8e6 	bl	800817c <__malloc_lock>
 8007fb0:	4a1c      	ldr	r2, [pc, #112]	@ (8008024 <_free_r+0x8c>)
 8007fb2:	6813      	ldr	r3, [r2, #0]
 8007fb4:	b933      	cbnz	r3, 8007fc4 <_free_r+0x2c>
 8007fb6:	6063      	str	r3, [r4, #4]
 8007fb8:	6014      	str	r4, [r2, #0]
 8007fba:	4628      	mov	r0, r5
 8007fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fc0:	f000 b8e2 	b.w	8008188 <__malloc_unlock>
 8007fc4:	42a3      	cmp	r3, r4
 8007fc6:	d908      	bls.n	8007fda <_free_r+0x42>
 8007fc8:	6820      	ldr	r0, [r4, #0]
 8007fca:	1821      	adds	r1, r4, r0
 8007fcc:	428b      	cmp	r3, r1
 8007fce:	bf01      	itttt	eq
 8007fd0:	6819      	ldreq	r1, [r3, #0]
 8007fd2:	685b      	ldreq	r3, [r3, #4]
 8007fd4:	1809      	addeq	r1, r1, r0
 8007fd6:	6021      	streq	r1, [r4, #0]
 8007fd8:	e7ed      	b.n	8007fb6 <_free_r+0x1e>
 8007fda:	461a      	mov	r2, r3
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	b10b      	cbz	r3, 8007fe4 <_free_r+0x4c>
 8007fe0:	42a3      	cmp	r3, r4
 8007fe2:	d9fa      	bls.n	8007fda <_free_r+0x42>
 8007fe4:	6811      	ldr	r1, [r2, #0]
 8007fe6:	1850      	adds	r0, r2, r1
 8007fe8:	42a0      	cmp	r0, r4
 8007fea:	d10b      	bne.n	8008004 <_free_r+0x6c>
 8007fec:	6820      	ldr	r0, [r4, #0]
 8007fee:	4401      	add	r1, r0
 8007ff0:	1850      	adds	r0, r2, r1
 8007ff2:	4283      	cmp	r3, r0
 8007ff4:	6011      	str	r1, [r2, #0]
 8007ff6:	d1e0      	bne.n	8007fba <_free_r+0x22>
 8007ff8:	6818      	ldr	r0, [r3, #0]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	4408      	add	r0, r1
 8007ffe:	6010      	str	r0, [r2, #0]
 8008000:	6053      	str	r3, [r2, #4]
 8008002:	e7da      	b.n	8007fba <_free_r+0x22>
 8008004:	d902      	bls.n	800800c <_free_r+0x74>
 8008006:	230c      	movs	r3, #12
 8008008:	602b      	str	r3, [r5, #0]
 800800a:	e7d6      	b.n	8007fba <_free_r+0x22>
 800800c:	6820      	ldr	r0, [r4, #0]
 800800e:	1821      	adds	r1, r4, r0
 8008010:	428b      	cmp	r3, r1
 8008012:	bf01      	itttt	eq
 8008014:	6819      	ldreq	r1, [r3, #0]
 8008016:	685b      	ldreq	r3, [r3, #4]
 8008018:	1809      	addeq	r1, r1, r0
 800801a:	6021      	streq	r1, [r4, #0]
 800801c:	6063      	str	r3, [r4, #4]
 800801e:	6054      	str	r4, [r2, #4]
 8008020:	e7cb      	b.n	8007fba <_free_r+0x22>
 8008022:	bd38      	pop	{r3, r4, r5, pc}
 8008024:	200008c4 	.word	0x200008c4

08008028 <malloc>:
 8008028:	4b02      	ldr	r3, [pc, #8]	@ (8008034 <malloc+0xc>)
 800802a:	4601      	mov	r1, r0
 800802c:	6818      	ldr	r0, [r3, #0]
 800802e:	f000 b825 	b.w	800807c <_malloc_r>
 8008032:	bf00      	nop
 8008034:	20000020 	.word	0x20000020

08008038 <sbrk_aligned>:
 8008038:	b570      	push	{r4, r5, r6, lr}
 800803a:	4e0f      	ldr	r6, [pc, #60]	@ (8008078 <sbrk_aligned+0x40>)
 800803c:	460c      	mov	r4, r1
 800803e:	6831      	ldr	r1, [r6, #0]
 8008040:	4605      	mov	r5, r0
 8008042:	b911      	cbnz	r1, 800804a <sbrk_aligned+0x12>
 8008044:	f001 fddc 	bl	8009c00 <_sbrk_r>
 8008048:	6030      	str	r0, [r6, #0]
 800804a:	4621      	mov	r1, r4
 800804c:	4628      	mov	r0, r5
 800804e:	f001 fdd7 	bl	8009c00 <_sbrk_r>
 8008052:	1c43      	adds	r3, r0, #1
 8008054:	d103      	bne.n	800805e <sbrk_aligned+0x26>
 8008056:	f04f 34ff 	mov.w	r4, #4294967295
 800805a:	4620      	mov	r0, r4
 800805c:	bd70      	pop	{r4, r5, r6, pc}
 800805e:	1cc4      	adds	r4, r0, #3
 8008060:	f024 0403 	bic.w	r4, r4, #3
 8008064:	42a0      	cmp	r0, r4
 8008066:	d0f8      	beq.n	800805a <sbrk_aligned+0x22>
 8008068:	1a21      	subs	r1, r4, r0
 800806a:	4628      	mov	r0, r5
 800806c:	f001 fdc8 	bl	8009c00 <_sbrk_r>
 8008070:	3001      	adds	r0, #1
 8008072:	d1f2      	bne.n	800805a <sbrk_aligned+0x22>
 8008074:	e7ef      	b.n	8008056 <sbrk_aligned+0x1e>
 8008076:	bf00      	nop
 8008078:	200008c0 	.word	0x200008c0

0800807c <_malloc_r>:
 800807c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008080:	1ccd      	adds	r5, r1, #3
 8008082:	f025 0503 	bic.w	r5, r5, #3
 8008086:	3508      	adds	r5, #8
 8008088:	2d0c      	cmp	r5, #12
 800808a:	bf38      	it	cc
 800808c:	250c      	movcc	r5, #12
 800808e:	2d00      	cmp	r5, #0
 8008090:	4606      	mov	r6, r0
 8008092:	db01      	blt.n	8008098 <_malloc_r+0x1c>
 8008094:	42a9      	cmp	r1, r5
 8008096:	d904      	bls.n	80080a2 <_malloc_r+0x26>
 8008098:	230c      	movs	r3, #12
 800809a:	6033      	str	r3, [r6, #0]
 800809c:	2000      	movs	r0, #0
 800809e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008178 <_malloc_r+0xfc>
 80080a6:	f000 f869 	bl	800817c <__malloc_lock>
 80080aa:	f8d8 3000 	ldr.w	r3, [r8]
 80080ae:	461c      	mov	r4, r3
 80080b0:	bb44      	cbnz	r4, 8008104 <_malloc_r+0x88>
 80080b2:	4629      	mov	r1, r5
 80080b4:	4630      	mov	r0, r6
 80080b6:	f7ff ffbf 	bl	8008038 <sbrk_aligned>
 80080ba:	1c43      	adds	r3, r0, #1
 80080bc:	4604      	mov	r4, r0
 80080be:	d158      	bne.n	8008172 <_malloc_r+0xf6>
 80080c0:	f8d8 4000 	ldr.w	r4, [r8]
 80080c4:	4627      	mov	r7, r4
 80080c6:	2f00      	cmp	r7, #0
 80080c8:	d143      	bne.n	8008152 <_malloc_r+0xd6>
 80080ca:	2c00      	cmp	r4, #0
 80080cc:	d04b      	beq.n	8008166 <_malloc_r+0xea>
 80080ce:	6823      	ldr	r3, [r4, #0]
 80080d0:	4639      	mov	r1, r7
 80080d2:	4630      	mov	r0, r6
 80080d4:	eb04 0903 	add.w	r9, r4, r3
 80080d8:	f001 fd92 	bl	8009c00 <_sbrk_r>
 80080dc:	4581      	cmp	r9, r0
 80080de:	d142      	bne.n	8008166 <_malloc_r+0xea>
 80080e0:	6821      	ldr	r1, [r4, #0]
 80080e2:	4630      	mov	r0, r6
 80080e4:	1a6d      	subs	r5, r5, r1
 80080e6:	4629      	mov	r1, r5
 80080e8:	f7ff ffa6 	bl	8008038 <sbrk_aligned>
 80080ec:	3001      	adds	r0, #1
 80080ee:	d03a      	beq.n	8008166 <_malloc_r+0xea>
 80080f0:	6823      	ldr	r3, [r4, #0]
 80080f2:	442b      	add	r3, r5
 80080f4:	6023      	str	r3, [r4, #0]
 80080f6:	f8d8 3000 	ldr.w	r3, [r8]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	bb62      	cbnz	r2, 8008158 <_malloc_r+0xdc>
 80080fe:	f8c8 7000 	str.w	r7, [r8]
 8008102:	e00f      	b.n	8008124 <_malloc_r+0xa8>
 8008104:	6822      	ldr	r2, [r4, #0]
 8008106:	1b52      	subs	r2, r2, r5
 8008108:	d420      	bmi.n	800814c <_malloc_r+0xd0>
 800810a:	2a0b      	cmp	r2, #11
 800810c:	d917      	bls.n	800813e <_malloc_r+0xc2>
 800810e:	1961      	adds	r1, r4, r5
 8008110:	42a3      	cmp	r3, r4
 8008112:	6025      	str	r5, [r4, #0]
 8008114:	bf18      	it	ne
 8008116:	6059      	strne	r1, [r3, #4]
 8008118:	6863      	ldr	r3, [r4, #4]
 800811a:	bf08      	it	eq
 800811c:	f8c8 1000 	streq.w	r1, [r8]
 8008120:	5162      	str	r2, [r4, r5]
 8008122:	604b      	str	r3, [r1, #4]
 8008124:	4630      	mov	r0, r6
 8008126:	f000 f82f 	bl	8008188 <__malloc_unlock>
 800812a:	f104 000b 	add.w	r0, r4, #11
 800812e:	1d23      	adds	r3, r4, #4
 8008130:	f020 0007 	bic.w	r0, r0, #7
 8008134:	1ac2      	subs	r2, r0, r3
 8008136:	bf1c      	itt	ne
 8008138:	1a1b      	subne	r3, r3, r0
 800813a:	50a3      	strne	r3, [r4, r2]
 800813c:	e7af      	b.n	800809e <_malloc_r+0x22>
 800813e:	6862      	ldr	r2, [r4, #4]
 8008140:	42a3      	cmp	r3, r4
 8008142:	bf0c      	ite	eq
 8008144:	f8c8 2000 	streq.w	r2, [r8]
 8008148:	605a      	strne	r2, [r3, #4]
 800814a:	e7eb      	b.n	8008124 <_malloc_r+0xa8>
 800814c:	4623      	mov	r3, r4
 800814e:	6864      	ldr	r4, [r4, #4]
 8008150:	e7ae      	b.n	80080b0 <_malloc_r+0x34>
 8008152:	463c      	mov	r4, r7
 8008154:	687f      	ldr	r7, [r7, #4]
 8008156:	e7b6      	b.n	80080c6 <_malloc_r+0x4a>
 8008158:	461a      	mov	r2, r3
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	42a3      	cmp	r3, r4
 800815e:	d1fb      	bne.n	8008158 <_malloc_r+0xdc>
 8008160:	2300      	movs	r3, #0
 8008162:	6053      	str	r3, [r2, #4]
 8008164:	e7de      	b.n	8008124 <_malloc_r+0xa8>
 8008166:	230c      	movs	r3, #12
 8008168:	4630      	mov	r0, r6
 800816a:	6033      	str	r3, [r6, #0]
 800816c:	f000 f80c 	bl	8008188 <__malloc_unlock>
 8008170:	e794      	b.n	800809c <_malloc_r+0x20>
 8008172:	6005      	str	r5, [r0, #0]
 8008174:	e7d6      	b.n	8008124 <_malloc_r+0xa8>
 8008176:	bf00      	nop
 8008178:	200008c4 	.word	0x200008c4

0800817c <__malloc_lock>:
 800817c:	4801      	ldr	r0, [pc, #4]	@ (8008184 <__malloc_lock+0x8>)
 800817e:	f7ff b898 	b.w	80072b2 <__retarget_lock_acquire_recursive>
 8008182:	bf00      	nop
 8008184:	200008bc 	.word	0x200008bc

08008188 <__malloc_unlock>:
 8008188:	4801      	ldr	r0, [pc, #4]	@ (8008190 <__malloc_unlock+0x8>)
 800818a:	f7ff b893 	b.w	80072b4 <__retarget_lock_release_recursive>
 800818e:	bf00      	nop
 8008190:	200008bc 	.word	0x200008bc

08008194 <_Balloc>:
 8008194:	b570      	push	{r4, r5, r6, lr}
 8008196:	69c6      	ldr	r6, [r0, #28]
 8008198:	4604      	mov	r4, r0
 800819a:	460d      	mov	r5, r1
 800819c:	b976      	cbnz	r6, 80081bc <_Balloc+0x28>
 800819e:	2010      	movs	r0, #16
 80081a0:	f7ff ff42 	bl	8008028 <malloc>
 80081a4:	4602      	mov	r2, r0
 80081a6:	61e0      	str	r0, [r4, #28]
 80081a8:	b920      	cbnz	r0, 80081b4 <_Balloc+0x20>
 80081aa:	216b      	movs	r1, #107	@ 0x6b
 80081ac:	4b17      	ldr	r3, [pc, #92]	@ (800820c <_Balloc+0x78>)
 80081ae:	4818      	ldr	r0, [pc, #96]	@ (8008210 <_Balloc+0x7c>)
 80081b0:	f001 fd3c 	bl	8009c2c <__assert_func>
 80081b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081b8:	6006      	str	r6, [r0, #0]
 80081ba:	60c6      	str	r6, [r0, #12]
 80081bc:	69e6      	ldr	r6, [r4, #28]
 80081be:	68f3      	ldr	r3, [r6, #12]
 80081c0:	b183      	cbz	r3, 80081e4 <_Balloc+0x50>
 80081c2:	69e3      	ldr	r3, [r4, #28]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80081ca:	b9b8      	cbnz	r0, 80081fc <_Balloc+0x68>
 80081cc:	2101      	movs	r1, #1
 80081ce:	fa01 f605 	lsl.w	r6, r1, r5
 80081d2:	1d72      	adds	r2, r6, #5
 80081d4:	4620      	mov	r0, r4
 80081d6:	0092      	lsls	r2, r2, #2
 80081d8:	f001 fd46 	bl	8009c68 <_calloc_r>
 80081dc:	b160      	cbz	r0, 80081f8 <_Balloc+0x64>
 80081de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80081e2:	e00e      	b.n	8008202 <_Balloc+0x6e>
 80081e4:	2221      	movs	r2, #33	@ 0x21
 80081e6:	2104      	movs	r1, #4
 80081e8:	4620      	mov	r0, r4
 80081ea:	f001 fd3d 	bl	8009c68 <_calloc_r>
 80081ee:	69e3      	ldr	r3, [r4, #28]
 80081f0:	60f0      	str	r0, [r6, #12]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1e4      	bne.n	80081c2 <_Balloc+0x2e>
 80081f8:	2000      	movs	r0, #0
 80081fa:	bd70      	pop	{r4, r5, r6, pc}
 80081fc:	6802      	ldr	r2, [r0, #0]
 80081fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008202:	2300      	movs	r3, #0
 8008204:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008208:	e7f7      	b.n	80081fa <_Balloc+0x66>
 800820a:	bf00      	nop
 800820c:	0800d238 	.word	0x0800d238
 8008210:	0800d2b8 	.word	0x0800d2b8

08008214 <_Bfree>:
 8008214:	b570      	push	{r4, r5, r6, lr}
 8008216:	69c6      	ldr	r6, [r0, #28]
 8008218:	4605      	mov	r5, r0
 800821a:	460c      	mov	r4, r1
 800821c:	b976      	cbnz	r6, 800823c <_Bfree+0x28>
 800821e:	2010      	movs	r0, #16
 8008220:	f7ff ff02 	bl	8008028 <malloc>
 8008224:	4602      	mov	r2, r0
 8008226:	61e8      	str	r0, [r5, #28]
 8008228:	b920      	cbnz	r0, 8008234 <_Bfree+0x20>
 800822a:	218f      	movs	r1, #143	@ 0x8f
 800822c:	4b08      	ldr	r3, [pc, #32]	@ (8008250 <_Bfree+0x3c>)
 800822e:	4809      	ldr	r0, [pc, #36]	@ (8008254 <_Bfree+0x40>)
 8008230:	f001 fcfc 	bl	8009c2c <__assert_func>
 8008234:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008238:	6006      	str	r6, [r0, #0]
 800823a:	60c6      	str	r6, [r0, #12]
 800823c:	b13c      	cbz	r4, 800824e <_Bfree+0x3a>
 800823e:	69eb      	ldr	r3, [r5, #28]
 8008240:	6862      	ldr	r2, [r4, #4]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008248:	6021      	str	r1, [r4, #0]
 800824a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800824e:	bd70      	pop	{r4, r5, r6, pc}
 8008250:	0800d238 	.word	0x0800d238
 8008254:	0800d2b8 	.word	0x0800d2b8

08008258 <__multadd>:
 8008258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800825c:	4607      	mov	r7, r0
 800825e:	460c      	mov	r4, r1
 8008260:	461e      	mov	r6, r3
 8008262:	2000      	movs	r0, #0
 8008264:	690d      	ldr	r5, [r1, #16]
 8008266:	f101 0c14 	add.w	ip, r1, #20
 800826a:	f8dc 3000 	ldr.w	r3, [ip]
 800826e:	3001      	adds	r0, #1
 8008270:	b299      	uxth	r1, r3
 8008272:	fb02 6101 	mla	r1, r2, r1, r6
 8008276:	0c1e      	lsrs	r6, r3, #16
 8008278:	0c0b      	lsrs	r3, r1, #16
 800827a:	fb02 3306 	mla	r3, r2, r6, r3
 800827e:	b289      	uxth	r1, r1
 8008280:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008284:	4285      	cmp	r5, r0
 8008286:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800828a:	f84c 1b04 	str.w	r1, [ip], #4
 800828e:	dcec      	bgt.n	800826a <__multadd+0x12>
 8008290:	b30e      	cbz	r6, 80082d6 <__multadd+0x7e>
 8008292:	68a3      	ldr	r3, [r4, #8]
 8008294:	42ab      	cmp	r3, r5
 8008296:	dc19      	bgt.n	80082cc <__multadd+0x74>
 8008298:	6861      	ldr	r1, [r4, #4]
 800829a:	4638      	mov	r0, r7
 800829c:	3101      	adds	r1, #1
 800829e:	f7ff ff79 	bl	8008194 <_Balloc>
 80082a2:	4680      	mov	r8, r0
 80082a4:	b928      	cbnz	r0, 80082b2 <__multadd+0x5a>
 80082a6:	4602      	mov	r2, r0
 80082a8:	21ba      	movs	r1, #186	@ 0xba
 80082aa:	4b0c      	ldr	r3, [pc, #48]	@ (80082dc <__multadd+0x84>)
 80082ac:	480c      	ldr	r0, [pc, #48]	@ (80082e0 <__multadd+0x88>)
 80082ae:	f001 fcbd 	bl	8009c2c <__assert_func>
 80082b2:	6922      	ldr	r2, [r4, #16]
 80082b4:	f104 010c 	add.w	r1, r4, #12
 80082b8:	3202      	adds	r2, #2
 80082ba:	0092      	lsls	r2, r2, #2
 80082bc:	300c      	adds	r0, #12
 80082be:	f7ff f808 	bl	80072d2 <memcpy>
 80082c2:	4621      	mov	r1, r4
 80082c4:	4638      	mov	r0, r7
 80082c6:	f7ff ffa5 	bl	8008214 <_Bfree>
 80082ca:	4644      	mov	r4, r8
 80082cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80082d0:	3501      	adds	r5, #1
 80082d2:	615e      	str	r6, [r3, #20]
 80082d4:	6125      	str	r5, [r4, #16]
 80082d6:	4620      	mov	r0, r4
 80082d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082dc:	0800d2a7 	.word	0x0800d2a7
 80082e0:	0800d2b8 	.word	0x0800d2b8

080082e4 <__s2b>:
 80082e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082e8:	4615      	mov	r5, r2
 80082ea:	2209      	movs	r2, #9
 80082ec:	461f      	mov	r7, r3
 80082ee:	3308      	adds	r3, #8
 80082f0:	460c      	mov	r4, r1
 80082f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80082f6:	4606      	mov	r6, r0
 80082f8:	2201      	movs	r2, #1
 80082fa:	2100      	movs	r1, #0
 80082fc:	429a      	cmp	r2, r3
 80082fe:	db09      	blt.n	8008314 <__s2b+0x30>
 8008300:	4630      	mov	r0, r6
 8008302:	f7ff ff47 	bl	8008194 <_Balloc>
 8008306:	b940      	cbnz	r0, 800831a <__s2b+0x36>
 8008308:	4602      	mov	r2, r0
 800830a:	21d3      	movs	r1, #211	@ 0xd3
 800830c:	4b18      	ldr	r3, [pc, #96]	@ (8008370 <__s2b+0x8c>)
 800830e:	4819      	ldr	r0, [pc, #100]	@ (8008374 <__s2b+0x90>)
 8008310:	f001 fc8c 	bl	8009c2c <__assert_func>
 8008314:	0052      	lsls	r2, r2, #1
 8008316:	3101      	adds	r1, #1
 8008318:	e7f0      	b.n	80082fc <__s2b+0x18>
 800831a:	9b08      	ldr	r3, [sp, #32]
 800831c:	2d09      	cmp	r5, #9
 800831e:	6143      	str	r3, [r0, #20]
 8008320:	f04f 0301 	mov.w	r3, #1
 8008324:	6103      	str	r3, [r0, #16]
 8008326:	dd16      	ble.n	8008356 <__s2b+0x72>
 8008328:	f104 0909 	add.w	r9, r4, #9
 800832c:	46c8      	mov	r8, r9
 800832e:	442c      	add	r4, r5
 8008330:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008334:	4601      	mov	r1, r0
 8008336:	220a      	movs	r2, #10
 8008338:	4630      	mov	r0, r6
 800833a:	3b30      	subs	r3, #48	@ 0x30
 800833c:	f7ff ff8c 	bl	8008258 <__multadd>
 8008340:	45a0      	cmp	r8, r4
 8008342:	d1f5      	bne.n	8008330 <__s2b+0x4c>
 8008344:	f1a5 0408 	sub.w	r4, r5, #8
 8008348:	444c      	add	r4, r9
 800834a:	1b2d      	subs	r5, r5, r4
 800834c:	1963      	adds	r3, r4, r5
 800834e:	42bb      	cmp	r3, r7
 8008350:	db04      	blt.n	800835c <__s2b+0x78>
 8008352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008356:	2509      	movs	r5, #9
 8008358:	340a      	adds	r4, #10
 800835a:	e7f6      	b.n	800834a <__s2b+0x66>
 800835c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008360:	4601      	mov	r1, r0
 8008362:	220a      	movs	r2, #10
 8008364:	4630      	mov	r0, r6
 8008366:	3b30      	subs	r3, #48	@ 0x30
 8008368:	f7ff ff76 	bl	8008258 <__multadd>
 800836c:	e7ee      	b.n	800834c <__s2b+0x68>
 800836e:	bf00      	nop
 8008370:	0800d2a7 	.word	0x0800d2a7
 8008374:	0800d2b8 	.word	0x0800d2b8

08008378 <__hi0bits>:
 8008378:	4603      	mov	r3, r0
 800837a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800837e:	bf3a      	itte	cc
 8008380:	0403      	lslcc	r3, r0, #16
 8008382:	2010      	movcc	r0, #16
 8008384:	2000      	movcs	r0, #0
 8008386:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800838a:	bf3c      	itt	cc
 800838c:	021b      	lslcc	r3, r3, #8
 800838e:	3008      	addcc	r0, #8
 8008390:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008394:	bf3c      	itt	cc
 8008396:	011b      	lslcc	r3, r3, #4
 8008398:	3004      	addcc	r0, #4
 800839a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800839e:	bf3c      	itt	cc
 80083a0:	009b      	lslcc	r3, r3, #2
 80083a2:	3002      	addcc	r0, #2
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	db05      	blt.n	80083b4 <__hi0bits+0x3c>
 80083a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80083ac:	f100 0001 	add.w	r0, r0, #1
 80083b0:	bf08      	it	eq
 80083b2:	2020      	moveq	r0, #32
 80083b4:	4770      	bx	lr

080083b6 <__lo0bits>:
 80083b6:	6803      	ldr	r3, [r0, #0]
 80083b8:	4602      	mov	r2, r0
 80083ba:	f013 0007 	ands.w	r0, r3, #7
 80083be:	d00b      	beq.n	80083d8 <__lo0bits+0x22>
 80083c0:	07d9      	lsls	r1, r3, #31
 80083c2:	d421      	bmi.n	8008408 <__lo0bits+0x52>
 80083c4:	0798      	lsls	r0, r3, #30
 80083c6:	bf49      	itett	mi
 80083c8:	085b      	lsrmi	r3, r3, #1
 80083ca:	089b      	lsrpl	r3, r3, #2
 80083cc:	2001      	movmi	r0, #1
 80083ce:	6013      	strmi	r3, [r2, #0]
 80083d0:	bf5c      	itt	pl
 80083d2:	2002      	movpl	r0, #2
 80083d4:	6013      	strpl	r3, [r2, #0]
 80083d6:	4770      	bx	lr
 80083d8:	b299      	uxth	r1, r3
 80083da:	b909      	cbnz	r1, 80083e0 <__lo0bits+0x2a>
 80083dc:	2010      	movs	r0, #16
 80083de:	0c1b      	lsrs	r3, r3, #16
 80083e0:	b2d9      	uxtb	r1, r3
 80083e2:	b909      	cbnz	r1, 80083e8 <__lo0bits+0x32>
 80083e4:	3008      	adds	r0, #8
 80083e6:	0a1b      	lsrs	r3, r3, #8
 80083e8:	0719      	lsls	r1, r3, #28
 80083ea:	bf04      	itt	eq
 80083ec:	091b      	lsreq	r3, r3, #4
 80083ee:	3004      	addeq	r0, #4
 80083f0:	0799      	lsls	r1, r3, #30
 80083f2:	bf04      	itt	eq
 80083f4:	089b      	lsreq	r3, r3, #2
 80083f6:	3002      	addeq	r0, #2
 80083f8:	07d9      	lsls	r1, r3, #31
 80083fa:	d403      	bmi.n	8008404 <__lo0bits+0x4e>
 80083fc:	085b      	lsrs	r3, r3, #1
 80083fe:	f100 0001 	add.w	r0, r0, #1
 8008402:	d003      	beq.n	800840c <__lo0bits+0x56>
 8008404:	6013      	str	r3, [r2, #0]
 8008406:	4770      	bx	lr
 8008408:	2000      	movs	r0, #0
 800840a:	4770      	bx	lr
 800840c:	2020      	movs	r0, #32
 800840e:	4770      	bx	lr

08008410 <__i2b>:
 8008410:	b510      	push	{r4, lr}
 8008412:	460c      	mov	r4, r1
 8008414:	2101      	movs	r1, #1
 8008416:	f7ff febd 	bl	8008194 <_Balloc>
 800841a:	4602      	mov	r2, r0
 800841c:	b928      	cbnz	r0, 800842a <__i2b+0x1a>
 800841e:	f240 1145 	movw	r1, #325	@ 0x145
 8008422:	4b04      	ldr	r3, [pc, #16]	@ (8008434 <__i2b+0x24>)
 8008424:	4804      	ldr	r0, [pc, #16]	@ (8008438 <__i2b+0x28>)
 8008426:	f001 fc01 	bl	8009c2c <__assert_func>
 800842a:	2301      	movs	r3, #1
 800842c:	6144      	str	r4, [r0, #20]
 800842e:	6103      	str	r3, [r0, #16]
 8008430:	bd10      	pop	{r4, pc}
 8008432:	bf00      	nop
 8008434:	0800d2a7 	.word	0x0800d2a7
 8008438:	0800d2b8 	.word	0x0800d2b8

0800843c <__multiply>:
 800843c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008440:	4614      	mov	r4, r2
 8008442:	690a      	ldr	r2, [r1, #16]
 8008444:	6923      	ldr	r3, [r4, #16]
 8008446:	460f      	mov	r7, r1
 8008448:	429a      	cmp	r2, r3
 800844a:	bfa2      	ittt	ge
 800844c:	4623      	movge	r3, r4
 800844e:	460c      	movge	r4, r1
 8008450:	461f      	movge	r7, r3
 8008452:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008456:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800845a:	68a3      	ldr	r3, [r4, #8]
 800845c:	6861      	ldr	r1, [r4, #4]
 800845e:	eb0a 0609 	add.w	r6, sl, r9
 8008462:	42b3      	cmp	r3, r6
 8008464:	b085      	sub	sp, #20
 8008466:	bfb8      	it	lt
 8008468:	3101      	addlt	r1, #1
 800846a:	f7ff fe93 	bl	8008194 <_Balloc>
 800846e:	b930      	cbnz	r0, 800847e <__multiply+0x42>
 8008470:	4602      	mov	r2, r0
 8008472:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008476:	4b43      	ldr	r3, [pc, #268]	@ (8008584 <__multiply+0x148>)
 8008478:	4843      	ldr	r0, [pc, #268]	@ (8008588 <__multiply+0x14c>)
 800847a:	f001 fbd7 	bl	8009c2c <__assert_func>
 800847e:	f100 0514 	add.w	r5, r0, #20
 8008482:	462b      	mov	r3, r5
 8008484:	2200      	movs	r2, #0
 8008486:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800848a:	4543      	cmp	r3, r8
 800848c:	d321      	bcc.n	80084d2 <__multiply+0x96>
 800848e:	f107 0114 	add.w	r1, r7, #20
 8008492:	f104 0214 	add.w	r2, r4, #20
 8008496:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800849a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800849e:	9302      	str	r3, [sp, #8]
 80084a0:	1b13      	subs	r3, r2, r4
 80084a2:	3b15      	subs	r3, #21
 80084a4:	f023 0303 	bic.w	r3, r3, #3
 80084a8:	3304      	adds	r3, #4
 80084aa:	f104 0715 	add.w	r7, r4, #21
 80084ae:	42ba      	cmp	r2, r7
 80084b0:	bf38      	it	cc
 80084b2:	2304      	movcc	r3, #4
 80084b4:	9301      	str	r3, [sp, #4]
 80084b6:	9b02      	ldr	r3, [sp, #8]
 80084b8:	9103      	str	r1, [sp, #12]
 80084ba:	428b      	cmp	r3, r1
 80084bc:	d80c      	bhi.n	80084d8 <__multiply+0x9c>
 80084be:	2e00      	cmp	r6, #0
 80084c0:	dd03      	ble.n	80084ca <__multiply+0x8e>
 80084c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d05a      	beq.n	8008580 <__multiply+0x144>
 80084ca:	6106      	str	r6, [r0, #16]
 80084cc:	b005      	add	sp, #20
 80084ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d2:	f843 2b04 	str.w	r2, [r3], #4
 80084d6:	e7d8      	b.n	800848a <__multiply+0x4e>
 80084d8:	f8b1 a000 	ldrh.w	sl, [r1]
 80084dc:	f1ba 0f00 	cmp.w	sl, #0
 80084e0:	d023      	beq.n	800852a <__multiply+0xee>
 80084e2:	46a9      	mov	r9, r5
 80084e4:	f04f 0c00 	mov.w	ip, #0
 80084e8:	f104 0e14 	add.w	lr, r4, #20
 80084ec:	f85e 7b04 	ldr.w	r7, [lr], #4
 80084f0:	f8d9 3000 	ldr.w	r3, [r9]
 80084f4:	fa1f fb87 	uxth.w	fp, r7
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	fb0a 330b 	mla	r3, sl, fp, r3
 80084fe:	4463      	add	r3, ip
 8008500:	f8d9 c000 	ldr.w	ip, [r9]
 8008504:	0c3f      	lsrs	r7, r7, #16
 8008506:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800850a:	fb0a c707 	mla	r7, sl, r7, ip
 800850e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008512:	b29b      	uxth	r3, r3
 8008514:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008518:	4572      	cmp	r2, lr
 800851a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800851e:	f849 3b04 	str.w	r3, [r9], #4
 8008522:	d8e3      	bhi.n	80084ec <__multiply+0xb0>
 8008524:	9b01      	ldr	r3, [sp, #4]
 8008526:	f845 c003 	str.w	ip, [r5, r3]
 800852a:	9b03      	ldr	r3, [sp, #12]
 800852c:	3104      	adds	r1, #4
 800852e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008532:	f1b9 0f00 	cmp.w	r9, #0
 8008536:	d021      	beq.n	800857c <__multiply+0x140>
 8008538:	46ae      	mov	lr, r5
 800853a:	f04f 0a00 	mov.w	sl, #0
 800853e:	682b      	ldr	r3, [r5, #0]
 8008540:	f104 0c14 	add.w	ip, r4, #20
 8008544:	f8bc b000 	ldrh.w	fp, [ip]
 8008548:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800854c:	b29b      	uxth	r3, r3
 800854e:	fb09 770b 	mla	r7, r9, fp, r7
 8008552:	4457      	add	r7, sl
 8008554:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008558:	f84e 3b04 	str.w	r3, [lr], #4
 800855c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008560:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008564:	f8be 3000 	ldrh.w	r3, [lr]
 8008568:	4562      	cmp	r2, ip
 800856a:	fb09 330a 	mla	r3, r9, sl, r3
 800856e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008572:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008576:	d8e5      	bhi.n	8008544 <__multiply+0x108>
 8008578:	9f01      	ldr	r7, [sp, #4]
 800857a:	51eb      	str	r3, [r5, r7]
 800857c:	3504      	adds	r5, #4
 800857e:	e79a      	b.n	80084b6 <__multiply+0x7a>
 8008580:	3e01      	subs	r6, #1
 8008582:	e79c      	b.n	80084be <__multiply+0x82>
 8008584:	0800d2a7 	.word	0x0800d2a7
 8008588:	0800d2b8 	.word	0x0800d2b8

0800858c <__pow5mult>:
 800858c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008590:	4615      	mov	r5, r2
 8008592:	f012 0203 	ands.w	r2, r2, #3
 8008596:	4607      	mov	r7, r0
 8008598:	460e      	mov	r6, r1
 800859a:	d007      	beq.n	80085ac <__pow5mult+0x20>
 800859c:	4c25      	ldr	r4, [pc, #148]	@ (8008634 <__pow5mult+0xa8>)
 800859e:	3a01      	subs	r2, #1
 80085a0:	2300      	movs	r3, #0
 80085a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80085a6:	f7ff fe57 	bl	8008258 <__multadd>
 80085aa:	4606      	mov	r6, r0
 80085ac:	10ad      	asrs	r5, r5, #2
 80085ae:	d03d      	beq.n	800862c <__pow5mult+0xa0>
 80085b0:	69fc      	ldr	r4, [r7, #28]
 80085b2:	b97c      	cbnz	r4, 80085d4 <__pow5mult+0x48>
 80085b4:	2010      	movs	r0, #16
 80085b6:	f7ff fd37 	bl	8008028 <malloc>
 80085ba:	4602      	mov	r2, r0
 80085bc:	61f8      	str	r0, [r7, #28]
 80085be:	b928      	cbnz	r0, 80085cc <__pow5mult+0x40>
 80085c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80085c4:	4b1c      	ldr	r3, [pc, #112]	@ (8008638 <__pow5mult+0xac>)
 80085c6:	481d      	ldr	r0, [pc, #116]	@ (800863c <__pow5mult+0xb0>)
 80085c8:	f001 fb30 	bl	8009c2c <__assert_func>
 80085cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085d0:	6004      	str	r4, [r0, #0]
 80085d2:	60c4      	str	r4, [r0, #12]
 80085d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80085d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80085dc:	b94c      	cbnz	r4, 80085f2 <__pow5mult+0x66>
 80085de:	f240 2171 	movw	r1, #625	@ 0x271
 80085e2:	4638      	mov	r0, r7
 80085e4:	f7ff ff14 	bl	8008410 <__i2b>
 80085e8:	2300      	movs	r3, #0
 80085ea:	4604      	mov	r4, r0
 80085ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80085f0:	6003      	str	r3, [r0, #0]
 80085f2:	f04f 0900 	mov.w	r9, #0
 80085f6:	07eb      	lsls	r3, r5, #31
 80085f8:	d50a      	bpl.n	8008610 <__pow5mult+0x84>
 80085fa:	4631      	mov	r1, r6
 80085fc:	4622      	mov	r2, r4
 80085fe:	4638      	mov	r0, r7
 8008600:	f7ff ff1c 	bl	800843c <__multiply>
 8008604:	4680      	mov	r8, r0
 8008606:	4631      	mov	r1, r6
 8008608:	4638      	mov	r0, r7
 800860a:	f7ff fe03 	bl	8008214 <_Bfree>
 800860e:	4646      	mov	r6, r8
 8008610:	106d      	asrs	r5, r5, #1
 8008612:	d00b      	beq.n	800862c <__pow5mult+0xa0>
 8008614:	6820      	ldr	r0, [r4, #0]
 8008616:	b938      	cbnz	r0, 8008628 <__pow5mult+0x9c>
 8008618:	4622      	mov	r2, r4
 800861a:	4621      	mov	r1, r4
 800861c:	4638      	mov	r0, r7
 800861e:	f7ff ff0d 	bl	800843c <__multiply>
 8008622:	6020      	str	r0, [r4, #0]
 8008624:	f8c0 9000 	str.w	r9, [r0]
 8008628:	4604      	mov	r4, r0
 800862a:	e7e4      	b.n	80085f6 <__pow5mult+0x6a>
 800862c:	4630      	mov	r0, r6
 800862e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008632:	bf00      	nop
 8008634:	0800d314 	.word	0x0800d314
 8008638:	0800d238 	.word	0x0800d238
 800863c:	0800d2b8 	.word	0x0800d2b8

08008640 <__lshift>:
 8008640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008644:	460c      	mov	r4, r1
 8008646:	4607      	mov	r7, r0
 8008648:	4691      	mov	r9, r2
 800864a:	6923      	ldr	r3, [r4, #16]
 800864c:	6849      	ldr	r1, [r1, #4]
 800864e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008652:	68a3      	ldr	r3, [r4, #8]
 8008654:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008658:	f108 0601 	add.w	r6, r8, #1
 800865c:	42b3      	cmp	r3, r6
 800865e:	db0b      	blt.n	8008678 <__lshift+0x38>
 8008660:	4638      	mov	r0, r7
 8008662:	f7ff fd97 	bl	8008194 <_Balloc>
 8008666:	4605      	mov	r5, r0
 8008668:	b948      	cbnz	r0, 800867e <__lshift+0x3e>
 800866a:	4602      	mov	r2, r0
 800866c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008670:	4b27      	ldr	r3, [pc, #156]	@ (8008710 <__lshift+0xd0>)
 8008672:	4828      	ldr	r0, [pc, #160]	@ (8008714 <__lshift+0xd4>)
 8008674:	f001 fada 	bl	8009c2c <__assert_func>
 8008678:	3101      	adds	r1, #1
 800867a:	005b      	lsls	r3, r3, #1
 800867c:	e7ee      	b.n	800865c <__lshift+0x1c>
 800867e:	2300      	movs	r3, #0
 8008680:	f100 0114 	add.w	r1, r0, #20
 8008684:	f100 0210 	add.w	r2, r0, #16
 8008688:	4618      	mov	r0, r3
 800868a:	4553      	cmp	r3, sl
 800868c:	db33      	blt.n	80086f6 <__lshift+0xb6>
 800868e:	6920      	ldr	r0, [r4, #16]
 8008690:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008694:	f104 0314 	add.w	r3, r4, #20
 8008698:	f019 091f 	ands.w	r9, r9, #31
 800869c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80086a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80086a4:	d02b      	beq.n	80086fe <__lshift+0xbe>
 80086a6:	468a      	mov	sl, r1
 80086a8:	2200      	movs	r2, #0
 80086aa:	f1c9 0e20 	rsb	lr, r9, #32
 80086ae:	6818      	ldr	r0, [r3, #0]
 80086b0:	fa00 f009 	lsl.w	r0, r0, r9
 80086b4:	4310      	orrs	r0, r2
 80086b6:	f84a 0b04 	str.w	r0, [sl], #4
 80086ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80086be:	459c      	cmp	ip, r3
 80086c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80086c4:	d8f3      	bhi.n	80086ae <__lshift+0x6e>
 80086c6:	ebac 0304 	sub.w	r3, ip, r4
 80086ca:	3b15      	subs	r3, #21
 80086cc:	f023 0303 	bic.w	r3, r3, #3
 80086d0:	3304      	adds	r3, #4
 80086d2:	f104 0015 	add.w	r0, r4, #21
 80086d6:	4584      	cmp	ip, r0
 80086d8:	bf38      	it	cc
 80086da:	2304      	movcc	r3, #4
 80086dc:	50ca      	str	r2, [r1, r3]
 80086de:	b10a      	cbz	r2, 80086e4 <__lshift+0xa4>
 80086e0:	f108 0602 	add.w	r6, r8, #2
 80086e4:	3e01      	subs	r6, #1
 80086e6:	4638      	mov	r0, r7
 80086e8:	4621      	mov	r1, r4
 80086ea:	612e      	str	r6, [r5, #16]
 80086ec:	f7ff fd92 	bl	8008214 <_Bfree>
 80086f0:	4628      	mov	r0, r5
 80086f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80086fa:	3301      	adds	r3, #1
 80086fc:	e7c5      	b.n	800868a <__lshift+0x4a>
 80086fe:	3904      	subs	r1, #4
 8008700:	f853 2b04 	ldr.w	r2, [r3], #4
 8008704:	459c      	cmp	ip, r3
 8008706:	f841 2f04 	str.w	r2, [r1, #4]!
 800870a:	d8f9      	bhi.n	8008700 <__lshift+0xc0>
 800870c:	e7ea      	b.n	80086e4 <__lshift+0xa4>
 800870e:	bf00      	nop
 8008710:	0800d2a7 	.word	0x0800d2a7
 8008714:	0800d2b8 	.word	0x0800d2b8

08008718 <__mcmp>:
 8008718:	4603      	mov	r3, r0
 800871a:	690a      	ldr	r2, [r1, #16]
 800871c:	6900      	ldr	r0, [r0, #16]
 800871e:	b530      	push	{r4, r5, lr}
 8008720:	1a80      	subs	r0, r0, r2
 8008722:	d10e      	bne.n	8008742 <__mcmp+0x2a>
 8008724:	3314      	adds	r3, #20
 8008726:	3114      	adds	r1, #20
 8008728:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800872c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008730:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008734:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008738:	4295      	cmp	r5, r2
 800873a:	d003      	beq.n	8008744 <__mcmp+0x2c>
 800873c:	d205      	bcs.n	800874a <__mcmp+0x32>
 800873e:	f04f 30ff 	mov.w	r0, #4294967295
 8008742:	bd30      	pop	{r4, r5, pc}
 8008744:	42a3      	cmp	r3, r4
 8008746:	d3f3      	bcc.n	8008730 <__mcmp+0x18>
 8008748:	e7fb      	b.n	8008742 <__mcmp+0x2a>
 800874a:	2001      	movs	r0, #1
 800874c:	e7f9      	b.n	8008742 <__mcmp+0x2a>
	...

08008750 <__mdiff>:
 8008750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008754:	4689      	mov	r9, r1
 8008756:	4606      	mov	r6, r0
 8008758:	4611      	mov	r1, r2
 800875a:	4648      	mov	r0, r9
 800875c:	4614      	mov	r4, r2
 800875e:	f7ff ffdb 	bl	8008718 <__mcmp>
 8008762:	1e05      	subs	r5, r0, #0
 8008764:	d112      	bne.n	800878c <__mdiff+0x3c>
 8008766:	4629      	mov	r1, r5
 8008768:	4630      	mov	r0, r6
 800876a:	f7ff fd13 	bl	8008194 <_Balloc>
 800876e:	4602      	mov	r2, r0
 8008770:	b928      	cbnz	r0, 800877e <__mdiff+0x2e>
 8008772:	f240 2137 	movw	r1, #567	@ 0x237
 8008776:	4b3e      	ldr	r3, [pc, #248]	@ (8008870 <__mdiff+0x120>)
 8008778:	483e      	ldr	r0, [pc, #248]	@ (8008874 <__mdiff+0x124>)
 800877a:	f001 fa57 	bl	8009c2c <__assert_func>
 800877e:	2301      	movs	r3, #1
 8008780:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008784:	4610      	mov	r0, r2
 8008786:	b003      	add	sp, #12
 8008788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800878c:	bfbc      	itt	lt
 800878e:	464b      	movlt	r3, r9
 8008790:	46a1      	movlt	r9, r4
 8008792:	4630      	mov	r0, r6
 8008794:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008798:	bfba      	itte	lt
 800879a:	461c      	movlt	r4, r3
 800879c:	2501      	movlt	r5, #1
 800879e:	2500      	movge	r5, #0
 80087a0:	f7ff fcf8 	bl	8008194 <_Balloc>
 80087a4:	4602      	mov	r2, r0
 80087a6:	b918      	cbnz	r0, 80087b0 <__mdiff+0x60>
 80087a8:	f240 2145 	movw	r1, #581	@ 0x245
 80087ac:	4b30      	ldr	r3, [pc, #192]	@ (8008870 <__mdiff+0x120>)
 80087ae:	e7e3      	b.n	8008778 <__mdiff+0x28>
 80087b0:	f100 0b14 	add.w	fp, r0, #20
 80087b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80087b8:	f109 0310 	add.w	r3, r9, #16
 80087bc:	60c5      	str	r5, [r0, #12]
 80087be:	f04f 0c00 	mov.w	ip, #0
 80087c2:	f109 0514 	add.w	r5, r9, #20
 80087c6:	46d9      	mov	r9, fp
 80087c8:	6926      	ldr	r6, [r4, #16]
 80087ca:	f104 0e14 	add.w	lr, r4, #20
 80087ce:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80087d2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80087d6:	9301      	str	r3, [sp, #4]
 80087d8:	9b01      	ldr	r3, [sp, #4]
 80087da:	f85e 0b04 	ldr.w	r0, [lr], #4
 80087de:	f853 af04 	ldr.w	sl, [r3, #4]!
 80087e2:	b281      	uxth	r1, r0
 80087e4:	9301      	str	r3, [sp, #4]
 80087e6:	fa1f f38a 	uxth.w	r3, sl
 80087ea:	1a5b      	subs	r3, r3, r1
 80087ec:	0c00      	lsrs	r0, r0, #16
 80087ee:	4463      	add	r3, ip
 80087f0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80087f4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80087fe:	4576      	cmp	r6, lr
 8008800:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008804:	f849 3b04 	str.w	r3, [r9], #4
 8008808:	d8e6      	bhi.n	80087d8 <__mdiff+0x88>
 800880a:	1b33      	subs	r3, r6, r4
 800880c:	3b15      	subs	r3, #21
 800880e:	f023 0303 	bic.w	r3, r3, #3
 8008812:	3415      	adds	r4, #21
 8008814:	3304      	adds	r3, #4
 8008816:	42a6      	cmp	r6, r4
 8008818:	bf38      	it	cc
 800881a:	2304      	movcc	r3, #4
 800881c:	441d      	add	r5, r3
 800881e:	445b      	add	r3, fp
 8008820:	461e      	mov	r6, r3
 8008822:	462c      	mov	r4, r5
 8008824:	4544      	cmp	r4, r8
 8008826:	d30e      	bcc.n	8008846 <__mdiff+0xf6>
 8008828:	f108 0103 	add.w	r1, r8, #3
 800882c:	1b49      	subs	r1, r1, r5
 800882e:	f021 0103 	bic.w	r1, r1, #3
 8008832:	3d03      	subs	r5, #3
 8008834:	45a8      	cmp	r8, r5
 8008836:	bf38      	it	cc
 8008838:	2100      	movcc	r1, #0
 800883a:	440b      	add	r3, r1
 800883c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008840:	b199      	cbz	r1, 800886a <__mdiff+0x11a>
 8008842:	6117      	str	r7, [r2, #16]
 8008844:	e79e      	b.n	8008784 <__mdiff+0x34>
 8008846:	46e6      	mov	lr, ip
 8008848:	f854 1b04 	ldr.w	r1, [r4], #4
 800884c:	fa1f fc81 	uxth.w	ip, r1
 8008850:	44f4      	add	ip, lr
 8008852:	0c08      	lsrs	r0, r1, #16
 8008854:	4471      	add	r1, lr
 8008856:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800885a:	b289      	uxth	r1, r1
 800885c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008860:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008864:	f846 1b04 	str.w	r1, [r6], #4
 8008868:	e7dc      	b.n	8008824 <__mdiff+0xd4>
 800886a:	3f01      	subs	r7, #1
 800886c:	e7e6      	b.n	800883c <__mdiff+0xec>
 800886e:	bf00      	nop
 8008870:	0800d2a7 	.word	0x0800d2a7
 8008874:	0800d2b8 	.word	0x0800d2b8

08008878 <__ulp>:
 8008878:	4b0e      	ldr	r3, [pc, #56]	@ (80088b4 <__ulp+0x3c>)
 800887a:	400b      	ands	r3, r1
 800887c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008880:	2b00      	cmp	r3, #0
 8008882:	dc08      	bgt.n	8008896 <__ulp+0x1e>
 8008884:	425b      	negs	r3, r3
 8008886:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800888a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800888e:	da04      	bge.n	800889a <__ulp+0x22>
 8008890:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008894:	4113      	asrs	r3, r2
 8008896:	2200      	movs	r2, #0
 8008898:	e008      	b.n	80088ac <__ulp+0x34>
 800889a:	f1a2 0314 	sub.w	r3, r2, #20
 800889e:	2b1e      	cmp	r3, #30
 80088a0:	bfd6      	itet	le
 80088a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80088a6:	2201      	movgt	r2, #1
 80088a8:	40da      	lsrle	r2, r3
 80088aa:	2300      	movs	r3, #0
 80088ac:	4619      	mov	r1, r3
 80088ae:	4610      	mov	r0, r2
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	7ff00000 	.word	0x7ff00000

080088b8 <__b2d>:
 80088b8:	6902      	ldr	r2, [r0, #16]
 80088ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088bc:	f100 0614 	add.w	r6, r0, #20
 80088c0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80088c4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80088c8:	4f1e      	ldr	r7, [pc, #120]	@ (8008944 <__b2d+0x8c>)
 80088ca:	4620      	mov	r0, r4
 80088cc:	f7ff fd54 	bl	8008378 <__hi0bits>
 80088d0:	4603      	mov	r3, r0
 80088d2:	f1c0 0020 	rsb	r0, r0, #32
 80088d6:	2b0a      	cmp	r3, #10
 80088d8:	f1a2 0504 	sub.w	r5, r2, #4
 80088dc:	6008      	str	r0, [r1, #0]
 80088de:	dc12      	bgt.n	8008906 <__b2d+0x4e>
 80088e0:	42ae      	cmp	r6, r5
 80088e2:	bf2c      	ite	cs
 80088e4:	2200      	movcs	r2, #0
 80088e6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80088ea:	f1c3 0c0b 	rsb	ip, r3, #11
 80088ee:	3315      	adds	r3, #21
 80088f0:	fa24 fe0c 	lsr.w	lr, r4, ip
 80088f4:	fa04 f303 	lsl.w	r3, r4, r3
 80088f8:	fa22 f20c 	lsr.w	r2, r2, ip
 80088fc:	ea4e 0107 	orr.w	r1, lr, r7
 8008900:	431a      	orrs	r2, r3
 8008902:	4610      	mov	r0, r2
 8008904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008906:	42ae      	cmp	r6, r5
 8008908:	bf36      	itet	cc
 800890a:	f1a2 0508 	subcc.w	r5, r2, #8
 800890e:	2200      	movcs	r2, #0
 8008910:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008914:	3b0b      	subs	r3, #11
 8008916:	d012      	beq.n	800893e <__b2d+0x86>
 8008918:	f1c3 0720 	rsb	r7, r3, #32
 800891c:	fa22 f107 	lsr.w	r1, r2, r7
 8008920:	409c      	lsls	r4, r3
 8008922:	430c      	orrs	r4, r1
 8008924:	42b5      	cmp	r5, r6
 8008926:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800892a:	bf94      	ite	ls
 800892c:	2400      	movls	r4, #0
 800892e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008932:	409a      	lsls	r2, r3
 8008934:	40fc      	lsrs	r4, r7
 8008936:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800893a:	4322      	orrs	r2, r4
 800893c:	e7e1      	b.n	8008902 <__b2d+0x4a>
 800893e:	ea44 0107 	orr.w	r1, r4, r7
 8008942:	e7de      	b.n	8008902 <__b2d+0x4a>
 8008944:	3ff00000 	.word	0x3ff00000

08008948 <__d2b>:
 8008948:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800894c:	2101      	movs	r1, #1
 800894e:	4690      	mov	r8, r2
 8008950:	4699      	mov	r9, r3
 8008952:	9e08      	ldr	r6, [sp, #32]
 8008954:	f7ff fc1e 	bl	8008194 <_Balloc>
 8008958:	4604      	mov	r4, r0
 800895a:	b930      	cbnz	r0, 800896a <__d2b+0x22>
 800895c:	4602      	mov	r2, r0
 800895e:	f240 310f 	movw	r1, #783	@ 0x30f
 8008962:	4b23      	ldr	r3, [pc, #140]	@ (80089f0 <__d2b+0xa8>)
 8008964:	4823      	ldr	r0, [pc, #140]	@ (80089f4 <__d2b+0xac>)
 8008966:	f001 f961 	bl	8009c2c <__assert_func>
 800896a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800896e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008972:	b10d      	cbz	r5, 8008978 <__d2b+0x30>
 8008974:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008978:	9301      	str	r3, [sp, #4]
 800897a:	f1b8 0300 	subs.w	r3, r8, #0
 800897e:	d024      	beq.n	80089ca <__d2b+0x82>
 8008980:	4668      	mov	r0, sp
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	f7ff fd17 	bl	80083b6 <__lo0bits>
 8008988:	e9dd 1200 	ldrd	r1, r2, [sp]
 800898c:	b1d8      	cbz	r0, 80089c6 <__d2b+0x7e>
 800898e:	f1c0 0320 	rsb	r3, r0, #32
 8008992:	fa02 f303 	lsl.w	r3, r2, r3
 8008996:	430b      	orrs	r3, r1
 8008998:	40c2      	lsrs	r2, r0
 800899a:	6163      	str	r3, [r4, #20]
 800899c:	9201      	str	r2, [sp, #4]
 800899e:	9b01      	ldr	r3, [sp, #4]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	bf0c      	ite	eq
 80089a4:	2201      	moveq	r2, #1
 80089a6:	2202      	movne	r2, #2
 80089a8:	61a3      	str	r3, [r4, #24]
 80089aa:	6122      	str	r2, [r4, #16]
 80089ac:	b1ad      	cbz	r5, 80089da <__d2b+0x92>
 80089ae:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80089b2:	4405      	add	r5, r0
 80089b4:	6035      	str	r5, [r6, #0]
 80089b6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80089ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089bc:	6018      	str	r0, [r3, #0]
 80089be:	4620      	mov	r0, r4
 80089c0:	b002      	add	sp, #8
 80089c2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80089c6:	6161      	str	r1, [r4, #20]
 80089c8:	e7e9      	b.n	800899e <__d2b+0x56>
 80089ca:	a801      	add	r0, sp, #4
 80089cc:	f7ff fcf3 	bl	80083b6 <__lo0bits>
 80089d0:	9b01      	ldr	r3, [sp, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	6163      	str	r3, [r4, #20]
 80089d6:	3020      	adds	r0, #32
 80089d8:	e7e7      	b.n	80089aa <__d2b+0x62>
 80089da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80089de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80089e2:	6030      	str	r0, [r6, #0]
 80089e4:	6918      	ldr	r0, [r3, #16]
 80089e6:	f7ff fcc7 	bl	8008378 <__hi0bits>
 80089ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80089ee:	e7e4      	b.n	80089ba <__d2b+0x72>
 80089f0:	0800d2a7 	.word	0x0800d2a7
 80089f4:	0800d2b8 	.word	0x0800d2b8

080089f8 <__ratio>:
 80089f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089fc:	b085      	sub	sp, #20
 80089fe:	e9cd 1000 	strd	r1, r0, [sp]
 8008a02:	a902      	add	r1, sp, #8
 8008a04:	f7ff ff58 	bl	80088b8 <__b2d>
 8008a08:	468b      	mov	fp, r1
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	460f      	mov	r7, r1
 8008a0e:	9800      	ldr	r0, [sp, #0]
 8008a10:	a903      	add	r1, sp, #12
 8008a12:	f7ff ff51 	bl	80088b8 <__b2d>
 8008a16:	460d      	mov	r5, r1
 8008a18:	9b01      	ldr	r3, [sp, #4]
 8008a1a:	4689      	mov	r9, r1
 8008a1c:	6919      	ldr	r1, [r3, #16]
 8008a1e:	9b00      	ldr	r3, [sp, #0]
 8008a20:	4604      	mov	r4, r0
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	4630      	mov	r0, r6
 8008a26:	1ac9      	subs	r1, r1, r3
 8008a28:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008a2c:	1a9b      	subs	r3, r3, r2
 8008a2e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	bfcd      	iteet	gt
 8008a36:	463a      	movgt	r2, r7
 8008a38:	462a      	movle	r2, r5
 8008a3a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008a3e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008a42:	bfd8      	it	le
 8008a44:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008a48:	464b      	mov	r3, r9
 8008a4a:	4622      	mov	r2, r4
 8008a4c:	4659      	mov	r1, fp
 8008a4e:	f7f7 fe6d 	bl	800072c <__aeabi_ddiv>
 8008a52:	b005      	add	sp, #20
 8008a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008a58 <__copybits>:
 8008a58:	3901      	subs	r1, #1
 8008a5a:	b570      	push	{r4, r5, r6, lr}
 8008a5c:	1149      	asrs	r1, r1, #5
 8008a5e:	6914      	ldr	r4, [r2, #16]
 8008a60:	3101      	adds	r1, #1
 8008a62:	f102 0314 	add.w	r3, r2, #20
 8008a66:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008a6a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008a6e:	1f05      	subs	r5, r0, #4
 8008a70:	42a3      	cmp	r3, r4
 8008a72:	d30c      	bcc.n	8008a8e <__copybits+0x36>
 8008a74:	1aa3      	subs	r3, r4, r2
 8008a76:	3b11      	subs	r3, #17
 8008a78:	f023 0303 	bic.w	r3, r3, #3
 8008a7c:	3211      	adds	r2, #17
 8008a7e:	42a2      	cmp	r2, r4
 8008a80:	bf88      	it	hi
 8008a82:	2300      	movhi	r3, #0
 8008a84:	4418      	add	r0, r3
 8008a86:	2300      	movs	r3, #0
 8008a88:	4288      	cmp	r0, r1
 8008a8a:	d305      	bcc.n	8008a98 <__copybits+0x40>
 8008a8c:	bd70      	pop	{r4, r5, r6, pc}
 8008a8e:	f853 6b04 	ldr.w	r6, [r3], #4
 8008a92:	f845 6f04 	str.w	r6, [r5, #4]!
 8008a96:	e7eb      	b.n	8008a70 <__copybits+0x18>
 8008a98:	f840 3b04 	str.w	r3, [r0], #4
 8008a9c:	e7f4      	b.n	8008a88 <__copybits+0x30>

08008a9e <__any_on>:
 8008a9e:	f100 0214 	add.w	r2, r0, #20
 8008aa2:	6900      	ldr	r0, [r0, #16]
 8008aa4:	114b      	asrs	r3, r1, #5
 8008aa6:	4298      	cmp	r0, r3
 8008aa8:	b510      	push	{r4, lr}
 8008aaa:	db11      	blt.n	8008ad0 <__any_on+0x32>
 8008aac:	dd0a      	ble.n	8008ac4 <__any_on+0x26>
 8008aae:	f011 011f 	ands.w	r1, r1, #31
 8008ab2:	d007      	beq.n	8008ac4 <__any_on+0x26>
 8008ab4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008ab8:	fa24 f001 	lsr.w	r0, r4, r1
 8008abc:	fa00 f101 	lsl.w	r1, r0, r1
 8008ac0:	428c      	cmp	r4, r1
 8008ac2:	d10b      	bne.n	8008adc <__any_on+0x3e>
 8008ac4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d803      	bhi.n	8008ad4 <__any_on+0x36>
 8008acc:	2000      	movs	r0, #0
 8008ace:	bd10      	pop	{r4, pc}
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	e7f7      	b.n	8008ac4 <__any_on+0x26>
 8008ad4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ad8:	2900      	cmp	r1, #0
 8008ada:	d0f5      	beq.n	8008ac8 <__any_on+0x2a>
 8008adc:	2001      	movs	r0, #1
 8008ade:	e7f6      	b.n	8008ace <__any_on+0x30>

08008ae0 <sulp>:
 8008ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae4:	460f      	mov	r7, r1
 8008ae6:	4690      	mov	r8, r2
 8008ae8:	f7ff fec6 	bl	8008878 <__ulp>
 8008aec:	4604      	mov	r4, r0
 8008aee:	460d      	mov	r5, r1
 8008af0:	f1b8 0f00 	cmp.w	r8, #0
 8008af4:	d011      	beq.n	8008b1a <sulp+0x3a>
 8008af6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008afa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	dd0b      	ble.n	8008b1a <sulp+0x3a>
 8008b02:	2400      	movs	r4, #0
 8008b04:	051b      	lsls	r3, r3, #20
 8008b06:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008b0a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008b0e:	4622      	mov	r2, r4
 8008b10:	462b      	mov	r3, r5
 8008b12:	f7f7 fce1 	bl	80004d8 <__aeabi_dmul>
 8008b16:	4604      	mov	r4, r0
 8008b18:	460d      	mov	r5, r1
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	4629      	mov	r1, r5
 8008b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b22:	0000      	movs	r0, r0
 8008b24:	0000      	movs	r0, r0
	...

08008b28 <_strtod_l>:
 8008b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b2c:	b09f      	sub	sp, #124	@ 0x7c
 8008b2e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008b30:	2200      	movs	r2, #0
 8008b32:	460c      	mov	r4, r1
 8008b34:	921a      	str	r2, [sp, #104]	@ 0x68
 8008b36:	f04f 0a00 	mov.w	sl, #0
 8008b3a:	f04f 0b00 	mov.w	fp, #0
 8008b3e:	460a      	mov	r2, r1
 8008b40:	9005      	str	r0, [sp, #20]
 8008b42:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b44:	7811      	ldrb	r1, [r2, #0]
 8008b46:	292b      	cmp	r1, #43	@ 0x2b
 8008b48:	d048      	beq.n	8008bdc <_strtod_l+0xb4>
 8008b4a:	d836      	bhi.n	8008bba <_strtod_l+0x92>
 8008b4c:	290d      	cmp	r1, #13
 8008b4e:	d830      	bhi.n	8008bb2 <_strtod_l+0x8a>
 8008b50:	2908      	cmp	r1, #8
 8008b52:	d830      	bhi.n	8008bb6 <_strtod_l+0x8e>
 8008b54:	2900      	cmp	r1, #0
 8008b56:	d039      	beq.n	8008bcc <_strtod_l+0xa4>
 8008b58:	2200      	movs	r2, #0
 8008b5a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008b5c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008b5e:	782a      	ldrb	r2, [r5, #0]
 8008b60:	2a30      	cmp	r2, #48	@ 0x30
 8008b62:	f040 80b1 	bne.w	8008cc8 <_strtod_l+0x1a0>
 8008b66:	786a      	ldrb	r2, [r5, #1]
 8008b68:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008b6c:	2a58      	cmp	r2, #88	@ 0x58
 8008b6e:	d16c      	bne.n	8008c4a <_strtod_l+0x122>
 8008b70:	9302      	str	r3, [sp, #8]
 8008b72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b74:	4a8e      	ldr	r2, [pc, #568]	@ (8008db0 <_strtod_l+0x288>)
 8008b76:	9301      	str	r3, [sp, #4]
 8008b78:	ab1a      	add	r3, sp, #104	@ 0x68
 8008b7a:	9300      	str	r3, [sp, #0]
 8008b7c:	9805      	ldr	r0, [sp, #20]
 8008b7e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008b80:	a919      	add	r1, sp, #100	@ 0x64
 8008b82:	f001 f8ed 	bl	8009d60 <__gethex>
 8008b86:	f010 060f 	ands.w	r6, r0, #15
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	d005      	beq.n	8008b9a <_strtod_l+0x72>
 8008b8e:	2e06      	cmp	r6, #6
 8008b90:	d126      	bne.n	8008be0 <_strtod_l+0xb8>
 8008b92:	2300      	movs	r3, #0
 8008b94:	3501      	adds	r5, #1
 8008b96:	9519      	str	r5, [sp, #100]	@ 0x64
 8008b98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f040 8584 	bne.w	80096aa <_strtod_l+0xb82>
 8008ba2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ba4:	b1bb      	cbz	r3, 8008bd6 <_strtod_l+0xae>
 8008ba6:	4650      	mov	r0, sl
 8008ba8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008bac:	b01f      	add	sp, #124	@ 0x7c
 8008bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb2:	2920      	cmp	r1, #32
 8008bb4:	d1d0      	bne.n	8008b58 <_strtod_l+0x30>
 8008bb6:	3201      	adds	r2, #1
 8008bb8:	e7c3      	b.n	8008b42 <_strtod_l+0x1a>
 8008bba:	292d      	cmp	r1, #45	@ 0x2d
 8008bbc:	d1cc      	bne.n	8008b58 <_strtod_l+0x30>
 8008bbe:	2101      	movs	r1, #1
 8008bc0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008bc2:	1c51      	adds	r1, r2, #1
 8008bc4:	9119      	str	r1, [sp, #100]	@ 0x64
 8008bc6:	7852      	ldrb	r2, [r2, #1]
 8008bc8:	2a00      	cmp	r2, #0
 8008bca:	d1c7      	bne.n	8008b5c <_strtod_l+0x34>
 8008bcc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008bce:	9419      	str	r4, [sp, #100]	@ 0x64
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f040 8568 	bne.w	80096a6 <_strtod_l+0xb7e>
 8008bd6:	4650      	mov	r0, sl
 8008bd8:	4659      	mov	r1, fp
 8008bda:	e7e7      	b.n	8008bac <_strtod_l+0x84>
 8008bdc:	2100      	movs	r1, #0
 8008bde:	e7ef      	b.n	8008bc0 <_strtod_l+0x98>
 8008be0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008be2:	b13a      	cbz	r2, 8008bf4 <_strtod_l+0xcc>
 8008be4:	2135      	movs	r1, #53	@ 0x35
 8008be6:	a81c      	add	r0, sp, #112	@ 0x70
 8008be8:	f7ff ff36 	bl	8008a58 <__copybits>
 8008bec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008bee:	9805      	ldr	r0, [sp, #20]
 8008bf0:	f7ff fb10 	bl	8008214 <_Bfree>
 8008bf4:	3e01      	subs	r6, #1
 8008bf6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008bf8:	2e04      	cmp	r6, #4
 8008bfa:	d806      	bhi.n	8008c0a <_strtod_l+0xe2>
 8008bfc:	e8df f006 	tbb	[pc, r6]
 8008c00:	201d0314 	.word	0x201d0314
 8008c04:	14          	.byte	0x14
 8008c05:	00          	.byte	0x00
 8008c06:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008c0a:	05e1      	lsls	r1, r4, #23
 8008c0c:	bf48      	it	mi
 8008c0e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008c12:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c16:	0d1b      	lsrs	r3, r3, #20
 8008c18:	051b      	lsls	r3, r3, #20
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1bd      	bne.n	8008b9a <_strtod_l+0x72>
 8008c1e:	f7fe fb1d 	bl	800725c <__errno>
 8008c22:	2322      	movs	r3, #34	@ 0x22
 8008c24:	6003      	str	r3, [r0, #0]
 8008c26:	e7b8      	b.n	8008b9a <_strtod_l+0x72>
 8008c28:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008c2c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008c30:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008c34:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008c38:	e7e7      	b.n	8008c0a <_strtod_l+0xe2>
 8008c3a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8008db4 <_strtod_l+0x28c>
 8008c3e:	e7e4      	b.n	8008c0a <_strtod_l+0xe2>
 8008c40:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008c44:	f04f 3aff 	mov.w	sl, #4294967295
 8008c48:	e7df      	b.n	8008c0a <_strtod_l+0xe2>
 8008c4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c4c:	1c5a      	adds	r2, r3, #1
 8008c4e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c50:	785b      	ldrb	r3, [r3, #1]
 8008c52:	2b30      	cmp	r3, #48	@ 0x30
 8008c54:	d0f9      	beq.n	8008c4a <_strtod_l+0x122>
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d09f      	beq.n	8008b9a <_strtod_l+0x72>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c60:	220a      	movs	r2, #10
 8008c62:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c64:	2300      	movs	r3, #0
 8008c66:	461f      	mov	r7, r3
 8008c68:	9308      	str	r3, [sp, #32]
 8008c6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c6c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008c6e:	7805      	ldrb	r5, [r0, #0]
 8008c70:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008c74:	b2d9      	uxtb	r1, r3
 8008c76:	2909      	cmp	r1, #9
 8008c78:	d928      	bls.n	8008ccc <_strtod_l+0x1a4>
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	494e      	ldr	r1, [pc, #312]	@ (8008db8 <_strtod_l+0x290>)
 8008c7e:	f000 ffad 	bl	8009bdc <strncmp>
 8008c82:	2800      	cmp	r0, #0
 8008c84:	d032      	beq.n	8008cec <_strtod_l+0x1c4>
 8008c86:	2000      	movs	r0, #0
 8008c88:	462a      	mov	r2, r5
 8008c8a:	4681      	mov	r9, r0
 8008c8c:	463d      	mov	r5, r7
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2a65      	cmp	r2, #101	@ 0x65
 8008c92:	d001      	beq.n	8008c98 <_strtod_l+0x170>
 8008c94:	2a45      	cmp	r2, #69	@ 0x45
 8008c96:	d114      	bne.n	8008cc2 <_strtod_l+0x19a>
 8008c98:	b91d      	cbnz	r5, 8008ca2 <_strtod_l+0x17a>
 8008c9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c9c:	4302      	orrs	r2, r0
 8008c9e:	d095      	beq.n	8008bcc <_strtod_l+0xa4>
 8008ca0:	2500      	movs	r5, #0
 8008ca2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008ca4:	1c62      	adds	r2, r4, #1
 8008ca6:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ca8:	7862      	ldrb	r2, [r4, #1]
 8008caa:	2a2b      	cmp	r2, #43	@ 0x2b
 8008cac:	d077      	beq.n	8008d9e <_strtod_l+0x276>
 8008cae:	2a2d      	cmp	r2, #45	@ 0x2d
 8008cb0:	d07b      	beq.n	8008daa <_strtod_l+0x282>
 8008cb2:	f04f 0c00 	mov.w	ip, #0
 8008cb6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008cba:	2909      	cmp	r1, #9
 8008cbc:	f240 8082 	bls.w	8008dc4 <_strtod_l+0x29c>
 8008cc0:	9419      	str	r4, [sp, #100]	@ 0x64
 8008cc2:	f04f 0800 	mov.w	r8, #0
 8008cc6:	e0a2      	b.n	8008e0e <_strtod_l+0x2e6>
 8008cc8:	2300      	movs	r3, #0
 8008cca:	e7c7      	b.n	8008c5c <_strtod_l+0x134>
 8008ccc:	2f08      	cmp	r7, #8
 8008cce:	bfd5      	itete	le
 8008cd0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008cd2:	9908      	ldrgt	r1, [sp, #32]
 8008cd4:	fb02 3301 	mlale	r3, r2, r1, r3
 8008cd8:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008cdc:	f100 0001 	add.w	r0, r0, #1
 8008ce0:	bfd4      	ite	le
 8008ce2:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008ce4:	9308      	strgt	r3, [sp, #32]
 8008ce6:	3701      	adds	r7, #1
 8008ce8:	9019      	str	r0, [sp, #100]	@ 0x64
 8008cea:	e7bf      	b.n	8008c6c <_strtod_l+0x144>
 8008cec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cee:	1c5a      	adds	r2, r3, #1
 8008cf0:	9219      	str	r2, [sp, #100]	@ 0x64
 8008cf2:	785a      	ldrb	r2, [r3, #1]
 8008cf4:	b37f      	cbz	r7, 8008d56 <_strtod_l+0x22e>
 8008cf6:	4681      	mov	r9, r0
 8008cf8:	463d      	mov	r5, r7
 8008cfa:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008cfe:	2b09      	cmp	r3, #9
 8008d00:	d912      	bls.n	8008d28 <_strtod_l+0x200>
 8008d02:	2301      	movs	r3, #1
 8008d04:	e7c4      	b.n	8008c90 <_strtod_l+0x168>
 8008d06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d08:	3001      	adds	r0, #1
 8008d0a:	1c5a      	adds	r2, r3, #1
 8008d0c:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d0e:	785a      	ldrb	r2, [r3, #1]
 8008d10:	2a30      	cmp	r2, #48	@ 0x30
 8008d12:	d0f8      	beq.n	8008d06 <_strtod_l+0x1de>
 8008d14:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008d18:	2b08      	cmp	r3, #8
 8008d1a:	f200 84cb 	bhi.w	80096b4 <_strtod_l+0xb8c>
 8008d1e:	4681      	mov	r9, r0
 8008d20:	2000      	movs	r0, #0
 8008d22:	4605      	mov	r5, r0
 8008d24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d26:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d28:	3a30      	subs	r2, #48	@ 0x30
 8008d2a:	f100 0301 	add.w	r3, r0, #1
 8008d2e:	d02a      	beq.n	8008d86 <_strtod_l+0x25e>
 8008d30:	4499      	add	r9, r3
 8008d32:	210a      	movs	r1, #10
 8008d34:	462b      	mov	r3, r5
 8008d36:	eb00 0c05 	add.w	ip, r0, r5
 8008d3a:	4563      	cmp	r3, ip
 8008d3c:	d10d      	bne.n	8008d5a <_strtod_l+0x232>
 8008d3e:	1c69      	adds	r1, r5, #1
 8008d40:	4401      	add	r1, r0
 8008d42:	4428      	add	r0, r5
 8008d44:	2808      	cmp	r0, #8
 8008d46:	dc16      	bgt.n	8008d76 <_strtod_l+0x24e>
 8008d48:	230a      	movs	r3, #10
 8008d4a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008d4c:	fb03 2300 	mla	r3, r3, r0, r2
 8008d50:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d52:	2300      	movs	r3, #0
 8008d54:	e018      	b.n	8008d88 <_strtod_l+0x260>
 8008d56:	4638      	mov	r0, r7
 8008d58:	e7da      	b.n	8008d10 <_strtod_l+0x1e8>
 8008d5a:	2b08      	cmp	r3, #8
 8008d5c:	f103 0301 	add.w	r3, r3, #1
 8008d60:	dc03      	bgt.n	8008d6a <_strtod_l+0x242>
 8008d62:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008d64:	434e      	muls	r6, r1
 8008d66:	960a      	str	r6, [sp, #40]	@ 0x28
 8008d68:	e7e7      	b.n	8008d3a <_strtod_l+0x212>
 8008d6a:	2b10      	cmp	r3, #16
 8008d6c:	bfde      	ittt	le
 8008d6e:	9e08      	ldrle	r6, [sp, #32]
 8008d70:	434e      	mulle	r6, r1
 8008d72:	9608      	strle	r6, [sp, #32]
 8008d74:	e7e1      	b.n	8008d3a <_strtod_l+0x212>
 8008d76:	280f      	cmp	r0, #15
 8008d78:	dceb      	bgt.n	8008d52 <_strtod_l+0x22a>
 8008d7a:	230a      	movs	r3, #10
 8008d7c:	9808      	ldr	r0, [sp, #32]
 8008d7e:	fb03 2300 	mla	r3, r3, r0, r2
 8008d82:	9308      	str	r3, [sp, #32]
 8008d84:	e7e5      	b.n	8008d52 <_strtod_l+0x22a>
 8008d86:	4629      	mov	r1, r5
 8008d88:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008d8a:	460d      	mov	r5, r1
 8008d8c:	1c50      	adds	r0, r2, #1
 8008d8e:	9019      	str	r0, [sp, #100]	@ 0x64
 8008d90:	7852      	ldrb	r2, [r2, #1]
 8008d92:	4618      	mov	r0, r3
 8008d94:	e7b1      	b.n	8008cfa <_strtod_l+0x1d2>
 8008d96:	f04f 0900 	mov.w	r9, #0
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e77d      	b.n	8008c9a <_strtod_l+0x172>
 8008d9e:	f04f 0c00 	mov.w	ip, #0
 8008da2:	1ca2      	adds	r2, r4, #2
 8008da4:	9219      	str	r2, [sp, #100]	@ 0x64
 8008da6:	78a2      	ldrb	r2, [r4, #2]
 8008da8:	e785      	b.n	8008cb6 <_strtod_l+0x18e>
 8008daa:	f04f 0c01 	mov.w	ip, #1
 8008dae:	e7f8      	b.n	8008da2 <_strtod_l+0x27a>
 8008db0:	0800d428 	.word	0x0800d428
 8008db4:	7ff00000 	.word	0x7ff00000
 8008db8:	0800d410 	.word	0x0800d410
 8008dbc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008dbe:	1c51      	adds	r1, r2, #1
 8008dc0:	9119      	str	r1, [sp, #100]	@ 0x64
 8008dc2:	7852      	ldrb	r2, [r2, #1]
 8008dc4:	2a30      	cmp	r2, #48	@ 0x30
 8008dc6:	d0f9      	beq.n	8008dbc <_strtod_l+0x294>
 8008dc8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008dcc:	2908      	cmp	r1, #8
 8008dce:	f63f af78 	bhi.w	8008cc2 <_strtod_l+0x19a>
 8008dd2:	f04f 080a 	mov.w	r8, #10
 8008dd6:	3a30      	subs	r2, #48	@ 0x30
 8008dd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008dda:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ddc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008dde:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008de0:	1c56      	adds	r6, r2, #1
 8008de2:	9619      	str	r6, [sp, #100]	@ 0x64
 8008de4:	7852      	ldrb	r2, [r2, #1]
 8008de6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008dea:	f1be 0f09 	cmp.w	lr, #9
 8008dee:	d939      	bls.n	8008e64 <_strtod_l+0x33c>
 8008df0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008df2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008df6:	1a76      	subs	r6, r6, r1
 8008df8:	2e08      	cmp	r6, #8
 8008dfa:	dc03      	bgt.n	8008e04 <_strtod_l+0x2dc>
 8008dfc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008dfe:	4588      	cmp	r8, r1
 8008e00:	bfa8      	it	ge
 8008e02:	4688      	movge	r8, r1
 8008e04:	f1bc 0f00 	cmp.w	ip, #0
 8008e08:	d001      	beq.n	8008e0e <_strtod_l+0x2e6>
 8008e0a:	f1c8 0800 	rsb	r8, r8, #0
 8008e0e:	2d00      	cmp	r5, #0
 8008e10:	d14e      	bne.n	8008eb0 <_strtod_l+0x388>
 8008e12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008e14:	4308      	orrs	r0, r1
 8008e16:	f47f aec0 	bne.w	8008b9a <_strtod_l+0x72>
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f47f aed6 	bne.w	8008bcc <_strtod_l+0xa4>
 8008e20:	2a69      	cmp	r2, #105	@ 0x69
 8008e22:	d028      	beq.n	8008e76 <_strtod_l+0x34e>
 8008e24:	dc25      	bgt.n	8008e72 <_strtod_l+0x34a>
 8008e26:	2a49      	cmp	r2, #73	@ 0x49
 8008e28:	d025      	beq.n	8008e76 <_strtod_l+0x34e>
 8008e2a:	2a4e      	cmp	r2, #78	@ 0x4e
 8008e2c:	f47f aece 	bne.w	8008bcc <_strtod_l+0xa4>
 8008e30:	499a      	ldr	r1, [pc, #616]	@ (800909c <_strtod_l+0x574>)
 8008e32:	a819      	add	r0, sp, #100	@ 0x64
 8008e34:	f001 f9b6 	bl	800a1a4 <__match>
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	f43f aec7 	beq.w	8008bcc <_strtod_l+0xa4>
 8008e3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	2b28      	cmp	r3, #40	@ 0x28
 8008e44:	d12e      	bne.n	8008ea4 <_strtod_l+0x37c>
 8008e46:	4996      	ldr	r1, [pc, #600]	@ (80090a0 <_strtod_l+0x578>)
 8008e48:	aa1c      	add	r2, sp, #112	@ 0x70
 8008e4a:	a819      	add	r0, sp, #100	@ 0x64
 8008e4c:	f001 f9be 	bl	800a1cc <__hexnan>
 8008e50:	2805      	cmp	r0, #5
 8008e52:	d127      	bne.n	8008ea4 <_strtod_l+0x37c>
 8008e54:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008e56:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008e5a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008e5e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008e62:	e69a      	b.n	8008b9a <_strtod_l+0x72>
 8008e64:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008e66:	fb08 2101 	mla	r1, r8, r1, r2
 8008e6a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008e6e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e70:	e7b5      	b.n	8008dde <_strtod_l+0x2b6>
 8008e72:	2a6e      	cmp	r2, #110	@ 0x6e
 8008e74:	e7da      	b.n	8008e2c <_strtod_l+0x304>
 8008e76:	498b      	ldr	r1, [pc, #556]	@ (80090a4 <_strtod_l+0x57c>)
 8008e78:	a819      	add	r0, sp, #100	@ 0x64
 8008e7a:	f001 f993 	bl	800a1a4 <__match>
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	f43f aea4 	beq.w	8008bcc <_strtod_l+0xa4>
 8008e84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e86:	4988      	ldr	r1, [pc, #544]	@ (80090a8 <_strtod_l+0x580>)
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	a819      	add	r0, sp, #100	@ 0x64
 8008e8c:	9319      	str	r3, [sp, #100]	@ 0x64
 8008e8e:	f001 f989 	bl	800a1a4 <__match>
 8008e92:	b910      	cbnz	r0, 8008e9a <_strtod_l+0x372>
 8008e94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e96:	3301      	adds	r3, #1
 8008e98:	9319      	str	r3, [sp, #100]	@ 0x64
 8008e9a:	f04f 0a00 	mov.w	sl, #0
 8008e9e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80090ac <_strtod_l+0x584>
 8008ea2:	e67a      	b.n	8008b9a <_strtod_l+0x72>
 8008ea4:	4882      	ldr	r0, [pc, #520]	@ (80090b0 <_strtod_l+0x588>)
 8008ea6:	f000 febb 	bl	8009c20 <nan>
 8008eaa:	4682      	mov	sl, r0
 8008eac:	468b      	mov	fp, r1
 8008eae:	e674      	b.n	8008b9a <_strtod_l+0x72>
 8008eb0:	eba8 0309 	sub.w	r3, r8, r9
 8008eb4:	2f00      	cmp	r7, #0
 8008eb6:	bf08      	it	eq
 8008eb8:	462f      	moveq	r7, r5
 8008eba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008ebc:	2d10      	cmp	r5, #16
 8008ebe:	462c      	mov	r4, r5
 8008ec0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ec2:	bfa8      	it	ge
 8008ec4:	2410      	movge	r4, #16
 8008ec6:	f7f7 fa8d 	bl	80003e4 <__aeabi_ui2d>
 8008eca:	2d09      	cmp	r5, #9
 8008ecc:	4682      	mov	sl, r0
 8008ece:	468b      	mov	fp, r1
 8008ed0:	dc11      	bgt.n	8008ef6 <_strtod_l+0x3ce>
 8008ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f43f ae60 	beq.w	8008b9a <_strtod_l+0x72>
 8008eda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008edc:	dd76      	ble.n	8008fcc <_strtod_l+0x4a4>
 8008ede:	2b16      	cmp	r3, #22
 8008ee0:	dc5d      	bgt.n	8008f9e <_strtod_l+0x476>
 8008ee2:	4974      	ldr	r1, [pc, #464]	@ (80090b4 <_strtod_l+0x58c>)
 8008ee4:	4652      	mov	r2, sl
 8008ee6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008eea:	465b      	mov	r3, fp
 8008eec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ef0:	f7f7 faf2 	bl	80004d8 <__aeabi_dmul>
 8008ef4:	e7d9      	b.n	8008eaa <_strtod_l+0x382>
 8008ef6:	4b6f      	ldr	r3, [pc, #444]	@ (80090b4 <_strtod_l+0x58c>)
 8008ef8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008efc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008f00:	f7f7 faea 	bl	80004d8 <__aeabi_dmul>
 8008f04:	4682      	mov	sl, r0
 8008f06:	9808      	ldr	r0, [sp, #32]
 8008f08:	468b      	mov	fp, r1
 8008f0a:	f7f7 fa6b 	bl	80003e4 <__aeabi_ui2d>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	460b      	mov	r3, r1
 8008f12:	4650      	mov	r0, sl
 8008f14:	4659      	mov	r1, fp
 8008f16:	f7f7 f929 	bl	800016c <__adddf3>
 8008f1a:	2d0f      	cmp	r5, #15
 8008f1c:	4682      	mov	sl, r0
 8008f1e:	468b      	mov	fp, r1
 8008f20:	ddd7      	ble.n	8008ed2 <_strtod_l+0x3aa>
 8008f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f24:	1b2c      	subs	r4, r5, r4
 8008f26:	441c      	add	r4, r3
 8008f28:	2c00      	cmp	r4, #0
 8008f2a:	f340 8096 	ble.w	800905a <_strtod_l+0x532>
 8008f2e:	f014 030f 	ands.w	r3, r4, #15
 8008f32:	d00a      	beq.n	8008f4a <_strtod_l+0x422>
 8008f34:	495f      	ldr	r1, [pc, #380]	@ (80090b4 <_strtod_l+0x58c>)
 8008f36:	4652      	mov	r2, sl
 8008f38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f40:	465b      	mov	r3, fp
 8008f42:	f7f7 fac9 	bl	80004d8 <__aeabi_dmul>
 8008f46:	4682      	mov	sl, r0
 8008f48:	468b      	mov	fp, r1
 8008f4a:	f034 040f 	bics.w	r4, r4, #15
 8008f4e:	d073      	beq.n	8009038 <_strtod_l+0x510>
 8008f50:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008f54:	dd48      	ble.n	8008fe8 <_strtod_l+0x4c0>
 8008f56:	2400      	movs	r4, #0
 8008f58:	46a0      	mov	r8, r4
 8008f5a:	46a1      	mov	r9, r4
 8008f5c:	940a      	str	r4, [sp, #40]	@ 0x28
 8008f5e:	2322      	movs	r3, #34	@ 0x22
 8008f60:	f04f 0a00 	mov.w	sl, #0
 8008f64:	9a05      	ldr	r2, [sp, #20]
 8008f66:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80090ac <_strtod_l+0x584>
 8008f6a:	6013      	str	r3, [r2, #0]
 8008f6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	f43f ae13 	beq.w	8008b9a <_strtod_l+0x72>
 8008f74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f76:	9805      	ldr	r0, [sp, #20]
 8008f78:	f7ff f94c 	bl	8008214 <_Bfree>
 8008f7c:	4649      	mov	r1, r9
 8008f7e:	9805      	ldr	r0, [sp, #20]
 8008f80:	f7ff f948 	bl	8008214 <_Bfree>
 8008f84:	4641      	mov	r1, r8
 8008f86:	9805      	ldr	r0, [sp, #20]
 8008f88:	f7ff f944 	bl	8008214 <_Bfree>
 8008f8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008f8e:	9805      	ldr	r0, [sp, #20]
 8008f90:	f7ff f940 	bl	8008214 <_Bfree>
 8008f94:	4621      	mov	r1, r4
 8008f96:	9805      	ldr	r0, [sp, #20]
 8008f98:	f7ff f93c 	bl	8008214 <_Bfree>
 8008f9c:	e5fd      	b.n	8008b9a <_strtod_l+0x72>
 8008f9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fa0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	dbbc      	blt.n	8008f22 <_strtod_l+0x3fa>
 8008fa8:	4c42      	ldr	r4, [pc, #264]	@ (80090b4 <_strtod_l+0x58c>)
 8008faa:	f1c5 050f 	rsb	r5, r5, #15
 8008fae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008fb2:	4652      	mov	r2, sl
 8008fb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fb8:	465b      	mov	r3, fp
 8008fba:	f7f7 fa8d 	bl	80004d8 <__aeabi_dmul>
 8008fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fc0:	1b5d      	subs	r5, r3, r5
 8008fc2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008fc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008fca:	e791      	b.n	8008ef0 <_strtod_l+0x3c8>
 8008fcc:	3316      	adds	r3, #22
 8008fce:	dba8      	blt.n	8008f22 <_strtod_l+0x3fa>
 8008fd0:	4b38      	ldr	r3, [pc, #224]	@ (80090b4 <_strtod_l+0x58c>)
 8008fd2:	eba9 0808 	sub.w	r8, r9, r8
 8008fd6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008fda:	4650      	mov	r0, sl
 8008fdc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008fe0:	4659      	mov	r1, fp
 8008fe2:	f7f7 fba3 	bl	800072c <__aeabi_ddiv>
 8008fe6:	e760      	b.n	8008eaa <_strtod_l+0x382>
 8008fe8:	4b33      	ldr	r3, [pc, #204]	@ (80090b8 <_strtod_l+0x590>)
 8008fea:	4650      	mov	r0, sl
 8008fec:	9308      	str	r3, [sp, #32]
 8008fee:	2300      	movs	r3, #0
 8008ff0:	4659      	mov	r1, fp
 8008ff2:	461e      	mov	r6, r3
 8008ff4:	1124      	asrs	r4, r4, #4
 8008ff6:	2c01      	cmp	r4, #1
 8008ff8:	dc21      	bgt.n	800903e <_strtod_l+0x516>
 8008ffa:	b10b      	cbz	r3, 8009000 <_strtod_l+0x4d8>
 8008ffc:	4682      	mov	sl, r0
 8008ffe:	468b      	mov	fp, r1
 8009000:	492d      	ldr	r1, [pc, #180]	@ (80090b8 <_strtod_l+0x590>)
 8009002:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009006:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800900a:	4652      	mov	r2, sl
 800900c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009010:	465b      	mov	r3, fp
 8009012:	f7f7 fa61 	bl	80004d8 <__aeabi_dmul>
 8009016:	4b25      	ldr	r3, [pc, #148]	@ (80090ac <_strtod_l+0x584>)
 8009018:	460a      	mov	r2, r1
 800901a:	400b      	ands	r3, r1
 800901c:	4927      	ldr	r1, [pc, #156]	@ (80090bc <_strtod_l+0x594>)
 800901e:	4682      	mov	sl, r0
 8009020:	428b      	cmp	r3, r1
 8009022:	d898      	bhi.n	8008f56 <_strtod_l+0x42e>
 8009024:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009028:	428b      	cmp	r3, r1
 800902a:	bf86      	itte	hi
 800902c:	f04f 3aff 	movhi.w	sl, #4294967295
 8009030:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80090c0 <_strtod_l+0x598>
 8009034:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009038:	2300      	movs	r3, #0
 800903a:	9308      	str	r3, [sp, #32]
 800903c:	e07a      	b.n	8009134 <_strtod_l+0x60c>
 800903e:	07e2      	lsls	r2, r4, #31
 8009040:	d505      	bpl.n	800904e <_strtod_l+0x526>
 8009042:	9b08      	ldr	r3, [sp, #32]
 8009044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009048:	f7f7 fa46 	bl	80004d8 <__aeabi_dmul>
 800904c:	2301      	movs	r3, #1
 800904e:	9a08      	ldr	r2, [sp, #32]
 8009050:	3601      	adds	r6, #1
 8009052:	3208      	adds	r2, #8
 8009054:	1064      	asrs	r4, r4, #1
 8009056:	9208      	str	r2, [sp, #32]
 8009058:	e7cd      	b.n	8008ff6 <_strtod_l+0x4ce>
 800905a:	d0ed      	beq.n	8009038 <_strtod_l+0x510>
 800905c:	4264      	negs	r4, r4
 800905e:	f014 020f 	ands.w	r2, r4, #15
 8009062:	d00a      	beq.n	800907a <_strtod_l+0x552>
 8009064:	4b13      	ldr	r3, [pc, #76]	@ (80090b4 <_strtod_l+0x58c>)
 8009066:	4650      	mov	r0, sl
 8009068:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800906c:	4659      	mov	r1, fp
 800906e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009072:	f7f7 fb5b 	bl	800072c <__aeabi_ddiv>
 8009076:	4682      	mov	sl, r0
 8009078:	468b      	mov	fp, r1
 800907a:	1124      	asrs	r4, r4, #4
 800907c:	d0dc      	beq.n	8009038 <_strtod_l+0x510>
 800907e:	2c1f      	cmp	r4, #31
 8009080:	dd20      	ble.n	80090c4 <_strtod_l+0x59c>
 8009082:	2400      	movs	r4, #0
 8009084:	46a0      	mov	r8, r4
 8009086:	46a1      	mov	r9, r4
 8009088:	940a      	str	r4, [sp, #40]	@ 0x28
 800908a:	2322      	movs	r3, #34	@ 0x22
 800908c:	9a05      	ldr	r2, [sp, #20]
 800908e:	f04f 0a00 	mov.w	sl, #0
 8009092:	f04f 0b00 	mov.w	fp, #0
 8009096:	6013      	str	r3, [r2, #0]
 8009098:	e768      	b.n	8008f6c <_strtod_l+0x444>
 800909a:	bf00      	nop
 800909c:	0800d1ff 	.word	0x0800d1ff
 80090a0:	0800d414 	.word	0x0800d414
 80090a4:	0800d1f7 	.word	0x0800d1f7
 80090a8:	0800d22e 	.word	0x0800d22e
 80090ac:	7ff00000 	.word	0x7ff00000
 80090b0:	0800d5bd 	.word	0x0800d5bd
 80090b4:	0800d348 	.word	0x0800d348
 80090b8:	0800d320 	.word	0x0800d320
 80090bc:	7ca00000 	.word	0x7ca00000
 80090c0:	7fefffff 	.word	0x7fefffff
 80090c4:	f014 0310 	ands.w	r3, r4, #16
 80090c8:	bf18      	it	ne
 80090ca:	236a      	movne	r3, #106	@ 0x6a
 80090cc:	4650      	mov	r0, sl
 80090ce:	9308      	str	r3, [sp, #32]
 80090d0:	4659      	mov	r1, fp
 80090d2:	2300      	movs	r3, #0
 80090d4:	4ea9      	ldr	r6, [pc, #676]	@ (800937c <_strtod_l+0x854>)
 80090d6:	07e2      	lsls	r2, r4, #31
 80090d8:	d504      	bpl.n	80090e4 <_strtod_l+0x5bc>
 80090da:	e9d6 2300 	ldrd	r2, r3, [r6]
 80090de:	f7f7 f9fb 	bl	80004d8 <__aeabi_dmul>
 80090e2:	2301      	movs	r3, #1
 80090e4:	1064      	asrs	r4, r4, #1
 80090e6:	f106 0608 	add.w	r6, r6, #8
 80090ea:	d1f4      	bne.n	80090d6 <_strtod_l+0x5ae>
 80090ec:	b10b      	cbz	r3, 80090f2 <_strtod_l+0x5ca>
 80090ee:	4682      	mov	sl, r0
 80090f0:	468b      	mov	fp, r1
 80090f2:	9b08      	ldr	r3, [sp, #32]
 80090f4:	b1b3      	cbz	r3, 8009124 <_strtod_l+0x5fc>
 80090f6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80090fa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80090fe:	2b00      	cmp	r3, #0
 8009100:	4659      	mov	r1, fp
 8009102:	dd0f      	ble.n	8009124 <_strtod_l+0x5fc>
 8009104:	2b1f      	cmp	r3, #31
 8009106:	dd57      	ble.n	80091b8 <_strtod_l+0x690>
 8009108:	2b34      	cmp	r3, #52	@ 0x34
 800910a:	bfd8      	it	le
 800910c:	f04f 33ff 	movle.w	r3, #4294967295
 8009110:	f04f 0a00 	mov.w	sl, #0
 8009114:	bfcf      	iteee	gt
 8009116:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800911a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800911e:	4093      	lslle	r3, r2
 8009120:	ea03 0b01 	andle.w	fp, r3, r1
 8009124:	2200      	movs	r2, #0
 8009126:	2300      	movs	r3, #0
 8009128:	4650      	mov	r0, sl
 800912a:	4659      	mov	r1, fp
 800912c:	f7f7 fc3c 	bl	80009a8 <__aeabi_dcmpeq>
 8009130:	2800      	cmp	r0, #0
 8009132:	d1a6      	bne.n	8009082 <_strtod_l+0x55a>
 8009134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009136:	463a      	mov	r2, r7
 8009138:	9300      	str	r3, [sp, #0]
 800913a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800913c:	462b      	mov	r3, r5
 800913e:	9805      	ldr	r0, [sp, #20]
 8009140:	f7ff f8d0 	bl	80082e4 <__s2b>
 8009144:	900a      	str	r0, [sp, #40]	@ 0x28
 8009146:	2800      	cmp	r0, #0
 8009148:	f43f af05 	beq.w	8008f56 <_strtod_l+0x42e>
 800914c:	2400      	movs	r4, #0
 800914e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009150:	eba9 0308 	sub.w	r3, r9, r8
 8009154:	2a00      	cmp	r2, #0
 8009156:	bfa8      	it	ge
 8009158:	2300      	movge	r3, #0
 800915a:	46a0      	mov	r8, r4
 800915c:	9312      	str	r3, [sp, #72]	@ 0x48
 800915e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009162:	9316      	str	r3, [sp, #88]	@ 0x58
 8009164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009166:	9805      	ldr	r0, [sp, #20]
 8009168:	6859      	ldr	r1, [r3, #4]
 800916a:	f7ff f813 	bl	8008194 <_Balloc>
 800916e:	4681      	mov	r9, r0
 8009170:	2800      	cmp	r0, #0
 8009172:	f43f aef4 	beq.w	8008f5e <_strtod_l+0x436>
 8009176:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009178:	300c      	adds	r0, #12
 800917a:	691a      	ldr	r2, [r3, #16]
 800917c:	f103 010c 	add.w	r1, r3, #12
 8009180:	3202      	adds	r2, #2
 8009182:	0092      	lsls	r2, r2, #2
 8009184:	f7fe f8a5 	bl	80072d2 <memcpy>
 8009188:	ab1c      	add	r3, sp, #112	@ 0x70
 800918a:	9301      	str	r3, [sp, #4]
 800918c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800918e:	9300      	str	r3, [sp, #0]
 8009190:	4652      	mov	r2, sl
 8009192:	465b      	mov	r3, fp
 8009194:	9805      	ldr	r0, [sp, #20]
 8009196:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800919a:	f7ff fbd5 	bl	8008948 <__d2b>
 800919e:	901a      	str	r0, [sp, #104]	@ 0x68
 80091a0:	2800      	cmp	r0, #0
 80091a2:	f43f aedc 	beq.w	8008f5e <_strtod_l+0x436>
 80091a6:	2101      	movs	r1, #1
 80091a8:	9805      	ldr	r0, [sp, #20]
 80091aa:	f7ff f931 	bl	8008410 <__i2b>
 80091ae:	4680      	mov	r8, r0
 80091b0:	b948      	cbnz	r0, 80091c6 <_strtod_l+0x69e>
 80091b2:	f04f 0800 	mov.w	r8, #0
 80091b6:	e6d2      	b.n	8008f5e <_strtod_l+0x436>
 80091b8:	f04f 32ff 	mov.w	r2, #4294967295
 80091bc:	fa02 f303 	lsl.w	r3, r2, r3
 80091c0:	ea03 0a0a 	and.w	sl, r3, sl
 80091c4:	e7ae      	b.n	8009124 <_strtod_l+0x5fc>
 80091c6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80091c8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80091ca:	2d00      	cmp	r5, #0
 80091cc:	bfab      	itete	ge
 80091ce:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80091d0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80091d2:	18ef      	addge	r7, r5, r3
 80091d4:	1b5e      	sublt	r6, r3, r5
 80091d6:	9b08      	ldr	r3, [sp, #32]
 80091d8:	bfa8      	it	ge
 80091da:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80091dc:	eba5 0503 	sub.w	r5, r5, r3
 80091e0:	4415      	add	r5, r2
 80091e2:	4b67      	ldr	r3, [pc, #412]	@ (8009380 <_strtod_l+0x858>)
 80091e4:	f105 35ff 	add.w	r5, r5, #4294967295
 80091e8:	bfb8      	it	lt
 80091ea:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80091ec:	429d      	cmp	r5, r3
 80091ee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80091f2:	da50      	bge.n	8009296 <_strtod_l+0x76e>
 80091f4:	1b5b      	subs	r3, r3, r5
 80091f6:	2b1f      	cmp	r3, #31
 80091f8:	f04f 0101 	mov.w	r1, #1
 80091fc:	eba2 0203 	sub.w	r2, r2, r3
 8009200:	dc3d      	bgt.n	800927e <_strtod_l+0x756>
 8009202:	fa01 f303 	lsl.w	r3, r1, r3
 8009206:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009208:	2300      	movs	r3, #0
 800920a:	9310      	str	r3, [sp, #64]	@ 0x40
 800920c:	18bd      	adds	r5, r7, r2
 800920e:	9b08      	ldr	r3, [sp, #32]
 8009210:	42af      	cmp	r7, r5
 8009212:	4416      	add	r6, r2
 8009214:	441e      	add	r6, r3
 8009216:	463b      	mov	r3, r7
 8009218:	bfa8      	it	ge
 800921a:	462b      	movge	r3, r5
 800921c:	42b3      	cmp	r3, r6
 800921e:	bfa8      	it	ge
 8009220:	4633      	movge	r3, r6
 8009222:	2b00      	cmp	r3, #0
 8009224:	bfc2      	ittt	gt
 8009226:	1aed      	subgt	r5, r5, r3
 8009228:	1af6      	subgt	r6, r6, r3
 800922a:	1aff      	subgt	r7, r7, r3
 800922c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800922e:	2b00      	cmp	r3, #0
 8009230:	dd16      	ble.n	8009260 <_strtod_l+0x738>
 8009232:	4641      	mov	r1, r8
 8009234:	461a      	mov	r2, r3
 8009236:	9805      	ldr	r0, [sp, #20]
 8009238:	f7ff f9a8 	bl	800858c <__pow5mult>
 800923c:	4680      	mov	r8, r0
 800923e:	2800      	cmp	r0, #0
 8009240:	d0b7      	beq.n	80091b2 <_strtod_l+0x68a>
 8009242:	4601      	mov	r1, r0
 8009244:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009246:	9805      	ldr	r0, [sp, #20]
 8009248:	f7ff f8f8 	bl	800843c <__multiply>
 800924c:	900e      	str	r0, [sp, #56]	@ 0x38
 800924e:	2800      	cmp	r0, #0
 8009250:	f43f ae85 	beq.w	8008f5e <_strtod_l+0x436>
 8009254:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009256:	9805      	ldr	r0, [sp, #20]
 8009258:	f7fe ffdc 	bl	8008214 <_Bfree>
 800925c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800925e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009260:	2d00      	cmp	r5, #0
 8009262:	dc1d      	bgt.n	80092a0 <_strtod_l+0x778>
 8009264:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009266:	2b00      	cmp	r3, #0
 8009268:	dd23      	ble.n	80092b2 <_strtod_l+0x78a>
 800926a:	4649      	mov	r1, r9
 800926c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800926e:	9805      	ldr	r0, [sp, #20]
 8009270:	f7ff f98c 	bl	800858c <__pow5mult>
 8009274:	4681      	mov	r9, r0
 8009276:	b9e0      	cbnz	r0, 80092b2 <_strtod_l+0x78a>
 8009278:	f04f 0900 	mov.w	r9, #0
 800927c:	e66f      	b.n	8008f5e <_strtod_l+0x436>
 800927e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009282:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009286:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800928a:	35e2      	adds	r5, #226	@ 0xe2
 800928c:	fa01 f305 	lsl.w	r3, r1, r5
 8009290:	9310      	str	r3, [sp, #64]	@ 0x40
 8009292:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009294:	e7ba      	b.n	800920c <_strtod_l+0x6e4>
 8009296:	2300      	movs	r3, #0
 8009298:	9310      	str	r3, [sp, #64]	@ 0x40
 800929a:	2301      	movs	r3, #1
 800929c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800929e:	e7b5      	b.n	800920c <_strtod_l+0x6e4>
 80092a0:	462a      	mov	r2, r5
 80092a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092a4:	9805      	ldr	r0, [sp, #20]
 80092a6:	f7ff f9cb 	bl	8008640 <__lshift>
 80092aa:	901a      	str	r0, [sp, #104]	@ 0x68
 80092ac:	2800      	cmp	r0, #0
 80092ae:	d1d9      	bne.n	8009264 <_strtod_l+0x73c>
 80092b0:	e655      	b.n	8008f5e <_strtod_l+0x436>
 80092b2:	2e00      	cmp	r6, #0
 80092b4:	dd07      	ble.n	80092c6 <_strtod_l+0x79e>
 80092b6:	4649      	mov	r1, r9
 80092b8:	4632      	mov	r2, r6
 80092ba:	9805      	ldr	r0, [sp, #20]
 80092bc:	f7ff f9c0 	bl	8008640 <__lshift>
 80092c0:	4681      	mov	r9, r0
 80092c2:	2800      	cmp	r0, #0
 80092c4:	d0d8      	beq.n	8009278 <_strtod_l+0x750>
 80092c6:	2f00      	cmp	r7, #0
 80092c8:	dd08      	ble.n	80092dc <_strtod_l+0x7b4>
 80092ca:	4641      	mov	r1, r8
 80092cc:	463a      	mov	r2, r7
 80092ce:	9805      	ldr	r0, [sp, #20]
 80092d0:	f7ff f9b6 	bl	8008640 <__lshift>
 80092d4:	4680      	mov	r8, r0
 80092d6:	2800      	cmp	r0, #0
 80092d8:	f43f ae41 	beq.w	8008f5e <_strtod_l+0x436>
 80092dc:	464a      	mov	r2, r9
 80092de:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092e0:	9805      	ldr	r0, [sp, #20]
 80092e2:	f7ff fa35 	bl	8008750 <__mdiff>
 80092e6:	4604      	mov	r4, r0
 80092e8:	2800      	cmp	r0, #0
 80092ea:	f43f ae38 	beq.w	8008f5e <_strtod_l+0x436>
 80092ee:	68c3      	ldr	r3, [r0, #12]
 80092f0:	4641      	mov	r1, r8
 80092f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80092f4:	2300      	movs	r3, #0
 80092f6:	60c3      	str	r3, [r0, #12]
 80092f8:	f7ff fa0e 	bl	8008718 <__mcmp>
 80092fc:	2800      	cmp	r0, #0
 80092fe:	da45      	bge.n	800938c <_strtod_l+0x864>
 8009300:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009302:	ea53 030a 	orrs.w	r3, r3, sl
 8009306:	d16b      	bne.n	80093e0 <_strtod_l+0x8b8>
 8009308:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800930c:	2b00      	cmp	r3, #0
 800930e:	d167      	bne.n	80093e0 <_strtod_l+0x8b8>
 8009310:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009314:	0d1b      	lsrs	r3, r3, #20
 8009316:	051b      	lsls	r3, r3, #20
 8009318:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800931c:	d960      	bls.n	80093e0 <_strtod_l+0x8b8>
 800931e:	6963      	ldr	r3, [r4, #20]
 8009320:	b913      	cbnz	r3, 8009328 <_strtod_l+0x800>
 8009322:	6923      	ldr	r3, [r4, #16]
 8009324:	2b01      	cmp	r3, #1
 8009326:	dd5b      	ble.n	80093e0 <_strtod_l+0x8b8>
 8009328:	4621      	mov	r1, r4
 800932a:	2201      	movs	r2, #1
 800932c:	9805      	ldr	r0, [sp, #20]
 800932e:	f7ff f987 	bl	8008640 <__lshift>
 8009332:	4641      	mov	r1, r8
 8009334:	4604      	mov	r4, r0
 8009336:	f7ff f9ef 	bl	8008718 <__mcmp>
 800933a:	2800      	cmp	r0, #0
 800933c:	dd50      	ble.n	80093e0 <_strtod_l+0x8b8>
 800933e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009342:	9a08      	ldr	r2, [sp, #32]
 8009344:	0d1b      	lsrs	r3, r3, #20
 8009346:	051b      	lsls	r3, r3, #20
 8009348:	2a00      	cmp	r2, #0
 800934a:	d06a      	beq.n	8009422 <_strtod_l+0x8fa>
 800934c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009350:	d867      	bhi.n	8009422 <_strtod_l+0x8fa>
 8009352:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009356:	f67f ae98 	bls.w	800908a <_strtod_l+0x562>
 800935a:	4650      	mov	r0, sl
 800935c:	4659      	mov	r1, fp
 800935e:	4b09      	ldr	r3, [pc, #36]	@ (8009384 <_strtod_l+0x85c>)
 8009360:	2200      	movs	r2, #0
 8009362:	f7f7 f8b9 	bl	80004d8 <__aeabi_dmul>
 8009366:	4b08      	ldr	r3, [pc, #32]	@ (8009388 <_strtod_l+0x860>)
 8009368:	4682      	mov	sl, r0
 800936a:	400b      	ands	r3, r1
 800936c:	468b      	mov	fp, r1
 800936e:	2b00      	cmp	r3, #0
 8009370:	f47f ae00 	bne.w	8008f74 <_strtod_l+0x44c>
 8009374:	2322      	movs	r3, #34	@ 0x22
 8009376:	9a05      	ldr	r2, [sp, #20]
 8009378:	6013      	str	r3, [r2, #0]
 800937a:	e5fb      	b.n	8008f74 <_strtod_l+0x44c>
 800937c:	0800d440 	.word	0x0800d440
 8009380:	fffffc02 	.word	0xfffffc02
 8009384:	39500000 	.word	0x39500000
 8009388:	7ff00000 	.word	0x7ff00000
 800938c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009390:	d165      	bne.n	800945e <_strtod_l+0x936>
 8009392:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009394:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009398:	b35a      	cbz	r2, 80093f2 <_strtod_l+0x8ca>
 800939a:	4a99      	ldr	r2, [pc, #612]	@ (8009600 <_strtod_l+0xad8>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d12b      	bne.n	80093f8 <_strtod_l+0x8d0>
 80093a0:	9b08      	ldr	r3, [sp, #32]
 80093a2:	4651      	mov	r1, sl
 80093a4:	b303      	cbz	r3, 80093e8 <_strtod_l+0x8c0>
 80093a6:	465a      	mov	r2, fp
 80093a8:	4b96      	ldr	r3, [pc, #600]	@ (8009604 <_strtod_l+0xadc>)
 80093aa:	4013      	ands	r3, r2
 80093ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80093b0:	f04f 32ff 	mov.w	r2, #4294967295
 80093b4:	d81b      	bhi.n	80093ee <_strtod_l+0x8c6>
 80093b6:	0d1b      	lsrs	r3, r3, #20
 80093b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80093bc:	fa02 f303 	lsl.w	r3, r2, r3
 80093c0:	4299      	cmp	r1, r3
 80093c2:	d119      	bne.n	80093f8 <_strtod_l+0x8d0>
 80093c4:	4b90      	ldr	r3, [pc, #576]	@ (8009608 <_strtod_l+0xae0>)
 80093c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d102      	bne.n	80093d2 <_strtod_l+0x8aa>
 80093cc:	3101      	adds	r1, #1
 80093ce:	f43f adc6 	beq.w	8008f5e <_strtod_l+0x436>
 80093d2:	f04f 0a00 	mov.w	sl, #0
 80093d6:	4b8b      	ldr	r3, [pc, #556]	@ (8009604 <_strtod_l+0xadc>)
 80093d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093da:	401a      	ands	r2, r3
 80093dc:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80093e0:	9b08      	ldr	r3, [sp, #32]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1b9      	bne.n	800935a <_strtod_l+0x832>
 80093e6:	e5c5      	b.n	8008f74 <_strtod_l+0x44c>
 80093e8:	f04f 33ff 	mov.w	r3, #4294967295
 80093ec:	e7e8      	b.n	80093c0 <_strtod_l+0x898>
 80093ee:	4613      	mov	r3, r2
 80093f0:	e7e6      	b.n	80093c0 <_strtod_l+0x898>
 80093f2:	ea53 030a 	orrs.w	r3, r3, sl
 80093f6:	d0a2      	beq.n	800933e <_strtod_l+0x816>
 80093f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80093fa:	b1db      	cbz	r3, 8009434 <_strtod_l+0x90c>
 80093fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093fe:	4213      	tst	r3, r2
 8009400:	d0ee      	beq.n	80093e0 <_strtod_l+0x8b8>
 8009402:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009404:	4650      	mov	r0, sl
 8009406:	4659      	mov	r1, fp
 8009408:	9a08      	ldr	r2, [sp, #32]
 800940a:	b1bb      	cbz	r3, 800943c <_strtod_l+0x914>
 800940c:	f7ff fb68 	bl	8008ae0 <sulp>
 8009410:	4602      	mov	r2, r0
 8009412:	460b      	mov	r3, r1
 8009414:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009418:	f7f6 fea8 	bl	800016c <__adddf3>
 800941c:	4682      	mov	sl, r0
 800941e:	468b      	mov	fp, r1
 8009420:	e7de      	b.n	80093e0 <_strtod_l+0x8b8>
 8009422:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009426:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800942a:	f04f 3aff 	mov.w	sl, #4294967295
 800942e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009432:	e7d5      	b.n	80093e0 <_strtod_l+0x8b8>
 8009434:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009436:	ea13 0f0a 	tst.w	r3, sl
 800943a:	e7e1      	b.n	8009400 <_strtod_l+0x8d8>
 800943c:	f7ff fb50 	bl	8008ae0 <sulp>
 8009440:	4602      	mov	r2, r0
 8009442:	460b      	mov	r3, r1
 8009444:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009448:	f7f6 fe8e 	bl	8000168 <__aeabi_dsub>
 800944c:	2200      	movs	r2, #0
 800944e:	2300      	movs	r3, #0
 8009450:	4682      	mov	sl, r0
 8009452:	468b      	mov	fp, r1
 8009454:	f7f7 faa8 	bl	80009a8 <__aeabi_dcmpeq>
 8009458:	2800      	cmp	r0, #0
 800945a:	d0c1      	beq.n	80093e0 <_strtod_l+0x8b8>
 800945c:	e615      	b.n	800908a <_strtod_l+0x562>
 800945e:	4641      	mov	r1, r8
 8009460:	4620      	mov	r0, r4
 8009462:	f7ff fac9 	bl	80089f8 <__ratio>
 8009466:	2200      	movs	r2, #0
 8009468:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800946c:	4606      	mov	r6, r0
 800946e:	460f      	mov	r7, r1
 8009470:	f7f7 faae 	bl	80009d0 <__aeabi_dcmple>
 8009474:	2800      	cmp	r0, #0
 8009476:	d06d      	beq.n	8009554 <_strtod_l+0xa2c>
 8009478:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800947a:	2b00      	cmp	r3, #0
 800947c:	d178      	bne.n	8009570 <_strtod_l+0xa48>
 800947e:	f1ba 0f00 	cmp.w	sl, #0
 8009482:	d156      	bne.n	8009532 <_strtod_l+0xa0a>
 8009484:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009486:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800948a:	2b00      	cmp	r3, #0
 800948c:	d158      	bne.n	8009540 <_strtod_l+0xa18>
 800948e:	2200      	movs	r2, #0
 8009490:	4630      	mov	r0, r6
 8009492:	4639      	mov	r1, r7
 8009494:	4b5d      	ldr	r3, [pc, #372]	@ (800960c <_strtod_l+0xae4>)
 8009496:	f7f7 fa91 	bl	80009bc <__aeabi_dcmplt>
 800949a:	2800      	cmp	r0, #0
 800949c:	d157      	bne.n	800954e <_strtod_l+0xa26>
 800949e:	4630      	mov	r0, r6
 80094a0:	4639      	mov	r1, r7
 80094a2:	2200      	movs	r2, #0
 80094a4:	4b5a      	ldr	r3, [pc, #360]	@ (8009610 <_strtod_l+0xae8>)
 80094a6:	f7f7 f817 	bl	80004d8 <__aeabi_dmul>
 80094aa:	4606      	mov	r6, r0
 80094ac:	460f      	mov	r7, r1
 80094ae:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80094b2:	9606      	str	r6, [sp, #24]
 80094b4:	9307      	str	r3, [sp, #28]
 80094b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80094ba:	4d52      	ldr	r5, [pc, #328]	@ (8009604 <_strtod_l+0xadc>)
 80094bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80094c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094c2:	401d      	ands	r5, r3
 80094c4:	4b53      	ldr	r3, [pc, #332]	@ (8009614 <_strtod_l+0xaec>)
 80094c6:	429d      	cmp	r5, r3
 80094c8:	f040 80aa 	bne.w	8009620 <_strtod_l+0xaf8>
 80094cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094ce:	4650      	mov	r0, sl
 80094d0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80094d4:	4659      	mov	r1, fp
 80094d6:	f7ff f9cf 	bl	8008878 <__ulp>
 80094da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80094de:	f7f6 fffb 	bl	80004d8 <__aeabi_dmul>
 80094e2:	4652      	mov	r2, sl
 80094e4:	465b      	mov	r3, fp
 80094e6:	f7f6 fe41 	bl	800016c <__adddf3>
 80094ea:	460b      	mov	r3, r1
 80094ec:	4945      	ldr	r1, [pc, #276]	@ (8009604 <_strtod_l+0xadc>)
 80094ee:	4a4a      	ldr	r2, [pc, #296]	@ (8009618 <_strtod_l+0xaf0>)
 80094f0:	4019      	ands	r1, r3
 80094f2:	4291      	cmp	r1, r2
 80094f4:	4682      	mov	sl, r0
 80094f6:	d942      	bls.n	800957e <_strtod_l+0xa56>
 80094f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80094fa:	4b43      	ldr	r3, [pc, #268]	@ (8009608 <_strtod_l+0xae0>)
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d103      	bne.n	8009508 <_strtod_l+0x9e0>
 8009500:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009502:	3301      	adds	r3, #1
 8009504:	f43f ad2b 	beq.w	8008f5e <_strtod_l+0x436>
 8009508:	f04f 3aff 	mov.w	sl, #4294967295
 800950c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009608 <_strtod_l+0xae0>
 8009510:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009512:	9805      	ldr	r0, [sp, #20]
 8009514:	f7fe fe7e 	bl	8008214 <_Bfree>
 8009518:	4649      	mov	r1, r9
 800951a:	9805      	ldr	r0, [sp, #20]
 800951c:	f7fe fe7a 	bl	8008214 <_Bfree>
 8009520:	4641      	mov	r1, r8
 8009522:	9805      	ldr	r0, [sp, #20]
 8009524:	f7fe fe76 	bl	8008214 <_Bfree>
 8009528:	4621      	mov	r1, r4
 800952a:	9805      	ldr	r0, [sp, #20]
 800952c:	f7fe fe72 	bl	8008214 <_Bfree>
 8009530:	e618      	b.n	8009164 <_strtod_l+0x63c>
 8009532:	f1ba 0f01 	cmp.w	sl, #1
 8009536:	d103      	bne.n	8009540 <_strtod_l+0xa18>
 8009538:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800953a:	2b00      	cmp	r3, #0
 800953c:	f43f ada5 	beq.w	800908a <_strtod_l+0x562>
 8009540:	2200      	movs	r2, #0
 8009542:	4b36      	ldr	r3, [pc, #216]	@ (800961c <_strtod_l+0xaf4>)
 8009544:	2600      	movs	r6, #0
 8009546:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800954a:	4f30      	ldr	r7, [pc, #192]	@ (800960c <_strtod_l+0xae4>)
 800954c:	e7b3      	b.n	80094b6 <_strtod_l+0x98e>
 800954e:	2600      	movs	r6, #0
 8009550:	4f2f      	ldr	r7, [pc, #188]	@ (8009610 <_strtod_l+0xae8>)
 8009552:	e7ac      	b.n	80094ae <_strtod_l+0x986>
 8009554:	4630      	mov	r0, r6
 8009556:	4639      	mov	r1, r7
 8009558:	4b2d      	ldr	r3, [pc, #180]	@ (8009610 <_strtod_l+0xae8>)
 800955a:	2200      	movs	r2, #0
 800955c:	f7f6 ffbc 	bl	80004d8 <__aeabi_dmul>
 8009560:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009562:	4606      	mov	r6, r0
 8009564:	460f      	mov	r7, r1
 8009566:	2b00      	cmp	r3, #0
 8009568:	d0a1      	beq.n	80094ae <_strtod_l+0x986>
 800956a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800956e:	e7a2      	b.n	80094b6 <_strtod_l+0x98e>
 8009570:	2200      	movs	r2, #0
 8009572:	4b26      	ldr	r3, [pc, #152]	@ (800960c <_strtod_l+0xae4>)
 8009574:	4616      	mov	r6, r2
 8009576:	461f      	mov	r7, r3
 8009578:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800957c:	e79b      	b.n	80094b6 <_strtod_l+0x98e>
 800957e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009582:	9b08      	ldr	r3, [sp, #32]
 8009584:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1c1      	bne.n	8009510 <_strtod_l+0x9e8>
 800958c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009590:	0d1b      	lsrs	r3, r3, #20
 8009592:	051b      	lsls	r3, r3, #20
 8009594:	429d      	cmp	r5, r3
 8009596:	d1bb      	bne.n	8009510 <_strtod_l+0x9e8>
 8009598:	4630      	mov	r0, r6
 800959a:	4639      	mov	r1, r7
 800959c:	f7f7 fbf2 	bl	8000d84 <__aeabi_d2lz>
 80095a0:	f7f6 ff6c 	bl	800047c <__aeabi_l2d>
 80095a4:	4602      	mov	r2, r0
 80095a6:	460b      	mov	r3, r1
 80095a8:	4630      	mov	r0, r6
 80095aa:	4639      	mov	r1, r7
 80095ac:	f7f6 fddc 	bl	8000168 <__aeabi_dsub>
 80095b0:	460b      	mov	r3, r1
 80095b2:	4602      	mov	r2, r0
 80095b4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80095b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80095bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095be:	ea46 060a 	orr.w	r6, r6, sl
 80095c2:	431e      	orrs	r6, r3
 80095c4:	d069      	beq.n	800969a <_strtod_l+0xb72>
 80095c6:	a30a      	add	r3, pc, #40	@ (adr r3, 80095f0 <_strtod_l+0xac8>)
 80095c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095cc:	f7f7 f9f6 	bl	80009bc <__aeabi_dcmplt>
 80095d0:	2800      	cmp	r0, #0
 80095d2:	f47f accf 	bne.w	8008f74 <_strtod_l+0x44c>
 80095d6:	a308      	add	r3, pc, #32	@ (adr r3, 80095f8 <_strtod_l+0xad0>)
 80095d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095e0:	f7f7 fa0a 	bl	80009f8 <__aeabi_dcmpgt>
 80095e4:	2800      	cmp	r0, #0
 80095e6:	d093      	beq.n	8009510 <_strtod_l+0x9e8>
 80095e8:	e4c4      	b.n	8008f74 <_strtod_l+0x44c>
 80095ea:	bf00      	nop
 80095ec:	f3af 8000 	nop.w
 80095f0:	94a03595 	.word	0x94a03595
 80095f4:	3fdfffff 	.word	0x3fdfffff
 80095f8:	35afe535 	.word	0x35afe535
 80095fc:	3fe00000 	.word	0x3fe00000
 8009600:	000fffff 	.word	0x000fffff
 8009604:	7ff00000 	.word	0x7ff00000
 8009608:	7fefffff 	.word	0x7fefffff
 800960c:	3ff00000 	.word	0x3ff00000
 8009610:	3fe00000 	.word	0x3fe00000
 8009614:	7fe00000 	.word	0x7fe00000
 8009618:	7c9fffff 	.word	0x7c9fffff
 800961c:	bff00000 	.word	0xbff00000
 8009620:	9b08      	ldr	r3, [sp, #32]
 8009622:	b323      	cbz	r3, 800966e <_strtod_l+0xb46>
 8009624:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009628:	d821      	bhi.n	800966e <_strtod_l+0xb46>
 800962a:	a327      	add	r3, pc, #156	@ (adr r3, 80096c8 <_strtod_l+0xba0>)
 800962c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009630:	4630      	mov	r0, r6
 8009632:	4639      	mov	r1, r7
 8009634:	f7f7 f9cc 	bl	80009d0 <__aeabi_dcmple>
 8009638:	b1a0      	cbz	r0, 8009664 <_strtod_l+0xb3c>
 800963a:	4639      	mov	r1, r7
 800963c:	4630      	mov	r0, r6
 800963e:	f7f7 fa23 	bl	8000a88 <__aeabi_d2uiz>
 8009642:	2801      	cmp	r0, #1
 8009644:	bf38      	it	cc
 8009646:	2001      	movcc	r0, #1
 8009648:	f7f6 fecc 	bl	80003e4 <__aeabi_ui2d>
 800964c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800964e:	4606      	mov	r6, r0
 8009650:	460f      	mov	r7, r1
 8009652:	b9fb      	cbnz	r3, 8009694 <_strtod_l+0xb6c>
 8009654:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009658:	9014      	str	r0, [sp, #80]	@ 0x50
 800965a:	9315      	str	r3, [sp, #84]	@ 0x54
 800965c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009660:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009664:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009666:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800966a:	1b5b      	subs	r3, r3, r5
 800966c:	9311      	str	r3, [sp, #68]	@ 0x44
 800966e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009672:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009676:	f7ff f8ff 	bl	8008878 <__ulp>
 800967a:	4602      	mov	r2, r0
 800967c:	460b      	mov	r3, r1
 800967e:	4650      	mov	r0, sl
 8009680:	4659      	mov	r1, fp
 8009682:	f7f6 ff29 	bl	80004d8 <__aeabi_dmul>
 8009686:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800968a:	f7f6 fd6f 	bl	800016c <__adddf3>
 800968e:	4682      	mov	sl, r0
 8009690:	468b      	mov	fp, r1
 8009692:	e776      	b.n	8009582 <_strtod_l+0xa5a>
 8009694:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009698:	e7e0      	b.n	800965c <_strtod_l+0xb34>
 800969a:	a30d      	add	r3, pc, #52	@ (adr r3, 80096d0 <_strtod_l+0xba8>)
 800969c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a0:	f7f7 f98c 	bl	80009bc <__aeabi_dcmplt>
 80096a4:	e79e      	b.n	80095e4 <_strtod_l+0xabc>
 80096a6:	2300      	movs	r3, #0
 80096a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096ac:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80096ae:	6013      	str	r3, [r2, #0]
 80096b0:	f7ff ba77 	b.w	8008ba2 <_strtod_l+0x7a>
 80096b4:	2a65      	cmp	r2, #101	@ 0x65
 80096b6:	f43f ab6e 	beq.w	8008d96 <_strtod_l+0x26e>
 80096ba:	2a45      	cmp	r2, #69	@ 0x45
 80096bc:	f43f ab6b 	beq.w	8008d96 <_strtod_l+0x26e>
 80096c0:	2301      	movs	r3, #1
 80096c2:	f7ff bba6 	b.w	8008e12 <_strtod_l+0x2ea>
 80096c6:	bf00      	nop
 80096c8:	ffc00000 	.word	0xffc00000
 80096cc:	41dfffff 	.word	0x41dfffff
 80096d0:	94a03595 	.word	0x94a03595
 80096d4:	3fcfffff 	.word	0x3fcfffff

080096d8 <_strtod_r>:
 80096d8:	4b01      	ldr	r3, [pc, #4]	@ (80096e0 <_strtod_r+0x8>)
 80096da:	f7ff ba25 	b.w	8008b28 <_strtod_l>
 80096de:	bf00      	nop
 80096e0:	20000070 	.word	0x20000070

080096e4 <_strtol_l.constprop.0>:
 80096e4:	2b24      	cmp	r3, #36	@ 0x24
 80096e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096ea:	4686      	mov	lr, r0
 80096ec:	4690      	mov	r8, r2
 80096ee:	d801      	bhi.n	80096f4 <_strtol_l.constprop.0+0x10>
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d106      	bne.n	8009702 <_strtol_l.constprop.0+0x1e>
 80096f4:	f7fd fdb2 	bl	800725c <__errno>
 80096f8:	2316      	movs	r3, #22
 80096fa:	6003      	str	r3, [r0, #0]
 80096fc:	2000      	movs	r0, #0
 80096fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009702:	460d      	mov	r5, r1
 8009704:	4833      	ldr	r0, [pc, #204]	@ (80097d4 <_strtol_l.constprop.0+0xf0>)
 8009706:	462a      	mov	r2, r5
 8009708:	f815 4b01 	ldrb.w	r4, [r5], #1
 800970c:	5d06      	ldrb	r6, [r0, r4]
 800970e:	f016 0608 	ands.w	r6, r6, #8
 8009712:	d1f8      	bne.n	8009706 <_strtol_l.constprop.0+0x22>
 8009714:	2c2d      	cmp	r4, #45	@ 0x2d
 8009716:	d12d      	bne.n	8009774 <_strtol_l.constprop.0+0x90>
 8009718:	2601      	movs	r6, #1
 800971a:	782c      	ldrb	r4, [r5, #0]
 800971c:	1c95      	adds	r5, r2, #2
 800971e:	f033 0210 	bics.w	r2, r3, #16
 8009722:	d109      	bne.n	8009738 <_strtol_l.constprop.0+0x54>
 8009724:	2c30      	cmp	r4, #48	@ 0x30
 8009726:	d12a      	bne.n	800977e <_strtol_l.constprop.0+0x9a>
 8009728:	782a      	ldrb	r2, [r5, #0]
 800972a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800972e:	2a58      	cmp	r2, #88	@ 0x58
 8009730:	d125      	bne.n	800977e <_strtol_l.constprop.0+0x9a>
 8009732:	2310      	movs	r3, #16
 8009734:	786c      	ldrb	r4, [r5, #1]
 8009736:	3502      	adds	r5, #2
 8009738:	2200      	movs	r2, #0
 800973a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800973e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009742:	fbbc f9f3 	udiv	r9, ip, r3
 8009746:	4610      	mov	r0, r2
 8009748:	fb03 ca19 	mls	sl, r3, r9, ip
 800974c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009750:	2f09      	cmp	r7, #9
 8009752:	d81b      	bhi.n	800978c <_strtol_l.constprop.0+0xa8>
 8009754:	463c      	mov	r4, r7
 8009756:	42a3      	cmp	r3, r4
 8009758:	dd27      	ble.n	80097aa <_strtol_l.constprop.0+0xc6>
 800975a:	1c57      	adds	r7, r2, #1
 800975c:	d007      	beq.n	800976e <_strtol_l.constprop.0+0x8a>
 800975e:	4581      	cmp	r9, r0
 8009760:	d320      	bcc.n	80097a4 <_strtol_l.constprop.0+0xc0>
 8009762:	d101      	bne.n	8009768 <_strtol_l.constprop.0+0x84>
 8009764:	45a2      	cmp	sl, r4
 8009766:	db1d      	blt.n	80097a4 <_strtol_l.constprop.0+0xc0>
 8009768:	2201      	movs	r2, #1
 800976a:	fb00 4003 	mla	r0, r0, r3, r4
 800976e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009772:	e7eb      	b.n	800974c <_strtol_l.constprop.0+0x68>
 8009774:	2c2b      	cmp	r4, #43	@ 0x2b
 8009776:	bf04      	itt	eq
 8009778:	782c      	ldrbeq	r4, [r5, #0]
 800977a:	1c95      	addeq	r5, r2, #2
 800977c:	e7cf      	b.n	800971e <_strtol_l.constprop.0+0x3a>
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1da      	bne.n	8009738 <_strtol_l.constprop.0+0x54>
 8009782:	2c30      	cmp	r4, #48	@ 0x30
 8009784:	bf0c      	ite	eq
 8009786:	2308      	moveq	r3, #8
 8009788:	230a      	movne	r3, #10
 800978a:	e7d5      	b.n	8009738 <_strtol_l.constprop.0+0x54>
 800978c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009790:	2f19      	cmp	r7, #25
 8009792:	d801      	bhi.n	8009798 <_strtol_l.constprop.0+0xb4>
 8009794:	3c37      	subs	r4, #55	@ 0x37
 8009796:	e7de      	b.n	8009756 <_strtol_l.constprop.0+0x72>
 8009798:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800979c:	2f19      	cmp	r7, #25
 800979e:	d804      	bhi.n	80097aa <_strtol_l.constprop.0+0xc6>
 80097a0:	3c57      	subs	r4, #87	@ 0x57
 80097a2:	e7d8      	b.n	8009756 <_strtol_l.constprop.0+0x72>
 80097a4:	f04f 32ff 	mov.w	r2, #4294967295
 80097a8:	e7e1      	b.n	800976e <_strtol_l.constprop.0+0x8a>
 80097aa:	1c53      	adds	r3, r2, #1
 80097ac:	d108      	bne.n	80097c0 <_strtol_l.constprop.0+0xdc>
 80097ae:	2322      	movs	r3, #34	@ 0x22
 80097b0:	4660      	mov	r0, ip
 80097b2:	f8ce 3000 	str.w	r3, [lr]
 80097b6:	f1b8 0f00 	cmp.w	r8, #0
 80097ba:	d0a0      	beq.n	80096fe <_strtol_l.constprop.0+0x1a>
 80097bc:	1e69      	subs	r1, r5, #1
 80097be:	e006      	b.n	80097ce <_strtol_l.constprop.0+0xea>
 80097c0:	b106      	cbz	r6, 80097c4 <_strtol_l.constprop.0+0xe0>
 80097c2:	4240      	negs	r0, r0
 80097c4:	f1b8 0f00 	cmp.w	r8, #0
 80097c8:	d099      	beq.n	80096fe <_strtol_l.constprop.0+0x1a>
 80097ca:	2a00      	cmp	r2, #0
 80097cc:	d1f6      	bne.n	80097bc <_strtol_l.constprop.0+0xd8>
 80097ce:	f8c8 1000 	str.w	r1, [r8]
 80097d2:	e794      	b.n	80096fe <_strtol_l.constprop.0+0x1a>
 80097d4:	0800d469 	.word	0x0800d469

080097d8 <_strtol_r>:
 80097d8:	f7ff bf84 	b.w	80096e4 <_strtol_l.constprop.0>

080097dc <__ssputs_r>:
 80097dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097e0:	461f      	mov	r7, r3
 80097e2:	688e      	ldr	r6, [r1, #8]
 80097e4:	4682      	mov	sl, r0
 80097e6:	42be      	cmp	r6, r7
 80097e8:	460c      	mov	r4, r1
 80097ea:	4690      	mov	r8, r2
 80097ec:	680b      	ldr	r3, [r1, #0]
 80097ee:	d82d      	bhi.n	800984c <__ssputs_r+0x70>
 80097f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80097f8:	d026      	beq.n	8009848 <__ssputs_r+0x6c>
 80097fa:	6965      	ldr	r5, [r4, #20]
 80097fc:	6909      	ldr	r1, [r1, #16]
 80097fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009802:	eba3 0901 	sub.w	r9, r3, r1
 8009806:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800980a:	1c7b      	adds	r3, r7, #1
 800980c:	444b      	add	r3, r9
 800980e:	106d      	asrs	r5, r5, #1
 8009810:	429d      	cmp	r5, r3
 8009812:	bf38      	it	cc
 8009814:	461d      	movcc	r5, r3
 8009816:	0553      	lsls	r3, r2, #21
 8009818:	d527      	bpl.n	800986a <__ssputs_r+0x8e>
 800981a:	4629      	mov	r1, r5
 800981c:	f7fe fc2e 	bl	800807c <_malloc_r>
 8009820:	4606      	mov	r6, r0
 8009822:	b360      	cbz	r0, 800987e <__ssputs_r+0xa2>
 8009824:	464a      	mov	r2, r9
 8009826:	6921      	ldr	r1, [r4, #16]
 8009828:	f7fd fd53 	bl	80072d2 <memcpy>
 800982c:	89a3      	ldrh	r3, [r4, #12]
 800982e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009832:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009836:	81a3      	strh	r3, [r4, #12]
 8009838:	6126      	str	r6, [r4, #16]
 800983a:	444e      	add	r6, r9
 800983c:	6026      	str	r6, [r4, #0]
 800983e:	463e      	mov	r6, r7
 8009840:	6165      	str	r5, [r4, #20]
 8009842:	eba5 0509 	sub.w	r5, r5, r9
 8009846:	60a5      	str	r5, [r4, #8]
 8009848:	42be      	cmp	r6, r7
 800984a:	d900      	bls.n	800984e <__ssputs_r+0x72>
 800984c:	463e      	mov	r6, r7
 800984e:	4632      	mov	r2, r6
 8009850:	4641      	mov	r1, r8
 8009852:	6820      	ldr	r0, [r4, #0]
 8009854:	f7fd fc95 	bl	8007182 <memmove>
 8009858:	2000      	movs	r0, #0
 800985a:	68a3      	ldr	r3, [r4, #8]
 800985c:	1b9b      	subs	r3, r3, r6
 800985e:	60a3      	str	r3, [r4, #8]
 8009860:	6823      	ldr	r3, [r4, #0]
 8009862:	4433      	add	r3, r6
 8009864:	6023      	str	r3, [r4, #0]
 8009866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800986a:	462a      	mov	r2, r5
 800986c:	f000 fd5b 	bl	800a326 <_realloc_r>
 8009870:	4606      	mov	r6, r0
 8009872:	2800      	cmp	r0, #0
 8009874:	d1e0      	bne.n	8009838 <__ssputs_r+0x5c>
 8009876:	4650      	mov	r0, sl
 8009878:	6921      	ldr	r1, [r4, #16]
 800987a:	f7fe fb8d 	bl	8007f98 <_free_r>
 800987e:	230c      	movs	r3, #12
 8009880:	f8ca 3000 	str.w	r3, [sl]
 8009884:	89a3      	ldrh	r3, [r4, #12]
 8009886:	f04f 30ff 	mov.w	r0, #4294967295
 800988a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800988e:	81a3      	strh	r3, [r4, #12]
 8009890:	e7e9      	b.n	8009866 <__ssputs_r+0x8a>
	...

08009894 <_svfiprintf_r>:
 8009894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009898:	4698      	mov	r8, r3
 800989a:	898b      	ldrh	r3, [r1, #12]
 800989c:	4607      	mov	r7, r0
 800989e:	061b      	lsls	r3, r3, #24
 80098a0:	460d      	mov	r5, r1
 80098a2:	4614      	mov	r4, r2
 80098a4:	b09d      	sub	sp, #116	@ 0x74
 80098a6:	d510      	bpl.n	80098ca <_svfiprintf_r+0x36>
 80098a8:	690b      	ldr	r3, [r1, #16]
 80098aa:	b973      	cbnz	r3, 80098ca <_svfiprintf_r+0x36>
 80098ac:	2140      	movs	r1, #64	@ 0x40
 80098ae:	f7fe fbe5 	bl	800807c <_malloc_r>
 80098b2:	6028      	str	r0, [r5, #0]
 80098b4:	6128      	str	r0, [r5, #16]
 80098b6:	b930      	cbnz	r0, 80098c6 <_svfiprintf_r+0x32>
 80098b8:	230c      	movs	r3, #12
 80098ba:	603b      	str	r3, [r7, #0]
 80098bc:	f04f 30ff 	mov.w	r0, #4294967295
 80098c0:	b01d      	add	sp, #116	@ 0x74
 80098c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098c6:	2340      	movs	r3, #64	@ 0x40
 80098c8:	616b      	str	r3, [r5, #20]
 80098ca:	2300      	movs	r3, #0
 80098cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80098ce:	2320      	movs	r3, #32
 80098d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80098d4:	2330      	movs	r3, #48	@ 0x30
 80098d6:	f04f 0901 	mov.w	r9, #1
 80098da:	f8cd 800c 	str.w	r8, [sp, #12]
 80098de:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009a78 <_svfiprintf_r+0x1e4>
 80098e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80098e6:	4623      	mov	r3, r4
 80098e8:	469a      	mov	sl, r3
 80098ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098ee:	b10a      	cbz	r2, 80098f4 <_svfiprintf_r+0x60>
 80098f0:	2a25      	cmp	r2, #37	@ 0x25
 80098f2:	d1f9      	bne.n	80098e8 <_svfiprintf_r+0x54>
 80098f4:	ebba 0b04 	subs.w	fp, sl, r4
 80098f8:	d00b      	beq.n	8009912 <_svfiprintf_r+0x7e>
 80098fa:	465b      	mov	r3, fp
 80098fc:	4622      	mov	r2, r4
 80098fe:	4629      	mov	r1, r5
 8009900:	4638      	mov	r0, r7
 8009902:	f7ff ff6b 	bl	80097dc <__ssputs_r>
 8009906:	3001      	adds	r0, #1
 8009908:	f000 80a7 	beq.w	8009a5a <_svfiprintf_r+0x1c6>
 800990c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800990e:	445a      	add	r2, fp
 8009910:	9209      	str	r2, [sp, #36]	@ 0x24
 8009912:	f89a 3000 	ldrb.w	r3, [sl]
 8009916:	2b00      	cmp	r3, #0
 8009918:	f000 809f 	beq.w	8009a5a <_svfiprintf_r+0x1c6>
 800991c:	2300      	movs	r3, #0
 800991e:	f04f 32ff 	mov.w	r2, #4294967295
 8009922:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009926:	f10a 0a01 	add.w	sl, sl, #1
 800992a:	9304      	str	r3, [sp, #16]
 800992c:	9307      	str	r3, [sp, #28]
 800992e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009932:	931a      	str	r3, [sp, #104]	@ 0x68
 8009934:	4654      	mov	r4, sl
 8009936:	2205      	movs	r2, #5
 8009938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800993c:	484e      	ldr	r0, [pc, #312]	@ (8009a78 <_svfiprintf_r+0x1e4>)
 800993e:	f7fd fcba 	bl	80072b6 <memchr>
 8009942:	9a04      	ldr	r2, [sp, #16]
 8009944:	b9d8      	cbnz	r0, 800997e <_svfiprintf_r+0xea>
 8009946:	06d0      	lsls	r0, r2, #27
 8009948:	bf44      	itt	mi
 800994a:	2320      	movmi	r3, #32
 800994c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009950:	0711      	lsls	r1, r2, #28
 8009952:	bf44      	itt	mi
 8009954:	232b      	movmi	r3, #43	@ 0x2b
 8009956:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800995a:	f89a 3000 	ldrb.w	r3, [sl]
 800995e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009960:	d015      	beq.n	800998e <_svfiprintf_r+0xfa>
 8009962:	4654      	mov	r4, sl
 8009964:	2000      	movs	r0, #0
 8009966:	f04f 0c0a 	mov.w	ip, #10
 800996a:	9a07      	ldr	r2, [sp, #28]
 800996c:	4621      	mov	r1, r4
 800996e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009972:	3b30      	subs	r3, #48	@ 0x30
 8009974:	2b09      	cmp	r3, #9
 8009976:	d94b      	bls.n	8009a10 <_svfiprintf_r+0x17c>
 8009978:	b1b0      	cbz	r0, 80099a8 <_svfiprintf_r+0x114>
 800997a:	9207      	str	r2, [sp, #28]
 800997c:	e014      	b.n	80099a8 <_svfiprintf_r+0x114>
 800997e:	eba0 0308 	sub.w	r3, r0, r8
 8009982:	fa09 f303 	lsl.w	r3, r9, r3
 8009986:	4313      	orrs	r3, r2
 8009988:	46a2      	mov	sl, r4
 800998a:	9304      	str	r3, [sp, #16]
 800998c:	e7d2      	b.n	8009934 <_svfiprintf_r+0xa0>
 800998e:	9b03      	ldr	r3, [sp, #12]
 8009990:	1d19      	adds	r1, r3, #4
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	9103      	str	r1, [sp, #12]
 8009996:	2b00      	cmp	r3, #0
 8009998:	bfbb      	ittet	lt
 800999a:	425b      	neglt	r3, r3
 800999c:	f042 0202 	orrlt.w	r2, r2, #2
 80099a0:	9307      	strge	r3, [sp, #28]
 80099a2:	9307      	strlt	r3, [sp, #28]
 80099a4:	bfb8      	it	lt
 80099a6:	9204      	strlt	r2, [sp, #16]
 80099a8:	7823      	ldrb	r3, [r4, #0]
 80099aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80099ac:	d10a      	bne.n	80099c4 <_svfiprintf_r+0x130>
 80099ae:	7863      	ldrb	r3, [r4, #1]
 80099b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80099b2:	d132      	bne.n	8009a1a <_svfiprintf_r+0x186>
 80099b4:	9b03      	ldr	r3, [sp, #12]
 80099b6:	3402      	adds	r4, #2
 80099b8:	1d1a      	adds	r2, r3, #4
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	9203      	str	r2, [sp, #12]
 80099be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099c2:	9305      	str	r3, [sp, #20]
 80099c4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009a7c <_svfiprintf_r+0x1e8>
 80099c8:	2203      	movs	r2, #3
 80099ca:	4650      	mov	r0, sl
 80099cc:	7821      	ldrb	r1, [r4, #0]
 80099ce:	f7fd fc72 	bl	80072b6 <memchr>
 80099d2:	b138      	cbz	r0, 80099e4 <_svfiprintf_r+0x150>
 80099d4:	2240      	movs	r2, #64	@ 0x40
 80099d6:	9b04      	ldr	r3, [sp, #16]
 80099d8:	eba0 000a 	sub.w	r0, r0, sl
 80099dc:	4082      	lsls	r2, r0
 80099de:	4313      	orrs	r3, r2
 80099e0:	3401      	adds	r4, #1
 80099e2:	9304      	str	r3, [sp, #16]
 80099e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099e8:	2206      	movs	r2, #6
 80099ea:	4825      	ldr	r0, [pc, #148]	@ (8009a80 <_svfiprintf_r+0x1ec>)
 80099ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80099f0:	f7fd fc61 	bl	80072b6 <memchr>
 80099f4:	2800      	cmp	r0, #0
 80099f6:	d036      	beq.n	8009a66 <_svfiprintf_r+0x1d2>
 80099f8:	4b22      	ldr	r3, [pc, #136]	@ (8009a84 <_svfiprintf_r+0x1f0>)
 80099fa:	bb1b      	cbnz	r3, 8009a44 <_svfiprintf_r+0x1b0>
 80099fc:	9b03      	ldr	r3, [sp, #12]
 80099fe:	3307      	adds	r3, #7
 8009a00:	f023 0307 	bic.w	r3, r3, #7
 8009a04:	3308      	adds	r3, #8
 8009a06:	9303      	str	r3, [sp, #12]
 8009a08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a0a:	4433      	add	r3, r6
 8009a0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a0e:	e76a      	b.n	80098e6 <_svfiprintf_r+0x52>
 8009a10:	460c      	mov	r4, r1
 8009a12:	2001      	movs	r0, #1
 8009a14:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a18:	e7a8      	b.n	800996c <_svfiprintf_r+0xd8>
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	f04f 0c0a 	mov.w	ip, #10
 8009a20:	4619      	mov	r1, r3
 8009a22:	3401      	adds	r4, #1
 8009a24:	9305      	str	r3, [sp, #20]
 8009a26:	4620      	mov	r0, r4
 8009a28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a2c:	3a30      	subs	r2, #48	@ 0x30
 8009a2e:	2a09      	cmp	r2, #9
 8009a30:	d903      	bls.n	8009a3a <_svfiprintf_r+0x1a6>
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d0c6      	beq.n	80099c4 <_svfiprintf_r+0x130>
 8009a36:	9105      	str	r1, [sp, #20]
 8009a38:	e7c4      	b.n	80099c4 <_svfiprintf_r+0x130>
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a42:	e7f0      	b.n	8009a26 <_svfiprintf_r+0x192>
 8009a44:	ab03      	add	r3, sp, #12
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	462a      	mov	r2, r5
 8009a4a:	4638      	mov	r0, r7
 8009a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8009a88 <_svfiprintf_r+0x1f4>)
 8009a4e:	a904      	add	r1, sp, #16
 8009a50:	f7fc fc70 	bl	8006334 <_printf_float>
 8009a54:	1c42      	adds	r2, r0, #1
 8009a56:	4606      	mov	r6, r0
 8009a58:	d1d6      	bne.n	8009a08 <_svfiprintf_r+0x174>
 8009a5a:	89ab      	ldrh	r3, [r5, #12]
 8009a5c:	065b      	lsls	r3, r3, #25
 8009a5e:	f53f af2d 	bmi.w	80098bc <_svfiprintf_r+0x28>
 8009a62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a64:	e72c      	b.n	80098c0 <_svfiprintf_r+0x2c>
 8009a66:	ab03      	add	r3, sp, #12
 8009a68:	9300      	str	r3, [sp, #0]
 8009a6a:	462a      	mov	r2, r5
 8009a6c:	4638      	mov	r0, r7
 8009a6e:	4b06      	ldr	r3, [pc, #24]	@ (8009a88 <_svfiprintf_r+0x1f4>)
 8009a70:	a904      	add	r1, sp, #16
 8009a72:	f7fc fefd 	bl	8006870 <_printf_i>
 8009a76:	e7ed      	b.n	8009a54 <_svfiprintf_r+0x1c0>
 8009a78:	0800d569 	.word	0x0800d569
 8009a7c:	0800d56f 	.word	0x0800d56f
 8009a80:	0800d573 	.word	0x0800d573
 8009a84:	08006335 	.word	0x08006335
 8009a88:	080097dd 	.word	0x080097dd

08009a8c <__sflush_r>:
 8009a8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a92:	0716      	lsls	r6, r2, #28
 8009a94:	4605      	mov	r5, r0
 8009a96:	460c      	mov	r4, r1
 8009a98:	d454      	bmi.n	8009b44 <__sflush_r+0xb8>
 8009a9a:	684b      	ldr	r3, [r1, #4]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	dc02      	bgt.n	8009aa6 <__sflush_r+0x1a>
 8009aa0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	dd48      	ble.n	8009b38 <__sflush_r+0xac>
 8009aa6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009aa8:	2e00      	cmp	r6, #0
 8009aaa:	d045      	beq.n	8009b38 <__sflush_r+0xac>
 8009aac:	2300      	movs	r3, #0
 8009aae:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009ab2:	682f      	ldr	r7, [r5, #0]
 8009ab4:	6a21      	ldr	r1, [r4, #32]
 8009ab6:	602b      	str	r3, [r5, #0]
 8009ab8:	d030      	beq.n	8009b1c <__sflush_r+0x90>
 8009aba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009abc:	89a3      	ldrh	r3, [r4, #12]
 8009abe:	0759      	lsls	r1, r3, #29
 8009ac0:	d505      	bpl.n	8009ace <__sflush_r+0x42>
 8009ac2:	6863      	ldr	r3, [r4, #4]
 8009ac4:	1ad2      	subs	r2, r2, r3
 8009ac6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009ac8:	b10b      	cbz	r3, 8009ace <__sflush_r+0x42>
 8009aca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009acc:	1ad2      	subs	r2, r2, r3
 8009ace:	2300      	movs	r3, #0
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ad4:	6a21      	ldr	r1, [r4, #32]
 8009ad6:	47b0      	blx	r6
 8009ad8:	1c43      	adds	r3, r0, #1
 8009ada:	89a3      	ldrh	r3, [r4, #12]
 8009adc:	d106      	bne.n	8009aec <__sflush_r+0x60>
 8009ade:	6829      	ldr	r1, [r5, #0]
 8009ae0:	291d      	cmp	r1, #29
 8009ae2:	d82b      	bhi.n	8009b3c <__sflush_r+0xb0>
 8009ae4:	4a28      	ldr	r2, [pc, #160]	@ (8009b88 <__sflush_r+0xfc>)
 8009ae6:	410a      	asrs	r2, r1
 8009ae8:	07d6      	lsls	r6, r2, #31
 8009aea:	d427      	bmi.n	8009b3c <__sflush_r+0xb0>
 8009aec:	2200      	movs	r2, #0
 8009aee:	6062      	str	r2, [r4, #4]
 8009af0:	6922      	ldr	r2, [r4, #16]
 8009af2:	04d9      	lsls	r1, r3, #19
 8009af4:	6022      	str	r2, [r4, #0]
 8009af6:	d504      	bpl.n	8009b02 <__sflush_r+0x76>
 8009af8:	1c42      	adds	r2, r0, #1
 8009afa:	d101      	bne.n	8009b00 <__sflush_r+0x74>
 8009afc:	682b      	ldr	r3, [r5, #0]
 8009afe:	b903      	cbnz	r3, 8009b02 <__sflush_r+0x76>
 8009b00:	6560      	str	r0, [r4, #84]	@ 0x54
 8009b02:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b04:	602f      	str	r7, [r5, #0]
 8009b06:	b1b9      	cbz	r1, 8009b38 <__sflush_r+0xac>
 8009b08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b0c:	4299      	cmp	r1, r3
 8009b0e:	d002      	beq.n	8009b16 <__sflush_r+0x8a>
 8009b10:	4628      	mov	r0, r5
 8009b12:	f7fe fa41 	bl	8007f98 <_free_r>
 8009b16:	2300      	movs	r3, #0
 8009b18:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b1a:	e00d      	b.n	8009b38 <__sflush_r+0xac>
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	4628      	mov	r0, r5
 8009b20:	47b0      	blx	r6
 8009b22:	4602      	mov	r2, r0
 8009b24:	1c50      	adds	r0, r2, #1
 8009b26:	d1c9      	bne.n	8009abc <__sflush_r+0x30>
 8009b28:	682b      	ldr	r3, [r5, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d0c6      	beq.n	8009abc <__sflush_r+0x30>
 8009b2e:	2b1d      	cmp	r3, #29
 8009b30:	d001      	beq.n	8009b36 <__sflush_r+0xaa>
 8009b32:	2b16      	cmp	r3, #22
 8009b34:	d11d      	bne.n	8009b72 <__sflush_r+0xe6>
 8009b36:	602f      	str	r7, [r5, #0]
 8009b38:	2000      	movs	r0, #0
 8009b3a:	e021      	b.n	8009b80 <__sflush_r+0xf4>
 8009b3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b40:	b21b      	sxth	r3, r3
 8009b42:	e01a      	b.n	8009b7a <__sflush_r+0xee>
 8009b44:	690f      	ldr	r7, [r1, #16]
 8009b46:	2f00      	cmp	r7, #0
 8009b48:	d0f6      	beq.n	8009b38 <__sflush_r+0xac>
 8009b4a:	0793      	lsls	r3, r2, #30
 8009b4c:	bf18      	it	ne
 8009b4e:	2300      	movne	r3, #0
 8009b50:	680e      	ldr	r6, [r1, #0]
 8009b52:	bf08      	it	eq
 8009b54:	694b      	ldreq	r3, [r1, #20]
 8009b56:	1bf6      	subs	r6, r6, r7
 8009b58:	600f      	str	r7, [r1, #0]
 8009b5a:	608b      	str	r3, [r1, #8]
 8009b5c:	2e00      	cmp	r6, #0
 8009b5e:	ddeb      	ble.n	8009b38 <__sflush_r+0xac>
 8009b60:	4633      	mov	r3, r6
 8009b62:	463a      	mov	r2, r7
 8009b64:	4628      	mov	r0, r5
 8009b66:	6a21      	ldr	r1, [r4, #32]
 8009b68:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009b6c:	47e0      	blx	ip
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	dc07      	bgt.n	8009b82 <__sflush_r+0xf6>
 8009b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7e:	81a3      	strh	r3, [r4, #12]
 8009b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b82:	4407      	add	r7, r0
 8009b84:	1a36      	subs	r6, r6, r0
 8009b86:	e7e9      	b.n	8009b5c <__sflush_r+0xd0>
 8009b88:	dfbffffe 	.word	0xdfbffffe

08009b8c <_fflush_r>:
 8009b8c:	b538      	push	{r3, r4, r5, lr}
 8009b8e:	690b      	ldr	r3, [r1, #16]
 8009b90:	4605      	mov	r5, r0
 8009b92:	460c      	mov	r4, r1
 8009b94:	b913      	cbnz	r3, 8009b9c <_fflush_r+0x10>
 8009b96:	2500      	movs	r5, #0
 8009b98:	4628      	mov	r0, r5
 8009b9a:	bd38      	pop	{r3, r4, r5, pc}
 8009b9c:	b118      	cbz	r0, 8009ba6 <_fflush_r+0x1a>
 8009b9e:	6a03      	ldr	r3, [r0, #32]
 8009ba0:	b90b      	cbnz	r3, 8009ba6 <_fflush_r+0x1a>
 8009ba2:	f7fd fa21 	bl	8006fe8 <__sinit>
 8009ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d0f3      	beq.n	8009b96 <_fflush_r+0xa>
 8009bae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009bb0:	07d0      	lsls	r0, r2, #31
 8009bb2:	d404      	bmi.n	8009bbe <_fflush_r+0x32>
 8009bb4:	0599      	lsls	r1, r3, #22
 8009bb6:	d402      	bmi.n	8009bbe <_fflush_r+0x32>
 8009bb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bba:	f7fd fb7a 	bl	80072b2 <__retarget_lock_acquire_recursive>
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	4621      	mov	r1, r4
 8009bc2:	f7ff ff63 	bl	8009a8c <__sflush_r>
 8009bc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009bc8:	4605      	mov	r5, r0
 8009bca:	07da      	lsls	r2, r3, #31
 8009bcc:	d4e4      	bmi.n	8009b98 <_fflush_r+0xc>
 8009bce:	89a3      	ldrh	r3, [r4, #12]
 8009bd0:	059b      	lsls	r3, r3, #22
 8009bd2:	d4e1      	bmi.n	8009b98 <_fflush_r+0xc>
 8009bd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bd6:	f7fd fb6d 	bl	80072b4 <__retarget_lock_release_recursive>
 8009bda:	e7dd      	b.n	8009b98 <_fflush_r+0xc>

08009bdc <strncmp>:
 8009bdc:	b510      	push	{r4, lr}
 8009bde:	b16a      	cbz	r2, 8009bfc <strncmp+0x20>
 8009be0:	3901      	subs	r1, #1
 8009be2:	1884      	adds	r4, r0, r2
 8009be4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009be8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d103      	bne.n	8009bf8 <strncmp+0x1c>
 8009bf0:	42a0      	cmp	r0, r4
 8009bf2:	d001      	beq.n	8009bf8 <strncmp+0x1c>
 8009bf4:	2a00      	cmp	r2, #0
 8009bf6:	d1f5      	bne.n	8009be4 <strncmp+0x8>
 8009bf8:	1ad0      	subs	r0, r2, r3
 8009bfa:	bd10      	pop	{r4, pc}
 8009bfc:	4610      	mov	r0, r2
 8009bfe:	e7fc      	b.n	8009bfa <strncmp+0x1e>

08009c00 <_sbrk_r>:
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	2300      	movs	r3, #0
 8009c04:	4d05      	ldr	r5, [pc, #20]	@ (8009c1c <_sbrk_r+0x1c>)
 8009c06:	4604      	mov	r4, r0
 8009c08:	4608      	mov	r0, r1
 8009c0a:	602b      	str	r3, [r5, #0]
 8009c0c:	f7f9 f8b0 	bl	8002d70 <_sbrk>
 8009c10:	1c43      	adds	r3, r0, #1
 8009c12:	d102      	bne.n	8009c1a <_sbrk_r+0x1a>
 8009c14:	682b      	ldr	r3, [r5, #0]
 8009c16:	b103      	cbz	r3, 8009c1a <_sbrk_r+0x1a>
 8009c18:	6023      	str	r3, [r4, #0]
 8009c1a:	bd38      	pop	{r3, r4, r5, pc}
 8009c1c:	200008b8 	.word	0x200008b8

08009c20 <nan>:
 8009c20:	2000      	movs	r0, #0
 8009c22:	4901      	ldr	r1, [pc, #4]	@ (8009c28 <nan+0x8>)
 8009c24:	4770      	bx	lr
 8009c26:	bf00      	nop
 8009c28:	7ff80000 	.word	0x7ff80000

08009c2c <__assert_func>:
 8009c2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c2e:	4614      	mov	r4, r2
 8009c30:	461a      	mov	r2, r3
 8009c32:	4b09      	ldr	r3, [pc, #36]	@ (8009c58 <__assert_func+0x2c>)
 8009c34:	4605      	mov	r5, r0
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	68d8      	ldr	r0, [r3, #12]
 8009c3a:	b954      	cbnz	r4, 8009c52 <__assert_func+0x26>
 8009c3c:	4b07      	ldr	r3, [pc, #28]	@ (8009c5c <__assert_func+0x30>)
 8009c3e:	461c      	mov	r4, r3
 8009c40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c44:	9100      	str	r1, [sp, #0]
 8009c46:	462b      	mov	r3, r5
 8009c48:	4905      	ldr	r1, [pc, #20]	@ (8009c60 <__assert_func+0x34>)
 8009c4a:	f000 fba7 	bl	800a39c <fiprintf>
 8009c4e:	f000 fbb7 	bl	800a3c0 <abort>
 8009c52:	4b04      	ldr	r3, [pc, #16]	@ (8009c64 <__assert_func+0x38>)
 8009c54:	e7f4      	b.n	8009c40 <__assert_func+0x14>
 8009c56:	bf00      	nop
 8009c58:	20000020 	.word	0x20000020
 8009c5c:	0800d5bd 	.word	0x0800d5bd
 8009c60:	0800d58f 	.word	0x0800d58f
 8009c64:	0800d582 	.word	0x0800d582

08009c68 <_calloc_r>:
 8009c68:	b570      	push	{r4, r5, r6, lr}
 8009c6a:	fba1 5402 	umull	r5, r4, r1, r2
 8009c6e:	b93c      	cbnz	r4, 8009c80 <_calloc_r+0x18>
 8009c70:	4629      	mov	r1, r5
 8009c72:	f7fe fa03 	bl	800807c <_malloc_r>
 8009c76:	4606      	mov	r6, r0
 8009c78:	b928      	cbnz	r0, 8009c86 <_calloc_r+0x1e>
 8009c7a:	2600      	movs	r6, #0
 8009c7c:	4630      	mov	r0, r6
 8009c7e:	bd70      	pop	{r4, r5, r6, pc}
 8009c80:	220c      	movs	r2, #12
 8009c82:	6002      	str	r2, [r0, #0]
 8009c84:	e7f9      	b.n	8009c7a <_calloc_r+0x12>
 8009c86:	462a      	mov	r2, r5
 8009c88:	4621      	mov	r1, r4
 8009c8a:	f7fd fa94 	bl	80071b6 <memset>
 8009c8e:	e7f5      	b.n	8009c7c <_calloc_r+0x14>

08009c90 <rshift>:
 8009c90:	6903      	ldr	r3, [r0, #16]
 8009c92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009c9a:	f100 0414 	add.w	r4, r0, #20
 8009c9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009ca2:	dd46      	ble.n	8009d32 <rshift+0xa2>
 8009ca4:	f011 011f 	ands.w	r1, r1, #31
 8009ca8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009cac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009cb0:	d10c      	bne.n	8009ccc <rshift+0x3c>
 8009cb2:	4629      	mov	r1, r5
 8009cb4:	f100 0710 	add.w	r7, r0, #16
 8009cb8:	42b1      	cmp	r1, r6
 8009cba:	d335      	bcc.n	8009d28 <rshift+0x98>
 8009cbc:	1a9b      	subs	r3, r3, r2
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	1eea      	subs	r2, r5, #3
 8009cc2:	4296      	cmp	r6, r2
 8009cc4:	bf38      	it	cc
 8009cc6:	2300      	movcc	r3, #0
 8009cc8:	4423      	add	r3, r4
 8009cca:	e015      	b.n	8009cf8 <rshift+0x68>
 8009ccc:	46a1      	mov	r9, r4
 8009cce:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009cd2:	f1c1 0820 	rsb	r8, r1, #32
 8009cd6:	40cf      	lsrs	r7, r1
 8009cd8:	f105 0e04 	add.w	lr, r5, #4
 8009cdc:	4576      	cmp	r6, lr
 8009cde:	46f4      	mov	ip, lr
 8009ce0:	d816      	bhi.n	8009d10 <rshift+0x80>
 8009ce2:	1a9a      	subs	r2, r3, r2
 8009ce4:	0092      	lsls	r2, r2, #2
 8009ce6:	3a04      	subs	r2, #4
 8009ce8:	3501      	adds	r5, #1
 8009cea:	42ae      	cmp	r6, r5
 8009cec:	bf38      	it	cc
 8009cee:	2200      	movcc	r2, #0
 8009cf0:	18a3      	adds	r3, r4, r2
 8009cf2:	50a7      	str	r7, [r4, r2]
 8009cf4:	b107      	cbz	r7, 8009cf8 <rshift+0x68>
 8009cf6:	3304      	adds	r3, #4
 8009cf8:	42a3      	cmp	r3, r4
 8009cfa:	eba3 0204 	sub.w	r2, r3, r4
 8009cfe:	bf08      	it	eq
 8009d00:	2300      	moveq	r3, #0
 8009d02:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009d06:	6102      	str	r2, [r0, #16]
 8009d08:	bf08      	it	eq
 8009d0a:	6143      	streq	r3, [r0, #20]
 8009d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d10:	f8dc c000 	ldr.w	ip, [ip]
 8009d14:	fa0c fc08 	lsl.w	ip, ip, r8
 8009d18:	ea4c 0707 	orr.w	r7, ip, r7
 8009d1c:	f849 7b04 	str.w	r7, [r9], #4
 8009d20:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d24:	40cf      	lsrs	r7, r1
 8009d26:	e7d9      	b.n	8009cdc <rshift+0x4c>
 8009d28:	f851 cb04 	ldr.w	ip, [r1], #4
 8009d2c:	f847 cf04 	str.w	ip, [r7, #4]!
 8009d30:	e7c2      	b.n	8009cb8 <rshift+0x28>
 8009d32:	4623      	mov	r3, r4
 8009d34:	e7e0      	b.n	8009cf8 <rshift+0x68>

08009d36 <__hexdig_fun>:
 8009d36:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009d3a:	2b09      	cmp	r3, #9
 8009d3c:	d802      	bhi.n	8009d44 <__hexdig_fun+0xe>
 8009d3e:	3820      	subs	r0, #32
 8009d40:	b2c0      	uxtb	r0, r0
 8009d42:	4770      	bx	lr
 8009d44:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009d48:	2b05      	cmp	r3, #5
 8009d4a:	d801      	bhi.n	8009d50 <__hexdig_fun+0x1a>
 8009d4c:	3847      	subs	r0, #71	@ 0x47
 8009d4e:	e7f7      	b.n	8009d40 <__hexdig_fun+0xa>
 8009d50:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009d54:	2b05      	cmp	r3, #5
 8009d56:	d801      	bhi.n	8009d5c <__hexdig_fun+0x26>
 8009d58:	3827      	subs	r0, #39	@ 0x27
 8009d5a:	e7f1      	b.n	8009d40 <__hexdig_fun+0xa>
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	4770      	bx	lr

08009d60 <__gethex>:
 8009d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d64:	468a      	mov	sl, r1
 8009d66:	4690      	mov	r8, r2
 8009d68:	b085      	sub	sp, #20
 8009d6a:	9302      	str	r3, [sp, #8]
 8009d6c:	680b      	ldr	r3, [r1, #0]
 8009d6e:	9001      	str	r0, [sp, #4]
 8009d70:	1c9c      	adds	r4, r3, #2
 8009d72:	46a1      	mov	r9, r4
 8009d74:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009d78:	2830      	cmp	r0, #48	@ 0x30
 8009d7a:	d0fa      	beq.n	8009d72 <__gethex+0x12>
 8009d7c:	eba9 0303 	sub.w	r3, r9, r3
 8009d80:	f1a3 0b02 	sub.w	fp, r3, #2
 8009d84:	f7ff ffd7 	bl	8009d36 <__hexdig_fun>
 8009d88:	4605      	mov	r5, r0
 8009d8a:	2800      	cmp	r0, #0
 8009d8c:	d168      	bne.n	8009e60 <__gethex+0x100>
 8009d8e:	2201      	movs	r2, #1
 8009d90:	4648      	mov	r0, r9
 8009d92:	499f      	ldr	r1, [pc, #636]	@ (800a010 <__gethex+0x2b0>)
 8009d94:	f7ff ff22 	bl	8009bdc <strncmp>
 8009d98:	4607      	mov	r7, r0
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	d167      	bne.n	8009e6e <__gethex+0x10e>
 8009d9e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009da2:	4626      	mov	r6, r4
 8009da4:	f7ff ffc7 	bl	8009d36 <__hexdig_fun>
 8009da8:	2800      	cmp	r0, #0
 8009daa:	d062      	beq.n	8009e72 <__gethex+0x112>
 8009dac:	4623      	mov	r3, r4
 8009dae:	7818      	ldrb	r0, [r3, #0]
 8009db0:	4699      	mov	r9, r3
 8009db2:	2830      	cmp	r0, #48	@ 0x30
 8009db4:	f103 0301 	add.w	r3, r3, #1
 8009db8:	d0f9      	beq.n	8009dae <__gethex+0x4e>
 8009dba:	f7ff ffbc 	bl	8009d36 <__hexdig_fun>
 8009dbe:	fab0 f580 	clz	r5, r0
 8009dc2:	f04f 0b01 	mov.w	fp, #1
 8009dc6:	096d      	lsrs	r5, r5, #5
 8009dc8:	464a      	mov	r2, r9
 8009dca:	4616      	mov	r6, r2
 8009dcc:	7830      	ldrb	r0, [r6, #0]
 8009dce:	3201      	adds	r2, #1
 8009dd0:	f7ff ffb1 	bl	8009d36 <__hexdig_fun>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	d1f8      	bne.n	8009dca <__gethex+0x6a>
 8009dd8:	2201      	movs	r2, #1
 8009dda:	4630      	mov	r0, r6
 8009ddc:	498c      	ldr	r1, [pc, #560]	@ (800a010 <__gethex+0x2b0>)
 8009dde:	f7ff fefd 	bl	8009bdc <strncmp>
 8009de2:	2800      	cmp	r0, #0
 8009de4:	d13f      	bne.n	8009e66 <__gethex+0x106>
 8009de6:	b944      	cbnz	r4, 8009dfa <__gethex+0x9a>
 8009de8:	1c74      	adds	r4, r6, #1
 8009dea:	4622      	mov	r2, r4
 8009dec:	4616      	mov	r6, r2
 8009dee:	7830      	ldrb	r0, [r6, #0]
 8009df0:	3201      	adds	r2, #1
 8009df2:	f7ff ffa0 	bl	8009d36 <__hexdig_fun>
 8009df6:	2800      	cmp	r0, #0
 8009df8:	d1f8      	bne.n	8009dec <__gethex+0x8c>
 8009dfa:	1ba4      	subs	r4, r4, r6
 8009dfc:	00a7      	lsls	r7, r4, #2
 8009dfe:	7833      	ldrb	r3, [r6, #0]
 8009e00:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009e04:	2b50      	cmp	r3, #80	@ 0x50
 8009e06:	d13e      	bne.n	8009e86 <__gethex+0x126>
 8009e08:	7873      	ldrb	r3, [r6, #1]
 8009e0a:	2b2b      	cmp	r3, #43	@ 0x2b
 8009e0c:	d033      	beq.n	8009e76 <__gethex+0x116>
 8009e0e:	2b2d      	cmp	r3, #45	@ 0x2d
 8009e10:	d034      	beq.n	8009e7c <__gethex+0x11c>
 8009e12:	2400      	movs	r4, #0
 8009e14:	1c71      	adds	r1, r6, #1
 8009e16:	7808      	ldrb	r0, [r1, #0]
 8009e18:	f7ff ff8d 	bl	8009d36 <__hexdig_fun>
 8009e1c:	1e43      	subs	r3, r0, #1
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	2b18      	cmp	r3, #24
 8009e22:	d830      	bhi.n	8009e86 <__gethex+0x126>
 8009e24:	f1a0 0210 	sub.w	r2, r0, #16
 8009e28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009e2c:	f7ff ff83 	bl	8009d36 <__hexdig_fun>
 8009e30:	f100 3cff 	add.w	ip, r0, #4294967295
 8009e34:	fa5f fc8c 	uxtb.w	ip, ip
 8009e38:	f1bc 0f18 	cmp.w	ip, #24
 8009e3c:	f04f 030a 	mov.w	r3, #10
 8009e40:	d91e      	bls.n	8009e80 <__gethex+0x120>
 8009e42:	b104      	cbz	r4, 8009e46 <__gethex+0xe6>
 8009e44:	4252      	negs	r2, r2
 8009e46:	4417      	add	r7, r2
 8009e48:	f8ca 1000 	str.w	r1, [sl]
 8009e4c:	b1ed      	cbz	r5, 8009e8a <__gethex+0x12a>
 8009e4e:	f1bb 0f00 	cmp.w	fp, #0
 8009e52:	bf0c      	ite	eq
 8009e54:	2506      	moveq	r5, #6
 8009e56:	2500      	movne	r5, #0
 8009e58:	4628      	mov	r0, r5
 8009e5a:	b005      	add	sp, #20
 8009e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e60:	2500      	movs	r5, #0
 8009e62:	462c      	mov	r4, r5
 8009e64:	e7b0      	b.n	8009dc8 <__gethex+0x68>
 8009e66:	2c00      	cmp	r4, #0
 8009e68:	d1c7      	bne.n	8009dfa <__gethex+0x9a>
 8009e6a:	4627      	mov	r7, r4
 8009e6c:	e7c7      	b.n	8009dfe <__gethex+0x9e>
 8009e6e:	464e      	mov	r6, r9
 8009e70:	462f      	mov	r7, r5
 8009e72:	2501      	movs	r5, #1
 8009e74:	e7c3      	b.n	8009dfe <__gethex+0x9e>
 8009e76:	2400      	movs	r4, #0
 8009e78:	1cb1      	adds	r1, r6, #2
 8009e7a:	e7cc      	b.n	8009e16 <__gethex+0xb6>
 8009e7c:	2401      	movs	r4, #1
 8009e7e:	e7fb      	b.n	8009e78 <__gethex+0x118>
 8009e80:	fb03 0002 	mla	r0, r3, r2, r0
 8009e84:	e7ce      	b.n	8009e24 <__gethex+0xc4>
 8009e86:	4631      	mov	r1, r6
 8009e88:	e7de      	b.n	8009e48 <__gethex+0xe8>
 8009e8a:	4629      	mov	r1, r5
 8009e8c:	eba6 0309 	sub.w	r3, r6, r9
 8009e90:	3b01      	subs	r3, #1
 8009e92:	2b07      	cmp	r3, #7
 8009e94:	dc0a      	bgt.n	8009eac <__gethex+0x14c>
 8009e96:	9801      	ldr	r0, [sp, #4]
 8009e98:	f7fe f97c 	bl	8008194 <_Balloc>
 8009e9c:	4604      	mov	r4, r0
 8009e9e:	b940      	cbnz	r0, 8009eb2 <__gethex+0x152>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	21e4      	movs	r1, #228	@ 0xe4
 8009ea4:	4b5b      	ldr	r3, [pc, #364]	@ (800a014 <__gethex+0x2b4>)
 8009ea6:	485c      	ldr	r0, [pc, #368]	@ (800a018 <__gethex+0x2b8>)
 8009ea8:	f7ff fec0 	bl	8009c2c <__assert_func>
 8009eac:	3101      	adds	r1, #1
 8009eae:	105b      	asrs	r3, r3, #1
 8009eb0:	e7ef      	b.n	8009e92 <__gethex+0x132>
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	f100 0a14 	add.w	sl, r0, #20
 8009eb8:	4655      	mov	r5, sl
 8009eba:	469b      	mov	fp, r3
 8009ebc:	45b1      	cmp	r9, r6
 8009ebe:	d337      	bcc.n	8009f30 <__gethex+0x1d0>
 8009ec0:	f845 bb04 	str.w	fp, [r5], #4
 8009ec4:	eba5 050a 	sub.w	r5, r5, sl
 8009ec8:	10ad      	asrs	r5, r5, #2
 8009eca:	6125      	str	r5, [r4, #16]
 8009ecc:	4658      	mov	r0, fp
 8009ece:	f7fe fa53 	bl	8008378 <__hi0bits>
 8009ed2:	016d      	lsls	r5, r5, #5
 8009ed4:	f8d8 6000 	ldr.w	r6, [r8]
 8009ed8:	1a2d      	subs	r5, r5, r0
 8009eda:	42b5      	cmp	r5, r6
 8009edc:	dd54      	ble.n	8009f88 <__gethex+0x228>
 8009ede:	1bad      	subs	r5, r5, r6
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	f7fe fddb 	bl	8008a9e <__any_on>
 8009ee8:	4681      	mov	r9, r0
 8009eea:	b178      	cbz	r0, 8009f0c <__gethex+0x1ac>
 8009eec:	f04f 0901 	mov.w	r9, #1
 8009ef0:	1e6b      	subs	r3, r5, #1
 8009ef2:	1159      	asrs	r1, r3, #5
 8009ef4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009ef8:	f003 021f 	and.w	r2, r3, #31
 8009efc:	fa09 f202 	lsl.w	r2, r9, r2
 8009f00:	420a      	tst	r2, r1
 8009f02:	d003      	beq.n	8009f0c <__gethex+0x1ac>
 8009f04:	454b      	cmp	r3, r9
 8009f06:	dc36      	bgt.n	8009f76 <__gethex+0x216>
 8009f08:	f04f 0902 	mov.w	r9, #2
 8009f0c:	4629      	mov	r1, r5
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f7ff febe 	bl	8009c90 <rshift>
 8009f14:	442f      	add	r7, r5
 8009f16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f1a:	42bb      	cmp	r3, r7
 8009f1c:	da42      	bge.n	8009fa4 <__gethex+0x244>
 8009f1e:	4621      	mov	r1, r4
 8009f20:	9801      	ldr	r0, [sp, #4]
 8009f22:	f7fe f977 	bl	8008214 <_Bfree>
 8009f26:	2300      	movs	r3, #0
 8009f28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f2a:	25a3      	movs	r5, #163	@ 0xa3
 8009f2c:	6013      	str	r3, [r2, #0]
 8009f2e:	e793      	b.n	8009e58 <__gethex+0xf8>
 8009f30:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009f34:	2a2e      	cmp	r2, #46	@ 0x2e
 8009f36:	d012      	beq.n	8009f5e <__gethex+0x1fe>
 8009f38:	2b20      	cmp	r3, #32
 8009f3a:	d104      	bne.n	8009f46 <__gethex+0x1e6>
 8009f3c:	f845 bb04 	str.w	fp, [r5], #4
 8009f40:	f04f 0b00 	mov.w	fp, #0
 8009f44:	465b      	mov	r3, fp
 8009f46:	7830      	ldrb	r0, [r6, #0]
 8009f48:	9303      	str	r3, [sp, #12]
 8009f4a:	f7ff fef4 	bl	8009d36 <__hexdig_fun>
 8009f4e:	9b03      	ldr	r3, [sp, #12]
 8009f50:	f000 000f 	and.w	r0, r0, #15
 8009f54:	4098      	lsls	r0, r3
 8009f56:	ea4b 0b00 	orr.w	fp, fp, r0
 8009f5a:	3304      	adds	r3, #4
 8009f5c:	e7ae      	b.n	8009ebc <__gethex+0x15c>
 8009f5e:	45b1      	cmp	r9, r6
 8009f60:	d8ea      	bhi.n	8009f38 <__gethex+0x1d8>
 8009f62:	2201      	movs	r2, #1
 8009f64:	4630      	mov	r0, r6
 8009f66:	492a      	ldr	r1, [pc, #168]	@ (800a010 <__gethex+0x2b0>)
 8009f68:	9303      	str	r3, [sp, #12]
 8009f6a:	f7ff fe37 	bl	8009bdc <strncmp>
 8009f6e:	9b03      	ldr	r3, [sp, #12]
 8009f70:	2800      	cmp	r0, #0
 8009f72:	d1e1      	bne.n	8009f38 <__gethex+0x1d8>
 8009f74:	e7a2      	b.n	8009ebc <__gethex+0x15c>
 8009f76:	4620      	mov	r0, r4
 8009f78:	1ea9      	subs	r1, r5, #2
 8009f7a:	f7fe fd90 	bl	8008a9e <__any_on>
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	d0c2      	beq.n	8009f08 <__gethex+0x1a8>
 8009f82:	f04f 0903 	mov.w	r9, #3
 8009f86:	e7c1      	b.n	8009f0c <__gethex+0x1ac>
 8009f88:	da09      	bge.n	8009f9e <__gethex+0x23e>
 8009f8a:	1b75      	subs	r5, r6, r5
 8009f8c:	4621      	mov	r1, r4
 8009f8e:	462a      	mov	r2, r5
 8009f90:	9801      	ldr	r0, [sp, #4]
 8009f92:	f7fe fb55 	bl	8008640 <__lshift>
 8009f96:	4604      	mov	r4, r0
 8009f98:	1b7f      	subs	r7, r7, r5
 8009f9a:	f100 0a14 	add.w	sl, r0, #20
 8009f9e:	f04f 0900 	mov.w	r9, #0
 8009fa2:	e7b8      	b.n	8009f16 <__gethex+0x1b6>
 8009fa4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009fa8:	42bd      	cmp	r5, r7
 8009faa:	dd6f      	ble.n	800a08c <__gethex+0x32c>
 8009fac:	1bed      	subs	r5, r5, r7
 8009fae:	42ae      	cmp	r6, r5
 8009fb0:	dc34      	bgt.n	800a01c <__gethex+0x2bc>
 8009fb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009fb6:	2b02      	cmp	r3, #2
 8009fb8:	d022      	beq.n	800a000 <__gethex+0x2a0>
 8009fba:	2b03      	cmp	r3, #3
 8009fbc:	d024      	beq.n	800a008 <__gethex+0x2a8>
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d115      	bne.n	8009fee <__gethex+0x28e>
 8009fc2:	42ae      	cmp	r6, r5
 8009fc4:	d113      	bne.n	8009fee <__gethex+0x28e>
 8009fc6:	2e01      	cmp	r6, #1
 8009fc8:	d10b      	bne.n	8009fe2 <__gethex+0x282>
 8009fca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009fce:	9a02      	ldr	r2, [sp, #8]
 8009fd0:	2562      	movs	r5, #98	@ 0x62
 8009fd2:	6013      	str	r3, [r2, #0]
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	6123      	str	r3, [r4, #16]
 8009fd8:	f8ca 3000 	str.w	r3, [sl]
 8009fdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fde:	601c      	str	r4, [r3, #0]
 8009fe0:	e73a      	b.n	8009e58 <__gethex+0xf8>
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	1e71      	subs	r1, r6, #1
 8009fe6:	f7fe fd5a 	bl	8008a9e <__any_on>
 8009fea:	2800      	cmp	r0, #0
 8009fec:	d1ed      	bne.n	8009fca <__gethex+0x26a>
 8009fee:	4621      	mov	r1, r4
 8009ff0:	9801      	ldr	r0, [sp, #4]
 8009ff2:	f7fe f90f 	bl	8008214 <_Bfree>
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ffa:	2550      	movs	r5, #80	@ 0x50
 8009ffc:	6013      	str	r3, [r2, #0]
 8009ffe:	e72b      	b.n	8009e58 <__gethex+0xf8>
 800a000:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a002:	2b00      	cmp	r3, #0
 800a004:	d1f3      	bne.n	8009fee <__gethex+0x28e>
 800a006:	e7e0      	b.n	8009fca <__gethex+0x26a>
 800a008:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d1dd      	bne.n	8009fca <__gethex+0x26a>
 800a00e:	e7ee      	b.n	8009fee <__gethex+0x28e>
 800a010:	0800d410 	.word	0x0800d410
 800a014:	0800d2a7 	.word	0x0800d2a7
 800a018:	0800d5be 	.word	0x0800d5be
 800a01c:	1e6f      	subs	r7, r5, #1
 800a01e:	f1b9 0f00 	cmp.w	r9, #0
 800a022:	d130      	bne.n	800a086 <__gethex+0x326>
 800a024:	b127      	cbz	r7, 800a030 <__gethex+0x2d0>
 800a026:	4639      	mov	r1, r7
 800a028:	4620      	mov	r0, r4
 800a02a:	f7fe fd38 	bl	8008a9e <__any_on>
 800a02e:	4681      	mov	r9, r0
 800a030:	2301      	movs	r3, #1
 800a032:	4629      	mov	r1, r5
 800a034:	1b76      	subs	r6, r6, r5
 800a036:	2502      	movs	r5, #2
 800a038:	117a      	asrs	r2, r7, #5
 800a03a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a03e:	f007 071f 	and.w	r7, r7, #31
 800a042:	40bb      	lsls	r3, r7
 800a044:	4213      	tst	r3, r2
 800a046:	4620      	mov	r0, r4
 800a048:	bf18      	it	ne
 800a04a:	f049 0902 	orrne.w	r9, r9, #2
 800a04e:	f7ff fe1f 	bl	8009c90 <rshift>
 800a052:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a056:	f1b9 0f00 	cmp.w	r9, #0
 800a05a:	d047      	beq.n	800a0ec <__gethex+0x38c>
 800a05c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a060:	2b02      	cmp	r3, #2
 800a062:	d015      	beq.n	800a090 <__gethex+0x330>
 800a064:	2b03      	cmp	r3, #3
 800a066:	d017      	beq.n	800a098 <__gethex+0x338>
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d109      	bne.n	800a080 <__gethex+0x320>
 800a06c:	f019 0f02 	tst.w	r9, #2
 800a070:	d006      	beq.n	800a080 <__gethex+0x320>
 800a072:	f8da 3000 	ldr.w	r3, [sl]
 800a076:	ea49 0903 	orr.w	r9, r9, r3
 800a07a:	f019 0f01 	tst.w	r9, #1
 800a07e:	d10e      	bne.n	800a09e <__gethex+0x33e>
 800a080:	f045 0510 	orr.w	r5, r5, #16
 800a084:	e032      	b.n	800a0ec <__gethex+0x38c>
 800a086:	f04f 0901 	mov.w	r9, #1
 800a08a:	e7d1      	b.n	800a030 <__gethex+0x2d0>
 800a08c:	2501      	movs	r5, #1
 800a08e:	e7e2      	b.n	800a056 <__gethex+0x2f6>
 800a090:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a092:	f1c3 0301 	rsb	r3, r3, #1
 800a096:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a098:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d0f0      	beq.n	800a080 <__gethex+0x320>
 800a09e:	f04f 0c00 	mov.w	ip, #0
 800a0a2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a0a6:	f104 0314 	add.w	r3, r4, #20
 800a0aa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a0ae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0b8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a0bc:	d01b      	beq.n	800a0f6 <__gethex+0x396>
 800a0be:	3201      	adds	r2, #1
 800a0c0:	6002      	str	r2, [r0, #0]
 800a0c2:	2d02      	cmp	r5, #2
 800a0c4:	f104 0314 	add.w	r3, r4, #20
 800a0c8:	d13c      	bne.n	800a144 <__gethex+0x3e4>
 800a0ca:	f8d8 2000 	ldr.w	r2, [r8]
 800a0ce:	3a01      	subs	r2, #1
 800a0d0:	42b2      	cmp	r2, r6
 800a0d2:	d109      	bne.n	800a0e8 <__gethex+0x388>
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	1171      	asrs	r1, r6, #5
 800a0d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a0dc:	f006 061f 	and.w	r6, r6, #31
 800a0e0:	fa02 f606 	lsl.w	r6, r2, r6
 800a0e4:	421e      	tst	r6, r3
 800a0e6:	d13a      	bne.n	800a15e <__gethex+0x3fe>
 800a0e8:	f045 0520 	orr.w	r5, r5, #32
 800a0ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0ee:	601c      	str	r4, [r3, #0]
 800a0f0:	9b02      	ldr	r3, [sp, #8]
 800a0f2:	601f      	str	r7, [r3, #0]
 800a0f4:	e6b0      	b.n	8009e58 <__gethex+0xf8>
 800a0f6:	4299      	cmp	r1, r3
 800a0f8:	f843 cc04 	str.w	ip, [r3, #-4]
 800a0fc:	d8d9      	bhi.n	800a0b2 <__gethex+0x352>
 800a0fe:	68a3      	ldr	r3, [r4, #8]
 800a100:	459b      	cmp	fp, r3
 800a102:	db17      	blt.n	800a134 <__gethex+0x3d4>
 800a104:	6861      	ldr	r1, [r4, #4]
 800a106:	9801      	ldr	r0, [sp, #4]
 800a108:	3101      	adds	r1, #1
 800a10a:	f7fe f843 	bl	8008194 <_Balloc>
 800a10e:	4681      	mov	r9, r0
 800a110:	b918      	cbnz	r0, 800a11a <__gethex+0x3ba>
 800a112:	4602      	mov	r2, r0
 800a114:	2184      	movs	r1, #132	@ 0x84
 800a116:	4b19      	ldr	r3, [pc, #100]	@ (800a17c <__gethex+0x41c>)
 800a118:	e6c5      	b.n	8009ea6 <__gethex+0x146>
 800a11a:	6922      	ldr	r2, [r4, #16]
 800a11c:	f104 010c 	add.w	r1, r4, #12
 800a120:	3202      	adds	r2, #2
 800a122:	0092      	lsls	r2, r2, #2
 800a124:	300c      	adds	r0, #12
 800a126:	f7fd f8d4 	bl	80072d2 <memcpy>
 800a12a:	4621      	mov	r1, r4
 800a12c:	9801      	ldr	r0, [sp, #4]
 800a12e:	f7fe f871 	bl	8008214 <_Bfree>
 800a132:	464c      	mov	r4, r9
 800a134:	6923      	ldr	r3, [r4, #16]
 800a136:	1c5a      	adds	r2, r3, #1
 800a138:	6122      	str	r2, [r4, #16]
 800a13a:	2201      	movs	r2, #1
 800a13c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a140:	615a      	str	r2, [r3, #20]
 800a142:	e7be      	b.n	800a0c2 <__gethex+0x362>
 800a144:	6922      	ldr	r2, [r4, #16]
 800a146:	455a      	cmp	r2, fp
 800a148:	dd0b      	ble.n	800a162 <__gethex+0x402>
 800a14a:	2101      	movs	r1, #1
 800a14c:	4620      	mov	r0, r4
 800a14e:	f7ff fd9f 	bl	8009c90 <rshift>
 800a152:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a156:	3701      	adds	r7, #1
 800a158:	42bb      	cmp	r3, r7
 800a15a:	f6ff aee0 	blt.w	8009f1e <__gethex+0x1be>
 800a15e:	2501      	movs	r5, #1
 800a160:	e7c2      	b.n	800a0e8 <__gethex+0x388>
 800a162:	f016 061f 	ands.w	r6, r6, #31
 800a166:	d0fa      	beq.n	800a15e <__gethex+0x3fe>
 800a168:	4453      	add	r3, sl
 800a16a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a16e:	f7fe f903 	bl	8008378 <__hi0bits>
 800a172:	f1c6 0620 	rsb	r6, r6, #32
 800a176:	42b0      	cmp	r0, r6
 800a178:	dbe7      	blt.n	800a14a <__gethex+0x3ea>
 800a17a:	e7f0      	b.n	800a15e <__gethex+0x3fe>
 800a17c:	0800d2a7 	.word	0x0800d2a7

0800a180 <L_shift>:
 800a180:	f1c2 0208 	rsb	r2, r2, #8
 800a184:	0092      	lsls	r2, r2, #2
 800a186:	b570      	push	{r4, r5, r6, lr}
 800a188:	f1c2 0620 	rsb	r6, r2, #32
 800a18c:	6843      	ldr	r3, [r0, #4]
 800a18e:	6804      	ldr	r4, [r0, #0]
 800a190:	fa03 f506 	lsl.w	r5, r3, r6
 800a194:	432c      	orrs	r4, r5
 800a196:	40d3      	lsrs	r3, r2
 800a198:	6004      	str	r4, [r0, #0]
 800a19a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a19e:	4288      	cmp	r0, r1
 800a1a0:	d3f4      	bcc.n	800a18c <L_shift+0xc>
 800a1a2:	bd70      	pop	{r4, r5, r6, pc}

0800a1a4 <__match>:
 800a1a4:	b530      	push	{r4, r5, lr}
 800a1a6:	6803      	ldr	r3, [r0, #0]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1ae:	b914      	cbnz	r4, 800a1b6 <__match+0x12>
 800a1b0:	6003      	str	r3, [r0, #0]
 800a1b2:	2001      	movs	r0, #1
 800a1b4:	bd30      	pop	{r4, r5, pc}
 800a1b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1ba:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a1be:	2d19      	cmp	r5, #25
 800a1c0:	bf98      	it	ls
 800a1c2:	3220      	addls	r2, #32
 800a1c4:	42a2      	cmp	r2, r4
 800a1c6:	d0f0      	beq.n	800a1aa <__match+0x6>
 800a1c8:	2000      	movs	r0, #0
 800a1ca:	e7f3      	b.n	800a1b4 <__match+0x10>

0800a1cc <__hexnan>:
 800a1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d0:	2500      	movs	r5, #0
 800a1d2:	680b      	ldr	r3, [r1, #0]
 800a1d4:	4682      	mov	sl, r0
 800a1d6:	115e      	asrs	r6, r3, #5
 800a1d8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a1dc:	f013 031f 	ands.w	r3, r3, #31
 800a1e0:	bf18      	it	ne
 800a1e2:	3604      	addne	r6, #4
 800a1e4:	1f37      	subs	r7, r6, #4
 800a1e6:	4690      	mov	r8, r2
 800a1e8:	46b9      	mov	r9, r7
 800a1ea:	463c      	mov	r4, r7
 800a1ec:	46ab      	mov	fp, r5
 800a1ee:	b087      	sub	sp, #28
 800a1f0:	6801      	ldr	r1, [r0, #0]
 800a1f2:	9301      	str	r3, [sp, #4]
 800a1f4:	f846 5c04 	str.w	r5, [r6, #-4]
 800a1f8:	9502      	str	r5, [sp, #8]
 800a1fa:	784a      	ldrb	r2, [r1, #1]
 800a1fc:	1c4b      	adds	r3, r1, #1
 800a1fe:	9303      	str	r3, [sp, #12]
 800a200:	b342      	cbz	r2, 800a254 <__hexnan+0x88>
 800a202:	4610      	mov	r0, r2
 800a204:	9105      	str	r1, [sp, #20]
 800a206:	9204      	str	r2, [sp, #16]
 800a208:	f7ff fd95 	bl	8009d36 <__hexdig_fun>
 800a20c:	2800      	cmp	r0, #0
 800a20e:	d151      	bne.n	800a2b4 <__hexnan+0xe8>
 800a210:	9a04      	ldr	r2, [sp, #16]
 800a212:	9905      	ldr	r1, [sp, #20]
 800a214:	2a20      	cmp	r2, #32
 800a216:	d818      	bhi.n	800a24a <__hexnan+0x7e>
 800a218:	9b02      	ldr	r3, [sp, #8]
 800a21a:	459b      	cmp	fp, r3
 800a21c:	dd13      	ble.n	800a246 <__hexnan+0x7a>
 800a21e:	454c      	cmp	r4, r9
 800a220:	d206      	bcs.n	800a230 <__hexnan+0x64>
 800a222:	2d07      	cmp	r5, #7
 800a224:	dc04      	bgt.n	800a230 <__hexnan+0x64>
 800a226:	462a      	mov	r2, r5
 800a228:	4649      	mov	r1, r9
 800a22a:	4620      	mov	r0, r4
 800a22c:	f7ff ffa8 	bl	800a180 <L_shift>
 800a230:	4544      	cmp	r4, r8
 800a232:	d952      	bls.n	800a2da <__hexnan+0x10e>
 800a234:	2300      	movs	r3, #0
 800a236:	f1a4 0904 	sub.w	r9, r4, #4
 800a23a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a23e:	461d      	mov	r5, r3
 800a240:	464c      	mov	r4, r9
 800a242:	f8cd b008 	str.w	fp, [sp, #8]
 800a246:	9903      	ldr	r1, [sp, #12]
 800a248:	e7d7      	b.n	800a1fa <__hexnan+0x2e>
 800a24a:	2a29      	cmp	r2, #41	@ 0x29
 800a24c:	d157      	bne.n	800a2fe <__hexnan+0x132>
 800a24e:	3102      	adds	r1, #2
 800a250:	f8ca 1000 	str.w	r1, [sl]
 800a254:	f1bb 0f00 	cmp.w	fp, #0
 800a258:	d051      	beq.n	800a2fe <__hexnan+0x132>
 800a25a:	454c      	cmp	r4, r9
 800a25c:	d206      	bcs.n	800a26c <__hexnan+0xa0>
 800a25e:	2d07      	cmp	r5, #7
 800a260:	dc04      	bgt.n	800a26c <__hexnan+0xa0>
 800a262:	462a      	mov	r2, r5
 800a264:	4649      	mov	r1, r9
 800a266:	4620      	mov	r0, r4
 800a268:	f7ff ff8a 	bl	800a180 <L_shift>
 800a26c:	4544      	cmp	r4, r8
 800a26e:	d936      	bls.n	800a2de <__hexnan+0x112>
 800a270:	4623      	mov	r3, r4
 800a272:	f1a8 0204 	sub.w	r2, r8, #4
 800a276:	f853 1b04 	ldr.w	r1, [r3], #4
 800a27a:	429f      	cmp	r7, r3
 800a27c:	f842 1f04 	str.w	r1, [r2, #4]!
 800a280:	d2f9      	bcs.n	800a276 <__hexnan+0xaa>
 800a282:	1b3b      	subs	r3, r7, r4
 800a284:	f023 0303 	bic.w	r3, r3, #3
 800a288:	3304      	adds	r3, #4
 800a28a:	3401      	adds	r4, #1
 800a28c:	3e03      	subs	r6, #3
 800a28e:	42b4      	cmp	r4, r6
 800a290:	bf88      	it	hi
 800a292:	2304      	movhi	r3, #4
 800a294:	2200      	movs	r2, #0
 800a296:	4443      	add	r3, r8
 800a298:	f843 2b04 	str.w	r2, [r3], #4
 800a29c:	429f      	cmp	r7, r3
 800a29e:	d2fb      	bcs.n	800a298 <__hexnan+0xcc>
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	b91b      	cbnz	r3, 800a2ac <__hexnan+0xe0>
 800a2a4:	4547      	cmp	r7, r8
 800a2a6:	d128      	bne.n	800a2fa <__hexnan+0x12e>
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	603b      	str	r3, [r7, #0]
 800a2ac:	2005      	movs	r0, #5
 800a2ae:	b007      	add	sp, #28
 800a2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b4:	3501      	adds	r5, #1
 800a2b6:	2d08      	cmp	r5, #8
 800a2b8:	f10b 0b01 	add.w	fp, fp, #1
 800a2bc:	dd06      	ble.n	800a2cc <__hexnan+0x100>
 800a2be:	4544      	cmp	r4, r8
 800a2c0:	d9c1      	bls.n	800a246 <__hexnan+0x7a>
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	2501      	movs	r5, #1
 800a2c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a2ca:	3c04      	subs	r4, #4
 800a2cc:	6822      	ldr	r2, [r4, #0]
 800a2ce:	f000 000f 	and.w	r0, r0, #15
 800a2d2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a2d6:	6020      	str	r0, [r4, #0]
 800a2d8:	e7b5      	b.n	800a246 <__hexnan+0x7a>
 800a2da:	2508      	movs	r5, #8
 800a2dc:	e7b3      	b.n	800a246 <__hexnan+0x7a>
 800a2de:	9b01      	ldr	r3, [sp, #4]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d0dd      	beq.n	800a2a0 <__hexnan+0xd4>
 800a2e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2e8:	f1c3 0320 	rsb	r3, r3, #32
 800a2ec:	40da      	lsrs	r2, r3
 800a2ee:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a2f2:	4013      	ands	r3, r2
 800a2f4:	f846 3c04 	str.w	r3, [r6, #-4]
 800a2f8:	e7d2      	b.n	800a2a0 <__hexnan+0xd4>
 800a2fa:	3f04      	subs	r7, #4
 800a2fc:	e7d0      	b.n	800a2a0 <__hexnan+0xd4>
 800a2fe:	2004      	movs	r0, #4
 800a300:	e7d5      	b.n	800a2ae <__hexnan+0xe2>

0800a302 <__ascii_mbtowc>:
 800a302:	b082      	sub	sp, #8
 800a304:	b901      	cbnz	r1, 800a308 <__ascii_mbtowc+0x6>
 800a306:	a901      	add	r1, sp, #4
 800a308:	b142      	cbz	r2, 800a31c <__ascii_mbtowc+0x1a>
 800a30a:	b14b      	cbz	r3, 800a320 <__ascii_mbtowc+0x1e>
 800a30c:	7813      	ldrb	r3, [r2, #0]
 800a30e:	600b      	str	r3, [r1, #0]
 800a310:	7812      	ldrb	r2, [r2, #0]
 800a312:	1e10      	subs	r0, r2, #0
 800a314:	bf18      	it	ne
 800a316:	2001      	movne	r0, #1
 800a318:	b002      	add	sp, #8
 800a31a:	4770      	bx	lr
 800a31c:	4610      	mov	r0, r2
 800a31e:	e7fb      	b.n	800a318 <__ascii_mbtowc+0x16>
 800a320:	f06f 0001 	mvn.w	r0, #1
 800a324:	e7f8      	b.n	800a318 <__ascii_mbtowc+0x16>

0800a326 <_realloc_r>:
 800a326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a32a:	4680      	mov	r8, r0
 800a32c:	4615      	mov	r5, r2
 800a32e:	460c      	mov	r4, r1
 800a330:	b921      	cbnz	r1, 800a33c <_realloc_r+0x16>
 800a332:	4611      	mov	r1, r2
 800a334:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a338:	f7fd bea0 	b.w	800807c <_malloc_r>
 800a33c:	b92a      	cbnz	r2, 800a34a <_realloc_r+0x24>
 800a33e:	f7fd fe2b 	bl	8007f98 <_free_r>
 800a342:	2400      	movs	r4, #0
 800a344:	4620      	mov	r0, r4
 800a346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a34a:	f000 f840 	bl	800a3ce <_malloc_usable_size_r>
 800a34e:	4285      	cmp	r5, r0
 800a350:	4606      	mov	r6, r0
 800a352:	d802      	bhi.n	800a35a <_realloc_r+0x34>
 800a354:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a358:	d8f4      	bhi.n	800a344 <_realloc_r+0x1e>
 800a35a:	4629      	mov	r1, r5
 800a35c:	4640      	mov	r0, r8
 800a35e:	f7fd fe8d 	bl	800807c <_malloc_r>
 800a362:	4607      	mov	r7, r0
 800a364:	2800      	cmp	r0, #0
 800a366:	d0ec      	beq.n	800a342 <_realloc_r+0x1c>
 800a368:	42b5      	cmp	r5, r6
 800a36a:	462a      	mov	r2, r5
 800a36c:	4621      	mov	r1, r4
 800a36e:	bf28      	it	cs
 800a370:	4632      	movcs	r2, r6
 800a372:	f7fc ffae 	bl	80072d2 <memcpy>
 800a376:	4621      	mov	r1, r4
 800a378:	4640      	mov	r0, r8
 800a37a:	f7fd fe0d 	bl	8007f98 <_free_r>
 800a37e:	463c      	mov	r4, r7
 800a380:	e7e0      	b.n	800a344 <_realloc_r+0x1e>

0800a382 <__ascii_wctomb>:
 800a382:	4603      	mov	r3, r0
 800a384:	4608      	mov	r0, r1
 800a386:	b141      	cbz	r1, 800a39a <__ascii_wctomb+0x18>
 800a388:	2aff      	cmp	r2, #255	@ 0xff
 800a38a:	d904      	bls.n	800a396 <__ascii_wctomb+0x14>
 800a38c:	228a      	movs	r2, #138	@ 0x8a
 800a38e:	f04f 30ff 	mov.w	r0, #4294967295
 800a392:	601a      	str	r2, [r3, #0]
 800a394:	4770      	bx	lr
 800a396:	2001      	movs	r0, #1
 800a398:	700a      	strb	r2, [r1, #0]
 800a39a:	4770      	bx	lr

0800a39c <fiprintf>:
 800a39c:	b40e      	push	{r1, r2, r3}
 800a39e:	b503      	push	{r0, r1, lr}
 800a3a0:	4601      	mov	r1, r0
 800a3a2:	ab03      	add	r3, sp, #12
 800a3a4:	4805      	ldr	r0, [pc, #20]	@ (800a3bc <fiprintf+0x20>)
 800a3a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3aa:	6800      	ldr	r0, [r0, #0]
 800a3ac:	9301      	str	r3, [sp, #4]
 800a3ae:	f000 f83d 	bl	800a42c <_vfiprintf_r>
 800a3b2:	b002      	add	sp, #8
 800a3b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3b8:	b003      	add	sp, #12
 800a3ba:	4770      	bx	lr
 800a3bc:	20000020 	.word	0x20000020

0800a3c0 <abort>:
 800a3c0:	2006      	movs	r0, #6
 800a3c2:	b508      	push	{r3, lr}
 800a3c4:	f000 fa06 	bl	800a7d4 <raise>
 800a3c8:	2001      	movs	r0, #1
 800a3ca:	f7f8 fc5c 	bl	8002c86 <_exit>

0800a3ce <_malloc_usable_size_r>:
 800a3ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3d2:	1f18      	subs	r0, r3, #4
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	bfbc      	itt	lt
 800a3d8:	580b      	ldrlt	r3, [r1, r0]
 800a3da:	18c0      	addlt	r0, r0, r3
 800a3dc:	4770      	bx	lr

0800a3de <__sfputc_r>:
 800a3de:	6893      	ldr	r3, [r2, #8]
 800a3e0:	b410      	push	{r4}
 800a3e2:	3b01      	subs	r3, #1
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	6093      	str	r3, [r2, #8]
 800a3e8:	da07      	bge.n	800a3fa <__sfputc_r+0x1c>
 800a3ea:	6994      	ldr	r4, [r2, #24]
 800a3ec:	42a3      	cmp	r3, r4
 800a3ee:	db01      	blt.n	800a3f4 <__sfputc_r+0x16>
 800a3f0:	290a      	cmp	r1, #10
 800a3f2:	d102      	bne.n	800a3fa <__sfputc_r+0x1c>
 800a3f4:	bc10      	pop	{r4}
 800a3f6:	f000 b931 	b.w	800a65c <__swbuf_r>
 800a3fa:	6813      	ldr	r3, [r2, #0]
 800a3fc:	1c58      	adds	r0, r3, #1
 800a3fe:	6010      	str	r0, [r2, #0]
 800a400:	7019      	strb	r1, [r3, #0]
 800a402:	4608      	mov	r0, r1
 800a404:	bc10      	pop	{r4}
 800a406:	4770      	bx	lr

0800a408 <__sfputs_r>:
 800a408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a40a:	4606      	mov	r6, r0
 800a40c:	460f      	mov	r7, r1
 800a40e:	4614      	mov	r4, r2
 800a410:	18d5      	adds	r5, r2, r3
 800a412:	42ac      	cmp	r4, r5
 800a414:	d101      	bne.n	800a41a <__sfputs_r+0x12>
 800a416:	2000      	movs	r0, #0
 800a418:	e007      	b.n	800a42a <__sfputs_r+0x22>
 800a41a:	463a      	mov	r2, r7
 800a41c:	4630      	mov	r0, r6
 800a41e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a422:	f7ff ffdc 	bl	800a3de <__sfputc_r>
 800a426:	1c43      	adds	r3, r0, #1
 800a428:	d1f3      	bne.n	800a412 <__sfputs_r+0xa>
 800a42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a42c <_vfiprintf_r>:
 800a42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a430:	460d      	mov	r5, r1
 800a432:	4614      	mov	r4, r2
 800a434:	4698      	mov	r8, r3
 800a436:	4606      	mov	r6, r0
 800a438:	b09d      	sub	sp, #116	@ 0x74
 800a43a:	b118      	cbz	r0, 800a444 <_vfiprintf_r+0x18>
 800a43c:	6a03      	ldr	r3, [r0, #32]
 800a43e:	b90b      	cbnz	r3, 800a444 <_vfiprintf_r+0x18>
 800a440:	f7fc fdd2 	bl	8006fe8 <__sinit>
 800a444:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a446:	07d9      	lsls	r1, r3, #31
 800a448:	d405      	bmi.n	800a456 <_vfiprintf_r+0x2a>
 800a44a:	89ab      	ldrh	r3, [r5, #12]
 800a44c:	059a      	lsls	r2, r3, #22
 800a44e:	d402      	bmi.n	800a456 <_vfiprintf_r+0x2a>
 800a450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a452:	f7fc ff2e 	bl	80072b2 <__retarget_lock_acquire_recursive>
 800a456:	89ab      	ldrh	r3, [r5, #12]
 800a458:	071b      	lsls	r3, r3, #28
 800a45a:	d501      	bpl.n	800a460 <_vfiprintf_r+0x34>
 800a45c:	692b      	ldr	r3, [r5, #16]
 800a45e:	b99b      	cbnz	r3, 800a488 <_vfiprintf_r+0x5c>
 800a460:	4629      	mov	r1, r5
 800a462:	4630      	mov	r0, r6
 800a464:	f000 f938 	bl	800a6d8 <__swsetup_r>
 800a468:	b170      	cbz	r0, 800a488 <_vfiprintf_r+0x5c>
 800a46a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a46c:	07dc      	lsls	r4, r3, #31
 800a46e:	d504      	bpl.n	800a47a <_vfiprintf_r+0x4e>
 800a470:	f04f 30ff 	mov.w	r0, #4294967295
 800a474:	b01d      	add	sp, #116	@ 0x74
 800a476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a47a:	89ab      	ldrh	r3, [r5, #12]
 800a47c:	0598      	lsls	r0, r3, #22
 800a47e:	d4f7      	bmi.n	800a470 <_vfiprintf_r+0x44>
 800a480:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a482:	f7fc ff17 	bl	80072b4 <__retarget_lock_release_recursive>
 800a486:	e7f3      	b.n	800a470 <_vfiprintf_r+0x44>
 800a488:	2300      	movs	r3, #0
 800a48a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a48c:	2320      	movs	r3, #32
 800a48e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a492:	2330      	movs	r3, #48	@ 0x30
 800a494:	f04f 0901 	mov.w	r9, #1
 800a498:	f8cd 800c 	str.w	r8, [sp, #12]
 800a49c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a648 <_vfiprintf_r+0x21c>
 800a4a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a4a4:	4623      	mov	r3, r4
 800a4a6:	469a      	mov	sl, r3
 800a4a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4ac:	b10a      	cbz	r2, 800a4b2 <_vfiprintf_r+0x86>
 800a4ae:	2a25      	cmp	r2, #37	@ 0x25
 800a4b0:	d1f9      	bne.n	800a4a6 <_vfiprintf_r+0x7a>
 800a4b2:	ebba 0b04 	subs.w	fp, sl, r4
 800a4b6:	d00b      	beq.n	800a4d0 <_vfiprintf_r+0xa4>
 800a4b8:	465b      	mov	r3, fp
 800a4ba:	4622      	mov	r2, r4
 800a4bc:	4629      	mov	r1, r5
 800a4be:	4630      	mov	r0, r6
 800a4c0:	f7ff ffa2 	bl	800a408 <__sfputs_r>
 800a4c4:	3001      	adds	r0, #1
 800a4c6:	f000 80a7 	beq.w	800a618 <_vfiprintf_r+0x1ec>
 800a4ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4cc:	445a      	add	r2, fp
 800a4ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800a4d0:	f89a 3000 	ldrb.w	r3, [sl]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	f000 809f 	beq.w	800a618 <_vfiprintf_r+0x1ec>
 800a4da:	2300      	movs	r3, #0
 800a4dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4e4:	f10a 0a01 	add.w	sl, sl, #1
 800a4e8:	9304      	str	r3, [sp, #16]
 800a4ea:	9307      	str	r3, [sp, #28]
 800a4ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a4f0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a4f2:	4654      	mov	r4, sl
 800a4f4:	2205      	movs	r2, #5
 800a4f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4fa:	4853      	ldr	r0, [pc, #332]	@ (800a648 <_vfiprintf_r+0x21c>)
 800a4fc:	f7fc fedb 	bl	80072b6 <memchr>
 800a500:	9a04      	ldr	r2, [sp, #16]
 800a502:	b9d8      	cbnz	r0, 800a53c <_vfiprintf_r+0x110>
 800a504:	06d1      	lsls	r1, r2, #27
 800a506:	bf44      	itt	mi
 800a508:	2320      	movmi	r3, #32
 800a50a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a50e:	0713      	lsls	r3, r2, #28
 800a510:	bf44      	itt	mi
 800a512:	232b      	movmi	r3, #43	@ 0x2b
 800a514:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a518:	f89a 3000 	ldrb.w	r3, [sl]
 800a51c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a51e:	d015      	beq.n	800a54c <_vfiprintf_r+0x120>
 800a520:	4654      	mov	r4, sl
 800a522:	2000      	movs	r0, #0
 800a524:	f04f 0c0a 	mov.w	ip, #10
 800a528:	9a07      	ldr	r2, [sp, #28]
 800a52a:	4621      	mov	r1, r4
 800a52c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a530:	3b30      	subs	r3, #48	@ 0x30
 800a532:	2b09      	cmp	r3, #9
 800a534:	d94b      	bls.n	800a5ce <_vfiprintf_r+0x1a2>
 800a536:	b1b0      	cbz	r0, 800a566 <_vfiprintf_r+0x13a>
 800a538:	9207      	str	r2, [sp, #28]
 800a53a:	e014      	b.n	800a566 <_vfiprintf_r+0x13a>
 800a53c:	eba0 0308 	sub.w	r3, r0, r8
 800a540:	fa09 f303 	lsl.w	r3, r9, r3
 800a544:	4313      	orrs	r3, r2
 800a546:	46a2      	mov	sl, r4
 800a548:	9304      	str	r3, [sp, #16]
 800a54a:	e7d2      	b.n	800a4f2 <_vfiprintf_r+0xc6>
 800a54c:	9b03      	ldr	r3, [sp, #12]
 800a54e:	1d19      	adds	r1, r3, #4
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	9103      	str	r1, [sp, #12]
 800a554:	2b00      	cmp	r3, #0
 800a556:	bfbb      	ittet	lt
 800a558:	425b      	neglt	r3, r3
 800a55a:	f042 0202 	orrlt.w	r2, r2, #2
 800a55e:	9307      	strge	r3, [sp, #28]
 800a560:	9307      	strlt	r3, [sp, #28]
 800a562:	bfb8      	it	lt
 800a564:	9204      	strlt	r2, [sp, #16]
 800a566:	7823      	ldrb	r3, [r4, #0]
 800a568:	2b2e      	cmp	r3, #46	@ 0x2e
 800a56a:	d10a      	bne.n	800a582 <_vfiprintf_r+0x156>
 800a56c:	7863      	ldrb	r3, [r4, #1]
 800a56e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a570:	d132      	bne.n	800a5d8 <_vfiprintf_r+0x1ac>
 800a572:	9b03      	ldr	r3, [sp, #12]
 800a574:	3402      	adds	r4, #2
 800a576:	1d1a      	adds	r2, r3, #4
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	9203      	str	r2, [sp, #12]
 800a57c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a580:	9305      	str	r3, [sp, #20]
 800a582:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a64c <_vfiprintf_r+0x220>
 800a586:	2203      	movs	r2, #3
 800a588:	4650      	mov	r0, sl
 800a58a:	7821      	ldrb	r1, [r4, #0]
 800a58c:	f7fc fe93 	bl	80072b6 <memchr>
 800a590:	b138      	cbz	r0, 800a5a2 <_vfiprintf_r+0x176>
 800a592:	2240      	movs	r2, #64	@ 0x40
 800a594:	9b04      	ldr	r3, [sp, #16]
 800a596:	eba0 000a 	sub.w	r0, r0, sl
 800a59a:	4082      	lsls	r2, r0
 800a59c:	4313      	orrs	r3, r2
 800a59e:	3401      	adds	r4, #1
 800a5a0:	9304      	str	r3, [sp, #16]
 800a5a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5a6:	2206      	movs	r2, #6
 800a5a8:	4829      	ldr	r0, [pc, #164]	@ (800a650 <_vfiprintf_r+0x224>)
 800a5aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a5ae:	f7fc fe82 	bl	80072b6 <memchr>
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	d03f      	beq.n	800a636 <_vfiprintf_r+0x20a>
 800a5b6:	4b27      	ldr	r3, [pc, #156]	@ (800a654 <_vfiprintf_r+0x228>)
 800a5b8:	bb1b      	cbnz	r3, 800a602 <_vfiprintf_r+0x1d6>
 800a5ba:	9b03      	ldr	r3, [sp, #12]
 800a5bc:	3307      	adds	r3, #7
 800a5be:	f023 0307 	bic.w	r3, r3, #7
 800a5c2:	3308      	adds	r3, #8
 800a5c4:	9303      	str	r3, [sp, #12]
 800a5c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5c8:	443b      	add	r3, r7
 800a5ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5cc:	e76a      	b.n	800a4a4 <_vfiprintf_r+0x78>
 800a5ce:	460c      	mov	r4, r1
 800a5d0:	2001      	movs	r0, #1
 800a5d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5d6:	e7a8      	b.n	800a52a <_vfiprintf_r+0xfe>
 800a5d8:	2300      	movs	r3, #0
 800a5da:	f04f 0c0a 	mov.w	ip, #10
 800a5de:	4619      	mov	r1, r3
 800a5e0:	3401      	adds	r4, #1
 800a5e2:	9305      	str	r3, [sp, #20]
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5ea:	3a30      	subs	r2, #48	@ 0x30
 800a5ec:	2a09      	cmp	r2, #9
 800a5ee:	d903      	bls.n	800a5f8 <_vfiprintf_r+0x1cc>
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d0c6      	beq.n	800a582 <_vfiprintf_r+0x156>
 800a5f4:	9105      	str	r1, [sp, #20]
 800a5f6:	e7c4      	b.n	800a582 <_vfiprintf_r+0x156>
 800a5f8:	4604      	mov	r4, r0
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a600:	e7f0      	b.n	800a5e4 <_vfiprintf_r+0x1b8>
 800a602:	ab03      	add	r3, sp, #12
 800a604:	9300      	str	r3, [sp, #0]
 800a606:	462a      	mov	r2, r5
 800a608:	4630      	mov	r0, r6
 800a60a:	4b13      	ldr	r3, [pc, #76]	@ (800a658 <_vfiprintf_r+0x22c>)
 800a60c:	a904      	add	r1, sp, #16
 800a60e:	f7fb fe91 	bl	8006334 <_printf_float>
 800a612:	4607      	mov	r7, r0
 800a614:	1c78      	adds	r0, r7, #1
 800a616:	d1d6      	bne.n	800a5c6 <_vfiprintf_r+0x19a>
 800a618:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a61a:	07d9      	lsls	r1, r3, #31
 800a61c:	d405      	bmi.n	800a62a <_vfiprintf_r+0x1fe>
 800a61e:	89ab      	ldrh	r3, [r5, #12]
 800a620:	059a      	lsls	r2, r3, #22
 800a622:	d402      	bmi.n	800a62a <_vfiprintf_r+0x1fe>
 800a624:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a626:	f7fc fe45 	bl	80072b4 <__retarget_lock_release_recursive>
 800a62a:	89ab      	ldrh	r3, [r5, #12]
 800a62c:	065b      	lsls	r3, r3, #25
 800a62e:	f53f af1f 	bmi.w	800a470 <_vfiprintf_r+0x44>
 800a632:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a634:	e71e      	b.n	800a474 <_vfiprintf_r+0x48>
 800a636:	ab03      	add	r3, sp, #12
 800a638:	9300      	str	r3, [sp, #0]
 800a63a:	462a      	mov	r2, r5
 800a63c:	4630      	mov	r0, r6
 800a63e:	4b06      	ldr	r3, [pc, #24]	@ (800a658 <_vfiprintf_r+0x22c>)
 800a640:	a904      	add	r1, sp, #16
 800a642:	f7fc f915 	bl	8006870 <_printf_i>
 800a646:	e7e4      	b.n	800a612 <_vfiprintf_r+0x1e6>
 800a648:	0800d569 	.word	0x0800d569
 800a64c:	0800d56f 	.word	0x0800d56f
 800a650:	0800d573 	.word	0x0800d573
 800a654:	08006335 	.word	0x08006335
 800a658:	0800a409 	.word	0x0800a409

0800a65c <__swbuf_r>:
 800a65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a65e:	460e      	mov	r6, r1
 800a660:	4614      	mov	r4, r2
 800a662:	4605      	mov	r5, r0
 800a664:	b118      	cbz	r0, 800a66e <__swbuf_r+0x12>
 800a666:	6a03      	ldr	r3, [r0, #32]
 800a668:	b90b      	cbnz	r3, 800a66e <__swbuf_r+0x12>
 800a66a:	f7fc fcbd 	bl	8006fe8 <__sinit>
 800a66e:	69a3      	ldr	r3, [r4, #24]
 800a670:	60a3      	str	r3, [r4, #8]
 800a672:	89a3      	ldrh	r3, [r4, #12]
 800a674:	071a      	lsls	r2, r3, #28
 800a676:	d501      	bpl.n	800a67c <__swbuf_r+0x20>
 800a678:	6923      	ldr	r3, [r4, #16]
 800a67a:	b943      	cbnz	r3, 800a68e <__swbuf_r+0x32>
 800a67c:	4621      	mov	r1, r4
 800a67e:	4628      	mov	r0, r5
 800a680:	f000 f82a 	bl	800a6d8 <__swsetup_r>
 800a684:	b118      	cbz	r0, 800a68e <__swbuf_r+0x32>
 800a686:	f04f 37ff 	mov.w	r7, #4294967295
 800a68a:	4638      	mov	r0, r7
 800a68c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a68e:	6823      	ldr	r3, [r4, #0]
 800a690:	6922      	ldr	r2, [r4, #16]
 800a692:	b2f6      	uxtb	r6, r6
 800a694:	1a98      	subs	r0, r3, r2
 800a696:	6963      	ldr	r3, [r4, #20]
 800a698:	4637      	mov	r7, r6
 800a69a:	4283      	cmp	r3, r0
 800a69c:	dc05      	bgt.n	800a6aa <__swbuf_r+0x4e>
 800a69e:	4621      	mov	r1, r4
 800a6a0:	4628      	mov	r0, r5
 800a6a2:	f7ff fa73 	bl	8009b8c <_fflush_r>
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	d1ed      	bne.n	800a686 <__swbuf_r+0x2a>
 800a6aa:	68a3      	ldr	r3, [r4, #8]
 800a6ac:	3b01      	subs	r3, #1
 800a6ae:	60a3      	str	r3, [r4, #8]
 800a6b0:	6823      	ldr	r3, [r4, #0]
 800a6b2:	1c5a      	adds	r2, r3, #1
 800a6b4:	6022      	str	r2, [r4, #0]
 800a6b6:	701e      	strb	r6, [r3, #0]
 800a6b8:	6962      	ldr	r2, [r4, #20]
 800a6ba:	1c43      	adds	r3, r0, #1
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d004      	beq.n	800a6ca <__swbuf_r+0x6e>
 800a6c0:	89a3      	ldrh	r3, [r4, #12]
 800a6c2:	07db      	lsls	r3, r3, #31
 800a6c4:	d5e1      	bpl.n	800a68a <__swbuf_r+0x2e>
 800a6c6:	2e0a      	cmp	r6, #10
 800a6c8:	d1df      	bne.n	800a68a <__swbuf_r+0x2e>
 800a6ca:	4621      	mov	r1, r4
 800a6cc:	4628      	mov	r0, r5
 800a6ce:	f7ff fa5d 	bl	8009b8c <_fflush_r>
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	d0d9      	beq.n	800a68a <__swbuf_r+0x2e>
 800a6d6:	e7d6      	b.n	800a686 <__swbuf_r+0x2a>

0800a6d8 <__swsetup_r>:
 800a6d8:	b538      	push	{r3, r4, r5, lr}
 800a6da:	4b29      	ldr	r3, [pc, #164]	@ (800a780 <__swsetup_r+0xa8>)
 800a6dc:	4605      	mov	r5, r0
 800a6de:	6818      	ldr	r0, [r3, #0]
 800a6e0:	460c      	mov	r4, r1
 800a6e2:	b118      	cbz	r0, 800a6ec <__swsetup_r+0x14>
 800a6e4:	6a03      	ldr	r3, [r0, #32]
 800a6e6:	b90b      	cbnz	r3, 800a6ec <__swsetup_r+0x14>
 800a6e8:	f7fc fc7e 	bl	8006fe8 <__sinit>
 800a6ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6f0:	0719      	lsls	r1, r3, #28
 800a6f2:	d422      	bmi.n	800a73a <__swsetup_r+0x62>
 800a6f4:	06da      	lsls	r2, r3, #27
 800a6f6:	d407      	bmi.n	800a708 <__swsetup_r+0x30>
 800a6f8:	2209      	movs	r2, #9
 800a6fa:	602a      	str	r2, [r5, #0]
 800a6fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a700:	f04f 30ff 	mov.w	r0, #4294967295
 800a704:	81a3      	strh	r3, [r4, #12]
 800a706:	e033      	b.n	800a770 <__swsetup_r+0x98>
 800a708:	0758      	lsls	r0, r3, #29
 800a70a:	d512      	bpl.n	800a732 <__swsetup_r+0x5a>
 800a70c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a70e:	b141      	cbz	r1, 800a722 <__swsetup_r+0x4a>
 800a710:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a714:	4299      	cmp	r1, r3
 800a716:	d002      	beq.n	800a71e <__swsetup_r+0x46>
 800a718:	4628      	mov	r0, r5
 800a71a:	f7fd fc3d 	bl	8007f98 <_free_r>
 800a71e:	2300      	movs	r3, #0
 800a720:	6363      	str	r3, [r4, #52]	@ 0x34
 800a722:	89a3      	ldrh	r3, [r4, #12]
 800a724:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a728:	81a3      	strh	r3, [r4, #12]
 800a72a:	2300      	movs	r3, #0
 800a72c:	6063      	str	r3, [r4, #4]
 800a72e:	6923      	ldr	r3, [r4, #16]
 800a730:	6023      	str	r3, [r4, #0]
 800a732:	89a3      	ldrh	r3, [r4, #12]
 800a734:	f043 0308 	orr.w	r3, r3, #8
 800a738:	81a3      	strh	r3, [r4, #12]
 800a73a:	6923      	ldr	r3, [r4, #16]
 800a73c:	b94b      	cbnz	r3, 800a752 <__swsetup_r+0x7a>
 800a73e:	89a3      	ldrh	r3, [r4, #12]
 800a740:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a748:	d003      	beq.n	800a752 <__swsetup_r+0x7a>
 800a74a:	4621      	mov	r1, r4
 800a74c:	4628      	mov	r0, r5
 800a74e:	f000 f882 	bl	800a856 <__smakebuf_r>
 800a752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a756:	f013 0201 	ands.w	r2, r3, #1
 800a75a:	d00a      	beq.n	800a772 <__swsetup_r+0x9a>
 800a75c:	2200      	movs	r2, #0
 800a75e:	60a2      	str	r2, [r4, #8]
 800a760:	6962      	ldr	r2, [r4, #20]
 800a762:	4252      	negs	r2, r2
 800a764:	61a2      	str	r2, [r4, #24]
 800a766:	6922      	ldr	r2, [r4, #16]
 800a768:	b942      	cbnz	r2, 800a77c <__swsetup_r+0xa4>
 800a76a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a76e:	d1c5      	bne.n	800a6fc <__swsetup_r+0x24>
 800a770:	bd38      	pop	{r3, r4, r5, pc}
 800a772:	0799      	lsls	r1, r3, #30
 800a774:	bf58      	it	pl
 800a776:	6962      	ldrpl	r2, [r4, #20]
 800a778:	60a2      	str	r2, [r4, #8]
 800a77a:	e7f4      	b.n	800a766 <__swsetup_r+0x8e>
 800a77c:	2000      	movs	r0, #0
 800a77e:	e7f7      	b.n	800a770 <__swsetup_r+0x98>
 800a780:	20000020 	.word	0x20000020

0800a784 <_raise_r>:
 800a784:	291f      	cmp	r1, #31
 800a786:	b538      	push	{r3, r4, r5, lr}
 800a788:	4605      	mov	r5, r0
 800a78a:	460c      	mov	r4, r1
 800a78c:	d904      	bls.n	800a798 <_raise_r+0x14>
 800a78e:	2316      	movs	r3, #22
 800a790:	6003      	str	r3, [r0, #0]
 800a792:	f04f 30ff 	mov.w	r0, #4294967295
 800a796:	bd38      	pop	{r3, r4, r5, pc}
 800a798:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a79a:	b112      	cbz	r2, 800a7a2 <_raise_r+0x1e>
 800a79c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7a0:	b94b      	cbnz	r3, 800a7b6 <_raise_r+0x32>
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	f000 f830 	bl	800a808 <_getpid_r>
 800a7a8:	4622      	mov	r2, r4
 800a7aa:	4601      	mov	r1, r0
 800a7ac:	4628      	mov	r0, r5
 800a7ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7b2:	f000 b817 	b.w	800a7e4 <_kill_r>
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d00a      	beq.n	800a7d0 <_raise_r+0x4c>
 800a7ba:	1c59      	adds	r1, r3, #1
 800a7bc:	d103      	bne.n	800a7c6 <_raise_r+0x42>
 800a7be:	2316      	movs	r3, #22
 800a7c0:	6003      	str	r3, [r0, #0]
 800a7c2:	2001      	movs	r0, #1
 800a7c4:	e7e7      	b.n	800a796 <_raise_r+0x12>
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a7ce:	4798      	blx	r3
 800a7d0:	2000      	movs	r0, #0
 800a7d2:	e7e0      	b.n	800a796 <_raise_r+0x12>

0800a7d4 <raise>:
 800a7d4:	4b02      	ldr	r3, [pc, #8]	@ (800a7e0 <raise+0xc>)
 800a7d6:	4601      	mov	r1, r0
 800a7d8:	6818      	ldr	r0, [r3, #0]
 800a7da:	f7ff bfd3 	b.w	800a784 <_raise_r>
 800a7de:	bf00      	nop
 800a7e0:	20000020 	.word	0x20000020

0800a7e4 <_kill_r>:
 800a7e4:	b538      	push	{r3, r4, r5, lr}
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	4d06      	ldr	r5, [pc, #24]	@ (800a804 <_kill_r+0x20>)
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	4608      	mov	r0, r1
 800a7ee:	4611      	mov	r1, r2
 800a7f0:	602b      	str	r3, [r5, #0]
 800a7f2:	f7f8 fa38 	bl	8002c66 <_kill>
 800a7f6:	1c43      	adds	r3, r0, #1
 800a7f8:	d102      	bne.n	800a800 <_kill_r+0x1c>
 800a7fa:	682b      	ldr	r3, [r5, #0]
 800a7fc:	b103      	cbz	r3, 800a800 <_kill_r+0x1c>
 800a7fe:	6023      	str	r3, [r4, #0]
 800a800:	bd38      	pop	{r3, r4, r5, pc}
 800a802:	bf00      	nop
 800a804:	200008b8 	.word	0x200008b8

0800a808 <_getpid_r>:
 800a808:	f7f8 ba26 	b.w	8002c58 <_getpid>

0800a80c <__swhatbuf_r>:
 800a80c:	b570      	push	{r4, r5, r6, lr}
 800a80e:	460c      	mov	r4, r1
 800a810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a814:	4615      	mov	r5, r2
 800a816:	2900      	cmp	r1, #0
 800a818:	461e      	mov	r6, r3
 800a81a:	b096      	sub	sp, #88	@ 0x58
 800a81c:	da0c      	bge.n	800a838 <__swhatbuf_r+0x2c>
 800a81e:	89a3      	ldrh	r3, [r4, #12]
 800a820:	2100      	movs	r1, #0
 800a822:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a826:	bf14      	ite	ne
 800a828:	2340      	movne	r3, #64	@ 0x40
 800a82a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a82e:	2000      	movs	r0, #0
 800a830:	6031      	str	r1, [r6, #0]
 800a832:	602b      	str	r3, [r5, #0]
 800a834:	b016      	add	sp, #88	@ 0x58
 800a836:	bd70      	pop	{r4, r5, r6, pc}
 800a838:	466a      	mov	r2, sp
 800a83a:	f000 f849 	bl	800a8d0 <_fstat_r>
 800a83e:	2800      	cmp	r0, #0
 800a840:	dbed      	blt.n	800a81e <__swhatbuf_r+0x12>
 800a842:	9901      	ldr	r1, [sp, #4]
 800a844:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a848:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a84c:	4259      	negs	r1, r3
 800a84e:	4159      	adcs	r1, r3
 800a850:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a854:	e7eb      	b.n	800a82e <__swhatbuf_r+0x22>

0800a856 <__smakebuf_r>:
 800a856:	898b      	ldrh	r3, [r1, #12]
 800a858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a85a:	079d      	lsls	r5, r3, #30
 800a85c:	4606      	mov	r6, r0
 800a85e:	460c      	mov	r4, r1
 800a860:	d507      	bpl.n	800a872 <__smakebuf_r+0x1c>
 800a862:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a866:	6023      	str	r3, [r4, #0]
 800a868:	6123      	str	r3, [r4, #16]
 800a86a:	2301      	movs	r3, #1
 800a86c:	6163      	str	r3, [r4, #20]
 800a86e:	b003      	add	sp, #12
 800a870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a872:	466a      	mov	r2, sp
 800a874:	ab01      	add	r3, sp, #4
 800a876:	f7ff ffc9 	bl	800a80c <__swhatbuf_r>
 800a87a:	9f00      	ldr	r7, [sp, #0]
 800a87c:	4605      	mov	r5, r0
 800a87e:	4639      	mov	r1, r7
 800a880:	4630      	mov	r0, r6
 800a882:	f7fd fbfb 	bl	800807c <_malloc_r>
 800a886:	b948      	cbnz	r0, 800a89c <__smakebuf_r+0x46>
 800a888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a88c:	059a      	lsls	r2, r3, #22
 800a88e:	d4ee      	bmi.n	800a86e <__smakebuf_r+0x18>
 800a890:	f023 0303 	bic.w	r3, r3, #3
 800a894:	f043 0302 	orr.w	r3, r3, #2
 800a898:	81a3      	strh	r3, [r4, #12]
 800a89a:	e7e2      	b.n	800a862 <__smakebuf_r+0xc>
 800a89c:	89a3      	ldrh	r3, [r4, #12]
 800a89e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a8a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8a6:	81a3      	strh	r3, [r4, #12]
 800a8a8:	9b01      	ldr	r3, [sp, #4]
 800a8aa:	6020      	str	r0, [r4, #0]
 800a8ac:	b15b      	cbz	r3, 800a8c6 <__smakebuf_r+0x70>
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8b4:	f000 f81e 	bl	800a8f4 <_isatty_r>
 800a8b8:	b128      	cbz	r0, 800a8c6 <__smakebuf_r+0x70>
 800a8ba:	89a3      	ldrh	r3, [r4, #12]
 800a8bc:	f023 0303 	bic.w	r3, r3, #3
 800a8c0:	f043 0301 	orr.w	r3, r3, #1
 800a8c4:	81a3      	strh	r3, [r4, #12]
 800a8c6:	89a3      	ldrh	r3, [r4, #12]
 800a8c8:	431d      	orrs	r5, r3
 800a8ca:	81a5      	strh	r5, [r4, #12]
 800a8cc:	e7cf      	b.n	800a86e <__smakebuf_r+0x18>
	...

0800a8d0 <_fstat_r>:
 800a8d0:	b538      	push	{r3, r4, r5, lr}
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	4d06      	ldr	r5, [pc, #24]	@ (800a8f0 <_fstat_r+0x20>)
 800a8d6:	4604      	mov	r4, r0
 800a8d8:	4608      	mov	r0, r1
 800a8da:	4611      	mov	r1, r2
 800a8dc:	602b      	str	r3, [r5, #0]
 800a8de:	f7f8 fa21 	bl	8002d24 <_fstat>
 800a8e2:	1c43      	adds	r3, r0, #1
 800a8e4:	d102      	bne.n	800a8ec <_fstat_r+0x1c>
 800a8e6:	682b      	ldr	r3, [r5, #0]
 800a8e8:	b103      	cbz	r3, 800a8ec <_fstat_r+0x1c>
 800a8ea:	6023      	str	r3, [r4, #0]
 800a8ec:	bd38      	pop	{r3, r4, r5, pc}
 800a8ee:	bf00      	nop
 800a8f0:	200008b8 	.word	0x200008b8

0800a8f4 <_isatty_r>:
 800a8f4:	b538      	push	{r3, r4, r5, lr}
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	4d05      	ldr	r5, [pc, #20]	@ (800a910 <_isatty_r+0x1c>)
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	4608      	mov	r0, r1
 800a8fe:	602b      	str	r3, [r5, #0]
 800a900:	f7f8 fa1f 	bl	8002d42 <_isatty>
 800a904:	1c43      	adds	r3, r0, #1
 800a906:	d102      	bne.n	800a90e <_isatty_r+0x1a>
 800a908:	682b      	ldr	r3, [r5, #0]
 800a90a:	b103      	cbz	r3, 800a90e <_isatty_r+0x1a>
 800a90c:	6023      	str	r3, [r4, #0]
 800a90e:	bd38      	pop	{r3, r4, r5, pc}
 800a910:	200008b8 	.word	0x200008b8

0800a914 <_init>:
 800a914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a916:	bf00      	nop
 800a918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a91a:	bc08      	pop	{r3}
 800a91c:	469e      	mov	lr, r3
 800a91e:	4770      	bx	lr

0800a920 <_fini>:
 800a920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a922:	bf00      	nop
 800a924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a926:	bc08      	pop	{r3}
 800a928:	469e      	mov	lr, r3
 800a92a:	4770      	bx	lr
