
STM32F103C8T6-Clock-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a974  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cf8  0800aa88  0800aa88  0000ba88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d780  0800d780  0000f1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d780  0800d780  0000e780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d788  0800d788  0000f1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d788  0800d788  0000e788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d78c  0800d78c  0000e78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800d790  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ec  200001dc  0800d96c  0000f1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008c8  0800d96c  0000f8c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f826  00000000  00000000  0000f205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a9a  00000000  00000000  0001ea2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  000214c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d1f  00000000  00000000  000225c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019996  00000000  00000000  000232df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001604d  00000000  00000000  0003cc75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fda2  00000000  00000000  00052cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2a64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c84  00000000  00000000  000e2aa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000e872c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aa6c 	.word	0x0800aa6c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800aa6c 	.word	0x0800aa6c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_d2lz>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	2200      	movs	r2, #0
 8000d88:	2300      	movs	r3, #0
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	460d      	mov	r5, r1
 8000d8e:	f7ff fe15 	bl	80009bc <__aeabi_dcmplt>
 8000d92:	b928      	cbnz	r0, 8000da0 <__aeabi_d2lz+0x1c>
 8000d94:	4620      	mov	r0, r4
 8000d96:	4629      	mov	r1, r5
 8000d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d9c:	f000 b80a 	b.w	8000db4 <__aeabi_d2ulz>
 8000da0:	4620      	mov	r0, r4
 8000da2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000da6:	f000 f805 	bl	8000db4 <__aeabi_d2ulz>
 8000daa:	4240      	negs	r0, r0
 8000dac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db0:	bd38      	pop	{r3, r4, r5, pc}
 8000db2:	bf00      	nop

08000db4 <__aeabi_d2ulz>:
 8000db4:	b5d0      	push	{r4, r6, r7, lr}
 8000db6:	2200      	movs	r2, #0
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <__aeabi_d2ulz+0x34>)
 8000dba:	4606      	mov	r6, r0
 8000dbc:	460f      	mov	r7, r1
 8000dbe:	f7ff fb8b 	bl	80004d8 <__aeabi_dmul>
 8000dc2:	f7ff fe61 	bl	8000a88 <__aeabi_d2uiz>
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	f7ff fb0c 	bl	80003e4 <__aeabi_ui2d>
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <__aeabi_d2ulz+0x38>)
 8000dd0:	f7ff fb82 	bl	80004d8 <__aeabi_dmul>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	4630      	mov	r0, r6
 8000dda:	4639      	mov	r1, r7
 8000ddc:	f7ff f9c4 	bl	8000168 <__aeabi_dsub>
 8000de0:	f7ff fe52 	bl	8000a88 <__aeabi_d2uiz>
 8000de4:	4621      	mov	r1, r4
 8000de6:	bdd0      	pop	{r4, r6, r7, pc}
 8000de8:	3df00000 	.word	0x3df00000
 8000dec:	41f00000 	.word	0x41f00000

08000df0 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08c      	sub	sp, #48	@ 0x30
 8000df4:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfa:	9302      	str	r3, [sp, #8]
 8000dfc:	2319      	movs	r3, #25
 8000dfe:	9301      	str	r3, [sp, #4]
 8000e00:	463b      	mov	r3, r7
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2301      	movs	r3, #1
 8000e06:	2288      	movs	r2, #136	@ 0x88
 8000e08:	21ec      	movs	r1, #236	@ 0xec
 8000e0a:	4857      	ldr	r0, [pc, #348]	@ (8000f68 <TrimRead+0x178>)
 8000e0c:	f002 fe28 	bl	8003a60 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8000e10:	463b      	mov	r3, r7
 8000e12:	3319      	adds	r3, #25
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295
 8000e18:	9202      	str	r2, [sp, #8]
 8000e1a:	2207      	movs	r2, #7
 8000e1c:	9201      	str	r2, [sp, #4]
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	2301      	movs	r3, #1
 8000e22:	22e1      	movs	r2, #225	@ 0xe1
 8000e24:	21ec      	movs	r1, #236	@ 0xec
 8000e26:	4850      	ldr	r0, [pc, #320]	@ (8000f68 <TrimRead+0x178>)
 8000e28:	f002 fe1a 	bl	8003a60 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8000e2c:	787b      	ldrb	r3, [r7, #1]
 8000e2e:	021b      	lsls	r3, r3, #8
 8000e30:	b21a      	sxth	r2, r3
 8000e32:	783b      	ldrb	r3, [r7, #0]
 8000e34:	b21b      	sxth	r3, r3
 8000e36:	4313      	orrs	r3, r2
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	4b4b      	ldr	r3, [pc, #300]	@ (8000f6c <TrimRead+0x17c>)
 8000e3e:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8000e40:	78fb      	ldrb	r3, [r7, #3]
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	b21a      	sxth	r2, r3
 8000e46:	78bb      	ldrb	r3, [r7, #2]
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b21a      	sxth	r2, r3
 8000e4e:	4b48      	ldr	r3, [pc, #288]	@ (8000f70 <TrimRead+0x180>)
 8000e50:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8000e52:	797b      	ldrb	r3, [r7, #5]
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	b21a      	sxth	r2, r3
 8000e58:	793b      	ldrb	r3, [r7, #4]
 8000e5a:	b21b      	sxth	r3, r3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b21a      	sxth	r2, r3
 8000e60:	4b44      	ldr	r3, [pc, #272]	@ (8000f74 <TrimRead+0x184>)
 8000e62:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	021b      	lsls	r3, r3, #8
 8000e68:	b21a      	sxth	r2, r3
 8000e6a:	797b      	ldrb	r3, [r7, #5]
 8000e6c:	b21b      	sxth	r3, r3
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	b21b      	sxth	r3, r3
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	4b40      	ldr	r3, [pc, #256]	@ (8000f78 <TrimRead+0x188>)
 8000e76:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8000e78:	7a7b      	ldrb	r3, [r7, #9]
 8000e7a:	021b      	lsls	r3, r3, #8
 8000e7c:	b21a      	sxth	r2, r3
 8000e7e:	79bb      	ldrb	r3, [r7, #6]
 8000e80:	b21b      	sxth	r3, r3
 8000e82:	4313      	orrs	r3, r2
 8000e84:	b21a      	sxth	r2, r3
 8000e86:	4b3d      	ldr	r3, [pc, #244]	@ (8000f7c <TrimRead+0x18c>)
 8000e88:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8000e8a:	7afb      	ldrb	r3, [r7, #11]
 8000e8c:	021b      	lsls	r3, r3, #8
 8000e8e:	b21a      	sxth	r2, r3
 8000e90:	7abb      	ldrb	r3, [r7, #10]
 8000e92:	b21b      	sxth	r3, r3
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b21a      	sxth	r2, r3
 8000e98:	4b39      	ldr	r3, [pc, #228]	@ (8000f80 <TrimRead+0x190>)
 8000e9a:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8000e9c:	7b7b      	ldrb	r3, [r7, #13]
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	b21a      	sxth	r2, r3
 8000ea2:	7b3b      	ldrb	r3, [r7, #12]
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	b21a      	sxth	r2, r3
 8000eaa:	4b36      	ldr	r3, [pc, #216]	@ (8000f84 <TrimRead+0x194>)
 8000eac:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	021b      	lsls	r3, r3, #8
 8000eb2:	b21a      	sxth	r2, r3
 8000eb4:	7bbb      	ldrb	r3, [r7, #14]
 8000eb6:	b21b      	sxth	r3, r3
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	4b32      	ldr	r3, [pc, #200]	@ (8000f88 <TrimRead+0x198>)
 8000ebe:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8000ec0:	7c7b      	ldrb	r3, [r7, #17]
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	b21a      	sxth	r2, r3
 8000ec6:	7c3b      	ldrb	r3, [r7, #16]
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	b21a      	sxth	r2, r3
 8000ece:	4b2f      	ldr	r3, [pc, #188]	@ (8000f8c <TrimRead+0x19c>)
 8000ed0:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8000ed2:	7cfb      	ldrb	r3, [r7, #19]
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	b21a      	sxth	r2, r3
 8000ed8:	7cbb      	ldrb	r3, [r7, #18]
 8000eda:	b21b      	sxth	r3, r3
 8000edc:	4313      	orrs	r3, r2
 8000ede:	b21a      	sxth	r2, r3
 8000ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f90 <TrimRead+0x1a0>)
 8000ee2:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8000ee4:	7d7b      	ldrb	r3, [r7, #21]
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	b21a      	sxth	r2, r3
 8000eea:	7d3b      	ldrb	r3, [r7, #20]
 8000eec:	b21b      	sxth	r3, r3
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	b21a      	sxth	r2, r3
 8000ef2:	4b28      	ldr	r3, [pc, #160]	@ (8000f94 <TrimRead+0x1a4>)
 8000ef4:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8000ef6:	7dfb      	ldrb	r3, [r7, #23]
 8000ef8:	021b      	lsls	r3, r3, #8
 8000efa:	b21a      	sxth	r2, r3
 8000efc:	7dbb      	ldrb	r3, [r7, #22]
 8000efe:	b21b      	sxth	r3, r3
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b21a      	sxth	r2, r3
 8000f04:	4b24      	ldr	r3, [pc, #144]	@ (8000f98 <TrimRead+0x1a8>)
 8000f06:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8000f08:	7e3b      	ldrb	r3, [r7, #24]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	4b23      	ldr	r3, [pc, #140]	@ (8000f9c <TrimRead+0x1ac>)
 8000f0e:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8000f10:	7ebb      	ldrb	r3, [r7, #26]
 8000f12:	021b      	lsls	r3, r3, #8
 8000f14:	b21a      	sxth	r2, r3
 8000f16:	7e7b      	ldrb	r3, [r7, #25]
 8000f18:	b21b      	sxth	r3, r3
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	b21a      	sxth	r2, r3
 8000f1e:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <TrimRead+0x1b0>)
 8000f20:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8000f22:	7efb      	ldrb	r3, [r7, #27]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa4 <TrimRead+0x1b4>)
 8000f28:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8000f2a:	7f3b      	ldrb	r3, [r7, #28]
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	b21a      	sxth	r2, r3
 8000f30:	7f7b      	ldrb	r3, [r7, #29]
 8000f32:	b21b      	sxth	r3, r3
 8000f34:	f003 030f 	and.w	r3, r3, #15
 8000f38:	b21b      	sxth	r3, r3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b21a      	sxth	r2, r3
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <TrimRead+0x1b8>)
 8000f40:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8000f42:	7fbb      	ldrb	r3, [r7, #30]
 8000f44:	011b      	lsls	r3, r3, #4
 8000f46:	b21a      	sxth	r2, r3
 8000f48:	7f7b      	ldrb	r3, [r7, #29]
 8000f4a:	091b      	lsrs	r3, r3, #4
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	b21b      	sxth	r3, r3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	b21a      	sxth	r2, r3
 8000f54:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <TrimRead+0x1bc>)
 8000f56:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8000f58:	7ffb      	ldrb	r3, [r7, #31]
 8000f5a:	b21a      	sxth	r2, r3
 8000f5c:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <TrimRead+0x1c0>)
 8000f5e:	801a      	strh	r2, [r3, #0]
}
 8000f60:	bf00      	nop
 8000f62:	3720      	adds	r7, #32
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000284 	.word	0x20000284
 8000f6c:	20000208 	.word	0x20000208
 8000f70:	20000210 	.word	0x20000210
 8000f74:	20000212 	.word	0x20000212
 8000f78:	2000020a 	.word	0x2000020a
 8000f7c:	20000214 	.word	0x20000214
 8000f80:	20000216 	.word	0x20000216
 8000f84:	20000218 	.word	0x20000218
 8000f88:	2000021a 	.word	0x2000021a
 8000f8c:	2000021c 	.word	0x2000021c
 8000f90:	2000021e 	.word	0x2000021e
 8000f94:	20000220 	.word	0x20000220
 8000f98:	20000222 	.word	0x20000222
 8000f9c:	2000020c 	.word	0x2000020c
 8000fa0:	20000224 	.word	0x20000224
 8000fa4:	2000020e 	.word	0x2000020e
 8000fa8:	20000226 	.word	0x20000226
 8000fac:	20000228 	.word	0x20000228
 8000fb0:	2000022a 	.word	0x2000022a

08000fb4 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b089      	sub	sp, #36	@ 0x24
 8000fb8:	af04      	add	r7, sp, #16
 8000fba:	4604      	mov	r4, r0
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4623      	mov	r3, r4
 8000fc4:	71fb      	strb	r3, [r7, #7]
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71bb      	strb	r3, [r7, #6]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	717b      	strb	r3, [r7, #5]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8000fd2:	f7ff ff0d 	bl	8000df0 <TrimRead>


	uint8_t datatowrite = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8000fde:	23b6      	movs	r3, #182	@ 0xb6
 8000fe0:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000fe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe6:	9302      	str	r3, [sp, #8]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	f107 030f 	add.w	r3, r7, #15
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	22e0      	movs	r2, #224	@ 0xe0
 8000ff6:	21ec      	movs	r1, #236	@ 0xec
 8000ff8:	4858      	ldr	r0, [pc, #352]	@ (800115c <BME280_Config+0x1a8>)
 8000ffa:	f002 fc37 	bl	800386c <HAL_I2C_Mem_Write>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d002      	beq.n	800100a <BME280_Config+0x56>
	{
		return -1;
 8001004:	f04f 33ff 	mov.w	r3, #4294967295
 8001008:	e0a3      	b.n	8001152 <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 800100a:	2064      	movs	r0, #100	@ 0x64
 800100c:	f001 ffea 	bl	8002fe4 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8001010:	797b      	ldrb	r3, [r7, #5]
 8001012:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001014:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001018:	9302      	str	r3, [sp, #8]
 800101a:	2301      	movs	r3, #1
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	f107 030f 	add.w	r3, r7, #15
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2301      	movs	r3, #1
 8001026:	22f2      	movs	r2, #242	@ 0xf2
 8001028:	21ec      	movs	r1, #236	@ 0xec
 800102a:	484c      	ldr	r0, [pc, #304]	@ (800115c <BME280_Config+0x1a8>)
 800102c:	f002 fc1e 	bl	800386c <HAL_I2C_Mem_Write>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d002      	beq.n	800103c <BME280_Config+0x88>
	{
		return -1;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
 800103a:	e08a      	b.n	8001152 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 800103c:	2064      	movs	r0, #100	@ 0x64
 800103e:	f001 ffd1 	bl	8002fe4 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 8001042:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	2301      	movs	r3, #1
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	f107 030e 	add.w	r3, r7, #14
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	22f2      	movs	r2, #242	@ 0xf2
 8001056:	21ec      	movs	r1, #236	@ 0xec
 8001058:	4840      	ldr	r0, [pc, #256]	@ (800115c <BME280_Config+0x1a8>)
 800105a:	f002 fd01 	bl	8003a60 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800105e:	7bba      	ldrb	r2, [r7, #14]
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	429a      	cmp	r2, r3
 8001064:	d002      	beq.n	800106c <BME280_Config+0xb8>
	{
		return -1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	e072      	b.n	8001152 <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 800106c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001070:	015b      	lsls	r3, r3, #5
 8001072:	b25a      	sxtb	r2, r3
 8001074:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	b25b      	sxtb	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b25b      	sxtb	r3, r3
 8001080:	b2db      	uxtb	r3, r3
 8001082:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001084:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	2301      	movs	r3, #1
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	f107 030f 	add.w	r3, r7, #15
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	22f5      	movs	r2, #245	@ 0xf5
 8001098:	21ec      	movs	r1, #236	@ 0xec
 800109a:	4830      	ldr	r0, [pc, #192]	@ (800115c <BME280_Config+0x1a8>)
 800109c:	f002 fbe6 	bl	800386c <HAL_I2C_Mem_Write>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d002      	beq.n	80010ac <BME280_Config+0xf8>
	{
		return -1;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	e052      	b.n	8001152 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80010ac:	2064      	movs	r0, #100	@ 0x64
 80010ae:	f001 ff99 	bl	8002fe4 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 80010b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b6:	9302      	str	r3, [sp, #8]
 80010b8:	2301      	movs	r3, #1
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	f107 030e 	add.w	r3, r7, #14
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2301      	movs	r3, #1
 80010c4:	22f5      	movs	r2, #245	@ 0xf5
 80010c6:	21ec      	movs	r1, #236	@ 0xec
 80010c8:	4824      	ldr	r0, [pc, #144]	@ (800115c <BME280_Config+0x1a8>)
 80010ca:	f002 fcc9 	bl	8003a60 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80010ce:	7bba      	ldrb	r2, [r7, #14]
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d002      	beq.n	80010dc <BME280_Config+0x128>
	{
		return -1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	e03a      	b.n	8001152 <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	015b      	lsls	r3, r3, #5
 80010e0:	b25a      	sxtb	r2, r3
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b25a      	sxtb	r2, r3
 80010ec:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80010f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010fc:	9302      	str	r3, [sp, #8]
 80010fe:	2301      	movs	r3, #1
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	f107 030f 	add.w	r3, r7, #15
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2301      	movs	r3, #1
 800110a:	22f4      	movs	r2, #244	@ 0xf4
 800110c:	21ec      	movs	r1, #236	@ 0xec
 800110e:	4813      	ldr	r0, [pc, #76]	@ (800115c <BME280_Config+0x1a8>)
 8001110:	f002 fbac 	bl	800386c <HAL_I2C_Mem_Write>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <BME280_Config+0x16c>
	{
		return -1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	e018      	b.n	8001152 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001120:	2064      	movs	r0, #100	@ 0x64
 8001122:	f001 ff5f 	bl	8002fe4 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8001126:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800112a:	9302      	str	r3, [sp, #8]
 800112c:	2301      	movs	r3, #1
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	f107 030e 	add.w	r3, r7, #14
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2301      	movs	r3, #1
 8001138:	22f4      	movs	r2, #244	@ 0xf4
 800113a:	21ec      	movs	r1, #236	@ 0xec
 800113c:	4807      	ldr	r0, [pc, #28]	@ (800115c <BME280_Config+0x1a8>)
 800113e:	f002 fc8f 	bl	8003a60 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001142:	7bba      	ldrb	r2, [r7, #14]
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	429a      	cmp	r2, r3
 8001148:	d002      	beq.n	8001150 <BME280_Config+0x19c>
	{
		return -1;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295
 800114e:	e000      	b.n	8001152 <BME280_Config+0x19e>
	}

	return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	bd90      	pop	{r4, r7, pc}
 800115a:	bf00      	nop
 800115c:	20000284 	.word	0x20000284

08001160 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c2, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 8001166:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800116a:	9302      	str	r3, [sp, #8]
 800116c:	2301      	movs	r3, #1
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	4b1e      	ldr	r3, [pc, #120]	@ (80011ec <BMEReadRaw+0x8c>)
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2301      	movs	r3, #1
 8001176:	22d0      	movs	r2, #208	@ 0xd0
 8001178:	21ec      	movs	r1, #236	@ 0xec
 800117a:	481d      	ldr	r0, [pc, #116]	@ (80011f0 <BMEReadRaw+0x90>)
 800117c:	f002 fc70 	bl	8003a60 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001180:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <BMEReadRaw+0x8c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b60      	cmp	r3, #96	@ 0x60
 8001186:	d12a      	bne.n	80011de <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	2308      	movs	r3, #8
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	463b      	mov	r3, r7
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2301      	movs	r3, #1
 8001198:	22f7      	movs	r2, #247	@ 0xf7
 800119a:	21ec      	movs	r1, #236	@ 0xec
 800119c:	4814      	ldr	r0, [pc, #80]	@ (80011f0 <BMEReadRaw+0x90>)
 800119e:	f002 fc5f 	bl	8003a60 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80011a2:	783b      	ldrb	r3, [r7, #0]
 80011a4:	031a      	lsls	r2, r3, #12
 80011a6:	787b      	ldrb	r3, [r7, #1]
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	4313      	orrs	r3, r2
 80011ac:	78ba      	ldrb	r2, [r7, #2]
 80011ae:	0912      	lsrs	r2, r2, #4
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	4313      	orrs	r3, r2
 80011b4:	4a0f      	ldr	r2, [pc, #60]	@ (80011f4 <BMEReadRaw+0x94>)
 80011b6:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80011b8:	78fb      	ldrb	r3, [r7, #3]
 80011ba:	031a      	lsls	r2, r3, #12
 80011bc:	793b      	ldrb	r3, [r7, #4]
 80011be:	011b      	lsls	r3, r3, #4
 80011c0:	4313      	orrs	r3, r2
 80011c2:	797a      	ldrb	r2, [r7, #5]
 80011c4:	0912      	lsrs	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	4313      	orrs	r3, r2
 80011ca:	4a0b      	ldr	r2, [pc, #44]	@ (80011f8 <BMEReadRaw+0x98>)
 80011cc:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 80011ce:	79bb      	ldrb	r3, [r7, #6]
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	79fa      	ldrb	r2, [r7, #7]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	4a09      	ldr	r2, [pc, #36]	@ (80011fc <BMEReadRaw+0x9c>)
 80011d8:	6013      	str	r3, [r2, #0]

		return 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	e001      	b.n	80011e2 <BMEReadRaw+0x82>
	}

	else return -1;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200001f8 	.word	0x200001f8
 80011f0:	20000284 	.word	0x20000284
 80011f4:	20000200 	.word	0x20000200
 80011f8:	200001fc 	.word	0x200001fc
 80011fc:	20000204 	.word	0x20000204

08001200 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001200:	b480      	push	{r7}
 8001202:	b087      	sub	sp, #28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	10da      	asrs	r2, r3, #3
 800120c:	4b18      	ldr	r3, [pc, #96]	@ (8001270 <BME280_compensate_T_int32+0x70>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	4a17      	ldr	r2, [pc, #92]	@ (8001274 <BME280_compensate_T_int32+0x74>)
 8001216:	f9b2 2000 	ldrsh.w	r2, [r2]
 800121a:	fb02 f303 	mul.w	r3, r2, r3
 800121e:	12db      	asrs	r3, r3, #11
 8001220:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	111b      	asrs	r3, r3, #4
 8001226:	4a12      	ldr	r2, [pc, #72]	@ (8001270 <BME280_compensate_T_int32+0x70>)
 8001228:	8812      	ldrh	r2, [r2, #0]
 800122a:	1a9b      	subs	r3, r3, r2
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	1112      	asrs	r2, r2, #4
 8001230:	490f      	ldr	r1, [pc, #60]	@ (8001270 <BME280_compensate_T_int32+0x70>)
 8001232:	8809      	ldrh	r1, [r1, #0]
 8001234:	1a52      	subs	r2, r2, r1
 8001236:	fb02 f303 	mul.w	r3, r2, r3
 800123a:	131b      	asrs	r3, r3, #12
 800123c:	4a0e      	ldr	r2, [pc, #56]	@ (8001278 <BME280_compensate_T_int32+0x78>)
 800123e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001242:	fb02 f303 	mul.w	r3, r2, r3
 8001246:	139b      	asrs	r3, r3, #14
 8001248:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	4413      	add	r3, r2
 8001250:	4a0a      	ldr	r2, [pc, #40]	@ (800127c <BME280_compensate_T_int32+0x7c>)
 8001252:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001254:	4b09      	ldr	r3, [pc, #36]	@ (800127c <BME280_compensate_T_int32+0x7c>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	3380      	adds	r3, #128	@ 0x80
 8001260:	121b      	asrs	r3, r3, #8
 8001262:	60fb      	str	r3, [r7, #12]
	return T;
 8001264:	68fb      	ldr	r3, [r7, #12]
}
 8001266:	4618      	mov	r0, r3
 8001268:	371c      	adds	r7, #28
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	20000208 	.word	0x20000208
 8001274:	20000210 	.word	0x20000210
 8001278:	20000212 	.word	0x20000212
 800127c:	2000022c 	.word	0x2000022c

08001280 <BME280_compensate_P_int32>:
}

#elif SUPPORT_32BIT
// Returns pressure in Pa as unsigned 32 bit integer. Output value of “96386” equals 96386 Pa = 963.86 hPa
uint32_t BME280_compensate_P_int32(int32_t adc_P)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	int32_t var1, var2;
	uint32_t p;
	var1 = (((int32_t)t_fine)>>1) - (int32_t)64000;
 8001288:	4b49      	ldr	r3, [pc, #292]	@ (80013b0 <BME280_compensate_P_int32+0x130>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	105b      	asrs	r3, r3, #1
 800128e:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 8001292:	613b      	str	r3, [r7, #16]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)dig_P6);
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	109b      	asrs	r3, r3, #2
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	1092      	asrs	r2, r2, #2
 800129c:	fb02 f303 	mul.w	r3, r2, r3
 80012a0:	12db      	asrs	r3, r3, #11
 80012a2:	4a44      	ldr	r2, [pc, #272]	@ (80013b4 <BME280_compensate_P_int32+0x134>)
 80012a4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012a8:	fb02 f303 	mul.w	r3, r2, r3
 80012ac:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1*((int32_t)dig_P5))<<1);
 80012ae:	4b42      	ldr	r3, [pc, #264]	@ (80013b8 <BME280_compensate_P_int32+0x138>)
 80012b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b4:	461a      	mov	r2, r3
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	fb02 f303 	mul.w	r3, r2, r3
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	4413      	add	r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]
	var2 = (var2>>2)+(((int32_t)dig_P4)<<16);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	109a      	asrs	r2, r3, #2
 80012c8:	4b3c      	ldr	r3, [pc, #240]	@ (80013bc <BME280_compensate_P_int32+0x13c>)
 80012ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ce:	041b      	lsls	r3, r3, #16
 80012d0:	4413      	add	r3, r2
 80012d2:	60fb      	str	r3, [r7, #12]
	var1 = (((dig_P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)dig_P2) *var1)>>1))>>18;
 80012d4:	4b3a      	ldr	r3, [pc, #232]	@ (80013c0 <BME280_compensate_P_int32+0x140>)
 80012d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012da:	4619      	mov	r1, r3
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	109b      	asrs	r3, r3, #2
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	1092      	asrs	r2, r2, #2
 80012e4:	fb02 f303 	mul.w	r3, r2, r3
 80012e8:	135b      	asrs	r3, r3, #13
 80012ea:	fb01 f303 	mul.w	r3, r1, r3
 80012ee:	10da      	asrs	r2, r3, #3
 80012f0:	4b34      	ldr	r3, [pc, #208]	@ (80013c4 <BME280_compensate_P_int32+0x144>)
 80012f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f6:	4619      	mov	r1, r3
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	fb01 f303 	mul.w	r3, r1, r3
 80012fe:	105b      	asrs	r3, r3, #1
 8001300:	4413      	add	r3, r2
 8001302:	149b      	asrs	r3, r3, #18
 8001304:	613b      	str	r3, [r7, #16]
	var1 =((((32768+var1))*((int32_t)dig_P1))>>15);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800130c:	4a2e      	ldr	r2, [pc, #184]	@ (80013c8 <BME280_compensate_P_int32+0x148>)
 800130e:	8812      	ldrh	r2, [r2, #0]
 8001310:	fb02 f303 	mul.w	r3, r2, r3
 8001314:	13db      	asrs	r3, r3, #15
 8001316:	613b      	str	r3, [r7, #16]
	if (var1 == 0)
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <BME280_compensate_P_int32+0xa2>
	{
		return 0; // avoid exception caused by division by zero
 800131e:	2300      	movs	r3, #0
 8001320:	e041      	b.n	80013a6 <BME280_compensate_P_int32+0x126>
	}
	p = (((uint32_t)(((int32_t)1048576)-adc_P)-(var2>>12)))*3125;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	131b      	asrs	r3, r3, #12
 8001326:	461a      	mov	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4413      	add	r3, r2
 800132c:	4a27      	ldr	r2, [pc, #156]	@ (80013cc <BME280_compensate_P_int32+0x14c>)
 800132e:	fb02 f303 	mul.w	r3, r2, r3
 8001332:	f103 4343 	add.w	r3, r3, #3271557120	@ 0xc3000000
 8001336:	f503 03a0 	add.w	r3, r3, #5242880	@ 0x500000
 800133a:	617b      	str	r3, [r7, #20]
	if (p < 0x80000000)
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	2b00      	cmp	r3, #0
 8001340:	db06      	blt.n	8001350 <BME280_compensate_P_int32+0xd0>
	{
		p = (p << 1) / ((uint32_t)var1);
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	005a      	lsls	r2, r3, #1
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	fbb2 f3f3 	udiv	r3, r2, r3
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	e005      	b.n	800135c <BME280_compensate_P_int32+0xdc>
	}
	else
	{
		p = (p / (uint32_t)var1) * 2;
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	fbb2 f3f3 	udiv	r3, r2, r3
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	617b      	str	r3, [r7, #20]
	}
	var1 = (((int32_t)dig_P9) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 800135c:	4b1c      	ldr	r3, [pc, #112]	@ (80013d0 <BME280_compensate_P_int32+0x150>)
 800135e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001362:	4619      	mov	r1, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	08db      	lsrs	r3, r3, #3
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	08d2      	lsrs	r2, r2, #3
 800136c:	fb02 f303 	mul.w	r3, r2, r3
 8001370:	0b5b      	lsrs	r3, r3, #13
 8001372:	fb01 f303 	mul.w	r3, r1, r3
 8001376:	131b      	asrs	r3, r3, #12
 8001378:	613b      	str	r3, [r7, #16]
	var2 = (((int32_t)(p>>2)) * ((int32_t)dig_P8))>>13;
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	461a      	mov	r2, r3
 8001380:	4b14      	ldr	r3, [pc, #80]	@ (80013d4 <BME280_compensate_P_int32+0x154>)
 8001382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001386:	fb02 f303 	mul.w	r3, r2, r3
 800138a:	135b      	asrs	r3, r3, #13
 800138c:	60fb      	str	r3, [r7, #12]
	p = (uint32_t)((int32_t)p + ((var1 + var2 + dig_P7) >> 4));
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4413      	add	r3, r2
 8001394:	4a10      	ldr	r2, [pc, #64]	@ (80013d8 <BME280_compensate_P_int32+0x158>)
 8001396:	f9b2 2000 	ldrsh.w	r2, [r2]
 800139a:	4413      	add	r3, r2
 800139c:	111a      	asrs	r2, r3, #4
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	4413      	add	r3, r2
 80013a2:	617b      	str	r3, [r7, #20]
	return p;
 80013a4:	697b      	ldr	r3, [r7, #20]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	371c      	adds	r7, #28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	2000022c 	.word	0x2000022c
 80013b4:	2000021c 	.word	0x2000021c
 80013b8:	2000021a 	.word	0x2000021a
 80013bc:	20000218 	.word	0x20000218
 80013c0:	20000216 	.word	0x20000216
 80013c4:	20000214 	.word	0x20000214
 80013c8:	2000020a 	.word	0x2000020a
 80013cc:	fffff3cb 	.word	0xfffff3cb
 80013d0:	20000222 	.word	0x20000222
 80013d4:	20000220 	.word	0x20000220
 80013d8:	2000021e 	.word	0x2000021e

080013dc <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 80013e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001498 <bme280_compensate_H_int32+0xbc>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 80013ec:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	039a      	lsls	r2, r3, #14
 80013f2:	4b2a      	ldr	r3, [pc, #168]	@ (800149c <bme280_compensate_H_int32+0xc0>)
 80013f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f8:	051b      	lsls	r3, r3, #20
 80013fa:	1ad2      	subs	r2, r2, r3
 80013fc:	4b28      	ldr	r3, [pc, #160]	@ (80014a0 <bme280_compensate_H_int32+0xc4>)
 80013fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001402:	4619      	mov	r1, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	fb01 f303 	mul.w	r3, r1, r3
 800140a:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 800140c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001410:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001412:	4a24      	ldr	r2, [pc, #144]	@ (80014a4 <bme280_compensate_H_int32+0xc8>)
 8001414:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001418:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001420:	1292      	asrs	r2, r2, #10
 8001422:	4921      	ldr	r1, [pc, #132]	@ (80014a8 <bme280_compensate_H_int32+0xcc>)
 8001424:	8809      	ldrh	r1, [r1, #0]
 8001426:	4608      	mov	r0, r1
 8001428:	68f9      	ldr	r1, [r7, #12]
 800142a:	fb00 f101 	mul.w	r1, r0, r1
 800142e:	12c9      	asrs	r1, r1, #11
 8001430:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001434:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001438:	1292      	asrs	r2, r2, #10
 800143a:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800143e:	491b      	ldr	r1, [pc, #108]	@ (80014ac <bme280_compensate_H_int32+0xd0>)
 8001440:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001444:	fb01 f202 	mul.w	r2, r1, r2
 8001448:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
					8192) >> 14));
 800144c:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	13db      	asrs	r3, r3, #15
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	13d2      	asrs	r2, r2, #15
 800145c:	fb02 f303 	mul.w	r3, r2, r3
 8001460:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001462:	4a13      	ldr	r2, [pc, #76]	@ (80014b0 <bme280_compensate_H_int32+0xd4>)
 8001464:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001466:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 800146a:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001478:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001480:	bfa8      	it	ge
 8001482:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001486:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	131b      	asrs	r3, r3, #12
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	2000022c 	.word	0x2000022c
 800149c:	20000226 	.word	0x20000226
 80014a0:	20000228 	.word	0x20000228
 80014a4:	2000022a 	.word	0x2000022a
 80014a8:	2000020e 	.word	0x2000020e
 80014ac:	20000224 	.word	0x20000224
 80014b0:	2000020c 	.word	0x2000020c

080014b4 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 80014b8:	f7ff fe52 	bl	8001160 <BMEReadRaw>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d158      	bne.n	8001574 <BME280_Measure+0xc0>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 80014c2:	4b33      	ldr	r3, [pc, #204]	@ (8001590 <BME280_Measure+0xdc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80014ca:	d104      	bne.n	80014d6 <BME280_Measure+0x22>
 80014cc:	4b31      	ldr	r3, [pc, #196]	@ (8001594 <BME280_Measure+0xe0>)
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	e016      	b.n	8001504 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 80014d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001590 <BME280_Measure+0xdc>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fe90 	bl	8001200 <BME280_compensate_T_int32>
 80014e0:	4603      	mov	r3, r0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7fe ff8e 	bl	8000404 <__aeabi_i2d>
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <BME280_Measure+0xe4>)
 80014ee:	f7ff f91d 	bl	800072c <__aeabi_ddiv>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4610      	mov	r0, r2
 80014f8:	4619      	mov	r1, r3
 80014fa:	f7ff fae5 	bl	8000ac8 <__aeabi_d2f>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a24      	ldr	r2, [pc, #144]	@ (8001594 <BME280_Measure+0xe0>)
 8001502:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001504:	4b25      	ldr	r3, [pc, #148]	@ (800159c <BME280_Measure+0xe8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800150c:	d104      	bne.n	8001518 <BME280_Measure+0x64>
 800150e:	4b24      	ldr	r3, [pc, #144]	@ (80015a0 <BME280_Measure+0xec>)
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	e00b      	b.n	8001530 <BME280_Measure+0x7c>
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256

#elif SUPPORT_32BIT
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa
 8001518:	4b20      	ldr	r3, [pc, #128]	@ (800159c <BME280_Measure+0xe8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff feaf 	bl	8001280 <BME280_compensate_P_int32>
 8001522:	4603      	mov	r3, r0
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fbd5 	bl	8000cd4 <__aeabi_ui2f>
 800152a:	4603      	mov	r3, r0
 800152c:	4a1c      	ldr	r2, [pc, #112]	@ (80015a0 <BME280_Measure+0xec>)
 800152e:	6013      	str	r3, [r2, #0]

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001530:	4b1c      	ldr	r3, [pc, #112]	@ (80015a4 <BME280_Measure+0xf0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001538:	d104      	bne.n	8001544 <BME280_Measure+0x90>
 800153a:	4b1b      	ldr	r3, [pc, #108]	@ (80015a8 <BME280_Measure+0xf4>)
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001542:	e023      	b.n	800158c <BME280_Measure+0xd8>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001544:	4b17      	ldr	r3, [pc, #92]	@ (80015a4 <BME280_Measure+0xf0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff47 	bl	80013dc <bme280_compensate_H_int32>
 800154e:	4603      	mov	r3, r0
 8001550:	4618      	mov	r0, r3
 8001552:	f7fe ff47 	bl	80003e4 <__aeabi_ui2d>
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	4b14      	ldr	r3, [pc, #80]	@ (80015ac <BME280_Measure+0xf8>)
 800155c:	f7ff f8e6 	bl	800072c <__aeabi_ddiv>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff faae 	bl	8000ac8 <__aeabi_d2f>
 800156c:	4603      	mov	r3, r0
 800156e:	4a0e      	ldr	r2, [pc, #56]	@ (80015a8 <BME280_Measure+0xf4>)
 8001570:	6013      	str	r3, [r2, #0]
}
 8001572:	e00b      	b.n	800158c <BME280_Measure+0xd8>
		Temperature = Pressure = Humidity = 0;
 8001574:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <BME280_Measure+0xf4>)
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <BME280_Measure+0xf4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a07      	ldr	r2, [pc, #28]	@ (80015a0 <BME280_Measure+0xec>)
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <BME280_Measure+0xec>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a02      	ldr	r2, [pc, #8]	@ (8001594 <BME280_Measure+0xe0>)
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200001fc 	.word	0x200001fc
 8001594:	20000334 	.word	0x20000334
 8001598:	40590000 	.word	0x40590000
 800159c:	20000200 	.word	0x20000200
 80015a0:	20000338 	.word	0x20000338
 80015a4:	20000204 	.word	0x20000204
 80015a8:	2000033c 	.word	0x2000033c
 80015ac:	40900000 	.word	0x40900000

080015b0 <Decimal_To_BCD>:
RTC_TimeTypeDef sTime = {0};
RTC_DateTypeDef DateToUpdate = {0};
RTC_AlarmTypeDef sAlarm = {0};
RTC_DateTypeDef sDate = {0};

uint8_t Decimal_To_BCD(uint8_t val) {
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
    return ((val / 10) << 4) | (val % 10);
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	4a0d      	ldr	r2, [pc, #52]	@ (80015f4 <Decimal_To_BCD+0x44>)
 80015be:	fba2 2303 	umull	r2, r3, r2, r3
 80015c2:	08db      	lsrs	r3, r3, #3
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	b258      	sxtb	r0, r3
 80015ca:	79fa      	ldrb	r2, [r7, #7]
 80015cc:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <Decimal_To_BCD+0x44>)
 80015ce:	fba3 1302 	umull	r1, r3, r3, r2
 80015d2:	08d9      	lsrs	r1, r3, #3
 80015d4:	460b      	mov	r3, r1
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	b25b      	sxtb	r3, r3
 80015e2:	4303      	orrs	r3, r0
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	b2db      	uxtb	r3, r3
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	cccccccd 	.word	0xcccccccd

080015f8 <BCD_To_Decimal>:

uint8_t BCD_To_Decimal(uint8_t bcd) {
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
   return ((bcd >> 4) * 10) + (bcd & 0x0F);
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	091b      	lsrs	r3, r3, #4
 8001606:	b2db      	uxtb	r3, r3
 8001608:	461a      	mov	r2, r3
 800160a:	0092      	lsls	r2, r2, #2
 800160c:	4413      	add	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	b2da      	uxtb	r2, r3
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	f003 030f 	and.w	r3, r3, #15
 8001618:	b2db      	uxtb	r3, r3
 800161a:	4413      	add	r3, r2
 800161c:	b2db      	uxtb	r3, r3
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <checkShouldGoToTimer.1>:
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
  ssd1306_Init();
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);

  void checkShouldGoToTimer()
  {
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	f8c7 c004 	str.w	ip, [r7, #4]
    uint8_t rawCounter = __HAL_TIM_GET_COUNTER(&htim2);
 8001632:	4b0a      	ldr	r3, [pc, #40]	@ (800165c <checkShouldGoToTimer.1+0x34>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001638:	73fb      	strb	r3, [r7, #15]

    if (rawCounter != prevCounter)
 800163a:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <checkShouldGoToTimer.1+0x38>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	7bfa      	ldrb	r2, [r7, #15]
 8001640:	429a      	cmp	r2, r3
 8001642:	d006      	beq.n	8001652 <checkShouldGoToTimer.1+0x2a>
    {
      activeScreen = screenTimer;
 8001644:	4b07      	ldr	r3, [pc, #28]	@ (8001664 <checkShouldGoToTimer.1+0x3c>)
 8001646:	781a      	ldrb	r2, [r3, #0]
 8001648:	4b07      	ldr	r3, [pc, #28]	@ (8001668 <checkShouldGoToTimer.1+0x40>)
 800164a:	701a      	strb	r2, [r3, #0]
      prevCounter = rawCounter;
 800164c:	4a04      	ldr	r2, [pc, #16]	@ (8001660 <checkShouldGoToTimer.1+0x38>)
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	7013      	strb	r3, [r2, #0]
    }
  }
 8001652:	bf00      	nop
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	200002ec 	.word	0x200002ec
 8001660:	2000034d 	.word	0x2000034d
 8001664:	20000001 	.word	0x20000001
 8001668:	20000343 	.word	0x20000343

0800166c <main>:
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af02      	add	r7, sp, #8
int main(void)
 8001672:	f107 0310 	add.w	r3, r7, #16
 8001676:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8001678:	f001 fc52 	bl	8002f20 <HAL_Init>
  SystemClock_Config();
 800167c:	f000 fb8e 	bl	8001d9c <SystemClock_Config>
  MX_GPIO_Init();
 8001680:	f000 fd0c 	bl	800209c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001684:	f000 fbe8 	bl	8001e58 <MX_I2C1_Init>
  MX_RTC_Init();
 8001688:	f000 fc42 	bl	8001f10 <MX_RTC_Init>
  MX_TIM2_Init();
 800168c:	f000 fcb4 	bl	8001ff8 <MX_TIM2_Init>
  MX_I2C2_Init();
 8001690:	f000 fc10 	bl	8001eb4 <MX_I2C2_Init>
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001694:	2304      	movs	r3, #4
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	2300      	movs	r3, #0
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2303      	movs	r3, #3
 800169e:	2201      	movs	r2, #1
 80016a0:	2105      	movs	r1, #5
 80016a2:	2002      	movs	r0, #2
 80016a4:	f7ff fc86 	bl	8000fb4 <BME280_Config>
  ssd1306_Init();
 80016a8:	f000 ff88 	bl	80025bc <ssd1306_Init>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80016ac:	213c      	movs	r1, #60	@ 0x3c
 80016ae:	4821      	ldr	r0, [pc, #132]	@ (8001734 <main+0xc8>)
 80016b0:	f004 fcdc 	bl	800606c <HAL_TIM_Encoder_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  ssd1306_Fill(Black);
 80016b4:	2000      	movs	r0, #0
 80016b6:	f000 ffeb 	bl	8002690 <ssd1306_Fill>

	  if (activeScreen == screenTime)
 80016ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001738 <main+0xcc>)
 80016bc:	781a      	ldrb	r2, [r3, #0]
 80016be:	4b1f      	ldr	r3, [pc, #124]	@ (800173c <main+0xd0>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d104      	bne.n	80016d0 <main+0x64>
	  {
		  printTimeScreen();
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	469c      	mov	ip, r3
 80016ca:	f000 f841 	bl	8001750 <printTimeScreen.0>
 80016ce:	e02a      	b.n	8001726 <main+0xba>
	  } else if (activeScreen == screenWeather)
 80016d0:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <main+0xcc>)
 80016d2:	781a      	ldrb	r2, [r3, #0]
 80016d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001740 <main+0xd4>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d104      	bne.n	80016e6 <main+0x7a>
	  {
		  printWeatherScreen();
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	469c      	mov	ip, r3
 80016e0:	f000 f8b6 	bl	8001850 <printWeatherScreen.2>
 80016e4:	e01f      	b.n	8001726 <main+0xba>
	  } else if (activeScreen == screenTimer)
 80016e6:	4b14      	ldr	r3, [pc, #80]	@ (8001738 <main+0xcc>)
 80016e8:	781a      	ldrb	r2, [r3, #0]
 80016ea:	4b16      	ldr	r3, [pc, #88]	@ (8001744 <main+0xd8>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d104      	bne.n	80016fc <main+0x90>
	  {
		  printTimerScreen();
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	469c      	mov	ip, r3
 80016f6:	f000 f921 	bl	800193c <printTimerScreen.3>
 80016fa:	e014      	b.n	8001726 <main+0xba>
	  } else if (activeScreen == screenMenu)
 80016fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <main+0xcc>)
 80016fe:	781a      	ldrb	r2, [r3, #0]
 8001700:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <main+0xdc>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d104      	bne.n	8001712 <main+0xa6>
	  {
		  printMenuScreen();
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	469c      	mov	ip, r3
 800170c:	f000 fa14 	bl	8001b38 <printMenuScreen.4>
 8001710:	e009      	b.n	8001726 <main+0xba>
	  } else if (activeScreen == screenSetTime)
 8001712:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <main+0xcc>)
 8001714:	781a      	ldrb	r2, [r3, #0]
 8001716:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <main+0xe0>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d103      	bne.n	8001726 <main+0xba>
	  {
		  printSetTimeScreen();
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	469c      	mov	ip, r3
 8001722:	f000 fa85 	bl	8001c30 <printSetTimeScreen.5>
	  }

	  ssd1306_UpdateScreen();
 8001726:	f000 ffcb 	bl	80026c0 <ssd1306_UpdateScreen>

	  checkAlarm();
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	469c      	mov	ip, r3
 800172e:	f000 fb0b 	bl	8001d48 <checkAlarm.6>
	  ssd1306_Fill(Black);
 8001732:	e7bf      	b.n	80016b4 <main+0x48>
 8001734:	200002ec 	.word	0x200002ec
 8001738:	20000343 	.word	0x20000343
 800173c:	20000344 	.word	0x20000344
 8001740:	20000000 	.word	0x20000000
 8001744:	20000001 	.word	0x20000001
 8001748:	20000002 	.word	0x20000002
 800174c:	20000003 	.word	0x20000003

08001750 <printTimeScreen.0>:
  {
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af02      	add	r7, sp, #8
 8001756:	4663      	mov	r3, ip
 8001758:	f8c7 c004 	str.w	ip, [r7, #4]
	  checkShouldGoToTimer();
 800175c:	469c      	mov	ip, r3
 800175e:	f7ff ff63 	bl	8001628 <checkShouldGoToTimer.1>
	  HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BCD);
 8001762:	2201      	movs	r2, #1
 8001764:	4932      	ldr	r1, [pc, #200]	@ (8001830 <printTimeScreen.0+0xe0>)
 8001766:	4833      	ldr	r0, [pc, #204]	@ (8001834 <printTimeScreen.0+0xe4>)
 8001768:	f003 fe42 	bl	80053f0 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &DateToUpdate, FORMAT_BCD);
 800176c:	2201      	movs	r2, #1
 800176e:	4932      	ldr	r1, [pc, #200]	@ (8001838 <printTimeScreen.0+0xe8>)
 8001770:	4830      	ldr	r0, [pc, #192]	@ (8001834 <printTimeScreen.0+0xe4>)
 8001772:	f003 ffcb 	bl	800570c <HAL_RTC_GetDate>
	  uint8_t timeHours = BCD_To_Decimal(sTime.Hours);
 8001776:	4b2e      	ldr	r3, [pc, #184]	@ (8001830 <printTimeScreen.0+0xe0>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff ff3c 	bl	80015f8 <BCD_To_Decimal>
 8001780:	4603      	mov	r3, r0
 8001782:	75fb      	strb	r3, [r7, #23]
	  uint8_t timeMinutes = BCD_To_Decimal(sTime.Minutes);
 8001784:	4b2a      	ldr	r3, [pc, #168]	@ (8001830 <printTimeScreen.0+0xe0>)
 8001786:	785b      	ldrb	r3, [r3, #1]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff35 	bl	80015f8 <BCD_To_Decimal>
 800178e:	4603      	mov	r3, r0
 8001790:	75bb      	strb	r3, [r7, #22]
	  uint8_t timeSeconds = BCD_To_Decimal(sTime.Seconds);
 8001792:	4b27      	ldr	r3, [pc, #156]	@ (8001830 <printTimeScreen.0+0xe0>)
 8001794:	789b      	ldrb	r3, [r3, #2]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ff2e 	bl	80015f8 <BCD_To_Decimal>
 800179c:	4603      	mov	r3, r0
 800179e:	757b      	strb	r3, [r7, #21]
	  sprintf(bufferHours, "%02d", timeHours);
 80017a0:	7dfa      	ldrb	r2, [r7, #23]
 80017a2:	f107 0310 	add.w	r3, r7, #16
 80017a6:	4925      	ldr	r1, [pc, #148]	@ (800183c <printTimeScreen.0+0xec>)
 80017a8:	4618      	mov	r0, r3
 80017aa:	f005 fd33 	bl	8007214 <siprintf>
	  sprintf(bufferMin, "%02d", timeMinutes);
 80017ae:	7dba      	ldrb	r2, [r7, #22]
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	4921      	ldr	r1, [pc, #132]	@ (800183c <printTimeScreen.0+0xec>)
 80017b6:	4618      	mov	r0, r3
 80017b8:	f005 fd2c 	bl	8007214 <siprintf>
	  sprintf(bufferSec, "%02d", timeSeconds);
 80017bc:	7d7a      	ldrb	r2, [r7, #21]
 80017be:	f107 0308 	add.w	r3, r7, #8
 80017c2:	491e      	ldr	r1, [pc, #120]	@ (800183c <printTimeScreen.0+0xec>)
 80017c4:	4618      	mov	r0, r3
 80017c6:	f005 fd25 	bl	8007214 <siprintf>
	  ssd1306_SetCursor(0, 0);
 80017ca:	2100      	movs	r1, #0
 80017cc:	2000      	movs	r0, #0
 80017ce:	f001 f8a7 	bl	8002920 <ssd1306_SetCursor>
	  ssd1306_WriteString(bufferHours, Font_16x26, White);
 80017d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001840 <printTimeScreen.0+0xf0>)
 80017d4:	f107 0010 	add.w	r0, r7, #16
 80017d8:	2201      	movs	r2, #1
 80017da:	9200      	str	r2, [sp, #0]
 80017dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017de:	f001 f879 	bl	80028d4 <ssd1306_WriteString>
	  ssd1306_SetCursor(35, 0);
 80017e2:	2100      	movs	r1, #0
 80017e4:	2023      	movs	r0, #35	@ 0x23
 80017e6:	f001 f89b 	bl	8002920 <ssd1306_SetCursor>
	  ssd1306_WriteString(":", Font_16x26, White);
 80017ea:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <printTimeScreen.0+0xf0>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	9200      	str	r2, [sp, #0]
 80017f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017f2:	4814      	ldr	r0, [pc, #80]	@ (8001844 <printTimeScreen.0+0xf4>)
 80017f4:	f001 f86e 	bl	80028d4 <ssd1306_WriteString>
	  ssd1306_SetCursor(55, 0);
 80017f8:	2100      	movs	r1, #0
 80017fa:	2037      	movs	r0, #55	@ 0x37
 80017fc:	f001 f890 	bl	8002920 <ssd1306_SetCursor>
	  ssd1306_WriteString(bufferMin, Font_16x26, White);
 8001800:	4b0f      	ldr	r3, [pc, #60]	@ (8001840 <printTimeScreen.0+0xf0>)
 8001802:	f107 000c 	add.w	r0, r7, #12
 8001806:	2201      	movs	r2, #1
 8001808:	9200      	str	r2, [sp, #0]
 800180a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800180c:	f001 f862 	bl	80028d4 <ssd1306_WriteString>
	  ssd1306_SetCursor(95, 0);
 8001810:	2100      	movs	r1, #0
 8001812:	205f      	movs	r0, #95	@ 0x5f
 8001814:	f001 f884 	bl	8002920 <ssd1306_SetCursor>
	  ssd1306_WriteString(bufferSec, Font_7x10, White);
 8001818:	4b0b      	ldr	r3, [pc, #44]	@ (8001848 <printTimeScreen.0+0xf8>)
 800181a:	f107 0008 	add.w	r0, r7, #8
 800181e:	2201      	movs	r2, #1
 8001820:	9200      	str	r2, [sp, #0]
 8001822:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001824:	f001 f856 	bl	80028d4 <ssd1306_WriteString>
  }
 8001828:	bf00      	nop
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000350 	.word	0x20000350
 8001834:	200002d8 	.word	0x200002d8
 8001838:	20000354 	.word	0x20000354
 800183c:	0800aa88 	.word	0x0800aa88
 8001840:	0800d304 	.word	0x0800d304
 8001844:	0800aa90 	.word	0x0800aa90
 8001848:	0800d2ec 	.word	0x0800d2ec
 800184c:	00000000 	.word	0x00000000

08001850 <printWeatherScreen.2>:
  {
 8001850:	b580      	push	{r7, lr}
 8001852:	b08e      	sub	sp, #56	@ 0x38
 8001854:	af02      	add	r7, sp, #8
 8001856:	f8c7 c004 	str.w	ip, [r7, #4]
	  BME280_Measure();
 800185a:	f7ff fe2b 	bl	80014b4 <BME280_Measure>
	  HAL_Delay(100);
 800185e:	2064      	movs	r0, #100	@ 0x64
 8001860:	f001 fbc0 	bl	8002fe4 <HAL_Delay>
	  snprintf(bufferTemp, sizeof(bufferTemp), "%05.2f C", Temperature);
 8001864:	4b2e      	ldr	r3, [pc, #184]	@ (8001920 <printWeatherScreen.2+0xd0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fddd 	bl	8000428 <__aeabi_f2d>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001876:	e9cd 2300 	strd	r2, r3, [sp]
 800187a:	4a2a      	ldr	r2, [pc, #168]	@ (8001924 <printWeatherScreen.2+0xd4>)
 800187c:	210a      	movs	r1, #10
 800187e:	f005 fc95 	bl	80071ac <sniprintf>
	  snprintf(bufferPres, sizeof(bufferPres), "%06.2f mm p.c.", Pressure / 133.322);
 8001882:	4b29      	ldr	r3, [pc, #164]	@ (8001928 <printWeatherScreen.2+0xd8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fdce 	bl	8000428 <__aeabi_f2d>
 800188c:	a322      	add	r3, pc, #136	@ (adr r3, 8001918 <printWeatherScreen.2+0xc8>)
 800188e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001892:	f7fe ff4b 	bl	800072c <__aeabi_ddiv>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	f107 0014 	add.w	r0, r7, #20
 800189e:	e9cd 2300 	strd	r2, r3, [sp]
 80018a2:	4a22      	ldr	r2, [pc, #136]	@ (800192c <printWeatherScreen.2+0xdc>)
 80018a4:	210f      	movs	r1, #15
 80018a6:	f005 fc81 	bl	80071ac <sniprintf>
	  snprintf(bufferHum, sizeof(bufferHum), "%05.2f %%", Humidity);
 80018aa:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <printWeatherScreen.2+0xe0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fdba 	bl	8000428 <__aeabi_f2d>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	f107 0008 	add.w	r0, r7, #8
 80018bc:	e9cd 2300 	strd	r2, r3, [sp]
 80018c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001934 <printWeatherScreen.2+0xe4>)
 80018c2:	210a      	movs	r1, #10
 80018c4:	f005 fc72 	bl	80071ac <sniprintf>
	  ssd1306_SetCursor(0, 0);
 80018c8:	2100      	movs	r1, #0
 80018ca:	2000      	movs	r0, #0
 80018cc:	f001 f828 	bl	8002920 <ssd1306_SetCursor>
	  ssd1306_WriteString(bufferTemp, Font_11x18, White);
 80018d0:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <printWeatherScreen.2+0xe8>)
 80018d2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80018d6:	2201      	movs	r2, #1
 80018d8:	9200      	str	r2, [sp, #0]
 80018da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018dc:	f000 fffa 	bl	80028d4 <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 20);
 80018e0:	2114      	movs	r1, #20
 80018e2:	2000      	movs	r0, #0
 80018e4:	f001 f81c 	bl	8002920 <ssd1306_SetCursor>
	  ssd1306_WriteString(bufferHum, Font_11x18, White);
 80018e8:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <printWeatherScreen.2+0xe8>)
 80018ea:	f107 0008 	add.w	r0, r7, #8
 80018ee:	2201      	movs	r2, #1
 80018f0:	9200      	str	r2, [sp, #0]
 80018f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018f4:	f000 ffee 	bl	80028d4 <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 40);
 80018f8:	2128      	movs	r1, #40	@ 0x28
 80018fa:	2000      	movs	r0, #0
 80018fc:	f001 f810 	bl	8002920 <ssd1306_SetCursor>
	  ssd1306_WriteString(bufferPres, Font_11x18, White);
 8001900:	4b0d      	ldr	r3, [pc, #52]	@ (8001938 <printWeatherScreen.2+0xe8>)
 8001902:	f107 0014 	add.w	r0, r7, #20
 8001906:	2201      	movs	r2, #1
 8001908:	9200      	str	r2, [sp, #0]
 800190a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800190c:	f000 ffe2 	bl	80028d4 <ssd1306_WriteString>
  }
 8001910:	bf00      	nop
 8001912:	3730      	adds	r7, #48	@ 0x30
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	d2f1a9fc 	.word	0xd2f1a9fc
 800191c:	4060aa4d 	.word	0x4060aa4d
 8001920:	20000334 	.word	0x20000334
 8001924:	0800aa94 	.word	0x0800aa94
 8001928:	20000338 	.word	0x20000338
 800192c:	0800aaa0 	.word	0x0800aaa0
 8001930:	2000033c 	.word	0x2000033c
 8001934:	0800aab0 	.word	0x0800aab0
 8001938:	0800d2f8 	.word	0x0800d2f8

0800193c <printTimerScreen.3>:
  {
 800193c:	b580      	push	{r7, lr}
 800193e:	b08e      	sub	sp, #56	@ 0x38
 8001940:	af02      	add	r7, sp, #8
 8001942:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BCD);
 8001946:	2201      	movs	r2, #1
 8001948:	496f      	ldr	r1, [pc, #444]	@ (8001b08 <printTimerScreen.3+0x1cc>)
 800194a:	4870      	ldr	r0, [pc, #448]	@ (8001b0c <printTimerScreen.3+0x1d0>)
 800194c:	f003 fd50 	bl	80053f0 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &DateToUpdate, FORMAT_BCD);
 8001950:	2201      	movs	r2, #1
 8001952:	496f      	ldr	r1, [pc, #444]	@ (8001b10 <printTimerScreen.3+0x1d4>)
 8001954:	486d      	ldr	r0, [pc, #436]	@ (8001b0c <printTimerScreen.3+0x1d0>)
 8001956:	f003 fed9 	bl	800570c <HAL_RTC_GetDate>
	  uint32_t rawCounter = __HAL_TIM_GET_COUNTER(&htim2);
 800195a:	4b6e      	ldr	r3, [pc, #440]	@ (8001b14 <printTimerScreen.3+0x1d8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001960:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if (counterMode == 0) {
 8001962:	4b6d      	ldr	r3, [pc, #436]	@ (8001b18 <printTimerScreen.3+0x1dc>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d104      	bne.n	8001974 <printTimerScreen.3+0x38>
		  counter = rawCounter;
 800196a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4b6b      	ldr	r3, [pc, #428]	@ (8001b1c <printTimerScreen.3+0x1e0>)
 8001970:	701a      	strb	r2, [r3, #0]
 8001972:	e01f      	b.n	80019b4 <printTimerScreen.3+0x78>
      if (rawCounter == 13) {
 8001974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001976:	2b0d      	cmp	r3, #13
 8001978:	d107      	bne.n	800198a <printTimerScreen.3+0x4e>
        __HAL_TIM_SET_COUNTER(&htim2, 1); // 12 * 5 = 60
 800197a:	4b66      	ldr	r3, [pc, #408]	@ (8001b14 <printTimerScreen.3+0x1d8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2201      	movs	r2, #1
 8001980:	625a      	str	r2, [r3, #36]	@ 0x24
        counter = 0;
 8001982:	4b66      	ldr	r3, [pc, #408]	@ (8001b1c <printTimerScreen.3+0x1e0>)
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
 8001988:	e014      	b.n	80019b4 <printTimerScreen.3+0x78>
      } else if (rawCounter == 0) {
 800198a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800198c:	2b00      	cmp	r3, #0
 800198e:	d107      	bne.n	80019a0 <printTimerScreen.3+0x64>
        __HAL_TIM_SET_COUNTER(&htim2, 12); // 11 * 5 = 55
 8001990:	4b60      	ldr	r3, [pc, #384]	@ (8001b14 <printTimerScreen.3+0x1d8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	220c      	movs	r2, #12
 8001996:	625a      	str	r2, [r3, #36]	@ 0x24
        counter = 55;
 8001998:	4b60      	ldr	r3, [pc, #384]	@ (8001b1c <printTimerScreen.3+0x1e0>)
 800199a:	2237      	movs	r2, #55	@ 0x37
 800199c:	701a      	strb	r2, [r3, #0]
 800199e:	e009      	b.n	80019b4 <printTimerScreen.3+0x78>
        counter = (rawCounter - 1) * 5;
 80019a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	461a      	mov	r2, r3
 80019a6:	0092      	lsls	r2, r2, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	3b05      	subs	r3, #5
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	4b5a      	ldr	r3, [pc, #360]	@ (8001b1c <printTimerScreen.3+0x1e0>)
 80019b2:	701a      	strb	r2, [r3, #0]
	  uint8_t timerSeconds = BCD_To_Decimal(sAlarm.AlarmTime.Seconds);
 80019b4:	4b5a      	ldr	r3, [pc, #360]	@ (8001b20 <printTimerScreen.3+0x1e4>)
 80019b6:	789b      	ldrb	r3, [r3, #2]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fe1d 	bl	80015f8 <BCD_To_Decimal>
 80019be:	4603      	mov	r3, r0
 80019c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	  uint8_t timeSeconds = BCD_To_Decimal(sTime.Seconds);
 80019c4:	4b50      	ldr	r3, [pc, #320]	@ (8001b08 <printTimerScreen.3+0x1cc>)
 80019c6:	789b      	ldrb	r3, [r3, #2]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fe15 	bl	80015f8 <BCD_To_Decimal>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	  uint8_t timerMinutes = BCD_To_Decimal(sAlarm.AlarmTime.Minutes);
 80019d4:	4b52      	ldr	r3, [pc, #328]	@ (8001b20 <printTimerScreen.3+0x1e4>)
 80019d6:	785b      	ldrb	r3, [r3, #1]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fe0d 	bl	80015f8 <BCD_To_Decimal>
 80019de:	4603      	mov	r3, r0
 80019e0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	  uint8_t timeMinutes = BCD_To_Decimal(sTime.Minutes);
 80019e4:	4b48      	ldr	r3, [pc, #288]	@ (8001b08 <printTimerScreen.3+0x1cc>)
 80019e6:	785b      	ldrb	r3, [r3, #1]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fe05 	bl	80015f8 <BCD_To_Decimal>
 80019ee:	4603      	mov	r3, r0
 80019f0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	  uint8_t timerHours = BCD_To_Decimal(sAlarm.AlarmTime.Hours);
 80019f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001b20 <printTimerScreen.3+0x1e4>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fdfd 	bl	80015f8 <BCD_To_Decimal>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  uint8_t timeHours = BCD_To_Decimal(sTime.Hours);
 8001a04:	4b40      	ldr	r3, [pc, #256]	@ (8001b08 <printTimerScreen.3+0x1cc>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fdf5 	bl	80015f8 <BCD_To_Decimal>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint32_t totalSecondsAlarm = timerHours * 3600 + timerMinutes * 60 + timerSeconds;
 8001a14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a18:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8001a1c:	fb02 f103 	mul.w	r1, r2, r3
 8001a20:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8001a24:	4613      	mov	r3, r2
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	1a9b      	subs	r3, r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	18ca      	adds	r2, r1, r3
 8001a2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001a32:	4413      	add	r3, r2
 8001a34:	623b      	str	r3, [r7, #32]
    uint32_t totalSecondsCurrent = timeHours * 3600 + timeMinutes * 60 + timeSeconds;
 8001a36:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001a3a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8001a3e:	fb02 f103 	mul.w	r1, r2, r3
 8001a42:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001a46:	4613      	mov	r3, r2
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	1a9b      	subs	r3, r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	18ca      	adds	r2, r1, r3
 8001a50:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001a54:	4413      	add	r3, r2
 8001a56:	61fb      	str	r3, [r7, #28]
    uint32_t totalSecondsLeft = totalSecondsAlarm - totalSecondsCurrent;
 8001a58:	6a3a      	ldr	r2, [r7, #32]
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	61bb      	str	r3, [r7, #24]
    uint8_t fullMinutesLeft = (totalSecondsLeft / 60) % 60;
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	4a30      	ldr	r2, [pc, #192]	@ (8001b24 <printTimerScreen.3+0x1e8>)
 8001a64:	fba2 2303 	umull	r2, r3, r2, r3
 8001a68:	0959      	lsrs	r1, r3, #5
 8001a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b24 <printTimerScreen.3+0x1e8>)
 8001a6c:	fba3 2301 	umull	r2, r3, r3, r1
 8001a70:	095a      	lsrs	r2, r3, #5
 8001a72:	4613      	mov	r3, r2
 8001a74:	011b      	lsls	r3, r3, #4
 8001a76:	1a9b      	subs	r3, r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	1aca      	subs	r2, r1, r3
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	75fb      	strb	r3, [r7, #23]
    uint8_t secondsLeft = totalSecondsLeft % 60;
 8001a80:	69b9      	ldr	r1, [r7, #24]
 8001a82:	4b28      	ldr	r3, [pc, #160]	@ (8001b24 <printTimerScreen.3+0x1e8>)
 8001a84:	fba3 2301 	umull	r2, r3, r3, r1
 8001a88:	095a      	lsrs	r2, r3, #5
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	1a9b      	subs	r3, r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	1aca      	subs	r2, r1, r3
 8001a94:	4613      	mov	r3, r2
 8001a96:	75bb      	strb	r3, [r7, #22]
	  sprintf(bufferEncoderOrTimer, "%02d", alarmIsSet ? fullMinutesLeft : counter);
 8001a98:	4b23      	ldr	r3, [pc, #140]	@ (8001b28 <printTimerScreen.3+0x1ec>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <printTimerScreen.3+0x168>
 8001aa0:	7dfb      	ldrb	r3, [r7, #23]
 8001aa2:	e001      	b.n	8001aa8 <printTimerScreen.3+0x16c>
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b1c <printTimerScreen.3+0x1e0>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	f107 000c 	add.w	r0, r7, #12
 8001aac:	461a      	mov	r2, r3
 8001aae:	491f      	ldr	r1, [pc, #124]	@ (8001b2c <printTimerScreen.3+0x1f0>)
 8001ab0:	f005 fbb0 	bl	8007214 <siprintf>
	  ssd1306_SetCursor(20, 0);
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2014      	movs	r0, #20
 8001ab8:	f000 ff32 	bl	8002920 <ssd1306_SetCursor>
	  ssd1306_WriteString(bufferEncoderOrTimer, Font_16x26, White);
 8001abc:	4b1c      	ldr	r3, [pc, #112]	@ (8001b30 <printTimerScreen.3+0x1f4>)
 8001abe:	f107 000c 	add.w	r0, r7, #12
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	9200      	str	r2, [sp, #0]
 8001ac6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ac8:	f000 ff04 	bl	80028d4 <ssd1306_WriteString>
	  sprintf(bufferSecondsLeft, "%02d", secondsLeft);
 8001acc:	7dba      	ldrb	r2, [r7, #22]
 8001ace:	f107 0308 	add.w	r3, r7, #8
 8001ad2:	4916      	ldr	r1, [pc, #88]	@ (8001b2c <printTimerScreen.3+0x1f0>)
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f005 fb9d 	bl	8007214 <siprintf>
	  ssd1306_SetCursor(60, 0);
 8001ada:	2100      	movs	r1, #0
 8001adc:	203c      	movs	r0, #60	@ 0x3c
 8001ade:	f000 ff1f 	bl	8002920 <ssd1306_SetCursor>
	  ssd1306_WriteString(alarmIsSet ? bufferSecondsLeft : "", Font_16x26, White);
 8001ae2:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <printTimerScreen.3+0x1ec>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <printTimerScreen.3+0x1b4>
 8001aea:	f107 0008 	add.w	r0, r7, #8
 8001aee:	e000      	b.n	8001af2 <printTimerScreen.3+0x1b6>
 8001af0:	4810      	ldr	r0, [pc, #64]	@ (8001b34 <printTimerScreen.3+0x1f8>)
 8001af2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b30 <printTimerScreen.3+0x1f4>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	9200      	str	r2, [sp, #0]
 8001af8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001afa:	f000 feeb 	bl	80028d4 <ssd1306_WriteString>
  }
 8001afe:	bf00      	nop
 8001b00:	3730      	adds	r7, #48	@ 0x30
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000350 	.word	0x20000350
 8001b0c:	200002d8 	.word	0x200002d8
 8001b10:	20000354 	.word	0x20000354
 8001b14:	200002ec 	.word	0x200002ec
 8001b18:	20000340 	.word	0x20000340
 8001b1c:	2000034c 	.word	0x2000034c
 8001b20:	20000358 	.word	0x20000358
 8001b24:	88888889 	.word	0x88888889
 8001b28:	20000342 	.word	0x20000342
 8001b2c:	0800aa88 	.word	0x0800aa88
 8001b30:	0800d304 	.word	0x0800d304
 8001b34:	0800aabc 	.word	0x0800aabc

08001b38 <printMenuScreen.4>:
  {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af02      	add	r7, sp, #8
 8001b3e:	f8c7 c004 	str.w	ip, [r7, #4]
		uint8_t rawCounter = __HAL_TIM_GET_COUNTER(&htim2);
 8001b42:	4b33      	ldr	r3, [pc, #204]	@ (8001c10 <printMenuScreen.4+0xd8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b48:	73fb      	strb	r3, [r7, #15]
		if (rawCounter != prevCounter)
 8001b4a:	4b32      	ldr	r3, [pc, #200]	@ (8001c14 <printMenuScreen.4+0xdc>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	7bfa      	ldrb	r2, [r7, #15]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d011      	beq.n	8001b78 <printMenuScreen.4+0x40>
			if (activeMenuOption == menuSetTime)
 8001b54:	4b30      	ldr	r3, [pc, #192]	@ (8001c18 <printMenuScreen.4+0xe0>)
 8001b56:	781a      	ldrb	r2, [r3, #0]
 8001b58:	4b30      	ldr	r3, [pc, #192]	@ (8001c1c <printMenuScreen.4+0xe4>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d104      	bne.n	8001b6a <printMenuScreen.4+0x32>
				activeMenuOption = menuSetDate;
 8001b60:	4b2f      	ldr	r3, [pc, #188]	@ (8001c20 <printMenuScreen.4+0xe8>)
 8001b62:	781a      	ldrb	r2, [r3, #0]
 8001b64:	4b2c      	ldr	r3, [pc, #176]	@ (8001c18 <printMenuScreen.4+0xe0>)
 8001b66:	701a      	strb	r2, [r3, #0]
 8001b68:	e003      	b.n	8001b72 <printMenuScreen.4+0x3a>
				activeMenuOption = menuSetTime;
 8001b6a:	4b2c      	ldr	r3, [pc, #176]	@ (8001c1c <printMenuScreen.4+0xe4>)
 8001b6c:	781a      	ldrb	r2, [r3, #0]
 8001b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c18 <printMenuScreen.4+0xe0>)
 8001b70:	701a      	strb	r2, [r3, #0]
			prevCounter = rawCounter;
 8001b72:	4a28      	ldr	r2, [pc, #160]	@ (8001c14 <printMenuScreen.4+0xdc>)
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	7013      	strb	r3, [r2, #0]
    ssd1306_SetCursor(0, 0);
 8001b78:	2100      	movs	r1, #0
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f000 fed0 	bl	8002920 <ssd1306_SetCursor>
    ssd1306_FillRectangle(0, 0, 128, 20, activeMenuOption == menuSetTime ? White : Black);
 8001b80:	4b25      	ldr	r3, [pc, #148]	@ (8001c18 <printMenuScreen.4+0xe0>)
 8001b82:	781a      	ldrb	r2, [r3, #0]
 8001b84:	4b25      	ldr	r3, [pc, #148]	@ (8001c1c <printMenuScreen.4+0xe4>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	bf0c      	ite	eq
 8001b8c:	2301      	moveq	r3, #1
 8001b8e:	2300      	movne	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	2314      	movs	r3, #20
 8001b96:	2280      	movs	r2, #128	@ 0x80
 8001b98:	2100      	movs	r1, #0
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f000 fed8 	bl	8002950 <ssd1306_FillRectangle>
    ssd1306_WriteString("Set Time", Font_11x18, activeMenuOption == menuSetTime ? Black : White);
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c18 <printMenuScreen.4+0xe0>)
 8001ba2:	781a      	ldrb	r2, [r3, #0]
 8001ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c1c <printMenuScreen.4+0xe4>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	bf14      	ite	ne
 8001bac:	2301      	movne	r3, #1
 8001bae:	2300      	moveq	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c24 <printMenuScreen.4+0xec>)
 8001bb6:	9200      	str	r2, [sp, #0]
 8001bb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bba:	481b      	ldr	r0, [pc, #108]	@ (8001c28 <printMenuScreen.4+0xf0>)
 8001bbc:	f000 fe8a 	bl	80028d4 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 25);
 8001bc0:	2119      	movs	r1, #25
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f000 feac 	bl	8002920 <ssd1306_SetCursor>
    ssd1306_FillRectangle(0, 25, 128, 20, activeMenuOption == menuSetDate ? White : Black);
 8001bc8:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <printMenuScreen.4+0xe0>)
 8001bca:	781a      	ldrb	r2, [r3, #0]
 8001bcc:	4b14      	ldr	r3, [pc, #80]	@ (8001c20 <printMenuScreen.4+0xe8>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	bf0c      	ite	eq
 8001bd4:	2301      	moveq	r3, #1
 8001bd6:	2300      	movne	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	2314      	movs	r3, #20
 8001bde:	2280      	movs	r2, #128	@ 0x80
 8001be0:	2119      	movs	r1, #25
 8001be2:	2000      	movs	r0, #0
 8001be4:	f000 feb4 	bl	8002950 <ssd1306_FillRectangle>
    ssd1306_WriteString("Set Date", Font_11x18, activeMenuOption == menuSetDate ? Black : White);
 8001be8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c18 <printMenuScreen.4+0xe0>)
 8001bea:	781a      	ldrb	r2, [r3, #0]
 8001bec:	4b0c      	ldr	r3, [pc, #48]	@ (8001c20 <printMenuScreen.4+0xe8>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	bf14      	ite	ne
 8001bf4:	2301      	movne	r3, #1
 8001bf6:	2300      	moveq	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <printMenuScreen.4+0xec>)
 8001bfe:	9200      	str	r2, [sp, #0]
 8001c00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c02:	480a      	ldr	r0, [pc, #40]	@ (8001c2c <printMenuScreen.4+0xf4>)
 8001c04:	f000 fe66 	bl	80028d4 <ssd1306_WriteString>
  }
 8001c08:	bf00      	nop
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	200002ec 	.word	0x200002ec
 8001c14:	2000034d 	.word	0x2000034d
 8001c18:	20000345 	.word	0x20000345
 8001c1c:	20000346 	.word	0x20000346
 8001c20:	20000004 	.word	0x20000004
 8001c24:	0800d2f8 	.word	0x0800d2f8
 8001c28:	0800aac0 	.word	0x0800aac0
 8001c2c:	0800aacc 	.word	0x0800aacc

08001c30 <printSetTimeScreen.5>:
  {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	f8c7 c004 	str.w	ip, [r7, #4]
	  uint8_t rawCounter = __HAL_TIM_GET_COUNTER(&htim2);
 8001c3a:	4b37      	ldr	r3, [pc, #220]	@ (8001d18 <printSetTimeScreen.5+0xe8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c40:	75fb      	strb	r3, [r7, #23]
	  if (activeSetTimeOption == setTimeSecondsOption) {
 8001c42:	4b36      	ldr	r3, [pc, #216]	@ (8001d1c <printSetTimeScreen.5+0xec>)
 8001c44:	781a      	ldrb	r2, [r3, #0]
 8001c46:	4b36      	ldr	r3, [pc, #216]	@ (8001d20 <printSetTimeScreen.5+0xf0>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d103      	bne.n	8001c56 <printSetTimeScreen.5+0x26>
		  setTimeSeconds = rawCounter;
 8001c4e:	4a35      	ldr	r2, [pc, #212]	@ (8001d24 <printSetTimeScreen.5+0xf4>)
 8001c50:	7dfb      	ldrb	r3, [r7, #23]
 8001c52:	7013      	strb	r3, [r2, #0]
 8001c54:	e012      	b.n	8001c7c <printSetTimeScreen.5+0x4c>
	  } else if (activeSetTimeOption == setTimeMinutesOption) {
 8001c56:	4b31      	ldr	r3, [pc, #196]	@ (8001d1c <printSetTimeScreen.5+0xec>)
 8001c58:	781a      	ldrb	r2, [r3, #0]
 8001c5a:	4b33      	ldr	r3, [pc, #204]	@ (8001d28 <printSetTimeScreen.5+0xf8>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d103      	bne.n	8001c6a <printSetTimeScreen.5+0x3a>
		  setTimeMinutes = rawCounter;
 8001c62:	4a32      	ldr	r2, [pc, #200]	@ (8001d2c <printSetTimeScreen.5+0xfc>)
 8001c64:	7dfb      	ldrb	r3, [r7, #23]
 8001c66:	7013      	strb	r3, [r2, #0]
 8001c68:	e008      	b.n	8001c7c <printSetTimeScreen.5+0x4c>
	  } else if (activeSetTimeOption == setTimeHoursOption) {
 8001c6a:	4b2c      	ldr	r3, [pc, #176]	@ (8001d1c <printSetTimeScreen.5+0xec>)
 8001c6c:	781a      	ldrb	r2, [r3, #0]
 8001c6e:	4b30      	ldr	r3, [pc, #192]	@ (8001d30 <printSetTimeScreen.5+0x100>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d102      	bne.n	8001c7c <printSetTimeScreen.5+0x4c>
		  setTimeHours = rawCounter;
 8001c76:	4a2f      	ldr	r2, [pc, #188]	@ (8001d34 <printSetTimeScreen.5+0x104>)
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
 8001c7a:	7013      	strb	r3, [r2, #0]
	  sprintf(bufferHours, "%02d", setTimeHours);
 8001c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d34 <printSetTimeScreen.5+0x104>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	f107 0310 	add.w	r3, r7, #16
 8001c86:	492c      	ldr	r1, [pc, #176]	@ (8001d38 <printSetTimeScreen.5+0x108>)
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f005 fac3 	bl	8007214 <siprintf>
	  sprintf(bufferMin, "%02d", setTimeMinutes);
 8001c8e:	4b27      	ldr	r3, [pc, #156]	@ (8001d2c <printSetTimeScreen.5+0xfc>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	f107 030c 	add.w	r3, r7, #12
 8001c98:	4927      	ldr	r1, [pc, #156]	@ (8001d38 <printSetTimeScreen.5+0x108>)
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f005 faba 	bl	8007214 <siprintf>
	  sprintf(bufferSec, "%02d", setTimeSeconds);
 8001ca0:	4b20      	ldr	r3, [pc, #128]	@ (8001d24 <printSetTimeScreen.5+0xf4>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	f107 0308 	add.w	r3, r7, #8
 8001caa:	4923      	ldr	r1, [pc, #140]	@ (8001d38 <printSetTimeScreen.5+0x108>)
 8001cac:	4618      	mov	r0, r3
 8001cae:	f005 fab1 	bl	8007214 <siprintf>
	  ssd1306_SetCursor(0, 0);
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f000 fe33 	bl	8002920 <ssd1306_SetCursor>
	  ssd1306_WriteString(bufferHours, Font_16x26, White);
 8001cba:	4b20      	ldr	r3, [pc, #128]	@ (8001d3c <printSetTimeScreen.5+0x10c>)
 8001cbc:	f107 0010 	add.w	r0, r7, #16
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	9200      	str	r2, [sp, #0]
 8001cc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cc6:	f000 fe05 	bl	80028d4 <ssd1306_WriteString>
	  ssd1306_SetCursor(35, 0);
 8001cca:	2100      	movs	r1, #0
 8001ccc:	2023      	movs	r0, #35	@ 0x23
 8001cce:	f000 fe27 	bl	8002920 <ssd1306_SetCursor>
	  ssd1306_WriteString(":", Font_16x26, White);
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d3c <printSetTimeScreen.5+0x10c>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	9200      	str	r2, [sp, #0]
 8001cd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cda:	4819      	ldr	r0, [pc, #100]	@ (8001d40 <printSetTimeScreen.5+0x110>)
 8001cdc:	f000 fdfa 	bl	80028d4 <ssd1306_WriteString>
	  ssd1306_SetCursor(55, 0);
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	2037      	movs	r0, #55	@ 0x37
 8001ce4:	f000 fe1c 	bl	8002920 <ssd1306_SetCursor>
	  ssd1306_WriteString(bufferMin, Font_16x26, White);
 8001ce8:	4b14      	ldr	r3, [pc, #80]	@ (8001d3c <printSetTimeScreen.5+0x10c>)
 8001cea:	f107 000c 	add.w	r0, r7, #12
 8001cee:	2201      	movs	r2, #1
 8001cf0:	9200      	str	r2, [sp, #0]
 8001cf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cf4:	f000 fdee 	bl	80028d4 <ssd1306_WriteString>
	  ssd1306_SetCursor(95, 0);
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	205f      	movs	r0, #95	@ 0x5f
 8001cfc:	f000 fe10 	bl	8002920 <ssd1306_SetCursor>
	  ssd1306_WriteString(bufferSec, Font_7x10, White);
 8001d00:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <printSetTimeScreen.5+0x114>)
 8001d02:	f107 0008 	add.w	r0, r7, #8
 8001d06:	2201      	movs	r2, #1
 8001d08:	9200      	str	r2, [sp, #0]
 8001d0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d0c:	f000 fde2 	bl	80028d4 <ssd1306_WriteString>
  }
 8001d10:	bf00      	nop
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	200002ec 	.word	0x200002ec
 8001d1c:	20000347 	.word	0x20000347
 8001d20:	20000348 	.word	0x20000348
 8001d24:	2000034b 	.word	0x2000034b
 8001d28:	20000005 	.word	0x20000005
 8001d2c:	2000034a 	.word	0x2000034a
 8001d30:	20000006 	.word	0x20000006
 8001d34:	20000349 	.word	0x20000349
 8001d38:	0800aa88 	.word	0x0800aa88
 8001d3c:	0800d304 	.word	0x0800d304
 8001d40:	0800aa90 	.word	0x0800aa90
 8001d44:	0800d2ec 	.word	0x0800d2ec

08001d48 <checkAlarm.6>:
  {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	f8c7 c004 	str.w	ip, [r7, #4]
    if (isAlarm == 1)
 8001d52:	4b0f      	ldr	r3, [pc, #60]	@ (8001d90 <checkAlarm.6+0x48>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d111      	bne.n	8001d7e <checkAlarm.6+0x36>
      alarmIterations++;
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d94 <checkAlarm.6+0x4c>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4b0c      	ldr	r3, [pc, #48]	@ (8001d94 <checkAlarm.6+0x4c>)
 8001d64:	701a      	strb	r2, [r3, #0]
      if ((alarmIterations % 2) == 0)
 8001d66:	4b0b      	ldr	r3, [pc, #44]	@ (8001d94 <checkAlarm.6+0x4c>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d109      	bne.n	8001d88 <checkAlarm.6+0x40>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8001d74:	2102      	movs	r1, #2
 8001d76:	4808      	ldr	r0, [pc, #32]	@ (8001d98 <checkAlarm.6+0x50>)
 8001d78:	f001 fc02 	bl	8003580 <HAL_GPIO_TogglePin>
  }
 8001d7c:	e004      	b.n	8001d88 <checkAlarm.6+0x40>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2102      	movs	r1, #2
 8001d82:	4805      	ldr	r0, [pc, #20]	@ (8001d98 <checkAlarm.6+0x50>)
 8001d84:	f001 fbe4 	bl	8003550 <HAL_GPIO_WritePin>
  }
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000341 	.word	0x20000341
 8001d94:	2000034e 	.word	0x2000034e
 8001d98:	40010800 	.word	0x40010800

08001d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b094      	sub	sp, #80	@ 0x50
 8001da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001da6:	2228      	movs	r2, #40	@ 0x28
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f005 faaf 	bl	800730e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001dcc:	2305      	movs	r3, #5
 8001dce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dd0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dde:	2301      	movs	r3, #1
 8001de0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001de2:	2302      	movs	r3, #2
 8001de4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001de6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001dea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001dec:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001df0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001df2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001df6:	4618      	mov	r0, r3
 8001df8:	f002 fc5a 	bl	80046b0 <HAL_RCC_OscConfig>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001e02:	f000 fb9d 	bl	8002540 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e06:	230f      	movs	r3, #15
 8001e08:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e16:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	2102      	movs	r1, #2
 8001e22:	4618      	mov	r0, r3
 8001e24:	f002 fec6 	bl	8004bb4 <HAL_RCC_ClockConfig>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001e2e:	f000 fb87 	bl	8002540 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e32:	2301      	movs	r3, #1
 8001e34:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001e36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e3a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e3c:	1d3b      	adds	r3, r7, #4
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 f846 	bl	8004ed0 <HAL_RCCEx_PeriphCLKConfig>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001e4a:	f000 fb79 	bl	8002540 <Error_Handler>
  }
}
 8001e4e:	bf00      	nop
 8001e50:	3750      	adds	r7, #80	@ 0x50
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e5e:	4a13      	ldr	r2, [pc, #76]	@ (8001eac <MX_I2C1_Init+0x54>)
 8001e60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001e62:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e64:	4a12      	ldr	r2, [pc, #72]	@ (8001eb0 <MX_I2C1_Init+0x58>)
 8001e66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e68:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e82:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e88:	4b07      	ldr	r3, [pc, #28]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e94:	4804      	ldr	r0, [pc, #16]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e96:	f001 fba5 	bl	80035e4 <HAL_I2C_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ea0:	f000 fb4e 	bl	8002540 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000230 	.word	0x20000230
 8001eac:	40005400 	.word	0x40005400
 8001eb0:	00061a80 	.word	0x00061a80

08001eb4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001eb8:	4b12      	ldr	r3, [pc, #72]	@ (8001f04 <MX_I2C2_Init+0x50>)
 8001eba:	4a13      	ldr	r2, [pc, #76]	@ (8001f08 <MX_I2C2_Init+0x54>)
 8001ebc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001ebe:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <MX_I2C2_Init+0x50>)
 8001ec0:	4a12      	ldr	r2, [pc, #72]	@ (8001f0c <MX_I2C2_Init+0x58>)
 8001ec2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f04 <MX_I2C2_Init+0x50>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001eca:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <MX_I2C2_Init+0x50>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <MX_I2C2_Init+0x50>)
 8001ed2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ed6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8001f04 <MX_I2C2_Init+0x50>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001ede:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <MX_I2C2_Init+0x50>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ee4:	4b07      	ldr	r3, [pc, #28]	@ (8001f04 <MX_I2C2_Init+0x50>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001eea:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <MX_I2C2_Init+0x50>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ef0:	4804      	ldr	r0, [pc, #16]	@ (8001f04 <MX_I2C2_Init+0x50>)
 8001ef2:	f001 fb77 	bl	80035e4 <HAL_I2C_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001efc:	f000 fb20 	bl	8002540 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20000284 	.word	0x20000284
 8001f08:	40005800 	.word	0x40005800
 8001f0c:	00061a80 	.word	0x00061a80

08001f10 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f16:	4b33      	ldr	r3, [pc, #204]	@ (8001fe4 <MX_RTC_Init+0xd4>)
 8001f18:	4a33      	ldr	r2, [pc, #204]	@ (8001fe8 <MX_RTC_Init+0xd8>)
 8001f1a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001f1c:	4b31      	ldr	r3, [pc, #196]	@ (8001fe4 <MX_RTC_Init+0xd4>)
 8001f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f22:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001f24:	4b2f      	ldr	r3, [pc, #188]	@ (8001fe4 <MX_RTC_Init+0xd4>)
 8001f26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f2a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f2c:	482d      	ldr	r0, [pc, #180]	@ (8001fe4 <MX_RTC_Init+0xd4>)
 8001f2e:	f003 f93b 	bl	80051a8 <HAL_RTC_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_RTC_Init+0x2c>
  {
    Error_Handler();
 8001f38:	f000 fb02 	bl	8002540 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  uint32_t backup_val = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	4829      	ldr	r0, [pc, #164]	@ (8001fe4 <MX_RTC_Init+0xd4>)
 8001f40:	f003 ffd6 	bl	8005ef0 <HAL_RTCEx_BKUPRead>
 8001f44:	6078      	str	r0, [r7, #4]
  if (backup_val != 0x32F2)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d044      	beq.n	8001fda <MX_RTC_Init+0xca>
  {
	  /* USER CODE END Check_RTC_BKUP */

	  /** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = 0x0;
 8001f50:	4b26      	ldr	r3, [pc, #152]	@ (8001fec <MX_RTC_Init+0xdc>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
	  sTime.Minutes = 0x0;
 8001f56:	4b25      	ldr	r3, [pc, #148]	@ (8001fec <MX_RTC_Init+0xdc>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	705a      	strb	r2, [r3, #1]
	  sTime.Seconds = 0x0;
 8001f5c:	4b23      	ldr	r3, [pc, #140]	@ (8001fec <MX_RTC_Init+0xdc>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	709a      	strb	r2, [r3, #2]

	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001f62:	2201      	movs	r2, #1
 8001f64:	4921      	ldr	r1, [pc, #132]	@ (8001fec <MX_RTC_Init+0xdc>)
 8001f66:	481f      	ldr	r0, [pc, #124]	@ (8001fe4 <MX_RTC_Init+0xd4>)
 8001f68:	f003 f9aa 	bl	80052c0 <HAL_RTC_SetTime>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_RTC_Init+0x66>
	  {
		Error_Handler();
 8001f72:	f000 fae5 	bl	8002540 <Error_Handler>
	  }
	  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f76:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff0 <MX_RTC_Init+0xe0>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
	  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff0 <MX_RTC_Init+0xe0>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	705a      	strb	r2, [r3, #1]
	  DateToUpdate.Date = 0x1;
 8001f82:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff0 <MX_RTC_Init+0xe0>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	709a      	strb	r2, [r3, #2]
	  DateToUpdate.Year = 0x0;
 8001f88:	4b19      	ldr	r3, [pc, #100]	@ (8001ff0 <MX_RTC_Init+0xe0>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	4917      	ldr	r1, [pc, #92]	@ (8001ff0 <MX_RTC_Init+0xe0>)
 8001f92:	4814      	ldr	r0, [pc, #80]	@ (8001fe4 <MX_RTC_Init+0xd4>)
 8001f94:	f003 fb04 	bl	80055a0 <HAL_RTC_SetDate>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_RTC_Init+0x92>
	  {
		Error_Handler();
 8001f9e:	f000 facf 	bl	8002540 <Error_Handler>
	  }

	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = 0x0;
 8001fa2:	4b14      	ldr	r3, [pc, #80]	@ (8001ff4 <MX_RTC_Init+0xe4>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = 0x0;
 8001fa8:	4b12      	ldr	r3, [pc, #72]	@ (8001ff4 <MX_RTC_Init+0xe4>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = 0x0;
 8001fae:	4b11      	ldr	r3, [pc, #68]	@ (8001ff4 <MX_RTC_Init+0xe4>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	709a      	strb	r2, [r3, #2]
	  sAlarm.Alarm = RTC_ALARM_A;
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff4 <MX_RTC_Init+0xe4>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	605a      	str	r2, [r3, #4]
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	490d      	ldr	r1, [pc, #52]	@ (8001ff4 <MX_RTC_Init+0xe4>)
 8001fbe:	4809      	ldr	r0, [pc, #36]	@ (8001fe4 <MX_RTC_Init+0xd4>)
 8001fc0:	f003 fbf8 	bl	80057b4 <HAL_RTC_SetAlarm_IT>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_RTC_Init+0xbe>
	  {
		Error_Handler();
 8001fca:	f000 fab9 	bl	8002540 <Error_Handler>
	  }
	  /* USER CODE BEGIN RTC_Init 2 */

  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8001fce:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	4803      	ldr	r0, [pc, #12]	@ (8001fe4 <MX_RTC_Init+0xd4>)
 8001fd6:	f003 ff71 	bl	8005ebc <HAL_RTCEx_BKUPWrite>
} else {
	// do not initialize if we get data from backup
}
  /* USER CODE END RTC_Init 2 */

}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200002d8 	.word	0x200002d8
 8001fe8:	40002800 	.word	0x40002800
 8001fec:	20000350 	.word	0x20000350
 8001ff0:	20000354 	.word	0x20000354
 8001ff4:	20000358 	.word	0x20000358

08001ff8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08c      	sub	sp, #48	@ 0x30
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ffe:	f107 030c 	add.w	r3, r7, #12
 8002002:	2224      	movs	r2, #36	@ 0x24
 8002004:	2100      	movs	r1, #0
 8002006:	4618      	mov	r0, r3
 8002008:	f005 f981 	bl	800730e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800200c:	1d3b      	adds	r3, r7, #4
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002014:	4b20      	ldr	r3, [pc, #128]	@ (8002098 <MX_TIM2_Init+0xa0>)
 8002016:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800201a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800201c:	4b1e      	ldr	r3, [pc, #120]	@ (8002098 <MX_TIM2_Init+0xa0>)
 800201e:	2200      	movs	r2, #0
 8002020:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002022:	4b1d      	ldr	r3, [pc, #116]	@ (8002098 <MX_TIM2_Init+0xa0>)
 8002024:	2200      	movs	r2, #0
 8002026:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59;
 8002028:	4b1b      	ldr	r3, [pc, #108]	@ (8002098 <MX_TIM2_Init+0xa0>)
 800202a:	223b      	movs	r2, #59	@ 0x3b
 800202c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202e:	4b1a      	ldr	r3, [pc, #104]	@ (8002098 <MX_TIM2_Init+0xa0>)
 8002030:	2200      	movs	r2, #0
 8002032:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002034:	4b18      	ldr	r3, [pc, #96]	@ (8002098 <MX_TIM2_Init+0xa0>)
 8002036:	2200      	movs	r2, #0
 8002038:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800203a:	2301      	movs	r3, #1
 800203c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002042:	2301      	movs	r3, #1
 8002044:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002046:	2300      	movs	r3, #0
 8002048:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800204e:	2300      	movs	r3, #0
 8002050:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002052:	2301      	movs	r3, #1
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002056:	2300      	movs	r3, #0
 8002058:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800205e:	f107 030c 	add.w	r3, r7, #12
 8002062:	4619      	mov	r1, r3
 8002064:	480c      	ldr	r0, [pc, #48]	@ (8002098 <MX_TIM2_Init+0xa0>)
 8002066:	f003 ff5f 	bl	8005f28 <HAL_TIM_Encoder_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002070:	f000 fa66 	bl	8002540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002074:	2300      	movs	r3, #0
 8002076:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002078:	2300      	movs	r3, #0
 800207a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800207c:	1d3b      	adds	r3, r7, #4
 800207e:	4619      	mov	r1, r3
 8002080:	4805      	ldr	r0, [pc, #20]	@ (8002098 <MX_TIM2_Init+0xa0>)
 8002082:	f004 f907 	bl	8006294 <HAL_TIMEx_MasterConfigSynchronization>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800208c:	f000 fa58 	bl	8002540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002090:	bf00      	nop
 8002092:	3730      	adds	r7, #48	@ 0x30
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	200002ec 	.word	0x200002ec

0800209c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b088      	sub	sp, #32
 80020a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a2:	f107 0310 	add.w	r3, r7, #16
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b0:	4b37      	ldr	r3, [pc, #220]	@ (8002190 <MX_GPIO_Init+0xf4>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	4a36      	ldr	r2, [pc, #216]	@ (8002190 <MX_GPIO_Init+0xf4>)
 80020b6:	f043 0310 	orr.w	r3, r3, #16
 80020ba:	6193      	str	r3, [r2, #24]
 80020bc:	4b34      	ldr	r3, [pc, #208]	@ (8002190 <MX_GPIO_Init+0xf4>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f003 0310 	and.w	r3, r3, #16
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020c8:	4b31      	ldr	r3, [pc, #196]	@ (8002190 <MX_GPIO_Init+0xf4>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	4a30      	ldr	r2, [pc, #192]	@ (8002190 <MX_GPIO_Init+0xf4>)
 80020ce:	f043 0320 	orr.w	r3, r3, #32
 80020d2:	6193      	str	r3, [r2, #24]
 80020d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002190 <MX_GPIO_Init+0xf4>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002190 <MX_GPIO_Init+0xf4>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002190 <MX_GPIO_Init+0xf4>)
 80020e6:	f043 0304 	orr.w	r3, r3, #4
 80020ea:	6193      	str	r3, [r2, #24]
 80020ec:	4b28      	ldr	r3, [pc, #160]	@ (8002190 <MX_GPIO_Init+0xf4>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f8:	4b25      	ldr	r3, [pc, #148]	@ (8002190 <MX_GPIO_Init+0xf4>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	4a24      	ldr	r2, [pc, #144]	@ (8002190 <MX_GPIO_Init+0xf4>)
 80020fe:	f043 0308 	orr.w	r3, r3, #8
 8002102:	6193      	str	r3, [r2, #24]
 8002104:	4b22      	ldr	r3, [pc, #136]	@ (8002190 <MX_GPIO_Init+0xf4>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	603b      	str	r3, [r7, #0]
 800210e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Alarm_Led_GPIO_Port, Alarm_Led_Pin, GPIO_PIN_RESET);
 8002110:	2200      	movs	r2, #0
 8002112:	2102      	movs	r1, #2
 8002114:	481f      	ldr	r0, [pc, #124]	@ (8002194 <MX_GPIO_Init+0xf8>)
 8002116:	f001 fa1b 	bl	8003550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Alarm_Led_Pin */
  GPIO_InitStruct.Pin = Alarm_Led_Pin;
 800211a:	2302      	movs	r3, #2
 800211c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800211e:	2301      	movs	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002126:	2302      	movs	r3, #2
 8002128:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Alarm_Led_GPIO_Port, &GPIO_InitStruct);
 800212a:	f107 0310 	add.w	r3, r7, #16
 800212e:	4619      	mov	r1, r3
 8002130:	4818      	ldr	r0, [pc, #96]	@ (8002194 <MX_GPIO_Init+0xf8>)
 8002132:	f001 f889 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002136:	2308      	movs	r3, #8
 8002138:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800213a:	4b17      	ldr	r3, [pc, #92]	@ (8002198 <MX_GPIO_Init+0xfc>)
 800213c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002142:	f107 0310 	add.w	r3, r7, #16
 8002146:	4619      	mov	r1, r3
 8002148:	4812      	ldr	r0, [pc, #72]	@ (8002194 <MX_GPIO_Init+0xf8>)
 800214a:	f001 f87d 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800214e:	2302      	movs	r3, #2
 8002150:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002152:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <MX_GPIO_Init+0xfc>)
 8002154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215a:	f107 0310 	add.w	r3, r7, #16
 800215e:	4619      	mov	r1, r3
 8002160:	480e      	ldr	r0, [pc, #56]	@ (800219c <MX_GPIO_Init+0x100>)
 8002162:	f001 f871 	bl	8003248 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002166:	2200      	movs	r2, #0
 8002168:	2100      	movs	r1, #0
 800216a:	2007      	movs	r0, #7
 800216c:	f001 f835 	bl	80031da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002170:	2007      	movs	r0, #7
 8002172:	f001 f84e 	bl	8003212 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002176:	2200      	movs	r2, #0
 8002178:	2100      	movs	r1, #0
 800217a:	2009      	movs	r0, #9
 800217c:	f001 f82d 	bl	80031da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002180:	2009      	movs	r0, #9
 8002182:	f001 f846 	bl	8003212 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002186:	bf00      	nop
 8002188:	3720      	adds	r7, #32
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000
 8002194:	40010800 	.word	0x40010800
 8002198:	10110000 	.word	0x10110000
 800219c:	40010c00 	.word	0x40010c00

080021a0 <Set_RTC_Alarm>:

/* USER CODE BEGIN 4 */

void Set_RTC_Alarm(uint32_t timerMinutes)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  // Get the current time and date
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80021a8:	2201      	movs	r2, #1
 80021aa:	492e      	ldr	r1, [pc, #184]	@ (8002264 <Set_RTC_Alarm+0xc4>)
 80021ac:	482e      	ldr	r0, [pc, #184]	@ (8002268 <Set_RTC_Alarm+0xc8>)
 80021ae:	f003 f91f 	bl	80053f0 <HAL_RTC_GetTime>
  // Needed to read date as well due to a quirk
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD); 
 80021b2:	2201      	movs	r2, #1
 80021b4:	492d      	ldr	r1, [pc, #180]	@ (800226c <Set_RTC_Alarm+0xcc>)
 80021b6:	482c      	ldr	r0, [pc, #176]	@ (8002268 <Set_RTC_Alarm+0xc8>)
 80021b8:	f003 faa8 	bl	800570c <HAL_RTC_GetDate>

  // Calculate the new alarm time
  uint32_t minutes = BCD_To_Decimal(sTime.Minutes) + timerMinutes;
 80021bc:	4b29      	ldr	r3, [pc, #164]	@ (8002264 <Set_RTC_Alarm+0xc4>)
 80021be:	785b      	ldrb	r3, [r3, #1]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fa19 	bl	80015f8 <BCD_To_Decimal>
 80021c6:	4603      	mov	r3, r0
 80021c8:	461a      	mov	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]
  uint32_t new_minutes = minutes % 60;
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	4b27      	ldr	r3, [pc, #156]	@ (8002270 <Set_RTC_Alarm+0xd0>)
 80021d4:	fba3 1302 	umull	r1, r3, r3, r2
 80021d8:	0959      	lsrs	r1, r3, #5
 80021da:	460b      	mov	r3, r1
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	1a5b      	subs	r3, r3, r1
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	613b      	str	r3, [r7, #16]
  uint32_t new_hours = (BCD_To_Decimal(sTime.Hours) + (minutes / 60)) % 24;
 80021e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002264 <Set_RTC_Alarm+0xc4>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fa04 	bl	80015f8 <BCD_To_Decimal>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4619      	mov	r1, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	4a1e      	ldr	r2, [pc, #120]	@ (8002270 <Set_RTC_Alarm+0xd0>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	095b      	lsrs	r3, r3, #5
 80021fe:	18ca      	adds	r2, r1, r3
 8002200:	4b1c      	ldr	r3, [pc, #112]	@ (8002274 <Set_RTC_Alarm+0xd4>)
 8002202:	fba3 1302 	umull	r1, r3, r3, r2
 8002206:	0919      	lsrs	r1, r3, #4
 8002208:	460b      	mov	r3, r1
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	440b      	add	r3, r1
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	60fb      	str	r3, [r7, #12]

  sAlarm.AlarmTime.Hours = Decimal_To_BCD(new_hours);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff f9c9 	bl	80015b0 <Decimal_To_BCD>
 800221e:	4603      	mov	r3, r0
 8002220:	461a      	mov	r2, r3
 8002222:	4b15      	ldr	r3, [pc, #84]	@ (8002278 <Set_RTC_Alarm+0xd8>)
 8002224:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = Decimal_To_BCD(new_minutes);
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff f9c0 	bl	80015b0 <Decimal_To_BCD>
 8002230:	4603      	mov	r3, r0
 8002232:	461a      	mov	r2, r3
 8002234:	4b10      	ldr	r3, [pc, #64]	@ (8002278 <Set_RTC_Alarm+0xd8>)
 8002236:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = sTime.Seconds;
 8002238:	4b0a      	ldr	r3, [pc, #40]	@ (8002264 <Set_RTC_Alarm+0xc4>)
 800223a:	789a      	ldrb	r2, [r3, #2]
 800223c:	4b0e      	ldr	r3, [pc, #56]	@ (8002278 <Set_RTC_Alarm+0xd8>)
 800223e:	709a      	strb	r2, [r3, #2]

  // Set the alarm
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002240:	2201      	movs	r2, #1
 8002242:	490d      	ldr	r1, [pc, #52]	@ (8002278 <Set_RTC_Alarm+0xd8>)
 8002244:	4808      	ldr	r0, [pc, #32]	@ (8002268 <Set_RTC_Alarm+0xc8>)
 8002246:	f003 fab5 	bl	80057b4 <HAL_RTC_SetAlarm_IT>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <Set_RTC_Alarm+0xb4>
  {
    // Initialization Error
    Error_Handler();
 8002250:	f000 f976 	bl	8002540 <Error_Handler>
  }

  // Clear encoder counter
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8002254:	4b09      	ldr	r3, [pc, #36]	@ (800227c <Set_RTC_Alarm+0xdc>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2200      	movs	r2, #0
 800225a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800225c:	bf00      	nop
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000350 	.word	0x20000350
 8002268:	200002d8 	.word	0x200002d8
 800226c:	20000360 	.word	0x20000360
 8002270:	88888889 	.word	0x88888889
 8002274:	aaaaaaab 	.word	0xaaaaaaab
 8002278:	20000358 	.word	0x20000358
 800227c:	200002ec 	.word	0x200002ec

08002280 <Clear_RTC_Alarm>:

void Clear_RTC_Alarm()
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8002284:	2201      	movs	r2, #1
 8002286:	490c      	ldr	r1, [pc, #48]	@ (80022b8 <Clear_RTC_Alarm+0x38>)
 8002288:	480c      	ldr	r0, [pc, #48]	@ (80022bc <Clear_RTC_Alarm+0x3c>)
 800228a:	f003 f8b1 	bl	80053f0 <HAL_RTC_GetTime>

	sAlarm.AlarmTime.Hours = sTime.Hours;
 800228e:	4b0a      	ldr	r3, [pc, #40]	@ (80022b8 <Clear_RTC_Alarm+0x38>)
 8002290:	781a      	ldrb	r2, [r3, #0]
 8002292:	4b0b      	ldr	r3, [pc, #44]	@ (80022c0 <Clear_RTC_Alarm+0x40>)
 8002294:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmTime.Minutes = sTime.Minutes;
 8002296:	4b08      	ldr	r3, [pc, #32]	@ (80022b8 <Clear_RTC_Alarm+0x38>)
 8002298:	785a      	ldrb	r2, [r3, #1]
 800229a:	4b09      	ldr	r3, [pc, #36]	@ (80022c0 <Clear_RTC_Alarm+0x40>)
 800229c:	705a      	strb	r2, [r3, #1]
	sAlarm.AlarmTime.Seconds = sTime.Seconds;
 800229e:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <Clear_RTC_Alarm+0x38>)
 80022a0:	789a      	ldrb	r2, [r3, #2]
 80022a2:	4b07      	ldr	r3, [pc, #28]	@ (80022c0 <Clear_RTC_Alarm+0x40>)
 80022a4:	709a      	strb	r2, [r3, #2]

	isAlarm = 0;
 80022a6:	4b07      	ldr	r3, [pc, #28]	@ (80022c4 <Clear_RTC_Alarm+0x44>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]
	alarmIsSet = 0;
 80022ac:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <Clear_RTC_Alarm+0x48>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000350 	.word	0x20000350
 80022bc:	200002d8 	.word	0x200002d8
 80022c0:	20000358 	.word	0x20000358
 80022c4:	20000341 	.word	0x20000341
 80022c8:	20000342 	.word	0x20000342

080022cc <HAL_GPIO_EXTI_Callback>:

volatile uint32_t lastInterruptTime1 = 0;
volatile uint32_t lastInterruptTime3 = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	80fb      	strh	r3, [r7, #6]

	if (isAlarm == 1) {
 80022d6:	4b78      	ldr	r3, [pc, #480]	@ (80024b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d102      	bne.n	80022e4 <HAL_GPIO_EXTI_Callback+0x18>
		Clear_RTC_Alarm();
 80022de:	f7ff ffcf 	bl	8002280 <Clear_RTC_Alarm>

				lastInterruptTime1 = currentTime;
			}
		}
	}
}
 80022e2:	e0e5      	b.n	80024b0 <HAL_GPIO_EXTI_Callback+0x1e4>
		uint32_t currentTime = HAL_GetTick();
 80022e4:	f000 fe74 	bl	8002fd0 <HAL_GetTick>
 80022e8:	60f8      	str	r0, [r7, #12]
		if (GPIO_Pin == GPIO_PIN_3)
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d148      	bne.n	8002382 <HAL_GPIO_EXTI_Callback+0xb6>
			if (currentTime - lastInterruptTime3 > 300)
 80022f0:	4b72      	ldr	r3, [pc, #456]	@ (80024bc <HAL_GPIO_EXTI_Callback+0x1f0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80022fc:	d941      	bls.n	8002382 <HAL_GPIO_EXTI_Callback+0xb6>
				if (activeScreen == screenTimer)
 80022fe:	4b70      	ldr	r3, [pc, #448]	@ (80024c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002300:	781a      	ldrb	r2, [r3, #0]
 8002302:	4b70      	ldr	r3, [pc, #448]	@ (80024c4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d118      	bne.n	800233c <HAL_GPIO_EXTI_Callback+0x70>
					uint8_t rawCounter = __HAL_TIM_GET_COUNTER(&htim2);
 800230a:	4b6f      	ldr	r3, [pc, #444]	@ (80024c8 <HAL_GPIO_EXTI_Callback+0x1fc>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002310:	72fb      	strb	r3, [r7, #11]
					if (rawCounter != 0) {
 8002312:	7afb      	ldrb	r3, [r7, #11]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00e      	beq.n	8002336 <HAL_GPIO_EXTI_Callback+0x6a>
						if (alarmIsSet == 1) {
 8002318:	4b6c      	ldr	r3, [pc, #432]	@ (80024cc <HAL_GPIO_EXTI_Callback+0x200>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d102      	bne.n	8002326 <HAL_GPIO_EXTI_Callback+0x5a>
							Clear_RTC_Alarm();
 8002320:	f7ff ffae 	bl	8002280 <Clear_RTC_Alarm>
 8002324:	e02a      	b.n	800237c <HAL_GPIO_EXTI_Callback+0xb0>
							Set_RTC_Alarm(rawCounter);
 8002326:	7afb      	ldrb	r3, [r7, #11]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff ff39 	bl	80021a0 <Set_RTC_Alarm>
							alarmIsSet = 1;
 800232e:	4b67      	ldr	r3, [pc, #412]	@ (80024cc <HAL_GPIO_EXTI_Callback+0x200>)
 8002330:	2201      	movs	r2, #1
 8002332:	701a      	strb	r2, [r3, #0]
 8002334:	e022      	b.n	800237c <HAL_GPIO_EXTI_Callback+0xb0>
						Clear_RTC_Alarm();
 8002336:	f7ff ffa3 	bl	8002280 <Clear_RTC_Alarm>
 800233a:	e01f      	b.n	800237c <HAL_GPIO_EXTI_Callback+0xb0>
					if (activeScreen == screenSetTime) {
 800233c:	4b60      	ldr	r3, [pc, #384]	@ (80024c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800233e:	781a      	ldrb	r2, [r3, #0]
 8002340:	4b63      	ldr	r3, [pc, #396]	@ (80024d0 <HAL_GPIO_EXTI_Callback+0x204>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d104      	bne.n	8002352 <HAL_GPIO_EXTI_Callback+0x86>
						activeScreen = screenMenu;
 8002348:	4b62      	ldr	r3, [pc, #392]	@ (80024d4 <HAL_GPIO_EXTI_Callback+0x208>)
 800234a:	781a      	ldrb	r2, [r3, #0]
 800234c:	4b5c      	ldr	r3, [pc, #368]	@ (80024c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800234e:	701a      	strb	r2, [r3, #0]
 8002350:	e014      	b.n	800237c <HAL_GPIO_EXTI_Callback+0xb0>
					} else if (activeScreen == screenMenu) {
 8002352:	4b5b      	ldr	r3, [pc, #364]	@ (80024c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002354:	781a      	ldrb	r2, [r3, #0]
 8002356:	4b5f      	ldr	r3, [pc, #380]	@ (80024d4 <HAL_GPIO_EXTI_Callback+0x208>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d104      	bne.n	8002368 <HAL_GPIO_EXTI_Callback+0x9c>
						activeScreen = screenTime;
 800235e:	4b5e      	ldr	r3, [pc, #376]	@ (80024d8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8002360:	781a      	ldrb	r2, [r3, #0]
 8002362:	4b57      	ldr	r3, [pc, #348]	@ (80024c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002364:	701a      	strb	r2, [r3, #0]
 8002366:	e009      	b.n	800237c <HAL_GPIO_EXTI_Callback+0xb0>
					} else if (activeScreen == screenTime) {
 8002368:	4b55      	ldr	r3, [pc, #340]	@ (80024c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800236a:	781a      	ldrb	r2, [r3, #0]
 800236c:	4b5a      	ldr	r3, [pc, #360]	@ (80024d8 <HAL_GPIO_EXTI_Callback+0x20c>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d103      	bne.n	800237c <HAL_GPIO_EXTI_Callback+0xb0>
						activeScreen = screenMenu;
 8002374:	4b57      	ldr	r3, [pc, #348]	@ (80024d4 <HAL_GPIO_EXTI_Callback+0x208>)
 8002376:	781a      	ldrb	r2, [r3, #0]
 8002378:	4b51      	ldr	r3, [pc, #324]	@ (80024c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800237a:	701a      	strb	r2, [r3, #0]
				lastInterruptTime3 = currentTime;
 800237c:	4a4f      	ldr	r2, [pc, #316]	@ (80024bc <HAL_GPIO_EXTI_Callback+0x1f0>)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6013      	str	r3, [r2, #0]
		if (GPIO_Pin == GPIO_PIN_1)
 8002382:	88fb      	ldrh	r3, [r7, #6]
 8002384:	2b02      	cmp	r3, #2
 8002386:	f040 8093 	bne.w	80024b0 <HAL_GPIO_EXTI_Callback+0x1e4>
			if (currentTime - lastInterruptTime1 > 300)
 800238a:	4b54      	ldr	r3, [pc, #336]	@ (80024dc <HAL_GPIO_EXTI_Callback+0x210>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002396:	f240 808b 	bls.w	80024b0 <HAL_GPIO_EXTI_Callback+0x1e4>
				if (activeScreen == screenTimer)
 800239a:	4b49      	ldr	r3, [pc, #292]	@ (80024c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800239c:	781a      	ldrb	r2, [r3, #0]
 800239e:	4b49      	ldr	r3, [pc, #292]	@ (80024c4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d104      	bne.n	80023b0 <HAL_GPIO_EXTI_Callback+0xe4>
					activeScreen = screenTime;
 80023a6:	4b4c      	ldr	r3, [pc, #304]	@ (80024d8 <HAL_GPIO_EXTI_Callback+0x20c>)
 80023a8:	781a      	ldrb	r2, [r3, #0]
 80023aa:	4b45      	ldr	r3, [pc, #276]	@ (80024c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80023ac:	701a      	strb	r2, [r3, #0]
 80023ae:	e07c      	b.n	80024aa <HAL_GPIO_EXTI_Callback+0x1de>
				} else if (activeScreen == screenWeather)
 80023b0:	4b43      	ldr	r3, [pc, #268]	@ (80024c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80023b2:	781a      	ldrb	r2, [r3, #0]
 80023b4:	4b4a      	ldr	r3, [pc, #296]	@ (80024e0 <HAL_GPIO_EXTI_Callback+0x214>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d104      	bne.n	80023c6 <HAL_GPIO_EXTI_Callback+0xfa>
					activeScreen = screenTimer;
 80023bc:	4b41      	ldr	r3, [pc, #260]	@ (80024c4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80023be:	781a      	ldrb	r2, [r3, #0]
 80023c0:	4b3f      	ldr	r3, [pc, #252]	@ (80024c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80023c2:	701a      	strb	r2, [r3, #0]
 80023c4:	e071      	b.n	80024aa <HAL_GPIO_EXTI_Callback+0x1de>
				} else if (activeScreen == screenTime)
 80023c6:	4b3e      	ldr	r3, [pc, #248]	@ (80024c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80023c8:	781a      	ldrb	r2, [r3, #0]
 80023ca:	4b43      	ldr	r3, [pc, #268]	@ (80024d8 <HAL_GPIO_EXTI_Callback+0x20c>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d104      	bne.n	80023dc <HAL_GPIO_EXTI_Callback+0x110>
					activeScreen = screenWeather;
 80023d2:	4b43      	ldr	r3, [pc, #268]	@ (80024e0 <HAL_GPIO_EXTI_Callback+0x214>)
 80023d4:	781a      	ldrb	r2, [r3, #0]
 80023d6:	4b3a      	ldr	r3, [pc, #232]	@ (80024c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80023d8:	701a      	strb	r2, [r3, #0]
 80023da:	e066      	b.n	80024aa <HAL_GPIO_EXTI_Callback+0x1de>
				} else if (activeScreen == screenMenu)
 80023dc:	4b38      	ldr	r3, [pc, #224]	@ (80024c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80023de:	781a      	ldrb	r2, [r3, #0]
 80023e0:	4b3c      	ldr	r3, [pc, #240]	@ (80024d4 <HAL_GPIO_EXTI_Callback+0x208>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d10a      	bne.n	80023fe <HAL_GPIO_EXTI_Callback+0x132>
					if (activeMenuOption == menuSetTime)
 80023e8:	4b3e      	ldr	r3, [pc, #248]	@ (80024e4 <HAL_GPIO_EXTI_Callback+0x218>)
 80023ea:	781a      	ldrb	r2, [r3, #0]
 80023ec:	4b3e      	ldr	r3, [pc, #248]	@ (80024e8 <HAL_GPIO_EXTI_Callback+0x21c>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d15a      	bne.n	80024aa <HAL_GPIO_EXTI_Callback+0x1de>
						activeScreen = screenSetTime;
 80023f4:	4b36      	ldr	r3, [pc, #216]	@ (80024d0 <HAL_GPIO_EXTI_Callback+0x204>)
 80023f6:	781a      	ldrb	r2, [r3, #0]
 80023f8:	4b31      	ldr	r3, [pc, #196]	@ (80024c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80023fa:	701a      	strb	r2, [r3, #0]
 80023fc:	e055      	b.n	80024aa <HAL_GPIO_EXTI_Callback+0x1de>
				} else if (activeScreen == screenSetTime) {
 80023fe:	4b30      	ldr	r3, [pc, #192]	@ (80024c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002400:	781a      	ldrb	r2, [r3, #0]
 8002402:	4b33      	ldr	r3, [pc, #204]	@ (80024d0 <HAL_GPIO_EXTI_Callback+0x204>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d14f      	bne.n	80024aa <HAL_GPIO_EXTI_Callback+0x1de>
					  if (activeSetTimeOption == setTimeSecondsOption) {
 800240a:	4b38      	ldr	r3, [pc, #224]	@ (80024ec <HAL_GPIO_EXTI_Callback+0x220>)
 800240c:	781a      	ldrb	r2, [r3, #0]
 800240e:	4b38      	ldr	r3, [pc, #224]	@ (80024f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d111      	bne.n	800243a <HAL_GPIO_EXTI_Callback+0x16e>
						  sTime.Seconds = Decimal_To_BCD(setTimeSeconds);
 8002416:	4b37      	ldr	r3, [pc, #220]	@ (80024f4 <HAL_GPIO_EXTI_Callback+0x228>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff f8c8 	bl	80015b0 <Decimal_To_BCD>
 8002420:	4603      	mov	r3, r0
 8002422:	461a      	mov	r2, r3
 8002424:	4b34      	ldr	r3, [pc, #208]	@ (80024f8 <HAL_GPIO_EXTI_Callback+0x22c>)
 8002426:	709a      	strb	r2, [r3, #2]
						  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8002428:	4b27      	ldr	r3, [pc, #156]	@ (80024c8 <HAL_GPIO_EXTI_Callback+0x1fc>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2200      	movs	r2, #0
 800242e:	625a      	str	r2, [r3, #36]	@ 0x24
						  activeSetTimeOption = setTimeMinutesOption;
 8002430:	4b32      	ldr	r3, [pc, #200]	@ (80024fc <HAL_GPIO_EXTI_Callback+0x230>)
 8002432:	781a      	ldrb	r2, [r3, #0]
 8002434:	4b2d      	ldr	r3, [pc, #180]	@ (80024ec <HAL_GPIO_EXTI_Callback+0x220>)
 8002436:	701a      	strb	r2, [r3, #0]
 8002438:	e037      	b.n	80024aa <HAL_GPIO_EXTI_Callback+0x1de>
					  } else if (activeSetTimeOption == setTimeMinutesOption) {
 800243a:	4b2c      	ldr	r3, [pc, #176]	@ (80024ec <HAL_GPIO_EXTI_Callback+0x220>)
 800243c:	781a      	ldrb	r2, [r3, #0]
 800243e:	4b2f      	ldr	r3, [pc, #188]	@ (80024fc <HAL_GPIO_EXTI_Callback+0x230>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d111      	bne.n	800246a <HAL_GPIO_EXTI_Callback+0x19e>
						  sTime.Minutes = Decimal_To_BCD(setTimeMinutes);
 8002446:	4b2e      	ldr	r3, [pc, #184]	@ (8002500 <HAL_GPIO_EXTI_Callback+0x234>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff f8b0 	bl	80015b0 <Decimal_To_BCD>
 8002450:	4603      	mov	r3, r0
 8002452:	461a      	mov	r2, r3
 8002454:	4b28      	ldr	r3, [pc, #160]	@ (80024f8 <HAL_GPIO_EXTI_Callback+0x22c>)
 8002456:	705a      	strb	r2, [r3, #1]
						  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8002458:	4b1b      	ldr	r3, [pc, #108]	@ (80024c8 <HAL_GPIO_EXTI_Callback+0x1fc>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2200      	movs	r2, #0
 800245e:	625a      	str	r2, [r3, #36]	@ 0x24
						  activeSetTimeOption = setTimeHoursOption;
 8002460:	4b28      	ldr	r3, [pc, #160]	@ (8002504 <HAL_GPIO_EXTI_Callback+0x238>)
 8002462:	781a      	ldrb	r2, [r3, #0]
 8002464:	4b21      	ldr	r3, [pc, #132]	@ (80024ec <HAL_GPIO_EXTI_Callback+0x220>)
 8002466:	701a      	strb	r2, [r3, #0]
 8002468:	e01f      	b.n	80024aa <HAL_GPIO_EXTI_Callback+0x1de>
					  } else if (activeSetTimeOption == setTimeHoursOption) {
 800246a:	4b20      	ldr	r3, [pc, #128]	@ (80024ec <HAL_GPIO_EXTI_Callback+0x220>)
 800246c:	781a      	ldrb	r2, [r3, #0]
 800246e:	4b25      	ldr	r3, [pc, #148]	@ (8002504 <HAL_GPIO_EXTI_Callback+0x238>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d119      	bne.n	80024aa <HAL_GPIO_EXTI_Callback+0x1de>
						  sTime.Hours = Decimal_To_BCD(setTimeHours);
 8002476:	4b24      	ldr	r3, [pc, #144]	@ (8002508 <HAL_GPIO_EXTI_Callback+0x23c>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff f898 	bl	80015b0 <Decimal_To_BCD>
 8002480:	4603      	mov	r3, r0
 8002482:	461a      	mov	r2, r3
 8002484:	4b1c      	ldr	r3, [pc, #112]	@ (80024f8 <HAL_GPIO_EXTI_Callback+0x22c>)
 8002486:	701a      	strb	r2, [r3, #0]
						  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8002488:	4b0f      	ldr	r3, [pc, #60]	@ (80024c8 <HAL_GPIO_EXTI_Callback+0x1fc>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2200      	movs	r2, #0
 800248e:	625a      	str	r2, [r3, #36]	@ 0x24
						  HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BCD);
 8002490:	2201      	movs	r2, #1
 8002492:	4919      	ldr	r1, [pc, #100]	@ (80024f8 <HAL_GPIO_EXTI_Callback+0x22c>)
 8002494:	481d      	ldr	r0, [pc, #116]	@ (800250c <HAL_GPIO_EXTI_Callback+0x240>)
 8002496:	f002 ff13 	bl	80052c0 <HAL_RTC_SetTime>
						  activeSetTimeOption = setTimeSecondsOption;
 800249a:	4b15      	ldr	r3, [pc, #84]	@ (80024f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800249c:	781a      	ldrb	r2, [r3, #0]
 800249e:	4b13      	ldr	r3, [pc, #76]	@ (80024ec <HAL_GPIO_EXTI_Callback+0x220>)
 80024a0:	701a      	strb	r2, [r3, #0]
						  activeScreen = screenMenu;
 80024a2:	4b0c      	ldr	r3, [pc, #48]	@ (80024d4 <HAL_GPIO_EXTI_Callback+0x208>)
 80024a4:	781a      	ldrb	r2, [r3, #0]
 80024a6:	4b06      	ldr	r3, [pc, #24]	@ (80024c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80024a8:	701a      	strb	r2, [r3, #0]
				lastInterruptTime1 = currentTime;
 80024aa:	4a0c      	ldr	r2, [pc, #48]	@ (80024dc <HAL_GPIO_EXTI_Callback+0x210>)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6013      	str	r3, [r2, #0]
}
 80024b0:	bf00      	nop
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000341 	.word	0x20000341
 80024bc:	20000368 	.word	0x20000368
 80024c0:	20000343 	.word	0x20000343
 80024c4:	20000001 	.word	0x20000001
 80024c8:	200002ec 	.word	0x200002ec
 80024cc:	20000342 	.word	0x20000342
 80024d0:	20000003 	.word	0x20000003
 80024d4:	20000002 	.word	0x20000002
 80024d8:	20000344 	.word	0x20000344
 80024dc:	20000364 	.word	0x20000364
 80024e0:	20000000 	.word	0x20000000
 80024e4:	20000345 	.word	0x20000345
 80024e8:	20000346 	.word	0x20000346
 80024ec:	20000347 	.word	0x20000347
 80024f0:	20000348 	.word	0x20000348
 80024f4:	2000034b 	.word	0x2000034b
 80024f8:	20000350 	.word	0x20000350
 80024fc:	20000005 	.word	0x20000005
 8002500:	2000034a 	.word	0x2000034a
 8002504:	20000006 	.word	0x20000006
 8002508:	20000349 	.word	0x20000349
 800250c:	200002d8 	.word	0x200002d8

08002510 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
	if (alarmIsSet == 1) {
 8002518:	4b07      	ldr	r3, [pc, #28]	@ (8002538 <HAL_RTC_AlarmAEventCallback+0x28>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d105      	bne.n	800252c <HAL_RTC_AlarmAEventCallback+0x1c>
		isAlarm = 1;
 8002520:	4b06      	ldr	r3, [pc, #24]	@ (800253c <HAL_RTC_AlarmAEventCallback+0x2c>)
 8002522:	2201      	movs	r2, #1
 8002524:	701a      	strb	r2, [r3, #0]
		alarmIsSet = 0;
 8002526:	4b04      	ldr	r3, [pc, #16]	@ (8002538 <HAL_RTC_AlarmAEventCallback+0x28>)
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
	}
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	20000342 	.word	0x20000342
 800253c:	20000341 	.word	0x20000341

08002540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002544:	b672      	cpsid	i
}
 8002546:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002548:	bf00      	nop
 800254a:	e7fd      	b.n	8002548 <Error_Handler+0x8>

0800254c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr

08002558 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af04      	add	r7, sp, #16
 800255e:	4603      	mov	r3, r0
 8002560:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002562:	f04f 33ff 	mov.w	r3, #4294967295
 8002566:	9302      	str	r3, [sp, #8]
 8002568:	2301      	movs	r3, #1
 800256a:	9301      	str	r3, [sp, #4]
 800256c:	1dfb      	adds	r3, r7, #7
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	2301      	movs	r3, #1
 8002572:	2200      	movs	r2, #0
 8002574:	2178      	movs	r1, #120	@ 0x78
 8002576:	4803      	ldr	r0, [pc, #12]	@ (8002584 <ssd1306_WriteCommand+0x2c>)
 8002578:	f001 f978 	bl	800386c <HAL_I2C_Mem_Write>
}
 800257c:	bf00      	nop
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20000230 	.word	0x20000230

08002588 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af04      	add	r7, sp, #16
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	b29b      	uxth	r3, r3
 8002596:	f04f 32ff 	mov.w	r2, #4294967295
 800259a:	9202      	str	r2, [sp, #8]
 800259c:	9301      	str	r3, [sp, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	2301      	movs	r3, #1
 80025a4:	2240      	movs	r2, #64	@ 0x40
 80025a6:	2178      	movs	r1, #120	@ 0x78
 80025a8:	4803      	ldr	r0, [pc, #12]	@ (80025b8 <ssd1306_WriteData+0x30>)
 80025aa:	f001 f95f 	bl	800386c <HAL_I2C_Mem_Write>
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000230 	.word	0x20000230

080025bc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80025c0:	f7ff ffc4 	bl	800254c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80025c4:	2064      	movs	r0, #100	@ 0x64
 80025c6:	f000 fd0d 	bl	8002fe4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80025ca:	2000      	movs	r0, #0
 80025cc:	f000 fa22 	bl	8002a14 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80025d0:	2020      	movs	r0, #32
 80025d2:	f7ff ffc1 	bl	8002558 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80025d6:	2000      	movs	r0, #0
 80025d8:	f7ff ffbe 	bl	8002558 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80025dc:	20b0      	movs	r0, #176	@ 0xb0
 80025de:	f7ff ffbb 	bl	8002558 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80025e2:	20c8      	movs	r0, #200	@ 0xc8
 80025e4:	f7ff ffb8 	bl	8002558 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80025e8:	2000      	movs	r0, #0
 80025ea:	f7ff ffb5 	bl	8002558 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80025ee:	2010      	movs	r0, #16
 80025f0:	f7ff ffb2 	bl	8002558 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80025f4:	2040      	movs	r0, #64	@ 0x40
 80025f6:	f7ff ffaf 	bl	8002558 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80025fa:	20ff      	movs	r0, #255	@ 0xff
 80025fc:	f000 f9f6 	bl	80029ec <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002600:	20a1      	movs	r0, #161	@ 0xa1
 8002602:	f7ff ffa9 	bl	8002558 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002606:	20a6      	movs	r0, #166	@ 0xa6
 8002608:	f7ff ffa6 	bl	8002558 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800260c:	20a8      	movs	r0, #168	@ 0xa8
 800260e:	f7ff ffa3 	bl	8002558 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002612:	203f      	movs	r0, #63	@ 0x3f
 8002614:	f7ff ffa0 	bl	8002558 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002618:	20a4      	movs	r0, #164	@ 0xa4
 800261a:	f7ff ff9d 	bl	8002558 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800261e:	20d3      	movs	r0, #211	@ 0xd3
 8002620:	f7ff ff9a 	bl	8002558 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002624:	2000      	movs	r0, #0
 8002626:	f7ff ff97 	bl	8002558 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800262a:	20d5      	movs	r0, #213	@ 0xd5
 800262c:	f7ff ff94 	bl	8002558 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002630:	20f0      	movs	r0, #240	@ 0xf0
 8002632:	f7ff ff91 	bl	8002558 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002636:	20d9      	movs	r0, #217	@ 0xd9
 8002638:	f7ff ff8e 	bl	8002558 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800263c:	2022      	movs	r0, #34	@ 0x22
 800263e:	f7ff ff8b 	bl	8002558 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002642:	20da      	movs	r0, #218	@ 0xda
 8002644:	f7ff ff88 	bl	8002558 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002648:	2012      	movs	r0, #18
 800264a:	f7ff ff85 	bl	8002558 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800264e:	20db      	movs	r0, #219	@ 0xdb
 8002650:	f7ff ff82 	bl	8002558 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002654:	2020      	movs	r0, #32
 8002656:	f7ff ff7f 	bl	8002558 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800265a:	208d      	movs	r0, #141	@ 0x8d
 800265c:	f7ff ff7c 	bl	8002558 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002660:	2014      	movs	r0, #20
 8002662:	f7ff ff79 	bl	8002558 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002666:	2001      	movs	r0, #1
 8002668:	f000 f9d4 	bl	8002a14 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800266c:	2000      	movs	r0, #0
 800266e:	f000 f80f 	bl	8002690 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002672:	f000 f825 	bl	80026c0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002676:	4b05      	ldr	r3, [pc, #20]	@ (800268c <ssd1306_Init+0xd0>)
 8002678:	2200      	movs	r2, #0
 800267a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800267c:	4b03      	ldr	r3, [pc, #12]	@ (800268c <ssd1306_Init+0xd0>)
 800267e:	2200      	movs	r2, #0
 8002680:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002682:	4b02      	ldr	r3, [pc, #8]	@ (800268c <ssd1306_Init+0xd0>)
 8002684:	2201      	movs	r2, #1
 8002686:	711a      	strb	r2, [r3, #4]
}
 8002688:	bf00      	nop
 800268a:	bd80      	pop	{r7, pc}
 800268c:	2000076c 	.word	0x2000076c

08002690 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <ssd1306_Fill+0x14>
 80026a0:	2300      	movs	r3, #0
 80026a2:	e000      	b.n	80026a6 <ssd1306_Fill+0x16>
 80026a4:	23ff      	movs	r3, #255	@ 0xff
 80026a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026aa:	4619      	mov	r1, r3
 80026ac:	4803      	ldr	r0, [pc, #12]	@ (80026bc <ssd1306_Fill+0x2c>)
 80026ae:	f004 fe2e 	bl	800730e <memset>
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	2000036c 	.word	0x2000036c

080026c0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80026c6:	2300      	movs	r3, #0
 80026c8:	71fb      	strb	r3, [r7, #7]
 80026ca:	e016      	b.n	80026fa <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	3b50      	subs	r3, #80	@ 0x50
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff ff40 	bl	8002558 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80026d8:	2000      	movs	r0, #0
 80026da:	f7ff ff3d 	bl	8002558 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80026de:	2010      	movs	r0, #16
 80026e0:	f7ff ff3a 	bl	8002558 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	01db      	lsls	r3, r3, #7
 80026e8:	4a08      	ldr	r2, [pc, #32]	@ (800270c <ssd1306_UpdateScreen+0x4c>)
 80026ea:	4413      	add	r3, r2
 80026ec:	2180      	movs	r1, #128	@ 0x80
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff ff4a 	bl	8002588 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	3301      	adds	r3, #1
 80026f8:	71fb      	strb	r3, [r7, #7]
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	2b07      	cmp	r3, #7
 80026fe:	d9e5      	bls.n	80026cc <ssd1306_UpdateScreen+0xc>
    }
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	2000036c 	.word	0x2000036c

08002710 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	71fb      	strb	r3, [r7, #7]
 800271a:	460b      	mov	r3, r1
 800271c:	71bb      	strb	r3, [r7, #6]
 800271e:	4613      	mov	r3, r2
 8002720:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	2b00      	cmp	r3, #0
 8002728:	db3d      	blt.n	80027a6 <ssd1306_DrawPixel+0x96>
 800272a:	79bb      	ldrb	r3, [r7, #6]
 800272c:	2b3f      	cmp	r3, #63	@ 0x3f
 800272e:	d83a      	bhi.n	80027a6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002730:	797b      	ldrb	r3, [r7, #5]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d11a      	bne.n	800276c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002736:	79fa      	ldrb	r2, [r7, #7]
 8002738:	79bb      	ldrb	r3, [r7, #6]
 800273a:	08db      	lsrs	r3, r3, #3
 800273c:	b2d8      	uxtb	r0, r3
 800273e:	4603      	mov	r3, r0
 8002740:	01db      	lsls	r3, r3, #7
 8002742:	4413      	add	r3, r2
 8002744:	4a1a      	ldr	r2, [pc, #104]	@ (80027b0 <ssd1306_DrawPixel+0xa0>)
 8002746:	5cd3      	ldrb	r3, [r2, r3]
 8002748:	b25a      	sxtb	r2, r3
 800274a:	79bb      	ldrb	r3, [r7, #6]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	2101      	movs	r1, #1
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	b25b      	sxtb	r3, r3
 8002758:	4313      	orrs	r3, r2
 800275a:	b259      	sxtb	r1, r3
 800275c:	79fa      	ldrb	r2, [r7, #7]
 800275e:	4603      	mov	r3, r0
 8002760:	01db      	lsls	r3, r3, #7
 8002762:	4413      	add	r3, r2
 8002764:	b2c9      	uxtb	r1, r1
 8002766:	4a12      	ldr	r2, [pc, #72]	@ (80027b0 <ssd1306_DrawPixel+0xa0>)
 8002768:	54d1      	strb	r1, [r2, r3]
 800276a:	e01d      	b.n	80027a8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800276c:	79fa      	ldrb	r2, [r7, #7]
 800276e:	79bb      	ldrb	r3, [r7, #6]
 8002770:	08db      	lsrs	r3, r3, #3
 8002772:	b2d8      	uxtb	r0, r3
 8002774:	4603      	mov	r3, r0
 8002776:	01db      	lsls	r3, r3, #7
 8002778:	4413      	add	r3, r2
 800277a:	4a0d      	ldr	r2, [pc, #52]	@ (80027b0 <ssd1306_DrawPixel+0xa0>)
 800277c:	5cd3      	ldrb	r3, [r2, r3]
 800277e:	b25a      	sxtb	r2, r3
 8002780:	79bb      	ldrb	r3, [r7, #6]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	2101      	movs	r1, #1
 8002788:	fa01 f303 	lsl.w	r3, r1, r3
 800278c:	b25b      	sxtb	r3, r3
 800278e:	43db      	mvns	r3, r3
 8002790:	b25b      	sxtb	r3, r3
 8002792:	4013      	ands	r3, r2
 8002794:	b259      	sxtb	r1, r3
 8002796:	79fa      	ldrb	r2, [r7, #7]
 8002798:	4603      	mov	r3, r0
 800279a:	01db      	lsls	r3, r3, #7
 800279c:	4413      	add	r3, r2
 800279e:	b2c9      	uxtb	r1, r1
 80027a0:	4a03      	ldr	r2, [pc, #12]	@ (80027b0 <ssd1306_DrawPixel+0xa0>)
 80027a2:	54d1      	strb	r1, [r2, r3]
 80027a4:	e000      	b.n	80027a8 <ssd1306_DrawPixel+0x98>
        return;
 80027a6:	bf00      	nop
    }
}
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr
 80027b0:	2000036c 	.word	0x2000036c

080027b4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b089      	sub	sp, #36	@ 0x24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4604      	mov	r4, r0
 80027bc:	4638      	mov	r0, r7
 80027be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80027c2:	4623      	mov	r3, r4
 80027c4:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	2b1f      	cmp	r3, #31
 80027ca:	d902      	bls.n	80027d2 <ssd1306_WriteChar+0x1e>
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	2b7e      	cmp	r3, #126	@ 0x7e
 80027d0:	d901      	bls.n	80027d6 <ssd1306_WriteChar+0x22>
        return 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	e077      	b.n	80028c6 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80027d6:	4b3e      	ldr	r3, [pc, #248]	@ (80028d0 <ssd1306_WriteChar+0x11c>)
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	783b      	ldrb	r3, [r7, #0]
 80027de:	4413      	add	r3, r2
 80027e0:	2b80      	cmp	r3, #128	@ 0x80
 80027e2:	dc06      	bgt.n	80027f2 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80027e4:	4b3a      	ldr	r3, [pc, #232]	@ (80028d0 <ssd1306_WriteChar+0x11c>)
 80027e6:	885b      	ldrh	r3, [r3, #2]
 80027e8:	461a      	mov	r2, r3
 80027ea:	787b      	ldrb	r3, [r7, #1]
 80027ec:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80027ee:	2b40      	cmp	r3, #64	@ 0x40
 80027f0:	dd01      	ble.n	80027f6 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	e067      	b.n	80028c6 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
 80027fa:	e04e      	b.n	800289a <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	3b20      	subs	r3, #32
 8002802:	7879      	ldrb	r1, [r7, #1]
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	4619      	mov	r1, r3
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	440b      	add	r3, r1
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	4413      	add	r3, r2
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8002816:	2300      	movs	r3, #0
 8002818:	61bb      	str	r3, [r7, #24]
 800281a:	e036      	b.n	800288a <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d013      	beq.n	8002854 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800282c:	4b28      	ldr	r3, [pc, #160]	@ (80028d0 <ssd1306_WriteChar+0x11c>)
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	b2da      	uxtb	r2, r3
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	4413      	add	r3, r2
 8002838:	b2d8      	uxtb	r0, r3
 800283a:	4b25      	ldr	r3, [pc, #148]	@ (80028d0 <ssd1306_WriteChar+0x11c>)
 800283c:	885b      	ldrh	r3, [r3, #2]
 800283e:	b2da      	uxtb	r2, r3
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	4413      	add	r3, r2
 8002846:	b2db      	uxtb	r3, r3
 8002848:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800284c:	4619      	mov	r1, r3
 800284e:	f7ff ff5f 	bl	8002710 <ssd1306_DrawPixel>
 8002852:	e017      	b.n	8002884 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002854:	4b1e      	ldr	r3, [pc, #120]	@ (80028d0 <ssd1306_WriteChar+0x11c>)
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	4413      	add	r3, r2
 8002860:	b2d8      	uxtb	r0, r3
 8002862:	4b1b      	ldr	r3, [pc, #108]	@ (80028d0 <ssd1306_WriteChar+0x11c>)
 8002864:	885b      	ldrh	r3, [r3, #2]
 8002866:	b2da      	uxtb	r2, r3
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	b2db      	uxtb	r3, r3
 800286c:	4413      	add	r3, r2
 800286e:	b2d9      	uxtb	r1, r3
 8002870:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002874:	2b00      	cmp	r3, #0
 8002876:	bf0c      	ite	eq
 8002878:	2301      	moveq	r3, #1
 800287a:	2300      	movne	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	461a      	mov	r2, r3
 8002880:	f7ff ff46 	bl	8002710 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	3301      	adds	r3, #1
 8002888:	61bb      	str	r3, [r7, #24]
 800288a:	783b      	ldrb	r3, [r7, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	4293      	cmp	r3, r2
 8002892:	d3c3      	bcc.n	800281c <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	3301      	adds	r3, #1
 8002898:	61fb      	str	r3, [r7, #28]
 800289a:	787b      	ldrb	r3, [r7, #1]
 800289c:	461a      	mov	r2, r3
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d3ab      	bcc.n	80027fc <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80028a4:	4b0a      	ldr	r3, [pc, #40]	@ (80028d0 <ssd1306_WriteChar+0x11c>)
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	2a00      	cmp	r2, #0
 80028ac:	d005      	beq.n	80028ba <ssd1306_WriteChar+0x106>
 80028ae:	68b9      	ldr	r1, [r7, #8]
 80028b0:	7bfa      	ldrb	r2, [r7, #15]
 80028b2:	3a20      	subs	r2, #32
 80028b4:	440a      	add	r2, r1
 80028b6:	7812      	ldrb	r2, [r2, #0]
 80028b8:	e000      	b.n	80028bc <ssd1306_WriteChar+0x108>
 80028ba:	783a      	ldrb	r2, [r7, #0]
 80028bc:	4413      	add	r3, r2
 80028be:	b29a      	uxth	r2, r3
 80028c0:	4b03      	ldr	r3, [pc, #12]	@ (80028d0 <ssd1306_WriteChar+0x11c>)
 80028c2:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3724      	adds	r7, #36	@ 0x24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd90      	pop	{r4, r7, pc}
 80028ce:	bf00      	nop
 80028d0:	2000076c 	.word	0x2000076c

080028d4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af02      	add	r7, sp, #8
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	4638      	mov	r0, r7
 80028de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80028e2:	e013      	b.n	800290c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	7818      	ldrb	r0, [r3, #0]
 80028e8:	7e3b      	ldrb	r3, [r7, #24]
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	463b      	mov	r3, r7
 80028ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028f0:	f7ff ff60 	bl	80027b4 <ssd1306_WriteChar>
 80028f4:	4603      	mov	r3, r0
 80028f6:	461a      	mov	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d002      	beq.n	8002906 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	e008      	b.n	8002918 <ssd1306_WriteString+0x44>
        }
        str++;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	3301      	adds	r3, #1
 800290a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1e7      	bne.n	80028e4 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	781b      	ldrb	r3, [r3, #0]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	460a      	mov	r2, r1
 800292a:	71fb      	strb	r3, [r7, #7]
 800292c:	4613      	mov	r3, r2
 800292e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	b29a      	uxth	r2, r3
 8002934:	4b05      	ldr	r3, [pc, #20]	@ (800294c <ssd1306_SetCursor+0x2c>)
 8002936:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002938:	79bb      	ldrb	r3, [r7, #6]
 800293a:	b29a      	uxth	r2, r3
 800293c:	4b03      	ldr	r3, [pc, #12]	@ (800294c <ssd1306_SetCursor+0x2c>)
 800293e:	805a      	strh	r2, [r3, #2]
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	2000076c 	.word	0x2000076c

08002950 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002950:	b590      	push	{r4, r7, lr}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	4604      	mov	r4, r0
 8002958:	4608      	mov	r0, r1
 800295a:	4611      	mov	r1, r2
 800295c:	461a      	mov	r2, r3
 800295e:	4623      	mov	r3, r4
 8002960:	71fb      	strb	r3, [r7, #7]
 8002962:	4603      	mov	r3, r0
 8002964:	71bb      	strb	r3, [r7, #6]
 8002966:	460b      	mov	r3, r1
 8002968:	717b      	strb	r3, [r7, #5]
 800296a:	4613      	mov	r3, r2
 800296c:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 800296e:	79fa      	ldrb	r2, [r7, #7]
 8002970:	797b      	ldrb	r3, [r7, #5]
 8002972:	4293      	cmp	r3, r2
 8002974:	bf28      	it	cs
 8002976:	4613      	movcs	r3, r2
 8002978:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 800297a:	797a      	ldrb	r2, [r7, #5]
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	4293      	cmp	r3, r2
 8002980:	bf38      	it	cc
 8002982:	4613      	movcc	r3, r2
 8002984:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8002986:	79ba      	ldrb	r2, [r7, #6]
 8002988:	793b      	ldrb	r3, [r7, #4]
 800298a:	4293      	cmp	r3, r2
 800298c:	bf28      	it	cs
 800298e:	4613      	movcs	r3, r2
 8002990:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8002992:	793a      	ldrb	r2, [r7, #4]
 8002994:	79bb      	ldrb	r3, [r7, #6]
 8002996:	4293      	cmp	r3, r2
 8002998:	bf38      	it	cc
 800299a:	4613      	movcc	r3, r2
 800299c:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800299e:	7afb      	ldrb	r3, [r7, #11]
 80029a0:	73fb      	strb	r3, [r7, #15]
 80029a2:	e017      	b.n	80029d4 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80029a4:	7b7b      	ldrb	r3, [r7, #13]
 80029a6:	73bb      	strb	r3, [r7, #14]
 80029a8:	e009      	b.n	80029be <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 80029aa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80029ae:	7bf9      	ldrb	r1, [r7, #15]
 80029b0:	7bbb      	ldrb	r3, [r7, #14]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff feac 	bl	8002710 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80029b8:	7bbb      	ldrb	r3, [r7, #14]
 80029ba:	3301      	adds	r3, #1
 80029bc:	73bb      	strb	r3, [r7, #14]
 80029be:	7bba      	ldrb	r2, [r7, #14]
 80029c0:	7b3b      	ldrb	r3, [r7, #12]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d803      	bhi.n	80029ce <ssd1306_FillRectangle+0x7e>
 80029c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	daed      	bge.n	80029aa <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	3301      	adds	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
 80029d4:	7bfa      	ldrb	r2, [r7, #15]
 80029d6:	7abb      	ldrb	r3, [r7, #10]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d803      	bhi.n	80029e4 <ssd1306_FillRectangle+0x94>
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	2b3f      	cmp	r3, #63	@ 0x3f
 80029e0:	d9e0      	bls.n	80029a4 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 80029e2:	bf00      	nop
 80029e4:	bf00      	nop
}
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd90      	pop	{r4, r7, pc}

080029ec <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80029f6:	2381      	movs	r3, #129	@ 0x81
 80029f8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fdab 	bl	8002558 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fda7 	bl	8002558 <ssd1306_WriteCommand>
}
 8002a0a:	bf00      	nop
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002a24:	23af      	movs	r3, #175	@ 0xaf
 8002a26:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002a28:	4b08      	ldr	r3, [pc, #32]	@ (8002a4c <ssd1306_SetDisplayOn+0x38>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	715a      	strb	r2, [r3, #5]
 8002a2e:	e004      	b.n	8002a3a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002a30:	23ae      	movs	r3, #174	@ 0xae
 8002a32:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002a34:	4b05      	ldr	r3, [pc, #20]	@ (8002a4c <ssd1306_SetDisplayOn+0x38>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff fd8b 	bl	8002558 <ssd1306_WriteCommand>
}
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	2000076c 	.word	0x2000076c

08002a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a56:	4b15      	ldr	r3, [pc, #84]	@ (8002aac <HAL_MspInit+0x5c>)
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	4a14      	ldr	r2, [pc, #80]	@ (8002aac <HAL_MspInit+0x5c>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	6193      	str	r3, [r2, #24]
 8002a62:	4b12      	ldr	r3, [pc, #72]	@ (8002aac <HAL_MspInit+0x5c>)
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	60bb      	str	r3, [r7, #8]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002aac <HAL_MspInit+0x5c>)
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	4a0e      	ldr	r2, [pc, #56]	@ (8002aac <HAL_MspInit+0x5c>)
 8002a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a78:	61d3      	str	r3, [r2, #28]
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002aac <HAL_MspInit+0x5c>)
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a82:	607b      	str	r3, [r7, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a86:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab0 <HAL_MspInit+0x60>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	4a04      	ldr	r2, [pc, #16]	@ (8002ab0 <HAL_MspInit+0x60>)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40010000 	.word	0x40010000

08002ab4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08a      	sub	sp, #40	@ 0x28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abc:	f107 0318 	add.w	r3, r7, #24
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a2b      	ldr	r2, [pc, #172]	@ (8002b7c <HAL_I2C_MspInit+0xc8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d124      	bne.n	8002b1e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8002b80 <HAL_I2C_MspInit+0xcc>)
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	4a29      	ldr	r2, [pc, #164]	@ (8002b80 <HAL_I2C_MspInit+0xcc>)
 8002ada:	f043 0308 	orr.w	r3, r3, #8
 8002ade:	6193      	str	r3, [r2, #24]
 8002ae0:	4b27      	ldr	r3, [pc, #156]	@ (8002b80 <HAL_I2C_MspInit+0xcc>)
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002aec:	23c0      	movs	r3, #192	@ 0xc0
 8002aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002af0:	2312      	movs	r3, #18
 8002af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002af4:	2303      	movs	r3, #3
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af8:	f107 0318 	add.w	r3, r7, #24
 8002afc:	4619      	mov	r1, r3
 8002afe:	4821      	ldr	r0, [pc, #132]	@ (8002b84 <HAL_I2C_MspInit+0xd0>)
 8002b00:	f000 fba2 	bl	8003248 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b04:	4b1e      	ldr	r3, [pc, #120]	@ (8002b80 <HAL_I2C_MspInit+0xcc>)
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	4a1d      	ldr	r2, [pc, #116]	@ (8002b80 <HAL_I2C_MspInit+0xcc>)
 8002b0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b0e:	61d3      	str	r3, [r2, #28]
 8002b10:	4b1b      	ldr	r3, [pc, #108]	@ (8002b80 <HAL_I2C_MspInit+0xcc>)
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002b1c:	e029      	b.n	8002b72 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a19      	ldr	r2, [pc, #100]	@ (8002b88 <HAL_I2C_MspInit+0xd4>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d124      	bne.n	8002b72 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b28:	4b15      	ldr	r3, [pc, #84]	@ (8002b80 <HAL_I2C_MspInit+0xcc>)
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	4a14      	ldr	r2, [pc, #80]	@ (8002b80 <HAL_I2C_MspInit+0xcc>)
 8002b2e:	f043 0308 	orr.w	r3, r3, #8
 8002b32:	6193      	str	r3, [r2, #24]
 8002b34:	4b12      	ldr	r3, [pc, #72]	@ (8002b80 <HAL_I2C_MspInit+0xcc>)
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	f003 0308 	and.w	r3, r3, #8
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b40:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b46:	2312      	movs	r3, #18
 8002b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b4e:	f107 0318 	add.w	r3, r7, #24
 8002b52:	4619      	mov	r1, r3
 8002b54:	480b      	ldr	r0, [pc, #44]	@ (8002b84 <HAL_I2C_MspInit+0xd0>)
 8002b56:	f000 fb77 	bl	8003248 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b5a:	4b09      	ldr	r3, [pc, #36]	@ (8002b80 <HAL_I2C_MspInit+0xcc>)
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	4a08      	ldr	r2, [pc, #32]	@ (8002b80 <HAL_I2C_MspInit+0xcc>)
 8002b60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b64:	61d3      	str	r3, [r2, #28]
 8002b66:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <HAL_I2C_MspInit+0xcc>)
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b6e:	60bb      	str	r3, [r7, #8]
 8002b70:	68bb      	ldr	r3, [r7, #8]
}
 8002b72:	bf00      	nop
 8002b74:	3728      	adds	r7, #40	@ 0x28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40005400 	.word	0x40005400
 8002b80:	40021000 	.word	0x40021000
 8002b84:	40010c00 	.word	0x40010c00
 8002b88:	40005800 	.word	0x40005800

08002b8c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a0f      	ldr	r2, [pc, #60]	@ (8002bd8 <HAL_RTC_MspInit+0x4c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d118      	bne.n	8002bd0 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002b9e:	f001 fd7b 	bl	8004698 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8002bdc <HAL_RTC_MspInit+0x50>)
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	4a0d      	ldr	r2, [pc, #52]	@ (8002bdc <HAL_RTC_MspInit+0x50>)
 8002ba8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002bac:	61d3      	str	r3, [r2, #28]
 8002bae:	4b0b      	ldr	r3, [pc, #44]	@ (8002bdc <HAL_RTC_MspInit+0x50>)
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002bba:	4b09      	ldr	r3, [pc, #36]	@ (8002be0 <HAL_RTC_MspInit+0x54>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	2029      	movs	r0, #41	@ 0x29
 8002bc6:	f000 fb08 	bl	80031da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002bca:	2029      	movs	r0, #41	@ 0x29
 8002bcc:	f000 fb21 	bl	8003212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002bd0:	bf00      	nop
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40002800 	.word	0x40002800
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	4242043c 	.word	0x4242043c

08002be4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08a      	sub	sp, #40	@ 0x28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bec:	f107 0314 	add.w	r3, r7, #20
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	609a      	str	r2, [r3, #8]
 8002bf8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c02:	d14e      	bne.n	8002ca2 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c04:	4b29      	ldr	r3, [pc, #164]	@ (8002cac <HAL_TIM_Encoder_MspInit+0xc8>)
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	4a28      	ldr	r2, [pc, #160]	@ (8002cac <HAL_TIM_Encoder_MspInit+0xc8>)
 8002c0a:	f043 0301 	orr.w	r3, r3, #1
 8002c0e:	61d3      	str	r3, [r2, #28]
 8002c10:	4b26      	ldr	r3, [pc, #152]	@ (8002cac <HAL_TIM_Encoder_MspInit+0xc8>)
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c1c:	4b23      	ldr	r3, [pc, #140]	@ (8002cac <HAL_TIM_Encoder_MspInit+0xc8>)
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	4a22      	ldr	r2, [pc, #136]	@ (8002cac <HAL_TIM_Encoder_MspInit+0xc8>)
 8002c22:	f043 0304 	orr.w	r3, r3, #4
 8002c26:	6193      	str	r3, [r2, #24]
 8002c28:	4b20      	ldr	r3, [pc, #128]	@ (8002cac <HAL_TIM_Encoder_MspInit+0xc8>)
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c34:	4b1d      	ldr	r3, [pc, #116]	@ (8002cac <HAL_TIM_Encoder_MspInit+0xc8>)
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	4a1c      	ldr	r2, [pc, #112]	@ (8002cac <HAL_TIM_Encoder_MspInit+0xc8>)
 8002c3a:	f043 0308 	orr.w	r3, r3, #8
 8002c3e:	6193      	str	r3, [r2, #24]
 8002c40:	4b1a      	ldr	r3, [pc, #104]	@ (8002cac <HAL_TIM_Encoder_MspInit+0xc8>)
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5a:	f107 0314 	add.w	r3, r7, #20
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4813      	ldr	r0, [pc, #76]	@ (8002cb0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002c62:	f000 faf1 	bl	8003248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c66:	2308      	movs	r3, #8
 8002c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c72:	f107 0314 	add.w	r3, r7, #20
 8002c76:	4619      	mov	r1, r3
 8002c78:	480e      	ldr	r0, [pc, #56]	@ (8002cb4 <HAL_TIM_Encoder_MspInit+0xd0>)
 8002c7a:	f000 fae5 	bl	8003248 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002c92:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c9c:	4a06      	ldr	r2, [pc, #24]	@ (8002cb8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002ca2:	bf00      	nop
 8002ca4:	3728      	adds	r7, #40	@ 0x28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40010800 	.word	0x40010800
 8002cb4:	40010c00 	.word	0x40010c00
 8002cb8:	40010000 	.word	0x40010000

08002cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cc0:	bf00      	nop
 8002cc2:	e7fd      	b.n	8002cc0 <NMI_Handler+0x4>

08002cc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cc8:	bf00      	nop
 8002cca:	e7fd      	b.n	8002cc8 <HardFault_Handler+0x4>

08002ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cd0:	bf00      	nop
 8002cd2:	e7fd      	b.n	8002cd0 <MemManage_Handler+0x4>

08002cd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cd8:	bf00      	nop
 8002cda:	e7fd      	b.n	8002cd8 <BusFault_Handler+0x4>

08002cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ce0:	bf00      	nop
 8002ce2:	e7fd      	b.n	8002ce0 <UsageFault_Handler+0x4>

08002ce4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ce8:	bf00      	nop
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr

08002cfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d0c:	f000 f94e 	bl	8002fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d10:	bf00      	nop
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002d18:	2002      	movs	r0, #2
 8002d1a:	f000 fc4b 	bl	80035b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002d26:	2008      	movs	r0, #8
 8002d28:	f000 fc44 	bl	80035b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002d2c:	bf00      	nop
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002d34:	4802      	ldr	r0, [pc, #8]	@ (8002d40 <RTC_Alarm_IRQHandler+0x10>)
 8002d36:	f002 fdf5 	bl	8005924 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	200002d8 	.word	0x200002d8

08002d44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return 1;
 8002d48:	2301      	movs	r3, #1
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <_kill>:

int _kill(int pid, int sig)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d5c:	f004 fb2a 	bl	80073b4 <__errno>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2216      	movs	r2, #22
 8002d64:	601a      	str	r2, [r3, #0]
  return -1;
 8002d66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <_exit>:

void _exit (int status)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d7a:	f04f 31ff 	mov.w	r1, #4294967295
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7ff ffe7 	bl	8002d52 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d84:	bf00      	nop
 8002d86:	e7fd      	b.n	8002d84 <_exit+0x12>

08002d88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	e00a      	b.n	8002db0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d9a:	f3af 8000 	nop.w
 8002d9e:	4601      	mov	r1, r0
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	60ba      	str	r2, [r7, #8]
 8002da6:	b2ca      	uxtb	r2, r1
 8002da8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	3301      	adds	r3, #1
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	dbf0      	blt.n	8002d9a <_read+0x12>
  }

  return len;
 8002db8:	687b      	ldr	r3, [r7, #4]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b086      	sub	sp, #24
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	60f8      	str	r0, [r7, #12]
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	e009      	b.n	8002de8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	60ba      	str	r2, [r7, #8]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	3301      	adds	r3, #1
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	dbf1      	blt.n	8002dd4 <_write+0x12>
  }
  return len;
 8002df0:	687b      	ldr	r3, [r7, #4]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <_close>:

int _close(int file)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e20:	605a      	str	r2, [r3, #4]
  return 0;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr

08002e2e <_isatty>:

int _isatty(int file)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e36:	2301      	movs	r3, #1
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bc80      	pop	{r7}
 8002e40:	4770      	bx	lr

08002e42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b085      	sub	sp, #20
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr
	...

08002e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e64:	4a14      	ldr	r2, [pc, #80]	@ (8002eb8 <_sbrk+0x5c>)
 8002e66:	4b15      	ldr	r3, [pc, #84]	@ (8002ebc <_sbrk+0x60>)
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e70:	4b13      	ldr	r3, [pc, #76]	@ (8002ec0 <_sbrk+0x64>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d102      	bne.n	8002e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e78:	4b11      	ldr	r3, [pc, #68]	@ (8002ec0 <_sbrk+0x64>)
 8002e7a:	4a12      	ldr	r2, [pc, #72]	@ (8002ec4 <_sbrk+0x68>)
 8002e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e7e:	4b10      	ldr	r3, [pc, #64]	@ (8002ec0 <_sbrk+0x64>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d207      	bcs.n	8002e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e8c:	f004 fa92 	bl	80073b4 <__errno>
 8002e90:	4603      	mov	r3, r0
 8002e92:	220c      	movs	r2, #12
 8002e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e96:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9a:	e009      	b.n	8002eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e9c:	4b08      	ldr	r3, [pc, #32]	@ (8002ec0 <_sbrk+0x64>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ea2:	4b07      	ldr	r3, [pc, #28]	@ (8002ec0 <_sbrk+0x64>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	4a05      	ldr	r2, [pc, #20]	@ (8002ec0 <_sbrk+0x64>)
 8002eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eae:	68fb      	ldr	r3, [r7, #12]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	20005000 	.word	0x20005000
 8002ebc:	00000400 	.word	0x00000400
 8002ec0:	20000774 	.word	0x20000774
 8002ec4:	200008c8 	.word	0x200008c8

08002ec8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr

08002ed4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ed4:	f7ff fff8 	bl	8002ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ed8:	480b      	ldr	r0, [pc, #44]	@ (8002f08 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002eda:	490c      	ldr	r1, [pc, #48]	@ (8002f0c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002edc:	4a0c      	ldr	r2, [pc, #48]	@ (8002f10 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ee0:	e002      	b.n	8002ee8 <LoopCopyDataInit>

08002ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ee6:	3304      	adds	r3, #4

08002ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eec:	d3f9      	bcc.n	8002ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eee:	4a09      	ldr	r2, [pc, #36]	@ (8002f14 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002ef0:	4c09      	ldr	r4, [pc, #36]	@ (8002f18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ef4:	e001      	b.n	8002efa <LoopFillZerobss>

08002ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ef8:	3204      	adds	r2, #4

08002efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002efc:	d3fb      	bcc.n	8002ef6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002efe:	f004 fa5f 	bl	80073c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f02:	f7fe fbb3 	bl	800166c <main>
  bx lr
 8002f06:	4770      	bx	lr
  ldr r0, =_sdata
 8002f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f0c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002f10:	0800d790 	.word	0x0800d790
  ldr r2, =_sbss
 8002f14:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002f18:	200008c8 	.word	0x200008c8

08002f1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f1c:	e7fe      	b.n	8002f1c <ADC1_2_IRQHandler>
	...

08002f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f24:	4b08      	ldr	r3, [pc, #32]	@ (8002f48 <HAL_Init+0x28>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a07      	ldr	r2, [pc, #28]	@ (8002f48 <HAL_Init+0x28>)
 8002f2a:	f043 0310 	orr.w	r3, r3, #16
 8002f2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f30:	2003      	movs	r0, #3
 8002f32:	f000 f947 	bl	80031c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f36:	200f      	movs	r0, #15
 8002f38:	f000 f808 	bl	8002f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f3c:	f7ff fd88 	bl	8002a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40022000 	.word	0x40022000

08002f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f54:	4b12      	ldr	r3, [pc, #72]	@ (8002fa0 <HAL_InitTick+0x54>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4b12      	ldr	r3, [pc, #72]	@ (8002fa4 <HAL_InitTick+0x58>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 f95f 	bl	800322e <HAL_SYSTICK_Config>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e00e      	b.n	8002f98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b0f      	cmp	r3, #15
 8002f7e:	d80a      	bhi.n	8002f96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f80:	2200      	movs	r2, #0
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	f04f 30ff 	mov.w	r0, #4294967295
 8002f88:	f000 f927 	bl	80031da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f8c:	4a06      	ldr	r2, [pc, #24]	@ (8002fa8 <HAL_InitTick+0x5c>)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	e000      	b.n	8002f98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20000008 	.word	0x20000008
 8002fa4:	20000010 	.word	0x20000010
 8002fa8:	2000000c 	.word	0x2000000c

08002fac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fb0:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <HAL_IncTick+0x1c>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4b05      	ldr	r3, [pc, #20]	@ (8002fcc <HAL_IncTick+0x20>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4413      	add	r3, r2
 8002fbc:	4a03      	ldr	r2, [pc, #12]	@ (8002fcc <HAL_IncTick+0x20>)
 8002fbe:	6013      	str	r3, [r2, #0]
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr
 8002fc8:	20000010 	.word	0x20000010
 8002fcc:	20000778 	.word	0x20000778

08002fd0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd4:	4b02      	ldr	r3, [pc, #8]	@ (8002fe0 <HAL_GetTick+0x10>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr
 8002fe0:	20000778 	.word	0x20000778

08002fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fec:	f7ff fff0 	bl	8002fd0 <HAL_GetTick>
 8002ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d005      	beq.n	800300a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8003028 <HAL_Delay+0x44>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4413      	add	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800300a:	bf00      	nop
 800300c:	f7ff ffe0 	bl	8002fd0 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	429a      	cmp	r2, r3
 800301a:	d8f7      	bhi.n	800300c <HAL_Delay+0x28>
  {
  }
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000010 	.word	0x20000010

0800302c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800303c:	4b0c      	ldr	r3, [pc, #48]	@ (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003048:	4013      	ands	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003054:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003058:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800305c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800305e:	4a04      	ldr	r2, [pc, #16]	@ (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	60d3      	str	r3, [r2, #12]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003078:	4b04      	ldr	r3, [pc, #16]	@ (800308c <__NVIC_GetPriorityGrouping+0x18>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	f003 0307 	and.w	r3, r3, #7
}
 8003082:	4618      	mov	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	db0b      	blt.n	80030ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	f003 021f 	and.w	r2, r3, #31
 80030a8:	4906      	ldr	r1, [pc, #24]	@ (80030c4 <__NVIC_EnableIRQ+0x34>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	2001      	movs	r0, #1
 80030b2:	fa00 f202 	lsl.w	r2, r0, r2
 80030b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	e000e100 	.word	0xe000e100

080030c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	6039      	str	r1, [r7, #0]
 80030d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	db0a      	blt.n	80030f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	490c      	ldr	r1, [pc, #48]	@ (8003114 <__NVIC_SetPriority+0x4c>)
 80030e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e6:	0112      	lsls	r2, r2, #4
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	440b      	add	r3, r1
 80030ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030f0:	e00a      	b.n	8003108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	4908      	ldr	r1, [pc, #32]	@ (8003118 <__NVIC_SetPriority+0x50>)
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	3b04      	subs	r3, #4
 8003100:	0112      	lsls	r2, r2, #4
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	440b      	add	r3, r1
 8003106:	761a      	strb	r2, [r3, #24]
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	e000e100 	.word	0xe000e100
 8003118:	e000ed00 	.word	0xe000ed00

0800311c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800311c:	b480      	push	{r7}
 800311e:	b089      	sub	sp, #36	@ 0x24
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f1c3 0307 	rsb	r3, r3, #7
 8003136:	2b04      	cmp	r3, #4
 8003138:	bf28      	it	cs
 800313a:	2304      	movcs	r3, #4
 800313c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3304      	adds	r3, #4
 8003142:	2b06      	cmp	r3, #6
 8003144:	d902      	bls.n	800314c <NVIC_EncodePriority+0x30>
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	3b03      	subs	r3, #3
 800314a:	e000      	b.n	800314e <NVIC_EncodePriority+0x32>
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003150:	f04f 32ff 	mov.w	r2, #4294967295
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43da      	mvns	r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	401a      	ands	r2, r3
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003164:	f04f 31ff 	mov.w	r1, #4294967295
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	fa01 f303 	lsl.w	r3, r1, r3
 800316e:	43d9      	mvns	r1, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003174:	4313      	orrs	r3, r2
         );
}
 8003176:	4618      	mov	r0, r3
 8003178:	3724      	adds	r7, #36	@ 0x24
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr

08003180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3b01      	subs	r3, #1
 800318c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003190:	d301      	bcc.n	8003196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003192:	2301      	movs	r3, #1
 8003194:	e00f      	b.n	80031b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003196:	4a0a      	ldr	r2, [pc, #40]	@ (80031c0 <SysTick_Config+0x40>)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3b01      	subs	r3, #1
 800319c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800319e:	210f      	movs	r1, #15
 80031a0:	f04f 30ff 	mov.w	r0, #4294967295
 80031a4:	f7ff ff90 	bl	80030c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031a8:	4b05      	ldr	r3, [pc, #20]	@ (80031c0 <SysTick_Config+0x40>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ae:	4b04      	ldr	r3, [pc, #16]	@ (80031c0 <SysTick_Config+0x40>)
 80031b0:	2207      	movs	r2, #7
 80031b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	e000e010 	.word	0xe000e010

080031c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7ff ff2d 	bl	800302c <__NVIC_SetPriorityGrouping>
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031da:	b580      	push	{r7, lr}
 80031dc:	b086      	sub	sp, #24
 80031de:	af00      	add	r7, sp, #0
 80031e0:	4603      	mov	r3, r0
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	607a      	str	r2, [r7, #4]
 80031e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031ec:	f7ff ff42 	bl	8003074 <__NVIC_GetPriorityGrouping>
 80031f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	68b9      	ldr	r1, [r7, #8]
 80031f6:	6978      	ldr	r0, [r7, #20]
 80031f8:	f7ff ff90 	bl	800311c <NVIC_EncodePriority>
 80031fc:	4602      	mov	r2, r0
 80031fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003202:	4611      	mov	r1, r2
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff ff5f 	bl	80030c8 <__NVIC_SetPriority>
}
 800320a:	bf00      	nop
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b082      	sub	sp, #8
 8003216:	af00      	add	r7, sp, #0
 8003218:	4603      	mov	r3, r0
 800321a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800321c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff ff35 	bl	8003090 <__NVIC_EnableIRQ>
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b082      	sub	sp, #8
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff ffa2 	bl	8003180 <SysTick_Config>
 800323c:	4603      	mov	r3, r0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003248:	b480      	push	{r7}
 800324a:	b08b      	sub	sp, #44	@ 0x2c
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003252:	2300      	movs	r3, #0
 8003254:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003256:	2300      	movs	r3, #0
 8003258:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800325a:	e169      	b.n	8003530 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800325c:	2201      	movs	r2, #1
 800325e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	69fa      	ldr	r2, [r7, #28]
 800326c:	4013      	ands	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	429a      	cmp	r2, r3
 8003276:	f040 8158 	bne.w	800352a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4a9a      	ldr	r2, [pc, #616]	@ (80034e8 <HAL_GPIO_Init+0x2a0>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d05e      	beq.n	8003342 <HAL_GPIO_Init+0xfa>
 8003284:	4a98      	ldr	r2, [pc, #608]	@ (80034e8 <HAL_GPIO_Init+0x2a0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d875      	bhi.n	8003376 <HAL_GPIO_Init+0x12e>
 800328a:	4a98      	ldr	r2, [pc, #608]	@ (80034ec <HAL_GPIO_Init+0x2a4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d058      	beq.n	8003342 <HAL_GPIO_Init+0xfa>
 8003290:	4a96      	ldr	r2, [pc, #600]	@ (80034ec <HAL_GPIO_Init+0x2a4>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d86f      	bhi.n	8003376 <HAL_GPIO_Init+0x12e>
 8003296:	4a96      	ldr	r2, [pc, #600]	@ (80034f0 <HAL_GPIO_Init+0x2a8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d052      	beq.n	8003342 <HAL_GPIO_Init+0xfa>
 800329c:	4a94      	ldr	r2, [pc, #592]	@ (80034f0 <HAL_GPIO_Init+0x2a8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d869      	bhi.n	8003376 <HAL_GPIO_Init+0x12e>
 80032a2:	4a94      	ldr	r2, [pc, #592]	@ (80034f4 <HAL_GPIO_Init+0x2ac>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d04c      	beq.n	8003342 <HAL_GPIO_Init+0xfa>
 80032a8:	4a92      	ldr	r2, [pc, #584]	@ (80034f4 <HAL_GPIO_Init+0x2ac>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d863      	bhi.n	8003376 <HAL_GPIO_Init+0x12e>
 80032ae:	4a92      	ldr	r2, [pc, #584]	@ (80034f8 <HAL_GPIO_Init+0x2b0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d046      	beq.n	8003342 <HAL_GPIO_Init+0xfa>
 80032b4:	4a90      	ldr	r2, [pc, #576]	@ (80034f8 <HAL_GPIO_Init+0x2b0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d85d      	bhi.n	8003376 <HAL_GPIO_Init+0x12e>
 80032ba:	2b12      	cmp	r3, #18
 80032bc:	d82a      	bhi.n	8003314 <HAL_GPIO_Init+0xcc>
 80032be:	2b12      	cmp	r3, #18
 80032c0:	d859      	bhi.n	8003376 <HAL_GPIO_Init+0x12e>
 80032c2:	a201      	add	r2, pc, #4	@ (adr r2, 80032c8 <HAL_GPIO_Init+0x80>)
 80032c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c8:	08003343 	.word	0x08003343
 80032cc:	0800331d 	.word	0x0800331d
 80032d0:	0800332f 	.word	0x0800332f
 80032d4:	08003371 	.word	0x08003371
 80032d8:	08003377 	.word	0x08003377
 80032dc:	08003377 	.word	0x08003377
 80032e0:	08003377 	.word	0x08003377
 80032e4:	08003377 	.word	0x08003377
 80032e8:	08003377 	.word	0x08003377
 80032ec:	08003377 	.word	0x08003377
 80032f0:	08003377 	.word	0x08003377
 80032f4:	08003377 	.word	0x08003377
 80032f8:	08003377 	.word	0x08003377
 80032fc:	08003377 	.word	0x08003377
 8003300:	08003377 	.word	0x08003377
 8003304:	08003377 	.word	0x08003377
 8003308:	08003377 	.word	0x08003377
 800330c:	08003325 	.word	0x08003325
 8003310:	08003339 	.word	0x08003339
 8003314:	4a79      	ldr	r2, [pc, #484]	@ (80034fc <HAL_GPIO_Init+0x2b4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d013      	beq.n	8003342 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800331a:	e02c      	b.n	8003376 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	623b      	str	r3, [r7, #32]
          break;
 8003322:	e029      	b.n	8003378 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	3304      	adds	r3, #4
 800332a:	623b      	str	r3, [r7, #32]
          break;
 800332c:	e024      	b.n	8003378 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	3308      	adds	r3, #8
 8003334:	623b      	str	r3, [r7, #32]
          break;
 8003336:	e01f      	b.n	8003378 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	330c      	adds	r3, #12
 800333e:	623b      	str	r3, [r7, #32]
          break;
 8003340:	e01a      	b.n	8003378 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d102      	bne.n	8003350 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800334a:	2304      	movs	r3, #4
 800334c:	623b      	str	r3, [r7, #32]
          break;
 800334e:	e013      	b.n	8003378 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d105      	bne.n	8003364 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003358:	2308      	movs	r3, #8
 800335a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69fa      	ldr	r2, [r7, #28]
 8003360:	611a      	str	r2, [r3, #16]
          break;
 8003362:	e009      	b.n	8003378 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003364:	2308      	movs	r3, #8
 8003366:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	615a      	str	r2, [r3, #20]
          break;
 800336e:	e003      	b.n	8003378 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003370:	2300      	movs	r3, #0
 8003372:	623b      	str	r3, [r7, #32]
          break;
 8003374:	e000      	b.n	8003378 <HAL_GPIO_Init+0x130>
          break;
 8003376:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2bff      	cmp	r3, #255	@ 0xff
 800337c:	d801      	bhi.n	8003382 <HAL_GPIO_Init+0x13a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	e001      	b.n	8003386 <HAL_GPIO_Init+0x13e>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3304      	adds	r3, #4
 8003386:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	2bff      	cmp	r3, #255	@ 0xff
 800338c:	d802      	bhi.n	8003394 <HAL_GPIO_Init+0x14c>
 800338e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	e002      	b.n	800339a <HAL_GPIO_Init+0x152>
 8003394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003396:	3b08      	subs	r3, #8
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	210f      	movs	r1, #15
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	fa01 f303 	lsl.w	r3, r1, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	401a      	ands	r2, r3
 80033ac:	6a39      	ldr	r1, [r7, #32]
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	fa01 f303 	lsl.w	r3, r1, r3
 80033b4:	431a      	orrs	r2, r3
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 80b1 	beq.w	800352a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80033c8:	4b4d      	ldr	r3, [pc, #308]	@ (8003500 <HAL_GPIO_Init+0x2b8>)
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	4a4c      	ldr	r2, [pc, #304]	@ (8003500 <HAL_GPIO_Init+0x2b8>)
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	6193      	str	r3, [r2, #24]
 80033d4:	4b4a      	ldr	r3, [pc, #296]	@ (8003500 <HAL_GPIO_Init+0x2b8>)
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033e0:	4a48      	ldr	r2, [pc, #288]	@ (8003504 <HAL_GPIO_Init+0x2bc>)
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	089b      	lsrs	r3, r3, #2
 80033e6:	3302      	adds	r3, #2
 80033e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	220f      	movs	r2, #15
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	4013      	ands	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a40      	ldr	r2, [pc, #256]	@ (8003508 <HAL_GPIO_Init+0x2c0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d013      	beq.n	8003434 <HAL_GPIO_Init+0x1ec>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a3f      	ldr	r2, [pc, #252]	@ (800350c <HAL_GPIO_Init+0x2c4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d00d      	beq.n	8003430 <HAL_GPIO_Init+0x1e8>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a3e      	ldr	r2, [pc, #248]	@ (8003510 <HAL_GPIO_Init+0x2c8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d007      	beq.n	800342c <HAL_GPIO_Init+0x1e4>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a3d      	ldr	r2, [pc, #244]	@ (8003514 <HAL_GPIO_Init+0x2cc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d101      	bne.n	8003428 <HAL_GPIO_Init+0x1e0>
 8003424:	2303      	movs	r3, #3
 8003426:	e006      	b.n	8003436 <HAL_GPIO_Init+0x1ee>
 8003428:	2304      	movs	r3, #4
 800342a:	e004      	b.n	8003436 <HAL_GPIO_Init+0x1ee>
 800342c:	2302      	movs	r3, #2
 800342e:	e002      	b.n	8003436 <HAL_GPIO_Init+0x1ee>
 8003430:	2301      	movs	r3, #1
 8003432:	e000      	b.n	8003436 <HAL_GPIO_Init+0x1ee>
 8003434:	2300      	movs	r3, #0
 8003436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003438:	f002 0203 	and.w	r2, r2, #3
 800343c:	0092      	lsls	r2, r2, #2
 800343e:	4093      	lsls	r3, r2
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003446:	492f      	ldr	r1, [pc, #188]	@ (8003504 <HAL_GPIO_Init+0x2bc>)
 8003448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344a:	089b      	lsrs	r3, r3, #2
 800344c:	3302      	adds	r3, #2
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d006      	beq.n	800346e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003460:	4b2d      	ldr	r3, [pc, #180]	@ (8003518 <HAL_GPIO_Init+0x2d0>)
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	492c      	ldr	r1, [pc, #176]	@ (8003518 <HAL_GPIO_Init+0x2d0>)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	4313      	orrs	r3, r2
 800346a:	608b      	str	r3, [r1, #8]
 800346c:	e006      	b.n	800347c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800346e:	4b2a      	ldr	r3, [pc, #168]	@ (8003518 <HAL_GPIO_Init+0x2d0>)
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	43db      	mvns	r3, r3
 8003476:	4928      	ldr	r1, [pc, #160]	@ (8003518 <HAL_GPIO_Init+0x2d0>)
 8003478:	4013      	ands	r3, r2
 800347a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d006      	beq.n	8003496 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003488:	4b23      	ldr	r3, [pc, #140]	@ (8003518 <HAL_GPIO_Init+0x2d0>)
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	4922      	ldr	r1, [pc, #136]	@ (8003518 <HAL_GPIO_Init+0x2d0>)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	4313      	orrs	r3, r2
 8003492:	60cb      	str	r3, [r1, #12]
 8003494:	e006      	b.n	80034a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003496:	4b20      	ldr	r3, [pc, #128]	@ (8003518 <HAL_GPIO_Init+0x2d0>)
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	43db      	mvns	r3, r3
 800349e:	491e      	ldr	r1, [pc, #120]	@ (8003518 <HAL_GPIO_Init+0x2d0>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d006      	beq.n	80034be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80034b0:	4b19      	ldr	r3, [pc, #100]	@ (8003518 <HAL_GPIO_Init+0x2d0>)
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	4918      	ldr	r1, [pc, #96]	@ (8003518 <HAL_GPIO_Init+0x2d0>)
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	604b      	str	r3, [r1, #4]
 80034bc:	e006      	b.n	80034cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80034be:	4b16      	ldr	r3, [pc, #88]	@ (8003518 <HAL_GPIO_Init+0x2d0>)
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	4914      	ldr	r1, [pc, #80]	@ (8003518 <HAL_GPIO_Init+0x2d0>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d021      	beq.n	800351c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003518 <HAL_GPIO_Init+0x2d0>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	490e      	ldr	r1, [pc, #56]	@ (8003518 <HAL_GPIO_Init+0x2d0>)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	600b      	str	r3, [r1, #0]
 80034e4:	e021      	b.n	800352a <HAL_GPIO_Init+0x2e2>
 80034e6:	bf00      	nop
 80034e8:	10320000 	.word	0x10320000
 80034ec:	10310000 	.word	0x10310000
 80034f0:	10220000 	.word	0x10220000
 80034f4:	10210000 	.word	0x10210000
 80034f8:	10120000 	.word	0x10120000
 80034fc:	10110000 	.word	0x10110000
 8003500:	40021000 	.word	0x40021000
 8003504:	40010000 	.word	0x40010000
 8003508:	40010800 	.word	0x40010800
 800350c:	40010c00 	.word	0x40010c00
 8003510:	40011000 	.word	0x40011000
 8003514:	40011400 	.word	0x40011400
 8003518:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800351c:	4b0b      	ldr	r3, [pc, #44]	@ (800354c <HAL_GPIO_Init+0x304>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	43db      	mvns	r3, r3
 8003524:	4909      	ldr	r1, [pc, #36]	@ (800354c <HAL_GPIO_Init+0x304>)
 8003526:	4013      	ands	r3, r2
 8003528:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352c:	3301      	adds	r3, #1
 800352e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003536:	fa22 f303 	lsr.w	r3, r2, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	f47f ae8e 	bne.w	800325c <HAL_GPIO_Init+0x14>
  }
}
 8003540:	bf00      	nop
 8003542:	bf00      	nop
 8003544:	372c      	adds	r7, #44	@ 0x2c
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr
 800354c:	40010400 	.word	0x40010400

08003550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	807b      	strh	r3, [r7, #2]
 800355c:	4613      	mov	r3, r2
 800355e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003560:	787b      	ldrb	r3, [r7, #1]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003566:	887a      	ldrh	r2, [r7, #2]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800356c:	e003      	b.n	8003576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800356e:	887b      	ldrh	r3, [r7, #2]
 8003570:	041a      	lsls	r2, r3, #16
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	611a      	str	r2, [r3, #16]
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr

08003580 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003592:	887a      	ldrh	r2, [r7, #2]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4013      	ands	r3, r2
 8003598:	041a      	lsls	r2, r3, #16
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	43d9      	mvns	r1, r3
 800359e:	887b      	ldrh	r3, [r7, #2]
 80035a0:	400b      	ands	r3, r1
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	611a      	str	r2, [r3, #16]
}
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr
	...

080035b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035be:	4b08      	ldr	r3, [pc, #32]	@ (80035e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035c0:	695a      	ldr	r2, [r3, #20]
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	4013      	ands	r3, r2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d006      	beq.n	80035d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035ca:	4a05      	ldr	r2, [pc, #20]	@ (80035e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035d0:	88fb      	ldrh	r3, [r7, #6]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fe fe7a 	bl	80022cc <HAL_GPIO_EXTI_Callback>
  }
}
 80035d8:	bf00      	nop
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40010400 	.word	0x40010400

080035e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e12b      	b.n	800384e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff fa52 	bl	8002ab4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2224      	movs	r2, #36	@ 0x24
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0201 	bic.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003636:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003646:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003648:	f001 fbfc 	bl	8004e44 <HAL_RCC_GetPCLK1Freq>
 800364c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	4a81      	ldr	r2, [pc, #516]	@ (8003858 <HAL_I2C_Init+0x274>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d807      	bhi.n	8003668 <HAL_I2C_Init+0x84>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4a80      	ldr	r2, [pc, #512]	@ (800385c <HAL_I2C_Init+0x278>)
 800365c:	4293      	cmp	r3, r2
 800365e:	bf94      	ite	ls
 8003660:	2301      	movls	r3, #1
 8003662:	2300      	movhi	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	e006      	b.n	8003676 <HAL_I2C_Init+0x92>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4a7d      	ldr	r2, [pc, #500]	@ (8003860 <HAL_I2C_Init+0x27c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	bf94      	ite	ls
 8003670:	2301      	movls	r3, #1
 8003672:	2300      	movhi	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e0e7      	b.n	800384e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4a78      	ldr	r2, [pc, #480]	@ (8003864 <HAL_I2C_Init+0x280>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	0c9b      	lsrs	r3, r3, #18
 8003688:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	4a6a      	ldr	r2, [pc, #424]	@ (8003858 <HAL_I2C_Init+0x274>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d802      	bhi.n	80036b8 <HAL_I2C_Init+0xd4>
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	3301      	adds	r3, #1
 80036b6:	e009      	b.n	80036cc <HAL_I2C_Init+0xe8>
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80036be:	fb02 f303 	mul.w	r3, r2, r3
 80036c2:	4a69      	ldr	r2, [pc, #420]	@ (8003868 <HAL_I2C_Init+0x284>)
 80036c4:	fba2 2303 	umull	r2, r3, r2, r3
 80036c8:	099b      	lsrs	r3, r3, #6
 80036ca:	3301      	adds	r3, #1
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	430b      	orrs	r3, r1
 80036d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80036de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	495c      	ldr	r1, [pc, #368]	@ (8003858 <HAL_I2C_Init+0x274>)
 80036e8:	428b      	cmp	r3, r1
 80036ea:	d819      	bhi.n	8003720 <HAL_I2C_Init+0x13c>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	1e59      	subs	r1, r3, #1
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80036fa:	1c59      	adds	r1, r3, #1
 80036fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003700:	400b      	ands	r3, r1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <HAL_I2C_Init+0x138>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1e59      	subs	r1, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	fbb1 f3f3 	udiv	r3, r1, r3
 8003714:	3301      	adds	r3, #1
 8003716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371a:	e051      	b.n	80037c0 <HAL_I2C_Init+0x1dc>
 800371c:	2304      	movs	r3, #4
 800371e:	e04f      	b.n	80037c0 <HAL_I2C_Init+0x1dc>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d111      	bne.n	800374c <HAL_I2C_Init+0x168>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	1e58      	subs	r0, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6859      	ldr	r1, [r3, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	440b      	add	r3, r1
 8003736:	fbb0 f3f3 	udiv	r3, r0, r3
 800373a:	3301      	adds	r3, #1
 800373c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003740:	2b00      	cmp	r3, #0
 8003742:	bf0c      	ite	eq
 8003744:	2301      	moveq	r3, #1
 8003746:	2300      	movne	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	e012      	b.n	8003772 <HAL_I2C_Init+0x18e>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	1e58      	subs	r0, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6859      	ldr	r1, [r3, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	0099      	lsls	r1, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003762:	3301      	adds	r3, #1
 8003764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003768:	2b00      	cmp	r3, #0
 800376a:	bf0c      	ite	eq
 800376c:	2301      	moveq	r3, #1
 800376e:	2300      	movne	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_I2C_Init+0x196>
 8003776:	2301      	movs	r3, #1
 8003778:	e022      	b.n	80037c0 <HAL_I2C_Init+0x1dc>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10e      	bne.n	80037a0 <HAL_I2C_Init+0x1bc>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	1e58      	subs	r0, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6859      	ldr	r1, [r3, #4]
 800378a:	460b      	mov	r3, r1
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	440b      	add	r3, r1
 8003790:	fbb0 f3f3 	udiv	r3, r0, r3
 8003794:	3301      	adds	r3, #1
 8003796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800379a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800379e:	e00f      	b.n	80037c0 <HAL_I2C_Init+0x1dc>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	1e58      	subs	r0, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6859      	ldr	r1, [r3, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	0099      	lsls	r1, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037b6:	3301      	adds	r3, #1
 80037b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	6809      	ldr	r1, [r1, #0]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69da      	ldr	r2, [r3, #28]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80037ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6911      	ldr	r1, [r2, #16]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	68d2      	ldr	r2, [r2, #12]
 80037fa:	4311      	orrs	r1, r2
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	430b      	orrs	r3, r1
 8003802:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695a      	ldr	r2, [r3, #20]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2220      	movs	r2, #32
 800383a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	000186a0 	.word	0x000186a0
 800385c:	001e847f 	.word	0x001e847f
 8003860:	003d08ff 	.word	0x003d08ff
 8003864:	431bde83 	.word	0x431bde83
 8003868:	10624dd3 	.word	0x10624dd3

0800386c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af02      	add	r7, sp, #8
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	4608      	mov	r0, r1
 8003876:	4611      	mov	r1, r2
 8003878:	461a      	mov	r2, r3
 800387a:	4603      	mov	r3, r0
 800387c:	817b      	strh	r3, [r7, #10]
 800387e:	460b      	mov	r3, r1
 8003880:	813b      	strh	r3, [r7, #8]
 8003882:	4613      	mov	r3, r2
 8003884:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003886:	f7ff fba3 	bl	8002fd0 <HAL_GetTick>
 800388a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b20      	cmp	r3, #32
 8003896:	f040 80d9 	bne.w	8003a4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	2319      	movs	r3, #25
 80038a0:	2201      	movs	r2, #1
 80038a2:	496d      	ldr	r1, [pc, #436]	@ (8003a58 <HAL_I2C_Mem_Write+0x1ec>)
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 fcc1 	bl	800422c <I2C_WaitOnFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80038b0:	2302      	movs	r3, #2
 80038b2:	e0cc      	b.n	8003a4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d101      	bne.n	80038c2 <HAL_I2C_Mem_Write+0x56>
 80038be:	2302      	movs	r3, #2
 80038c0:	e0c5      	b.n	8003a4e <HAL_I2C_Mem_Write+0x1e2>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d007      	beq.n	80038e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0201 	orr.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2221      	movs	r2, #33	@ 0x21
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2240      	movs	r2, #64	@ 0x40
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a3a      	ldr	r2, [r7, #32]
 8003912:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003918:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4a4d      	ldr	r2, [pc, #308]	@ (8003a5c <HAL_I2C_Mem_Write+0x1f0>)
 8003928:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800392a:	88f8      	ldrh	r0, [r7, #6]
 800392c:	893a      	ldrh	r2, [r7, #8]
 800392e:	8979      	ldrh	r1, [r7, #10]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	9301      	str	r3, [sp, #4]
 8003934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	4603      	mov	r3, r0
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 faf8 	bl	8003f30 <I2C_RequestMemoryWrite>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d052      	beq.n	80039ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e081      	b.n	8003a4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 fd86 	bl	8004460 <I2C_WaitOnTXEFlagUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00d      	beq.n	8003976 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395e:	2b04      	cmp	r3, #4
 8003960:	d107      	bne.n	8003972 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003970:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e06b      	b.n	8003a4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397a:	781a      	ldrb	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d11b      	bne.n	80039ec <HAL_I2C_Mem_Write+0x180>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d017      	beq.n	80039ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c0:	781a      	ldrb	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b29a      	uxth	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1aa      	bne.n	800394a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 fd79 	bl	80044f0 <I2C_WaitOnBTFFlagUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00d      	beq.n	8003a20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d107      	bne.n	8003a1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e016      	b.n	8003a4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	e000      	b.n	8003a4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a4c:	2302      	movs	r3, #2
  }
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	00100002 	.word	0x00100002
 8003a5c:	ffff0000 	.word	0xffff0000

08003a60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08c      	sub	sp, #48	@ 0x30
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	4608      	mov	r0, r1
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4603      	mov	r3, r0
 8003a70:	817b      	strh	r3, [r7, #10]
 8003a72:	460b      	mov	r3, r1
 8003a74:	813b      	strh	r3, [r7, #8]
 8003a76:	4613      	mov	r3, r2
 8003a78:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a7e:	f7ff faa7 	bl	8002fd0 <HAL_GetTick>
 8003a82:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b20      	cmp	r3, #32
 8003a8e:	f040 8244 	bne.w	8003f1a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	2319      	movs	r3, #25
 8003a98:	2201      	movs	r2, #1
 8003a9a:	4982      	ldr	r1, [pc, #520]	@ (8003ca4 <HAL_I2C_Mem_Read+0x244>)
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 fbc5 	bl	800422c <I2C_WaitOnFlagUntilTimeout>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e237      	b.n	8003f1c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_I2C_Mem_Read+0x5a>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e230      	b.n	8003f1c <HAL_I2C_Mem_Read+0x4bc>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d007      	beq.n	8003ae0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0201 	orr.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003aee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2222      	movs	r2, #34	@ 0x22
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2240      	movs	r2, #64	@ 0x40
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003b10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4a62      	ldr	r2, [pc, #392]	@ (8003ca8 <HAL_I2C_Mem_Read+0x248>)
 8003b20:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b22:	88f8      	ldrh	r0, [r7, #6]
 8003b24:	893a      	ldrh	r2, [r7, #8]
 8003b26:	8979      	ldrh	r1, [r7, #10]
 8003b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2a:	9301      	str	r3, [sp, #4]
 8003b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	4603      	mov	r3, r0
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 fa92 	bl	800405c <I2C_RequestMemoryRead>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e1ec      	b.n	8003f1c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d113      	bne.n	8003b72 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61fb      	str	r3, [r7, #28]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	61fb      	str	r3, [r7, #28]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	61fb      	str	r3, [r7, #28]
 8003b5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	e1c0      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d11e      	bne.n	8003bb8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b8a:	b672      	cpsid	i
}
 8003b8c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b8e:	2300      	movs	r3, #0
 8003b90:	61bb      	str	r3, [r7, #24]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	61bb      	str	r3, [r7, #24]
 8003ba2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bb2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003bb4:	b662      	cpsie	i
}
 8003bb6:	e035      	b.n	8003c24 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d11e      	bne.n	8003bfe <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003bd0:	b672      	cpsid	i
}
 8003bd2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bf8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003bfa:	b662      	cpsie	i
}
 8003bfc:	e012      	b.n	8003c24 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c0c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c0e:	2300      	movs	r3, #0
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	613b      	str	r3, [r7, #16]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	613b      	str	r3, [r7, #16]
 8003c22:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003c24:	e166      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	f200 811f 	bhi.w	8003e6e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d123      	bne.n	8003c80 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 fc9f 	bl	8004580 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e167      	b.n	8003f1c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691a      	ldr	r2, [r3, #16]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c7e:	e139      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d152      	bne.n	8003d2e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c8e:	2200      	movs	r2, #0
 8003c90:	4906      	ldr	r1, [pc, #24]	@ (8003cac <HAL_I2C_Mem_Read+0x24c>)
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 faca 	bl	800422c <I2C_WaitOnFlagUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d008      	beq.n	8003cb0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e13c      	b.n	8003f1c <HAL_I2C_Mem_Read+0x4bc>
 8003ca2:	bf00      	nop
 8003ca4:	00100002 	.word	0x00100002
 8003ca8:	ffff0000 	.word	0xffff0000
 8003cac:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003cb0:	b672      	cpsid	i
}
 8003cb2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691a      	ldr	r2, [r3, #16]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003cf6:	b662      	cpsie	i
}
 8003cf8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0c:	1c5a      	adds	r2, r3, #1
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d2c:	e0e2      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d34:	2200      	movs	r2, #0
 8003d36:	497b      	ldr	r1, [pc, #492]	@ (8003f24 <HAL_I2C_Mem_Read+0x4c4>)
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 fa77 	bl	800422c <I2C_WaitOnFlagUntilTimeout>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e0e9      	b.n	8003f1c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d58:	b672      	cpsid	i
}
 8003d5a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	691a      	ldr	r2, [r3, #16]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6e:	1c5a      	adds	r2, r3, #1
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d8e:	4b66      	ldr	r3, [pc, #408]	@ (8003f28 <HAL_I2C_Mem_Read+0x4c8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	08db      	lsrs	r3, r3, #3
 8003d94:	4a65      	ldr	r2, [pc, #404]	@ (8003f2c <HAL_I2C_Mem_Read+0x4cc>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	0a1a      	lsrs	r2, r3, #8
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	00da      	lsls	r2, r3, #3
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d118      	bne.n	8003de6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	f043 0220 	orr.w	r2, r3, #32
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003dd6:	b662      	cpsie	i
}
 8003dd8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e09a      	b.n	8003f1c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	d1d9      	bne.n	8003da8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003e36:	b662      	cpsie	i
}
 8003e38:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e6c:	e042      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e70:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 fb84 	bl	8004580 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e04c      	b.n	8003f1c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d118      	bne.n	8003ef4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	691a      	ldr	r2, [r3, #16]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f47f ae94 	bne.w	8003c26 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	e000      	b.n	8003f1c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003f1a:	2302      	movs	r3, #2
  }
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3728      	adds	r7, #40	@ 0x28
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	00010004 	.word	0x00010004
 8003f28:	20000008 	.word	0x20000008
 8003f2c:	14f8b589 	.word	0x14f8b589

08003f30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af02      	add	r7, sp, #8
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	4608      	mov	r0, r1
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	4603      	mov	r3, r0
 8003f40:	817b      	strh	r3, [r7, #10]
 8003f42:	460b      	mov	r3, r1
 8003f44:	813b      	strh	r3, [r7, #8]
 8003f46:	4613      	mov	r3, r2
 8003f48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	6a3b      	ldr	r3, [r7, #32]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 f960 	bl	800422c <I2C_WaitOnFlagUntilTimeout>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00d      	beq.n	8003f8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f80:	d103      	bne.n	8003f8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f88:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e05f      	b.n	800404e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f8e:	897b      	ldrh	r3, [r7, #10]
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	461a      	mov	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	6a3a      	ldr	r2, [r7, #32]
 8003fa2:	492d      	ldr	r1, [pc, #180]	@ (8004058 <I2C_RequestMemoryWrite+0x128>)
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 f9bb 	bl	8004320 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e04c      	b.n	800404e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fcc:	6a39      	ldr	r1, [r7, #32]
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 fa46 	bl	8004460 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00d      	beq.n	8003ff6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d107      	bne.n	8003ff2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ff0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e02b      	b.n	800404e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ff6:	88fb      	ldrh	r3, [r7, #6]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d105      	bne.n	8004008 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ffc:	893b      	ldrh	r3, [r7, #8]
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	611a      	str	r2, [r3, #16]
 8004006:	e021      	b.n	800404c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004008:	893b      	ldrh	r3, [r7, #8]
 800400a:	0a1b      	lsrs	r3, r3, #8
 800400c:	b29b      	uxth	r3, r3
 800400e:	b2da      	uxtb	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004018:	6a39      	ldr	r1, [r7, #32]
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 fa20 	bl	8004460 <I2C_WaitOnTXEFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00d      	beq.n	8004042 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402a:	2b04      	cmp	r3, #4
 800402c:	d107      	bne.n	800403e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800403c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e005      	b.n	800404e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004042:	893b      	ldrh	r3, [r7, #8]
 8004044:	b2da      	uxtb	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	00010002 	.word	0x00010002

0800405c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af02      	add	r7, sp, #8
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	4608      	mov	r0, r1
 8004066:	4611      	mov	r1, r2
 8004068:	461a      	mov	r2, r3
 800406a:	4603      	mov	r3, r0
 800406c:	817b      	strh	r3, [r7, #10]
 800406e:	460b      	mov	r3, r1
 8004070:	813b      	strh	r3, [r7, #8]
 8004072:	4613      	mov	r3, r2
 8004074:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004084:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004094:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	2200      	movs	r2, #0
 800409e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 f8c2 	bl	800422c <I2C_WaitOnFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00d      	beq.n	80040ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040bc:	d103      	bne.n	80040c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e0aa      	b.n	8004220 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040ca:	897b      	ldrh	r3, [r7, #10]
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	461a      	mov	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040dc:	6a3a      	ldr	r2, [r7, #32]
 80040de:	4952      	ldr	r1, [pc, #328]	@ (8004228 <I2C_RequestMemoryRead+0x1cc>)
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 f91d 	bl	8004320 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e097      	b.n	8004220 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004108:	6a39      	ldr	r1, [r7, #32]
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 f9a8 	bl	8004460 <I2C_WaitOnTXEFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00d      	beq.n	8004132 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411a:	2b04      	cmp	r3, #4
 800411c:	d107      	bne.n	800412e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800412c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e076      	b.n	8004220 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004132:	88fb      	ldrh	r3, [r7, #6]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d105      	bne.n	8004144 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004138:	893b      	ldrh	r3, [r7, #8]
 800413a:	b2da      	uxtb	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	611a      	str	r2, [r3, #16]
 8004142:	e021      	b.n	8004188 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004144:	893b      	ldrh	r3, [r7, #8]
 8004146:	0a1b      	lsrs	r3, r3, #8
 8004148:	b29b      	uxth	r3, r3
 800414a:	b2da      	uxtb	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004154:	6a39      	ldr	r1, [r7, #32]
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 f982 	bl	8004460 <I2C_WaitOnTXEFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00d      	beq.n	800417e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004166:	2b04      	cmp	r3, #4
 8004168:	d107      	bne.n	800417a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004178:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e050      	b.n	8004220 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800417e:	893b      	ldrh	r3, [r7, #8]
 8004180:	b2da      	uxtb	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800418a:	6a39      	ldr	r1, [r7, #32]
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 f967 	bl	8004460 <I2C_WaitOnTXEFlagUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00d      	beq.n	80041b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419c:	2b04      	cmp	r3, #4
 800419e:	d107      	bne.n	80041b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e035      	b.n	8004220 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 f82b 	bl	800422c <I2C_WaitOnFlagUntilTimeout>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00d      	beq.n	80041f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041ea:	d103      	bne.n	80041f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e013      	b.n	8004220 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041f8:	897b      	ldrh	r3, [r7, #10]
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	f043 0301 	orr.w	r3, r3, #1
 8004200:	b2da      	uxtb	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420a:	6a3a      	ldr	r2, [r7, #32]
 800420c:	4906      	ldr	r1, [pc, #24]	@ (8004228 <I2C_RequestMemoryRead+0x1cc>)
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 f886 	bl	8004320 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	00010002 	.word	0x00010002

0800422c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	603b      	str	r3, [r7, #0]
 8004238:	4613      	mov	r3, r2
 800423a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800423c:	e048      	b.n	80042d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004244:	d044      	beq.n	80042d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004246:	f7fe fec3 	bl	8002fd0 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d302      	bcc.n	800425c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d139      	bne.n	80042d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	0c1b      	lsrs	r3, r3, #16
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b01      	cmp	r3, #1
 8004264:	d10d      	bne.n	8004282 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	43da      	mvns	r2, r3
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	4013      	ands	r3, r2
 8004272:	b29b      	uxth	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	bf0c      	ite	eq
 8004278:	2301      	moveq	r3, #1
 800427a:	2300      	movne	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	461a      	mov	r2, r3
 8004280:	e00c      	b.n	800429c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	43da      	mvns	r2, r3
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	4013      	ands	r3, r2
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	bf0c      	ite	eq
 8004294:	2301      	moveq	r3, #1
 8004296:	2300      	movne	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	461a      	mov	r2, r3
 800429c:	79fb      	ldrb	r3, [r7, #7]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d116      	bne.n	80042d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042bc:	f043 0220 	orr.w	r2, r3, #32
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e023      	b.n	8004318 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	0c1b      	lsrs	r3, r3, #16
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d10d      	bne.n	80042f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	43da      	mvns	r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	4013      	ands	r3, r2
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	bf0c      	ite	eq
 80042ec:	2301      	moveq	r3, #1
 80042ee:	2300      	movne	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	461a      	mov	r2, r3
 80042f4:	e00c      	b.n	8004310 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	43da      	mvns	r2, r3
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	4013      	ands	r3, r2
 8004302:	b29b      	uxth	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	bf0c      	ite	eq
 8004308:	2301      	moveq	r3, #1
 800430a:	2300      	movne	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	461a      	mov	r2, r3
 8004310:	79fb      	ldrb	r3, [r7, #7]
 8004312:	429a      	cmp	r2, r3
 8004314:	d093      	beq.n	800423e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
 800432c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800432e:	e071      	b.n	8004414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800433a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800433e:	d123      	bne.n	8004388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800434e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004358:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004374:	f043 0204 	orr.w	r2, r3, #4
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e067      	b.n	8004458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438e:	d041      	beq.n	8004414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004390:	f7fe fe1e 	bl	8002fd0 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	429a      	cmp	r2, r3
 800439e:	d302      	bcc.n	80043a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d136      	bne.n	8004414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	0c1b      	lsrs	r3, r3, #16
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d10c      	bne.n	80043ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	43da      	mvns	r2, r3
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	4013      	ands	r3, r2
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	bf14      	ite	ne
 80043c2:	2301      	movne	r3, #1
 80043c4:	2300      	moveq	r3, #0
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	e00b      	b.n	80043e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	43da      	mvns	r2, r3
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	4013      	ands	r3, r2
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	bf14      	ite	ne
 80043dc:	2301      	movne	r3, #1
 80043de:	2300      	moveq	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d016      	beq.n	8004414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004400:	f043 0220 	orr.w	r2, r3, #32
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e021      	b.n	8004458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	0c1b      	lsrs	r3, r3, #16
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b01      	cmp	r3, #1
 800441c:	d10c      	bne.n	8004438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	43da      	mvns	r2, r3
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	4013      	ands	r3, r2
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	bf14      	ite	ne
 8004430:	2301      	movne	r3, #1
 8004432:	2300      	moveq	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	e00b      	b.n	8004450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	43da      	mvns	r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	4013      	ands	r3, r2
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	bf14      	ite	ne
 800444a:	2301      	movne	r3, #1
 800444c:	2300      	moveq	r3, #0
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	f47f af6d 	bne.w	8004330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800446c:	e034      	b.n	80044d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 f8e3 	bl	800463a <I2C_IsAcknowledgeFailed>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e034      	b.n	80044e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004484:	d028      	beq.n	80044d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004486:	f7fe fda3 	bl	8002fd0 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	429a      	cmp	r2, r3
 8004494:	d302      	bcc.n	800449c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d11d      	bne.n	80044d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a6:	2b80      	cmp	r3, #128	@ 0x80
 80044a8:	d016      	beq.n	80044d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c4:	f043 0220 	orr.w	r2, r3, #32
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e007      	b.n	80044e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044e2:	2b80      	cmp	r3, #128	@ 0x80
 80044e4:	d1c3      	bne.n	800446e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044fc:	e034      	b.n	8004568 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 f89b 	bl	800463a <I2C_IsAcknowledgeFailed>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e034      	b.n	8004578 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004514:	d028      	beq.n	8004568 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004516:	f7fe fd5b 	bl	8002fd0 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	429a      	cmp	r2, r3
 8004524:	d302      	bcc.n	800452c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d11d      	bne.n	8004568 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	2b04      	cmp	r3, #4
 8004538:	d016      	beq.n	8004568 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004554:	f043 0220 	orr.w	r2, r3, #32
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e007      	b.n	8004578 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f003 0304 	and.w	r3, r3, #4
 8004572:	2b04      	cmp	r3, #4
 8004574:	d1c3      	bne.n	80044fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800458c:	e049      	b.n	8004622 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	f003 0310 	and.w	r3, r3, #16
 8004598:	2b10      	cmp	r3, #16
 800459a:	d119      	bne.n	80045d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0210 	mvn.w	r2, #16
 80045a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e030      	b.n	8004632 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d0:	f7fe fcfe 	bl	8002fd0 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d302      	bcc.n	80045e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d11d      	bne.n	8004622 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f0:	2b40      	cmp	r3, #64	@ 0x40
 80045f2:	d016      	beq.n	8004622 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460e:	f043 0220 	orr.w	r2, r3, #32
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e007      	b.n	8004632 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800462c:	2b40      	cmp	r3, #64	@ 0x40
 800462e:	d1ae      	bne.n	800458e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800464c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004650:	d11b      	bne.n	800468a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800465a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004676:	f043 0204 	orr.w	r2, r3, #4
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	bc80      	pop	{r7}
 8004694:	4770      	bx	lr
	...

08004698 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800469c:	4b03      	ldr	r3, [pc, #12]	@ (80046ac <HAL_PWR_EnableBkUpAccess+0x14>)
 800469e:	2201      	movs	r2, #1
 80046a0:	601a      	str	r2, [r3, #0]
}
 80046a2:	bf00      	nop
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	420e0020 	.word	0x420e0020

080046b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e272      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 8087 	beq.w	80047de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046d0:	4b92      	ldr	r3, [pc, #584]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f003 030c 	and.w	r3, r3, #12
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d00c      	beq.n	80046f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046dc:	4b8f      	ldr	r3, [pc, #572]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f003 030c 	and.w	r3, r3, #12
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d112      	bne.n	800470e <HAL_RCC_OscConfig+0x5e>
 80046e8:	4b8c      	ldr	r3, [pc, #560]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046f4:	d10b      	bne.n	800470e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f6:	4b89      	ldr	r3, [pc, #548]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d06c      	beq.n	80047dc <HAL_RCC_OscConfig+0x12c>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d168      	bne.n	80047dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e24c      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004716:	d106      	bne.n	8004726 <HAL_RCC_OscConfig+0x76>
 8004718:	4b80      	ldr	r3, [pc, #512]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a7f      	ldr	r2, [pc, #508]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 800471e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	e02e      	b.n	8004784 <HAL_RCC_OscConfig+0xd4>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10c      	bne.n	8004748 <HAL_RCC_OscConfig+0x98>
 800472e:	4b7b      	ldr	r3, [pc, #492]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a7a      	ldr	r2, [pc, #488]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 8004734:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	4b78      	ldr	r3, [pc, #480]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a77      	ldr	r2, [pc, #476]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 8004740:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	e01d      	b.n	8004784 <HAL_RCC_OscConfig+0xd4>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004750:	d10c      	bne.n	800476c <HAL_RCC_OscConfig+0xbc>
 8004752:	4b72      	ldr	r3, [pc, #456]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a71      	ldr	r2, [pc, #452]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 8004758:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	4b6f      	ldr	r3, [pc, #444]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a6e      	ldr	r2, [pc, #440]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 8004764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	e00b      	b.n	8004784 <HAL_RCC_OscConfig+0xd4>
 800476c:	4b6b      	ldr	r3, [pc, #428]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a6a      	ldr	r2, [pc, #424]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 8004772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	4b68      	ldr	r3, [pc, #416]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a67      	ldr	r2, [pc, #412]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 800477e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004782:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d013      	beq.n	80047b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478c:	f7fe fc20 	bl	8002fd0 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004794:	f7fe fc1c 	bl	8002fd0 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b64      	cmp	r3, #100	@ 0x64
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e200      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a6:	4b5d      	ldr	r3, [pc, #372]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0f0      	beq.n	8004794 <HAL_RCC_OscConfig+0xe4>
 80047b2:	e014      	b.n	80047de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b4:	f7fe fc0c 	bl	8002fd0 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047bc:	f7fe fc08 	bl	8002fd0 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b64      	cmp	r3, #100	@ 0x64
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e1ec      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ce:	4b53      	ldr	r3, [pc, #332]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f0      	bne.n	80047bc <HAL_RCC_OscConfig+0x10c>
 80047da:	e000      	b.n	80047de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d063      	beq.n	80048b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047ea:	4b4c      	ldr	r3, [pc, #304]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f003 030c 	and.w	r3, r3, #12
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00b      	beq.n	800480e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80047f6:	4b49      	ldr	r3, [pc, #292]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f003 030c 	and.w	r3, r3, #12
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d11c      	bne.n	800483c <HAL_RCC_OscConfig+0x18c>
 8004802:	4b46      	ldr	r3, [pc, #280]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d116      	bne.n	800483c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800480e:	4b43      	ldr	r3, [pc, #268]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d005      	beq.n	8004826 <HAL_RCC_OscConfig+0x176>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d001      	beq.n	8004826 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e1c0      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004826:	4b3d      	ldr	r3, [pc, #244]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	4939      	ldr	r1, [pc, #228]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 8004836:	4313      	orrs	r3, r2
 8004838:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800483a:	e03a      	b.n	80048b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d020      	beq.n	8004886 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004844:	4b36      	ldr	r3, [pc, #216]	@ (8004920 <HAL_RCC_OscConfig+0x270>)
 8004846:	2201      	movs	r2, #1
 8004848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484a:	f7fe fbc1 	bl	8002fd0 <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004852:	f7fe fbbd 	bl	8002fd0 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e1a1      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004864:	4b2d      	ldr	r3, [pc, #180]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0f0      	beq.n	8004852 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004870:	4b2a      	ldr	r3, [pc, #168]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	4927      	ldr	r1, [pc, #156]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 8004880:	4313      	orrs	r3, r2
 8004882:	600b      	str	r3, [r1, #0]
 8004884:	e015      	b.n	80048b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004886:	4b26      	ldr	r3, [pc, #152]	@ (8004920 <HAL_RCC_OscConfig+0x270>)
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488c:	f7fe fba0 	bl	8002fd0 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004894:	f7fe fb9c 	bl	8002fd0 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e180      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048a6:	4b1d      	ldr	r3, [pc, #116]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1f0      	bne.n	8004894 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d03a      	beq.n	8004934 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d019      	beq.n	80048fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048c6:	4b17      	ldr	r3, [pc, #92]	@ (8004924 <HAL_RCC_OscConfig+0x274>)
 80048c8:	2201      	movs	r2, #1
 80048ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048cc:	f7fe fb80 	bl	8002fd0 <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d4:	f7fe fb7c 	bl	8002fd0 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e160      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048e6:	4b0d      	ldr	r3, [pc, #52]	@ (800491c <HAL_RCC_OscConfig+0x26c>)
 80048e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0f0      	beq.n	80048d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80048f2:	2001      	movs	r0, #1
 80048f4:	f000 face 	bl	8004e94 <RCC_Delay>
 80048f8:	e01c      	b.n	8004934 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004924 <HAL_RCC_OscConfig+0x274>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004900:	f7fe fb66 	bl	8002fd0 <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004906:	e00f      	b.n	8004928 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004908:	f7fe fb62 	bl	8002fd0 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d908      	bls.n	8004928 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e146      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
 800491a:	bf00      	nop
 800491c:	40021000 	.word	0x40021000
 8004920:	42420000 	.word	0x42420000
 8004924:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004928:	4b92      	ldr	r3, [pc, #584]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 800492a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1e9      	bne.n	8004908 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 80a6 	beq.w	8004a8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004942:	2300      	movs	r3, #0
 8004944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004946:	4b8b      	ldr	r3, [pc, #556]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10d      	bne.n	800496e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004952:	4b88      	ldr	r3, [pc, #544]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	4a87      	ldr	r2, [pc, #540]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800495c:	61d3      	str	r3, [r2, #28]
 800495e:	4b85      	ldr	r3, [pc, #532]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004966:	60bb      	str	r3, [r7, #8]
 8004968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800496a:	2301      	movs	r3, #1
 800496c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496e:	4b82      	ldr	r3, [pc, #520]	@ (8004b78 <HAL_RCC_OscConfig+0x4c8>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004976:	2b00      	cmp	r3, #0
 8004978:	d118      	bne.n	80049ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800497a:	4b7f      	ldr	r3, [pc, #508]	@ (8004b78 <HAL_RCC_OscConfig+0x4c8>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a7e      	ldr	r2, [pc, #504]	@ (8004b78 <HAL_RCC_OscConfig+0x4c8>)
 8004980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004986:	f7fe fb23 	bl	8002fd0 <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800498c:	e008      	b.n	80049a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800498e:	f7fe fb1f 	bl	8002fd0 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b64      	cmp	r3, #100	@ 0x64
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e103      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a0:	4b75      	ldr	r3, [pc, #468]	@ (8004b78 <HAL_RCC_OscConfig+0x4c8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0f0      	beq.n	800498e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d106      	bne.n	80049c2 <HAL_RCC_OscConfig+0x312>
 80049b4:	4b6f      	ldr	r3, [pc, #444]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	4a6e      	ldr	r2, [pc, #440]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 80049ba:	f043 0301 	orr.w	r3, r3, #1
 80049be:	6213      	str	r3, [r2, #32]
 80049c0:	e02d      	b.n	8004a1e <HAL_RCC_OscConfig+0x36e>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10c      	bne.n	80049e4 <HAL_RCC_OscConfig+0x334>
 80049ca:	4b6a      	ldr	r3, [pc, #424]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	4a69      	ldr	r2, [pc, #420]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 80049d0:	f023 0301 	bic.w	r3, r3, #1
 80049d4:	6213      	str	r3, [r2, #32]
 80049d6:	4b67      	ldr	r3, [pc, #412]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	4a66      	ldr	r2, [pc, #408]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 80049dc:	f023 0304 	bic.w	r3, r3, #4
 80049e0:	6213      	str	r3, [r2, #32]
 80049e2:	e01c      	b.n	8004a1e <HAL_RCC_OscConfig+0x36e>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	2b05      	cmp	r3, #5
 80049ea:	d10c      	bne.n	8004a06 <HAL_RCC_OscConfig+0x356>
 80049ec:	4b61      	ldr	r3, [pc, #388]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	4a60      	ldr	r2, [pc, #384]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 80049f2:	f043 0304 	orr.w	r3, r3, #4
 80049f6:	6213      	str	r3, [r2, #32]
 80049f8:	4b5e      	ldr	r3, [pc, #376]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	4a5d      	ldr	r2, [pc, #372]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 80049fe:	f043 0301 	orr.w	r3, r3, #1
 8004a02:	6213      	str	r3, [r2, #32]
 8004a04:	e00b      	b.n	8004a1e <HAL_RCC_OscConfig+0x36e>
 8004a06:	4b5b      	ldr	r3, [pc, #364]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	4a5a      	ldr	r2, [pc, #360]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004a0c:	f023 0301 	bic.w	r3, r3, #1
 8004a10:	6213      	str	r3, [r2, #32]
 8004a12:	4b58      	ldr	r3, [pc, #352]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	4a57      	ldr	r2, [pc, #348]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004a18:	f023 0304 	bic.w	r3, r3, #4
 8004a1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d015      	beq.n	8004a52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a26:	f7fe fad3 	bl	8002fd0 <HAL_GetTick>
 8004a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a2c:	e00a      	b.n	8004a44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a2e:	f7fe facf 	bl	8002fd0 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e0b1      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a44:	4b4b      	ldr	r3, [pc, #300]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0ee      	beq.n	8004a2e <HAL_RCC_OscConfig+0x37e>
 8004a50:	e014      	b.n	8004a7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a52:	f7fe fabd 	bl	8002fd0 <HAL_GetTick>
 8004a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a58:	e00a      	b.n	8004a70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a5a:	f7fe fab9 	bl	8002fd0 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e09b      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a70:	4b40      	ldr	r3, [pc, #256]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1ee      	bne.n	8004a5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a7c:	7dfb      	ldrb	r3, [r7, #23]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d105      	bne.n	8004a8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a82:	4b3c      	ldr	r3, [pc, #240]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	4a3b      	ldr	r2, [pc, #236]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004a88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 8087 	beq.w	8004ba6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a98:	4b36      	ldr	r3, [pc, #216]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f003 030c 	and.w	r3, r3, #12
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d061      	beq.n	8004b68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d146      	bne.n	8004b3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aac:	4b33      	ldr	r3, [pc, #204]	@ (8004b7c <HAL_RCC_OscConfig+0x4cc>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab2:	f7fe fa8d 	bl	8002fd0 <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aba:	f7fe fa89 	bl	8002fd0 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e06d      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004acc:	4b29      	ldr	r3, [pc, #164]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1f0      	bne.n	8004aba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ae0:	d108      	bne.n	8004af4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ae2:	4b24      	ldr	r3, [pc, #144]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	4921      	ldr	r1, [pc, #132]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004af4:	4b1f      	ldr	r3, [pc, #124]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a19      	ldr	r1, [r3, #32]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b04:	430b      	orrs	r3, r1
 8004b06:	491b      	ldr	r1, [pc, #108]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8004b7c <HAL_RCC_OscConfig+0x4cc>)
 8004b0e:	2201      	movs	r2, #1
 8004b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b12:	f7fe fa5d 	bl	8002fd0 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b1a:	f7fe fa59 	bl	8002fd0 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e03d      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b2c:	4b11      	ldr	r3, [pc, #68]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0f0      	beq.n	8004b1a <HAL_RCC_OscConfig+0x46a>
 8004b38:	e035      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b3a:	4b10      	ldr	r3, [pc, #64]	@ (8004b7c <HAL_RCC_OscConfig+0x4cc>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b40:	f7fe fa46 	bl	8002fd0 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b48:	f7fe fa42 	bl	8002fd0 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e026      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b5a:	4b06      	ldr	r3, [pc, #24]	@ (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f0      	bne.n	8004b48 <HAL_RCC_OscConfig+0x498>
 8004b66:	e01e      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d107      	bne.n	8004b80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e019      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
 8004b74:	40021000 	.word	0x40021000
 8004b78:	40007000 	.word	0x40007000
 8004b7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b80:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb0 <HAL_RCC_OscConfig+0x500>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d106      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d001      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	40021000 	.word	0x40021000

08004bb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0d0      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bc8:	4b6a      	ldr	r3, [pc, #424]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c0>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d910      	bls.n	8004bf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd6:	4b67      	ldr	r3, [pc, #412]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f023 0207 	bic.w	r2, r3, #7
 8004bde:	4965      	ldr	r1, [pc, #404]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c0>)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be6:	4b63      	ldr	r3, [pc, #396]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e0b8      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d020      	beq.n	8004c46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c10:	4b59      	ldr	r3, [pc, #356]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	4a58      	ldr	r2, [pc, #352]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004c16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c28:	4b53      	ldr	r3, [pc, #332]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	4a52      	ldr	r2, [pc, #328]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004c2e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004c32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c34:	4b50      	ldr	r3, [pc, #320]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	494d      	ldr	r1, [pc, #308]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d040      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d107      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5a:	4b47      	ldr	r3, [pc, #284]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d115      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e07f      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d107      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c72:	4b41      	ldr	r3, [pc, #260]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d109      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e073      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c82:	4b3d      	ldr	r3, [pc, #244]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e06b      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c92:	4b39      	ldr	r3, [pc, #228]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f023 0203 	bic.w	r2, r3, #3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	4936      	ldr	r1, [pc, #216]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ca4:	f7fe f994 	bl	8002fd0 <HAL_GetTick>
 8004ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004caa:	e00a      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cac:	f7fe f990 	bl	8002fd0 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e053      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f003 020c 	and.w	r2, r3, #12
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d1eb      	bne.n	8004cac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cd4:	4b27      	ldr	r3, [pc, #156]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c0>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0307 	and.w	r3, r3, #7
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d210      	bcs.n	8004d04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce2:	4b24      	ldr	r3, [pc, #144]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f023 0207 	bic.w	r2, r3, #7
 8004cea:	4922      	ldr	r1, [pc, #136]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c0>)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf2:	4b20      	ldr	r3, [pc, #128]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d001      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e032      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d008      	beq.n	8004d22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d10:	4b19      	ldr	r3, [pc, #100]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4916      	ldr	r1, [pc, #88]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d2e:	4b12      	ldr	r3, [pc, #72]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	490e      	ldr	r1, [pc, #56]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d42:	f000 f821 	bl	8004d88 <HAL_RCC_GetSysClockFreq>
 8004d46:	4602      	mov	r2, r0
 8004d48:	4b0b      	ldr	r3, [pc, #44]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	091b      	lsrs	r3, r3, #4
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	490a      	ldr	r1, [pc, #40]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c8>)
 8004d54:	5ccb      	ldrb	r3, [r1, r3]
 8004d56:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5a:	4a09      	ldr	r2, [pc, #36]	@ (8004d80 <HAL_RCC_ClockConfig+0x1cc>)
 8004d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d5e:	4b09      	ldr	r3, [pc, #36]	@ (8004d84 <HAL_RCC_ClockConfig+0x1d0>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fe f8f2 	bl	8002f4c <HAL_InitTick>

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40022000 	.word	0x40022000
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	0800d310 	.word	0x0800d310
 8004d80:	20000008 	.word	0x20000008
 8004d84:	2000000c 	.word	0x2000000c

08004d88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	2300      	movs	r3, #0
 8004d94:	60bb      	str	r3, [r7, #8]
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004da2:	4b1e      	ldr	r3, [pc, #120]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x94>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f003 030c 	and.w	r3, r3, #12
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d002      	beq.n	8004db8 <HAL_RCC_GetSysClockFreq+0x30>
 8004db2:	2b08      	cmp	r3, #8
 8004db4:	d003      	beq.n	8004dbe <HAL_RCC_GetSysClockFreq+0x36>
 8004db6:	e027      	b.n	8004e08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004db8:	4b19      	ldr	r3, [pc, #100]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x98>)
 8004dba:	613b      	str	r3, [r7, #16]
      break;
 8004dbc:	e027      	b.n	8004e0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	0c9b      	lsrs	r3, r3, #18
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	4a17      	ldr	r2, [pc, #92]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004dc8:	5cd3      	ldrb	r3, [r2, r3]
 8004dca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d010      	beq.n	8004df8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004dd6:	4b11      	ldr	r3, [pc, #68]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x94>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	0c5b      	lsrs	r3, r3, #17
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	4a11      	ldr	r2, [pc, #68]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004de2:	5cd3      	ldrb	r3, [r2, r3]
 8004de4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a0d      	ldr	r2, [pc, #52]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x98>)
 8004dea:	fb03 f202 	mul.w	r2, r3, r2
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df4:	617b      	str	r3, [r7, #20]
 8004df6:	e004      	b.n	8004e02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a0c      	ldr	r2, [pc, #48]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004dfc:	fb02 f303 	mul.w	r3, r2, r3
 8004e00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	613b      	str	r3, [r7, #16]
      break;
 8004e06:	e002      	b.n	8004e0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e08:	4b05      	ldr	r3, [pc, #20]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e0a:	613b      	str	r3, [r7, #16]
      break;
 8004e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e0e:	693b      	ldr	r3, [r7, #16]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	371c      	adds	r7, #28
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bc80      	pop	{r7}
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	007a1200 	.word	0x007a1200
 8004e24:	0800d328 	.word	0x0800d328
 8004e28:	0800d338 	.word	0x0800d338
 8004e2c:	003d0900 	.word	0x003d0900

08004e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e34:	4b02      	ldr	r3, [pc, #8]	@ (8004e40 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e36:	681b      	ldr	r3, [r3, #0]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bc80      	pop	{r7}
 8004e3e:	4770      	bx	lr
 8004e40:	20000008 	.word	0x20000008

08004e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e48:	f7ff fff2 	bl	8004e30 <HAL_RCC_GetHCLKFreq>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	4b05      	ldr	r3, [pc, #20]	@ (8004e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	0a1b      	lsrs	r3, r3, #8
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	4903      	ldr	r1, [pc, #12]	@ (8004e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e5a:	5ccb      	ldrb	r3, [r1, r3]
 8004e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40021000 	.word	0x40021000
 8004e68:	0800d320 	.word	0x0800d320

08004e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e70:	f7ff ffde 	bl	8004e30 <HAL_RCC_GetHCLKFreq>
 8004e74:	4602      	mov	r2, r0
 8004e76:	4b05      	ldr	r3, [pc, #20]	@ (8004e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	0adb      	lsrs	r3, r3, #11
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	4903      	ldr	r1, [pc, #12]	@ (8004e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e82:	5ccb      	ldrb	r3, [r1, r3]
 8004e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	0800d320 	.word	0x0800d320

08004e94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec8 <RCC_Delay+0x34>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8004ecc <RCC_Delay+0x38>)
 8004ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea6:	0a5b      	lsrs	r3, r3, #9
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	fb02 f303 	mul.w	r3, r2, r3
 8004eae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004eb0:	bf00      	nop
  }
  while (Delay --);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	1e5a      	subs	r2, r3, #1
 8004eb6:	60fa      	str	r2, [r7, #12]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1f9      	bne.n	8004eb0 <RCC_Delay+0x1c>
}
 8004ebc:	bf00      	nop
 8004ebe:	bf00      	nop
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bc80      	pop	{r7}
 8004ec6:	4770      	bx	lr
 8004ec8:	20000008 	.word	0x20000008
 8004ecc:	10624dd3 	.word	0x10624dd3

08004ed0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	613b      	str	r3, [r7, #16]
 8004edc:	2300      	movs	r3, #0
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d07d      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004eec:	2300      	movs	r3, #0
 8004eee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ef0:	4b4f      	ldr	r3, [pc, #316]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10d      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004efc:	4b4c      	ldr	r3, [pc, #304]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	4a4b      	ldr	r2, [pc, #300]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f06:	61d3      	str	r3, [r2, #28]
 8004f08:	4b49      	ldr	r3, [pc, #292]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f10:	60bb      	str	r3, [r7, #8]
 8004f12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f14:	2301      	movs	r3, #1
 8004f16:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f18:	4b46      	ldr	r3, [pc, #280]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d118      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f24:	4b43      	ldr	r3, [pc, #268]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a42      	ldr	r2, [pc, #264]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f30:	f7fe f84e 	bl	8002fd0 <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f36:	e008      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f38:	f7fe f84a 	bl	8002fd0 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b64      	cmp	r3, #100	@ 0x64
 8004f44:	d901      	bls.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e06d      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f4a:	4b3a      	ldr	r3, [pc, #232]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0f0      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f56:	4b36      	ldr	r3, [pc, #216]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f5e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d02e      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d027      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f74:	4b2e      	ldr	r3, [pc, #184]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f7c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f7e:	4b2e      	ldr	r3, [pc, #184]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f80:	2201      	movs	r2, #1
 8004f82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f84:	4b2c      	ldr	r3, [pc, #176]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f8a:	4a29      	ldr	r2, [pc, #164]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d014      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9a:	f7fe f819 	bl	8002fd0 <HAL_GetTick>
 8004f9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fa0:	e00a      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fa2:	f7fe f815 	bl	8002fd0 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e036      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0ee      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	4917      	ldr	r1, [pc, #92]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004fd6:	7dfb      	ldrb	r3, [r7, #23]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d105      	bne.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fdc:	4b14      	ldr	r3, [pc, #80]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	4a13      	ldr	r2, [pc, #76]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fe2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fe6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d008      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	490b      	ldr	r1, [pc, #44]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005002:	4313      	orrs	r3, r2
 8005004:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0310 	and.w	r3, r3, #16
 800500e:	2b00      	cmp	r3, #0
 8005010:	d008      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005012:	4b07      	ldr	r3, [pc, #28]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	4904      	ldr	r1, [pc, #16]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005020:	4313      	orrs	r3, r2
 8005022:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	40021000 	.word	0x40021000
 8005034:	40007000 	.word	0x40007000
 8005038:	42420440 	.word	0x42420440

0800503c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b088      	sub	sp, #32
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	617b      	str	r3, [r7, #20]
 8005048:	2300      	movs	r3, #0
 800504a:	61fb      	str	r3, [r7, #28]
 800504c:	2300      	movs	r3, #0
 800504e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	2300      	movs	r3, #0
 8005056:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b10      	cmp	r3, #16
 800505c:	d00a      	beq.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b10      	cmp	r3, #16
 8005062:	f200 808a 	bhi.w	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d045      	beq.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b02      	cmp	r3, #2
 8005070:	d075      	beq.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005072:	e082      	b.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005074:	4b46      	ldr	r3, [pc, #280]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800507a:	4b45      	ldr	r3, [pc, #276]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d07b      	beq.n	800517e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	0c9b      	lsrs	r3, r3, #18
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	4a41      	ldr	r2, [pc, #260]	@ (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005090:	5cd3      	ldrb	r3, [r2, r3]
 8005092:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d015      	beq.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800509e:	4b3c      	ldr	r3, [pc, #240]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	0c5b      	lsrs	r3, r3, #17
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	4a3b      	ldr	r2, [pc, #236]	@ (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80050aa:	5cd3      	ldrb	r3, [r2, r3]
 80050ac:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00d      	beq.n	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80050b8:	4a38      	ldr	r2, [pc, #224]	@ (800519c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	fb02 f303 	mul.w	r3, r2, r3
 80050c6:	61fb      	str	r3, [r7, #28]
 80050c8:	e004      	b.n	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	4a34      	ldr	r2, [pc, #208]	@ (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80050ce:	fb02 f303 	mul.w	r3, r2, r3
 80050d2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80050d4:	4b2e      	ldr	r3, [pc, #184]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050e0:	d102      	bne.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	61bb      	str	r3, [r7, #24]
      break;
 80050e6:	e04a      	b.n	800517e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	4a2d      	ldr	r2, [pc, #180]	@ (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80050ee:	fba2 2303 	umull	r2, r3, r2, r3
 80050f2:	085b      	lsrs	r3, r3, #1
 80050f4:	61bb      	str	r3, [r7, #24]
      break;
 80050f6:	e042      	b.n	800517e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80050f8:	4b25      	ldr	r3, [pc, #148]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005104:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005108:	d108      	bne.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d003      	beq.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005114:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005118:	61bb      	str	r3, [r7, #24]
 800511a:	e01f      	b.n	800515c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005122:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005126:	d109      	bne.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005128:	4b19      	ldr	r3, [pc, #100]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800512a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005134:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005138:	61bb      	str	r3, [r7, #24]
 800513a:	e00f      	b.n	800515c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005142:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005146:	d11c      	bne.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005148:	4b11      	ldr	r3, [pc, #68]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d016      	beq.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005154:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005158:	61bb      	str	r3, [r7, #24]
      break;
 800515a:	e012      	b.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800515c:	e011      	b.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800515e:	f7ff fe85 	bl	8004e6c <HAL_RCC_GetPCLK2Freq>
 8005162:	4602      	mov	r2, r0
 8005164:	4b0a      	ldr	r3, [pc, #40]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	0b9b      	lsrs	r3, r3, #14
 800516a:	f003 0303 	and.w	r3, r3, #3
 800516e:	3301      	adds	r3, #1
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	fbb2 f3f3 	udiv	r3, r2, r3
 8005176:	61bb      	str	r3, [r7, #24]
      break;
 8005178:	e004      	b.n	8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800517a:	bf00      	nop
 800517c:	e002      	b.n	8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800517e:	bf00      	nop
 8005180:	e000      	b.n	8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005182:	bf00      	nop
    }
  }
  return (frequency);
 8005184:	69bb      	ldr	r3, [r7, #24]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3720      	adds	r7, #32
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	40021000 	.word	0x40021000
 8005194:	0800d33c 	.word	0x0800d33c
 8005198:	0800d34c 	.word	0x0800d34c
 800519c:	007a1200 	.word	0x007a1200
 80051a0:	003d0900 	.word	0x003d0900
 80051a4:	aaaaaaab 	.word	0xaaaaaaab

080051a8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e07a      	b.n	80052b4 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	7c5b      	ldrb	r3, [r3, #17]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d105      	bne.n	80051d4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7fd fcdc 	bl	8002b8c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fbcc 	bl	8005978 <HAL_RTC_WaitForSynchro>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d004      	beq.n	80051f0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2204      	movs	r2, #4
 80051ea:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e061      	b.n	80052b4 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fc85 	bl	8005b00 <RTC_EnterInitMode>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d004      	beq.n	8005206 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2204      	movs	r2, #4
 8005200:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e056      	b.n	80052b4 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 0207 	bic.w	r2, r2, #7
 8005214:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d005      	beq.n	800522a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800521e:	4b27      	ldr	r3, [pc, #156]	@ (80052bc <HAL_RTC_Init+0x114>)
 8005220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005222:	4a26      	ldr	r2, [pc, #152]	@ (80052bc <HAL_RTC_Init+0x114>)
 8005224:	f023 0301 	bic.w	r3, r3, #1
 8005228:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800522a:	4b24      	ldr	r3, [pc, #144]	@ (80052bc <HAL_RTC_Init+0x114>)
 800522c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800522e:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	4921      	ldr	r1, [pc, #132]	@ (80052bc <HAL_RTC_Init+0x114>)
 8005238:	4313      	orrs	r3, r2
 800523a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005244:	d003      	beq.n	800524e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	e00e      	b.n	800526c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800524e:	2001      	movs	r0, #1
 8005250:	f7ff fef4 	bl	800503c <HAL_RCCEx_GetPeriphCLKFreq>
 8005254:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d104      	bne.n	8005266 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2204      	movs	r2, #4
 8005260:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e026      	b.n	80052b4 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	3b01      	subs	r3, #1
 800526a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	0c1a      	lsrs	r2, r3, #16
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f002 020f 	and.w	r2, r2, #15
 8005278:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	b292      	uxth	r2, r2
 8005282:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 fc63 	bl	8005b50 <RTC_ExitInitMode>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d004      	beq.n	800529a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2204      	movs	r2, #4
 8005294:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e00c      	b.n	80052b4 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80052b2:	2300      	movs	r3, #0
  }
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40006c00 	.word	0x40006c00

080052c0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80052c0:	b590      	push	{r4, r7, lr}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	2300      	movs	r3, #0
 80052d2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <HAL_RTC_SetTime+0x20>
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e080      	b.n	80053e6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	7c1b      	ldrb	r3, [r3, #16]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d101      	bne.n	80052f0 <HAL_RTC_SetTime+0x30>
 80052ec:	2302      	movs	r3, #2
 80052ee:	e07a      	b.n	80053e6 <HAL_RTC_SetTime+0x126>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2201      	movs	r2, #1
 80052f4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2202      	movs	r2, #2
 80052fa:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d113      	bne.n	800532a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800530c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	785b      	ldrb	r3, [r3, #1]
 8005314:	4619      	mov	r1, r3
 8005316:	460b      	mov	r3, r1
 8005318:	011b      	lsls	r3, r3, #4
 800531a:	1a5b      	subs	r3, r3, r1
 800531c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800531e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005324:	4413      	add	r3, r2
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	e01e      	b.n	8005368 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fc53 	bl	8005bda <RTC_Bcd2ToByte>
 8005334:	4603      	mov	r3, r0
 8005336:	461a      	mov	r2, r3
 8005338:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800533c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	785b      	ldrb	r3, [r3, #1]
 8005344:	4618      	mov	r0, r3
 8005346:	f000 fc48 	bl	8005bda <RTC_Bcd2ToByte>
 800534a:	4603      	mov	r3, r0
 800534c:	461a      	mov	r2, r3
 800534e:	4613      	mov	r3, r2
 8005350:	011b      	lsls	r3, r3, #4
 8005352:	1a9b      	subs	r3, r3, r2
 8005354:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005356:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	789b      	ldrb	r3, [r3, #2]
 800535c:	4618      	mov	r0, r3
 800535e:	f000 fc3c 	bl	8005bda <RTC_Bcd2ToByte>
 8005362:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005364:	4423      	add	r3, r4
 8005366:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005368:	6979      	ldr	r1, [r7, #20]
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 fb61 	bl	8005a32 <RTC_WriteTimeCounter>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d007      	beq.n	8005386 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2204      	movs	r2, #4
 800537a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e02f      	b.n	80053e6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0205 	bic.w	r2, r2, #5
 8005394:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 fb72 	bl	8005a80 <RTC_ReadAlarmCounter>
 800539c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a4:	d018      	beq.n	80053d8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d214      	bcs.n	80053d8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80053b4:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80053b8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80053ba:	6939      	ldr	r1, [r7, #16]
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 fb78 	bl	8005ab2 <RTC_WriteAlarmCounter>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d007      	beq.n	80053d8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2204      	movs	r2, #4
 80053cc:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e006      	b.n	80053e6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2201      	movs	r2, #1
 80053dc:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80053e4:	2300      	movs	r3, #0
  }
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	371c      	adds	r7, #28
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd90      	pop	{r4, r7, pc}
	...

080053f0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	61bb      	str	r3, [r7, #24]
 8005400:	2300      	movs	r3, #0
 8005402:	61fb      	str	r3, [r7, #28]
 8005404:	2300      	movs	r3, #0
 8005406:	617b      	str	r3, [r7, #20]
 8005408:	2300      	movs	r3, #0
 800540a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <HAL_RTC_GetTime+0x28>
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e0b5      	b.n	8005588 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e0ac      	b.n	8005588 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 facf 	bl	80059d2 <RTC_ReadTimeCounter>
 8005434:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	4a55      	ldr	r2, [pc, #340]	@ (8005590 <HAL_RTC_GetTime+0x1a0>)
 800543a:	fba2 2303 	umull	r2, r3, r2, r3
 800543e:	0adb      	lsrs	r3, r3, #11
 8005440:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	4b52      	ldr	r3, [pc, #328]	@ (8005590 <HAL_RTC_GetTime+0x1a0>)
 8005446:	fba3 1302 	umull	r1, r3, r3, r2
 800544a:	0adb      	lsrs	r3, r3, #11
 800544c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8005450:	fb01 f303 	mul.w	r3, r1, r3
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	4a4f      	ldr	r2, [pc, #316]	@ (8005594 <HAL_RTC_GetTime+0x1a4>)
 8005458:	fba2 2303 	umull	r2, r3, r2, r3
 800545c:	095b      	lsrs	r3, r3, #5
 800545e:	b2da      	uxtb	r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	4a4a      	ldr	r2, [pc, #296]	@ (8005590 <HAL_RTC_GetTime+0x1a0>)
 8005468:	fba2 1203 	umull	r1, r2, r2, r3
 800546c:	0ad2      	lsrs	r2, r2, #11
 800546e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8005472:	fb01 f202 	mul.w	r2, r1, r2
 8005476:	1a9a      	subs	r2, r3, r2
 8005478:	4b46      	ldr	r3, [pc, #280]	@ (8005594 <HAL_RTC_GetTime+0x1a4>)
 800547a:	fba3 1302 	umull	r1, r3, r3, r2
 800547e:	0959      	lsrs	r1, r3, #5
 8005480:	460b      	mov	r3, r1
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	1a5b      	subs	r3, r3, r1
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	1ad1      	subs	r1, r2, r3
 800548a:	b2ca      	uxtb	r2, r1
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	2b17      	cmp	r3, #23
 8005494:	d955      	bls.n	8005542 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	4a3f      	ldr	r2, [pc, #252]	@ (8005598 <HAL_RTC_GetTime+0x1a8>)
 800549a:	fba2 2303 	umull	r2, r3, r2, r3
 800549e:	091b      	lsrs	r3, r3, #4
 80054a0:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80054a2:	6939      	ldr	r1, [r7, #16]
 80054a4:	4b3c      	ldr	r3, [pc, #240]	@ (8005598 <HAL_RTC_GetTime+0x1a8>)
 80054a6:	fba3 2301 	umull	r2, r3, r3, r1
 80054aa:	091a      	lsrs	r2, r3, #4
 80054ac:	4613      	mov	r3, r2
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	4413      	add	r3, r2
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	1aca      	subs	r2, r1, r3
 80054b6:	b2d2      	uxtb	r2, r2
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 fadf 	bl	8005a80 <RTC_ReadAlarmCounter>
 80054c2:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ca:	d008      	beq.n	80054de <HAL_RTC_GetTime+0xee>
 80054cc:	69fa      	ldr	r2, [r7, #28]
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d904      	bls.n	80054de <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80054d4:	69fa      	ldr	r2, [r7, #28]
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	61fb      	str	r3, [r7, #28]
 80054dc:	e002      	b.n	80054e4 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80054de:	f04f 33ff 	mov.w	r3, #4294967295
 80054e2:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	4a2d      	ldr	r2, [pc, #180]	@ (800559c <HAL_RTC_GetTime+0x1ac>)
 80054e8:	fb02 f303 	mul.w	r3, r2, r3
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80054f2:	69b9      	ldr	r1, [r7, #24]
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 fa9c 	bl	8005a32 <RTC_WriteTimeCounter>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e041      	b.n	8005588 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550a:	d00c      	beq.n	8005526 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800550c:	69fa      	ldr	r2, [r7, #28]
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	4413      	add	r3, r2
 8005512:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005514:	69f9      	ldr	r1, [r7, #28]
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f000 facb 	bl	8005ab2 <RTC_WriteAlarmCounter>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e030      	b.n	8005588 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005526:	69f9      	ldr	r1, [r7, #28]
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 fac2 	bl	8005ab2 <RTC_WriteAlarmCounter>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e027      	b.n	8005588 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8005538:	6979      	ldr	r1, [r7, #20]
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 fb6a 	bl	8005c14 <RTC_DateUpdate>
 8005540:	e003      	b.n	800554a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	b2da      	uxtb	r2, r3
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d01a      	beq.n	8005586 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	4618      	mov	r0, r3
 8005556:	f000 fb23 	bl	8005ba0 <RTC_ByteToBcd2>
 800555a:	4603      	mov	r3, r0
 800555c:	461a      	mov	r2, r3
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	785b      	ldrb	r3, [r3, #1]
 8005566:	4618      	mov	r0, r3
 8005568:	f000 fb1a 	bl	8005ba0 <RTC_ByteToBcd2>
 800556c:	4603      	mov	r3, r0
 800556e:	461a      	mov	r2, r3
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	789b      	ldrb	r3, [r3, #2]
 8005578:	4618      	mov	r0, r3
 800557a:	f000 fb11 	bl	8005ba0 <RTC_ByteToBcd2>
 800557e:	4603      	mov	r3, r0
 8005580:	461a      	mov	r2, r3
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3720      	adds	r7, #32
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	91a2b3c5 	.word	0x91a2b3c5
 8005594:	88888889 	.word	0x88888889
 8005598:	aaaaaaab 	.word	0xaaaaaaab
 800559c:	00015180 	.word	0x00015180

080055a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b088      	sub	sp, #32
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	61fb      	str	r3, [r7, #28]
 80055b0:	2300      	movs	r3, #0
 80055b2:	61bb      	str	r3, [r7, #24]
 80055b4:	2300      	movs	r3, #0
 80055b6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <HAL_RTC_SetDate+0x24>
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e097      	b.n	80056f8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	7c1b      	ldrb	r3, [r3, #16]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d101      	bne.n	80055d4 <HAL_RTC_SetDate+0x34>
 80055d0:	2302      	movs	r3, #2
 80055d2:	e091      	b.n	80056f8 <HAL_RTC_SetDate+0x158>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2201      	movs	r2, #1
 80055d8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2202      	movs	r2, #2
 80055de:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10c      	bne.n	8005600 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	78da      	ldrb	r2, [r3, #3]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	785a      	ldrb	r2, [r3, #1]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	789a      	ldrb	r2, [r3, #2]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	739a      	strb	r2, [r3, #14]
 80055fe:	e01a      	b.n	8005636 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	78db      	ldrb	r3, [r3, #3]
 8005604:	4618      	mov	r0, r3
 8005606:	f000 fae8 	bl	8005bda <RTC_Bcd2ToByte>
 800560a:	4603      	mov	r3, r0
 800560c:	461a      	mov	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	785b      	ldrb	r3, [r3, #1]
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fadf 	bl	8005bda <RTC_Bcd2ToByte>
 800561c:	4603      	mov	r3, r0
 800561e:	461a      	mov	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	789b      	ldrb	r3, [r3, #2]
 8005628:	4618      	mov	r0, r3
 800562a:	f000 fad6 	bl	8005bda <RTC_Bcd2ToByte>
 800562e:	4603      	mov	r3, r0
 8005630:	461a      	mov	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	7bdb      	ldrb	r3, [r3, #15]
 800563a:	4618      	mov	r0, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	7b59      	ldrb	r1, [r3, #13]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	7b9b      	ldrb	r3, [r3, #14]
 8005644:	461a      	mov	r2, r3
 8005646:	f000 fbc1 	bl	8005dcc <RTC_WeekDayNum>
 800564a:	4603      	mov	r3, r0
 800564c:	461a      	mov	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	7b1a      	ldrb	r2, [r3, #12]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 f9b9 	bl	80059d2 <RTC_ReadTimeCounter>
 8005660:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	4a26      	ldr	r2, [pc, #152]	@ (8005700 <HAL_RTC_SetDate+0x160>)
 8005666:	fba2 2303 	umull	r2, r3, r2, r3
 800566a:	0adb      	lsrs	r3, r3, #11
 800566c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2b18      	cmp	r3, #24
 8005672:	d93a      	bls.n	80056ea <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	4a23      	ldr	r2, [pc, #140]	@ (8005704 <HAL_RTC_SetDate+0x164>)
 8005678:	fba2 2303 	umull	r2, r3, r2, r3
 800567c:	091b      	lsrs	r3, r3, #4
 800567e:	4a22      	ldr	r2, [pc, #136]	@ (8005708 <HAL_RTC_SetDate+0x168>)
 8005680:	fb02 f303 	mul.w	r3, r2, r3
 8005684:	69fa      	ldr	r2, [r7, #28]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800568a:	69f9      	ldr	r1, [r7, #28]
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 f9d0 	bl	8005a32 <RTC_WriteTimeCounter>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d007      	beq.n	80056a8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2204      	movs	r2, #4
 800569c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e027      	b.n	80056f8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 f9e9 	bl	8005a80 <RTC_ReadAlarmCounter>
 80056ae:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b6:	d018      	beq.n	80056ea <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d214      	bcs.n	80056ea <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80056c6:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80056ca:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80056cc:	69b9      	ldr	r1, [r7, #24]
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 f9ef 	bl	8005ab2 <RTC_WriteAlarmCounter>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d007      	beq.n	80056ea <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2204      	movs	r2, #4
 80056de:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e006      	b.n	80056f8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2201      	movs	r2, #1
 80056ee:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3720      	adds	r7, #32
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	91a2b3c5 	.word	0x91a2b3c5
 8005704:	aaaaaaab 	.word	0xaaaaaaab
 8005708:	00015180 	.word	0x00015180

0800570c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8005718:	f107 0314 	add.w	r3, r7, #20
 800571c:	2100      	movs	r1, #0
 800571e:	460a      	mov	r2, r1
 8005720:	801a      	strh	r2, [r3, #0]
 8005722:	460a      	mov	r2, r1
 8005724:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <HAL_RTC_GetDate+0x26>
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e03a      	b.n	80057ac <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8005736:	f107 0314 	add.w	r3, r7, #20
 800573a:	2200      	movs	r2, #0
 800573c:	4619      	mov	r1, r3
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f7ff fe56 	bl	80053f0 <HAL_RTC_GetTime>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e02e      	b.n	80057ac <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	7b1a      	ldrb	r2, [r3, #12]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	7bda      	ldrb	r2, [r3, #15]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	7b5a      	ldrb	r2, [r3, #13]
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	7b9a      	ldrb	r2, [r3, #14]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d01a      	beq.n	80057aa <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	78db      	ldrb	r3, [r3, #3]
 8005778:	4618      	mov	r0, r3
 800577a:	f000 fa11 	bl	8005ba0 <RTC_ByteToBcd2>
 800577e:	4603      	mov	r3, r0
 8005780:	461a      	mov	r2, r3
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	785b      	ldrb	r3, [r3, #1]
 800578a:	4618      	mov	r0, r3
 800578c:	f000 fa08 	bl	8005ba0 <RTC_ByteToBcd2>
 8005790:	4603      	mov	r3, r0
 8005792:	461a      	mov	r2, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	789b      	ldrb	r3, [r3, #2]
 800579c:	4618      	mov	r0, r3
 800579e:	f000 f9ff 	bl	8005ba0 <RTC_ByteToBcd2>
 80057a2:	4603      	mov	r3, r0
 80057a4:	461a      	mov	r2, r3
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3718      	adds	r7, #24
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80057b4:	b590      	push	{r4, r7, lr}
 80057b6:	b089      	sub	sp, #36	@ 0x24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 80057c0:	2300      	movs	r3, #0
 80057c2:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 80057c4:	f107 0314 	add.w	r3, r7, #20
 80057c8:	2100      	movs	r1, #0
 80057ca:	460a      	mov	r2, r1
 80057cc:	801a      	strh	r2, [r3, #0]
 80057ce:	460a      	mov	r2, r1
 80057d0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <HAL_RTC_SetAlarm_IT+0x2a>
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e099      	b.n	8005916 <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	7c1b      	ldrb	r3, [r3, #16]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d101      	bne.n	80057ee <HAL_RTC_SetAlarm_IT+0x3a>
 80057ea:	2302      	movs	r3, #2
 80057ec:	e093      	b.n	8005916 <HAL_RTC_SetAlarm_IT+0x162>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2201      	movs	r2, #1
 80057f2:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2202      	movs	r2, #2
 80057f8:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80057fa:	f107 0314 	add.w	r3, r7, #20
 80057fe:	2200      	movs	r2, #0
 8005800:	4619      	mov	r1, r3
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f7ff fdf4 	bl	80053f0 <HAL_RTC_GetTime>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e081      	b.n	8005916 <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005812:	7d3b      	ldrb	r3, [r7, #20]
 8005814:	461a      	mov	r2, r3
 8005816:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800581a:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 800581e:	7d7b      	ldrb	r3, [r7, #21]
 8005820:	4619      	mov	r1, r3
 8005822:	460b      	mov	r3, r1
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	1a5b      	subs	r3, r3, r1
 8005828:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800582a:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 800582c:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800582e:	4413      	add	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d113      	bne.n	8005860 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	461a      	mov	r2, r3
 800583e:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005842:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	785b      	ldrb	r3, [r3, #1]
 800584a:	4619      	mov	r1, r3
 800584c:	460b      	mov	r3, r1
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	1a5b      	subs	r3, r3, r1
 8005852:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8005854:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800585a:	4413      	add	r3, r2
 800585c:	61fb      	str	r3, [r7, #28]
 800585e:	e01e      	b.n	800589e <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	4618      	mov	r0, r3
 8005866:	f000 f9b8 	bl	8005bda <RTC_Bcd2ToByte>
 800586a:	4603      	mov	r3, r0
 800586c:	461a      	mov	r2, r3
 800586e:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005872:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	785b      	ldrb	r3, [r3, #1]
 800587a:	4618      	mov	r0, r3
 800587c:	f000 f9ad 	bl	8005bda <RTC_Bcd2ToByte>
 8005880:	4603      	mov	r3, r0
 8005882:	461a      	mov	r2, r3
 8005884:	4613      	mov	r3, r2
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	1a9b      	subs	r3, r3, r2
 800588a:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800588c:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	789b      	ldrb	r3, [r3, #2]
 8005892:	4618      	mov	r0, r3
 8005894:	f000 f9a1 	bl	8005bda <RTC_Bcd2ToByte>
 8005898:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800589a:	4423      	add	r3, r4
 800589c:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 800589e:	69fa      	ldr	r2, [r7, #28]
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d205      	bcs.n	80058b2 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80058ac:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80058b0:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80058b2:	69f9      	ldr	r1, [r7, #28]
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 f8fc 	bl	8005ab2 <RTC_WriteAlarmCounter>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d007      	beq.n	80058d0 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2204      	movs	r2, #4
 80058c4:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e022      	b.n	8005916 <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0202 	bic.w	r2, r2, #2
 80058de:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0202 	orr.w	r2, r2, #2
 80058ee:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80058f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005920 <HAL_RTC_SetAlarm_IT+0x16c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a0a      	ldr	r2, [pc, #40]	@ (8005920 <HAL_RTC_SetAlarm_IT+0x16c>)
 80058f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058fa:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80058fc:	4b08      	ldr	r3, [pc, #32]	@ (8005920 <HAL_RTC_SetAlarm_IT+0x16c>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	4a07      	ldr	r2, [pc, #28]	@ (8005920 <HAL_RTC_SetAlarm_IT+0x16c>)
 8005902:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005906:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2201      	movs	r2, #1
 800590c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005914:	2300      	movs	r3, #0
  }
}
 8005916:	4618      	mov	r0, r3
 8005918:	3724      	adds	r7, #36	@ 0x24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd90      	pop	{r4, r7, pc}
 800591e:	bf00      	nop
 8005920:	40010400 	.word	0x40010400

08005924 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d011      	beq.n	800595e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f7fc fde1 	bl	8002510 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 0202 	bic.w	r2, r2, #2
 800595c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800595e:	4b05      	ldr	r3, [pc, #20]	@ (8005974 <HAL_RTC_AlarmIRQHandler+0x50>)
 8005960:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005964:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	745a      	strb	r2, [r3, #17]
}
 800596c:	bf00      	nop
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	40010400 	.word	0x40010400

08005978 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e01d      	b.n	80059ca <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0208 	bic.w	r2, r2, #8
 800599c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800599e:	f7fd fb17 	bl	8002fd0 <HAL_GetTick>
 80059a2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80059a4:	e009      	b.n	80059ba <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80059a6:	f7fd fb13 	bl	8002fd0 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80059b4:	d901      	bls.n	80059ba <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e007      	b.n	80059ca <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f003 0308 	and.w	r3, r3, #8
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0ee      	beq.n	80059a6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b087      	sub	sp, #28
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80059da:	2300      	movs	r3, #0
 80059dc:	827b      	strh	r3, [r7, #18]
 80059de:	2300      	movs	r3, #0
 80059e0:	823b      	strh	r3, [r7, #16]
 80059e2:	2300      	movs	r3, #0
 80059e4:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005a02:	8a7a      	ldrh	r2, [r7, #18]
 8005a04:	8a3b      	ldrh	r3, [r7, #16]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d008      	beq.n	8005a1c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005a0a:	8a3b      	ldrh	r3, [r7, #16]
 8005a0c:	041a      	lsls	r2, r3, #16
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	4313      	orrs	r3, r2
 8005a18:	617b      	str	r3, [r7, #20]
 8005a1a:	e004      	b.n	8005a26 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005a1c:	8a7b      	ldrh	r3, [r7, #18]
 8005a1e:	041a      	lsls	r2, r3, #16
 8005a20:	89fb      	ldrh	r3, [r7, #14]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005a26:	697b      	ldr	r3, [r7, #20]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	371c      	adds	r7, #28
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bc80      	pop	{r7}
 8005a30:	4770      	bx	lr

08005a32 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b084      	sub	sp, #16
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f85d 	bl	8005b00 <RTC_EnterInitMode>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	73fb      	strb	r3, [r7, #15]
 8005a50:	e011      	b.n	8005a76 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	0c12      	lsrs	r2, r2, #16
 8005a5a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	b292      	uxth	r2, r2
 8005a64:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f872 	bl	8005b50 <RTC_ExitInitMode>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	81fb      	strh	r3, [r7, #14]
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005aa0:	89fb      	ldrh	r3, [r7, #14]
 8005aa2:	041a      	lsls	r2, r3, #16
 8005aa4:	89bb      	ldrh	r3, [r7, #12]
 8005aa6:	4313      	orrs	r3, r2
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bc80      	pop	{r7}
 8005ab0:	4770      	bx	lr

08005ab2 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b084      	sub	sp, #16
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005abc:	2300      	movs	r3, #0
 8005abe:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f81d 	bl	8005b00 <RTC_EnterInitMode>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	73fb      	strb	r3, [r7, #15]
 8005ad0:	e011      	b.n	8005af6 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	0c12      	lsrs	r2, r2, #16
 8005ada:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	b292      	uxth	r2, r2
 8005ae4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f832 	bl	8005b50 <RTC_ExitInitMode>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005b0c:	f7fd fa60 	bl	8002fd0 <HAL_GetTick>
 8005b10:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005b12:	e009      	b.n	8005b28 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005b14:	f7fd fa5c 	bl	8002fd0 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b22:	d901      	bls.n	8005b28 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e00f      	b.n	8005b48 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f003 0320 	and.w	r3, r3, #32
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0ee      	beq.n	8005b14 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f042 0210 	orr.w	r2, r2, #16
 8005b44:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 0210 	bic.w	r2, r2, #16
 8005b6a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005b6c:	f7fd fa30 	bl	8002fd0 <HAL_GetTick>
 8005b70:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005b72:	e009      	b.n	8005b88 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005b74:	f7fd fa2c 	bl	8002fd0 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b82:	d901      	bls.n	8005b88 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e007      	b.n	8005b98 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f003 0320 	and.w	r3, r3, #32
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d0ee      	beq.n	8005b74 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005bae:	e005      	b.n	8005bbc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005bb6:	79fb      	ldrb	r3, [r7, #7]
 8005bb8:	3b0a      	subs	r3, #10
 8005bba:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005bbc:	79fb      	ldrb	r3, [r7, #7]
 8005bbe:	2b09      	cmp	r3, #9
 8005bc0:	d8f6      	bhi.n	8005bb0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	011b      	lsls	r3, r3, #4
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	79fb      	ldrb	r3, [r7, #7]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	b2db      	uxtb	r3, r3
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bc80      	pop	{r7}
 8005bd8:	4770      	bx	lr

08005bda <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b085      	sub	sp, #20
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	4603      	mov	r3, r0
 8005be2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005be4:	2300      	movs	r3, #0
 8005be6:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005be8:	79fb      	ldrb	r3, [r7, #7]
 8005bea:	091b      	lsrs	r3, r3, #4
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	461a      	mov	r2, r3
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005bfa:	79fb      	ldrb	r3, [r7, #7]
 8005bfc:	f003 030f 	and.w	r3, r3, #15
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	4413      	add	r3, r2
 8005c08:	b2db      	uxtb	r3, r3
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bc80      	pop	{r7}
 8005c12:	4770      	bx	lr

08005c14 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	2300      	movs	r3, #0
 8005c24:	613b      	str	r3, [r7, #16]
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	7bdb      	ldrb	r3, [r3, #15]
 8005c32:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	7b5b      	ldrb	r3, [r3, #13]
 8005c38:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	7b9b      	ldrb	r3, [r3, #14]
 8005c3e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005c40:	2300      	movs	r3, #0
 8005c42:	60bb      	str	r3, [r7, #8]
 8005c44:	e06f      	b.n	8005d26 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d011      	beq.n	8005c70 <RTC_DateUpdate+0x5c>
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	d00e      	beq.n	8005c70 <RTC_DateUpdate+0x5c>
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	2b05      	cmp	r3, #5
 8005c56:	d00b      	beq.n	8005c70 <RTC_DateUpdate+0x5c>
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	2b07      	cmp	r3, #7
 8005c5c:	d008      	beq.n	8005c70 <RTC_DateUpdate+0x5c>
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d005      	beq.n	8005c70 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	2b0a      	cmp	r3, #10
 8005c68:	d002      	beq.n	8005c70 <RTC_DateUpdate+0x5c>
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	2b0c      	cmp	r3, #12
 8005c6e:	d117      	bne.n	8005ca0 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2b1e      	cmp	r3, #30
 8005c74:	d803      	bhi.n	8005c7e <RTC_DateUpdate+0x6a>
      {
        day++;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005c7c:	e050      	b.n	8005d20 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	2b0c      	cmp	r3, #12
 8005c82:	d005      	beq.n	8005c90 <RTC_DateUpdate+0x7c>
        {
          month++;
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	3301      	adds	r3, #1
 8005c88:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005c8e:	e047      	b.n	8005d20 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005c90:	2301      	movs	r3, #1
 8005c92:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005c94:	2301      	movs	r3, #1
 8005c96:	60fb      	str	r3, [r7, #12]
          year++;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005c9e:	e03f      	b.n	8005d20 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	2b04      	cmp	r3, #4
 8005ca4:	d008      	beq.n	8005cb8 <RTC_DateUpdate+0xa4>
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	2b06      	cmp	r3, #6
 8005caa:	d005      	beq.n	8005cb8 <RTC_DateUpdate+0xa4>
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	2b09      	cmp	r3, #9
 8005cb0:	d002      	beq.n	8005cb8 <RTC_DateUpdate+0xa4>
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	2b0b      	cmp	r3, #11
 8005cb6:	d10c      	bne.n	8005cd2 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2b1d      	cmp	r3, #29
 8005cbc:	d803      	bhi.n	8005cc6 <RTC_DateUpdate+0xb2>
      {
        day++;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005cc4:	e02c      	b.n	8005d20 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005cd0:	e026      	b.n	8005d20 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d123      	bne.n	8005d20 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2b1b      	cmp	r3, #27
 8005cdc:	d803      	bhi.n	8005ce6 <RTC_DateUpdate+0xd2>
      {
        day++;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	e01c      	b.n	8005d20 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b1c      	cmp	r3, #28
 8005cea:	d111      	bne.n	8005d10 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 f839 	bl	8005d68 <RTC_IsLeapYear>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <RTC_DateUpdate+0xf0>
        {
          day++;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	60fb      	str	r3, [r7, #12]
 8005d02:	e00d      	b.n	8005d20 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	3301      	adds	r3, #1
 8005d08:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	60fb      	str	r3, [r7, #12]
 8005d0e:	e007      	b.n	8005d20 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b1d      	cmp	r3, #29
 8005d14:	d104      	bne.n	8005d20 <RTC_DateUpdate+0x10c>
      {
        month++;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	3301      	adds	r3, #1
 8005d24:	60bb      	str	r3, [r7, #8]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d38b      	bcc.n	8005c46 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	b2d2      	uxtb	r2, r2
 8005d4e:	4619      	mov	r1, r3
 8005d50:	6978      	ldr	r0, [r7, #20]
 8005d52:	f000 f83b 	bl	8005dcc <RTC_WeekDayNum>
 8005d56:	4603      	mov	r3, r0
 8005d58:	461a      	mov	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	731a      	strb	r2, [r3, #12]
}
 8005d5e:	bf00      	nop
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
	...

08005d68 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	4603      	mov	r3, r0
 8005d70:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005d72:	88fb      	ldrh	r3, [r7, #6]
 8005d74:	f003 0303 	and.w	r3, r3, #3
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	e01d      	b.n	8005dbe <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005d82:	88fb      	ldrh	r3, [r7, #6]
 8005d84:	4a10      	ldr	r2, [pc, #64]	@ (8005dc8 <RTC_IsLeapYear+0x60>)
 8005d86:	fba2 1203 	umull	r1, r2, r2, r3
 8005d8a:	0952      	lsrs	r2, r2, #5
 8005d8c:	2164      	movs	r1, #100	@ 0x64
 8005d8e:	fb01 f202 	mul.w	r2, r1, r2
 8005d92:	1a9b      	subs	r3, r3, r2
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e00f      	b.n	8005dbe <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005d9e:	88fb      	ldrh	r3, [r7, #6]
 8005da0:	4a09      	ldr	r2, [pc, #36]	@ (8005dc8 <RTC_IsLeapYear+0x60>)
 8005da2:	fba2 1203 	umull	r1, r2, r2, r3
 8005da6:	09d2      	lsrs	r2, r2, #7
 8005da8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005dac:	fb01 f202 	mul.w	r2, r1, r2
 8005db0:	1a9b      	subs	r3, r3, r2
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e000      	b.n	8005dbe <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005dbc:	2300      	movs	r3, #0
  }
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bc80      	pop	{r7}
 8005dc6:	4770      	bx	lr
 8005dc8:	51eb851f 	.word	0x51eb851f

08005dcc <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	70fb      	strb	r3, [r7, #3]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60bb      	str	r3, [r7, #8]
 8005de0:	2300      	movs	r3, #0
 8005de2:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8005dea:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005dec:	78fb      	ldrb	r3, [r7, #3]
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d82d      	bhi.n	8005e4e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005df2:	78fa      	ldrb	r2, [r7, #3]
 8005df4:	4613      	mov	r3, r2
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	4413      	add	r3, r2
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	1a9b      	subs	r3, r3, r2
 8005dfe:	4a2c      	ldr	r2, [pc, #176]	@ (8005eb0 <RTC_WeekDayNum+0xe4>)
 8005e00:	fba2 2303 	umull	r2, r3, r2, r3
 8005e04:	085a      	lsrs	r2, r3, #1
 8005e06:	78bb      	ldrb	r3, [r7, #2]
 8005e08:	441a      	add	r2, r3
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	441a      	add	r2, r3
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	3b01      	subs	r3, #1
 8005e12:	089b      	lsrs	r3, r3, #2
 8005e14:	441a      	add	r2, r3
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	4926      	ldr	r1, [pc, #152]	@ (8005eb4 <RTC_WeekDayNum+0xe8>)
 8005e1c:	fba1 1303 	umull	r1, r3, r1, r3
 8005e20:	095b      	lsrs	r3, r3, #5
 8005e22:	1ad2      	subs	r2, r2, r3
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	4922      	ldr	r1, [pc, #136]	@ (8005eb4 <RTC_WeekDayNum+0xe8>)
 8005e2a:	fba1 1303 	umull	r1, r3, r1, r3
 8005e2e:	09db      	lsrs	r3, r3, #7
 8005e30:	4413      	add	r3, r2
 8005e32:	1d1a      	adds	r2, r3, #4
 8005e34:	4b20      	ldr	r3, [pc, #128]	@ (8005eb8 <RTC_WeekDayNum+0xec>)
 8005e36:	fba3 1302 	umull	r1, r3, r3, r2
 8005e3a:	1ad1      	subs	r1, r2, r3
 8005e3c:	0849      	lsrs	r1, r1, #1
 8005e3e:	440b      	add	r3, r1
 8005e40:	0899      	lsrs	r1, r3, #2
 8005e42:	460b      	mov	r3, r1
 8005e44:	00db      	lsls	r3, r3, #3
 8005e46:	1a5b      	subs	r3, r3, r1
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	e029      	b.n	8005ea2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005e4e:	78fa      	ldrb	r2, [r7, #3]
 8005e50:	4613      	mov	r3, r2
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	4413      	add	r3, r2
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	1a9b      	subs	r3, r3, r2
 8005e5a:	4a15      	ldr	r2, [pc, #84]	@ (8005eb0 <RTC_WeekDayNum+0xe4>)
 8005e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e60:	085a      	lsrs	r2, r3, #1
 8005e62:	78bb      	ldrb	r3, [r7, #2]
 8005e64:	441a      	add	r2, r3
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	441a      	add	r2, r3
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	089b      	lsrs	r3, r3, #2
 8005e6e:	441a      	add	r2, r3
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	4910      	ldr	r1, [pc, #64]	@ (8005eb4 <RTC_WeekDayNum+0xe8>)
 8005e74:	fba1 1303 	umull	r1, r3, r1, r3
 8005e78:	095b      	lsrs	r3, r3, #5
 8005e7a:	1ad2      	subs	r2, r2, r3
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	490d      	ldr	r1, [pc, #52]	@ (8005eb4 <RTC_WeekDayNum+0xe8>)
 8005e80:	fba1 1303 	umull	r1, r3, r1, r3
 8005e84:	09db      	lsrs	r3, r3, #7
 8005e86:	4413      	add	r3, r2
 8005e88:	1c9a      	adds	r2, r3, #2
 8005e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8005eb8 <RTC_WeekDayNum+0xec>)
 8005e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e90:	1ad1      	subs	r1, r2, r3
 8005e92:	0849      	lsrs	r1, r1, #1
 8005e94:	440b      	add	r3, r1
 8005e96:	0899      	lsrs	r1, r3, #2
 8005e98:	460b      	mov	r3, r1
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	1a5b      	subs	r3, r3, r1
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	b2db      	uxtb	r3, r3
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bc80      	pop	{r7}
 8005eae:	4770      	bx	lr
 8005eb0:	38e38e39 	.word	0x38e38e39
 8005eb4:	51eb851f 	.word	0x51eb851f
 8005eb8:	24924925 	.word	0x24924925

08005ebc <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8005ecc:	4b07      	ldr	r3, [pc, #28]	@ (8005eec <HAL_RTCEx_BKUPWrite+0x30>)
 8005ece:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	b292      	uxth	r2, r2
 8005ee0:	601a      	str	r2, [r3, #0]
}
 8005ee2:	bf00      	nop
 8005ee4:	371c      	adds	r7, #28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bc80      	pop	{r7}
 8005eea:	4770      	bx	lr
 8005eec:	40006c00 	.word	0x40006c00

08005ef0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8005f02:	4b08      	ldr	r3, [pc, #32]	@ (8005f24 <HAL_RTCEx_BKUPRead+0x34>)
 8005f04:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8005f18:	68bb      	ldr	r3, [r7, #8]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3714      	adds	r7, #20
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bc80      	pop	{r7}
 8005f22:	4770      	bx	lr
 8005f24:	40006c00 	.word	0x40006c00

08005f28 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e093      	b.n	8006064 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d106      	bne.n	8005f56 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7fc fe47 	bl	8002be4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2202      	movs	r2, #2
 8005f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	6812      	ldr	r2, [r2, #0]
 8005f68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f6c:	f023 0307 	bic.w	r3, r3, #7
 8005f70:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	3304      	adds	r3, #4
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	f000 f903 	bl	8006188 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005faa:	f023 0303 	bic.w	r3, r3, #3
 8005fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	689a      	ldr	r2, [r3, #8]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	021b      	lsls	r3, r3, #8
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005fc8:	f023 030c 	bic.w	r3, r3, #12
 8005fcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005fd4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	021b      	lsls	r3, r3, #8
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	011a      	lsls	r2, r3, #4
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	031b      	lsls	r3, r3, #12
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006006:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	011b      	lsls	r3, r3, #4
 8006012:	4313      	orrs	r3, r2
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3718      	adds	r7, #24
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800607c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006084:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800608c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006094:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d110      	bne.n	80060be <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d102      	bne.n	80060a8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80060a2:	7b7b      	ldrb	r3, [r7, #13]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d001      	beq.n	80060ac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e069      	b.n	8006180 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060bc:	e031      	b.n	8006122 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d110      	bne.n	80060e6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060c4:	7bbb      	ldrb	r3, [r7, #14]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d102      	bne.n	80060d0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060ca:	7b3b      	ldrb	r3, [r7, #12]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d001      	beq.n	80060d4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e055      	b.n	8006180 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80060e4:	e01d      	b.n	8006122 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d108      	bne.n	80060fe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060ec:	7bbb      	ldrb	r3, [r7, #14]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d105      	bne.n	80060fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060f2:	7b7b      	ldrb	r3, [r7, #13]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d102      	bne.n	80060fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060f8:	7b3b      	ldrb	r3, [r7, #12]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d001      	beq.n	8006102 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e03e      	b.n	8006180 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2202      	movs	r2, #2
 8006106:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2202      	movs	r2, #2
 800610e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2202      	movs	r2, #2
 8006116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2202      	movs	r2, #2
 800611e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <HAL_TIM_Encoder_Start+0xc4>
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	2b04      	cmp	r3, #4
 800612c:	d008      	beq.n	8006140 <HAL_TIM_Encoder_Start+0xd4>
 800612e:	e00f      	b.n	8006150 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2201      	movs	r2, #1
 8006136:	2100      	movs	r1, #0
 8006138:	4618      	mov	r0, r3
 800613a:	f000 f887 	bl	800624c <TIM_CCxChannelCmd>
      break;
 800613e:	e016      	b.n	800616e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2201      	movs	r2, #1
 8006146:	2104      	movs	r1, #4
 8006148:	4618      	mov	r0, r3
 800614a:	f000 f87f 	bl	800624c <TIM_CCxChannelCmd>
      break;
 800614e:	e00e      	b.n	800616e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2201      	movs	r2, #1
 8006156:	2100      	movs	r1, #0
 8006158:	4618      	mov	r0, r3
 800615a:	f000 f877 	bl	800624c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2201      	movs	r2, #1
 8006164:	2104      	movs	r1, #4
 8006166:	4618      	mov	r0, r3
 8006168:	f000 f870 	bl	800624c <TIM_CCxChannelCmd>
      break;
 800616c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f042 0201 	orr.w	r2, r2, #1
 800617c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a29      	ldr	r2, [pc, #164]	@ (8006240 <TIM_Base_SetConfig+0xb8>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d00b      	beq.n	80061b8 <TIM_Base_SetConfig+0x30>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061a6:	d007      	beq.n	80061b8 <TIM_Base_SetConfig+0x30>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a26      	ldr	r2, [pc, #152]	@ (8006244 <TIM_Base_SetConfig+0xbc>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d003      	beq.n	80061b8 <TIM_Base_SetConfig+0x30>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a25      	ldr	r2, [pc, #148]	@ (8006248 <TIM_Base_SetConfig+0xc0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d108      	bne.n	80061ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a1c      	ldr	r2, [pc, #112]	@ (8006240 <TIM_Base_SetConfig+0xb8>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d00b      	beq.n	80061ea <TIM_Base_SetConfig+0x62>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061d8:	d007      	beq.n	80061ea <TIM_Base_SetConfig+0x62>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a19      	ldr	r2, [pc, #100]	@ (8006244 <TIM_Base_SetConfig+0xbc>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d003      	beq.n	80061ea <TIM_Base_SetConfig+0x62>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a18      	ldr	r2, [pc, #96]	@ (8006248 <TIM_Base_SetConfig+0xc0>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d108      	bne.n	80061fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	4313      	orrs	r3, r2
 8006208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	689a      	ldr	r2, [r3, #8]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a07      	ldr	r2, [pc, #28]	@ (8006240 <TIM_Base_SetConfig+0xb8>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d103      	bne.n	8006230 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	691a      	ldr	r2, [r3, #16]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	615a      	str	r2, [r3, #20]
}
 8006236:	bf00      	nop
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	bc80      	pop	{r7}
 800623e:	4770      	bx	lr
 8006240:	40012c00 	.word	0x40012c00
 8006244:	40000400 	.word	0x40000400
 8006248:	40000800 	.word	0x40000800

0800624c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f003 031f 	and.w	r3, r3, #31
 800625e:	2201      	movs	r2, #1
 8006260:	fa02 f303 	lsl.w	r3, r2, r3
 8006264:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6a1a      	ldr	r2, [r3, #32]
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	43db      	mvns	r3, r3
 800626e:	401a      	ands	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6a1a      	ldr	r2, [r3, #32]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f003 031f 	and.w	r3, r3, #31
 800627e:	6879      	ldr	r1, [r7, #4]
 8006280:	fa01 f303 	lsl.w	r3, r1, r3
 8006284:	431a      	orrs	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	621a      	str	r2, [r3, #32]
}
 800628a:	bf00      	nop
 800628c:	371c      	adds	r7, #28
 800628e:	46bd      	mov	sp, r7
 8006290:	bc80      	pop	{r7}
 8006292:	4770      	bx	lr

08006294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d101      	bne.n	80062ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062a8:	2302      	movs	r3, #2
 80062aa:	e046      	b.n	800633a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	4313      	orrs	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a16      	ldr	r2, [pc, #88]	@ (8006344 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d00e      	beq.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062f8:	d009      	beq.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a12      	ldr	r2, [pc, #72]	@ (8006348 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d004      	beq.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a10      	ldr	r2, [pc, #64]	@ (800634c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d10c      	bne.n	8006328 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006314:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	4313      	orrs	r3, r2
 800631e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	bc80      	pop	{r7}
 8006342:	4770      	bx	lr
 8006344:	40012c00 	.word	0x40012c00
 8006348:	40000400 	.word	0x40000400
 800634c:	40000800 	.word	0x40000800

08006350 <__cvt>:
 8006350:	2b00      	cmp	r3, #0
 8006352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006356:	461d      	mov	r5, r3
 8006358:	bfbb      	ittet	lt
 800635a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800635e:	461d      	movlt	r5, r3
 8006360:	2300      	movge	r3, #0
 8006362:	232d      	movlt	r3, #45	@ 0x2d
 8006364:	b088      	sub	sp, #32
 8006366:	4614      	mov	r4, r2
 8006368:	bfb8      	it	lt
 800636a:	4614      	movlt	r4, r2
 800636c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800636e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006370:	7013      	strb	r3, [r2, #0]
 8006372:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006374:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006378:	f023 0820 	bic.w	r8, r3, #32
 800637c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006380:	d005      	beq.n	800638e <__cvt+0x3e>
 8006382:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006386:	d100      	bne.n	800638a <__cvt+0x3a>
 8006388:	3601      	adds	r6, #1
 800638a:	2302      	movs	r3, #2
 800638c:	e000      	b.n	8006390 <__cvt+0x40>
 800638e:	2303      	movs	r3, #3
 8006390:	aa07      	add	r2, sp, #28
 8006392:	9204      	str	r2, [sp, #16]
 8006394:	aa06      	add	r2, sp, #24
 8006396:	e9cd a202 	strd	sl, r2, [sp, #8]
 800639a:	e9cd 3600 	strd	r3, r6, [sp]
 800639e:	4622      	mov	r2, r4
 80063a0:	462b      	mov	r3, r5
 80063a2:	f001 f8dd 	bl	8007560 <_dtoa_r>
 80063a6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80063aa:	4607      	mov	r7, r0
 80063ac:	d119      	bne.n	80063e2 <__cvt+0x92>
 80063ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80063b0:	07db      	lsls	r3, r3, #31
 80063b2:	d50e      	bpl.n	80063d2 <__cvt+0x82>
 80063b4:	eb00 0906 	add.w	r9, r0, r6
 80063b8:	2200      	movs	r2, #0
 80063ba:	2300      	movs	r3, #0
 80063bc:	4620      	mov	r0, r4
 80063be:	4629      	mov	r1, r5
 80063c0:	f7fa faf2 	bl	80009a8 <__aeabi_dcmpeq>
 80063c4:	b108      	cbz	r0, 80063ca <__cvt+0x7a>
 80063c6:	f8cd 901c 	str.w	r9, [sp, #28]
 80063ca:	2230      	movs	r2, #48	@ 0x30
 80063cc:	9b07      	ldr	r3, [sp, #28]
 80063ce:	454b      	cmp	r3, r9
 80063d0:	d31e      	bcc.n	8006410 <__cvt+0xc0>
 80063d2:	4638      	mov	r0, r7
 80063d4:	9b07      	ldr	r3, [sp, #28]
 80063d6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80063d8:	1bdb      	subs	r3, r3, r7
 80063da:	6013      	str	r3, [r2, #0]
 80063dc:	b008      	add	sp, #32
 80063de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063e2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80063e6:	eb00 0906 	add.w	r9, r0, r6
 80063ea:	d1e5      	bne.n	80063b8 <__cvt+0x68>
 80063ec:	7803      	ldrb	r3, [r0, #0]
 80063ee:	2b30      	cmp	r3, #48	@ 0x30
 80063f0:	d10a      	bne.n	8006408 <__cvt+0xb8>
 80063f2:	2200      	movs	r2, #0
 80063f4:	2300      	movs	r3, #0
 80063f6:	4620      	mov	r0, r4
 80063f8:	4629      	mov	r1, r5
 80063fa:	f7fa fad5 	bl	80009a8 <__aeabi_dcmpeq>
 80063fe:	b918      	cbnz	r0, 8006408 <__cvt+0xb8>
 8006400:	f1c6 0601 	rsb	r6, r6, #1
 8006404:	f8ca 6000 	str.w	r6, [sl]
 8006408:	f8da 3000 	ldr.w	r3, [sl]
 800640c:	4499      	add	r9, r3
 800640e:	e7d3      	b.n	80063b8 <__cvt+0x68>
 8006410:	1c59      	adds	r1, r3, #1
 8006412:	9107      	str	r1, [sp, #28]
 8006414:	701a      	strb	r2, [r3, #0]
 8006416:	e7d9      	b.n	80063cc <__cvt+0x7c>

08006418 <__exponent>:
 8006418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800641a:	2900      	cmp	r1, #0
 800641c:	bfb6      	itet	lt
 800641e:	232d      	movlt	r3, #45	@ 0x2d
 8006420:	232b      	movge	r3, #43	@ 0x2b
 8006422:	4249      	neglt	r1, r1
 8006424:	2909      	cmp	r1, #9
 8006426:	7002      	strb	r2, [r0, #0]
 8006428:	7043      	strb	r3, [r0, #1]
 800642a:	dd29      	ble.n	8006480 <__exponent+0x68>
 800642c:	f10d 0307 	add.w	r3, sp, #7
 8006430:	461d      	mov	r5, r3
 8006432:	270a      	movs	r7, #10
 8006434:	fbb1 f6f7 	udiv	r6, r1, r7
 8006438:	461a      	mov	r2, r3
 800643a:	fb07 1416 	mls	r4, r7, r6, r1
 800643e:	3430      	adds	r4, #48	@ 0x30
 8006440:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006444:	460c      	mov	r4, r1
 8006446:	2c63      	cmp	r4, #99	@ 0x63
 8006448:	4631      	mov	r1, r6
 800644a:	f103 33ff 	add.w	r3, r3, #4294967295
 800644e:	dcf1      	bgt.n	8006434 <__exponent+0x1c>
 8006450:	3130      	adds	r1, #48	@ 0x30
 8006452:	1e94      	subs	r4, r2, #2
 8006454:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006458:	4623      	mov	r3, r4
 800645a:	1c41      	adds	r1, r0, #1
 800645c:	42ab      	cmp	r3, r5
 800645e:	d30a      	bcc.n	8006476 <__exponent+0x5e>
 8006460:	f10d 0309 	add.w	r3, sp, #9
 8006464:	1a9b      	subs	r3, r3, r2
 8006466:	42ac      	cmp	r4, r5
 8006468:	bf88      	it	hi
 800646a:	2300      	movhi	r3, #0
 800646c:	3302      	adds	r3, #2
 800646e:	4403      	add	r3, r0
 8006470:	1a18      	subs	r0, r3, r0
 8006472:	b003      	add	sp, #12
 8006474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006476:	f813 6b01 	ldrb.w	r6, [r3], #1
 800647a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800647e:	e7ed      	b.n	800645c <__exponent+0x44>
 8006480:	2330      	movs	r3, #48	@ 0x30
 8006482:	3130      	adds	r1, #48	@ 0x30
 8006484:	7083      	strb	r3, [r0, #2]
 8006486:	70c1      	strb	r1, [r0, #3]
 8006488:	1d03      	adds	r3, r0, #4
 800648a:	e7f1      	b.n	8006470 <__exponent+0x58>

0800648c <_printf_float>:
 800648c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006490:	b091      	sub	sp, #68	@ 0x44
 8006492:	460c      	mov	r4, r1
 8006494:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006498:	4616      	mov	r6, r2
 800649a:	461f      	mov	r7, r3
 800649c:	4605      	mov	r5, r0
 800649e:	f000 ff3f 	bl	8007320 <_localeconv_r>
 80064a2:	6803      	ldr	r3, [r0, #0]
 80064a4:	4618      	mov	r0, r3
 80064a6:	9308      	str	r3, [sp, #32]
 80064a8:	f7f9 fe52 	bl	8000150 <strlen>
 80064ac:	2300      	movs	r3, #0
 80064ae:	930e      	str	r3, [sp, #56]	@ 0x38
 80064b0:	f8d8 3000 	ldr.w	r3, [r8]
 80064b4:	9009      	str	r0, [sp, #36]	@ 0x24
 80064b6:	3307      	adds	r3, #7
 80064b8:	f023 0307 	bic.w	r3, r3, #7
 80064bc:	f103 0208 	add.w	r2, r3, #8
 80064c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80064c4:	f8d4 b000 	ldr.w	fp, [r4]
 80064c8:	f8c8 2000 	str.w	r2, [r8]
 80064cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80064d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80064d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80064d6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80064da:	f04f 32ff 	mov.w	r2, #4294967295
 80064de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80064e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80064e6:	4b9c      	ldr	r3, [pc, #624]	@ (8006758 <_printf_float+0x2cc>)
 80064e8:	f7fa fa90 	bl	8000a0c <__aeabi_dcmpun>
 80064ec:	bb70      	cbnz	r0, 800654c <_printf_float+0xc0>
 80064ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80064f2:	f04f 32ff 	mov.w	r2, #4294967295
 80064f6:	4b98      	ldr	r3, [pc, #608]	@ (8006758 <_printf_float+0x2cc>)
 80064f8:	f7fa fa6a 	bl	80009d0 <__aeabi_dcmple>
 80064fc:	bb30      	cbnz	r0, 800654c <_printf_float+0xc0>
 80064fe:	2200      	movs	r2, #0
 8006500:	2300      	movs	r3, #0
 8006502:	4640      	mov	r0, r8
 8006504:	4649      	mov	r1, r9
 8006506:	f7fa fa59 	bl	80009bc <__aeabi_dcmplt>
 800650a:	b110      	cbz	r0, 8006512 <_printf_float+0x86>
 800650c:	232d      	movs	r3, #45	@ 0x2d
 800650e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006512:	4a92      	ldr	r2, [pc, #584]	@ (800675c <_printf_float+0x2d0>)
 8006514:	4b92      	ldr	r3, [pc, #584]	@ (8006760 <_printf_float+0x2d4>)
 8006516:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800651a:	bf94      	ite	ls
 800651c:	4690      	movls	r8, r2
 800651e:	4698      	movhi	r8, r3
 8006520:	2303      	movs	r3, #3
 8006522:	f04f 0900 	mov.w	r9, #0
 8006526:	6123      	str	r3, [r4, #16]
 8006528:	f02b 0304 	bic.w	r3, fp, #4
 800652c:	6023      	str	r3, [r4, #0]
 800652e:	4633      	mov	r3, r6
 8006530:	4621      	mov	r1, r4
 8006532:	4628      	mov	r0, r5
 8006534:	9700      	str	r7, [sp, #0]
 8006536:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006538:	f000 f9d4 	bl	80068e4 <_printf_common>
 800653c:	3001      	adds	r0, #1
 800653e:	f040 8090 	bne.w	8006662 <_printf_float+0x1d6>
 8006542:	f04f 30ff 	mov.w	r0, #4294967295
 8006546:	b011      	add	sp, #68	@ 0x44
 8006548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800654c:	4642      	mov	r2, r8
 800654e:	464b      	mov	r3, r9
 8006550:	4640      	mov	r0, r8
 8006552:	4649      	mov	r1, r9
 8006554:	f7fa fa5a 	bl	8000a0c <__aeabi_dcmpun>
 8006558:	b148      	cbz	r0, 800656e <_printf_float+0xe2>
 800655a:	464b      	mov	r3, r9
 800655c:	2b00      	cmp	r3, #0
 800655e:	bfb8      	it	lt
 8006560:	232d      	movlt	r3, #45	@ 0x2d
 8006562:	4a80      	ldr	r2, [pc, #512]	@ (8006764 <_printf_float+0x2d8>)
 8006564:	bfb8      	it	lt
 8006566:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800656a:	4b7f      	ldr	r3, [pc, #508]	@ (8006768 <_printf_float+0x2dc>)
 800656c:	e7d3      	b.n	8006516 <_printf_float+0x8a>
 800656e:	6863      	ldr	r3, [r4, #4]
 8006570:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006574:	1c5a      	adds	r2, r3, #1
 8006576:	d13f      	bne.n	80065f8 <_printf_float+0x16c>
 8006578:	2306      	movs	r3, #6
 800657a:	6063      	str	r3, [r4, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006582:	6023      	str	r3, [r4, #0]
 8006584:	9206      	str	r2, [sp, #24]
 8006586:	aa0e      	add	r2, sp, #56	@ 0x38
 8006588:	e9cd a204 	strd	sl, r2, [sp, #16]
 800658c:	aa0d      	add	r2, sp, #52	@ 0x34
 800658e:	9203      	str	r2, [sp, #12]
 8006590:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006594:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006598:	6863      	ldr	r3, [r4, #4]
 800659a:	4642      	mov	r2, r8
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	4628      	mov	r0, r5
 80065a0:	464b      	mov	r3, r9
 80065a2:	910a      	str	r1, [sp, #40]	@ 0x28
 80065a4:	f7ff fed4 	bl	8006350 <__cvt>
 80065a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80065aa:	4680      	mov	r8, r0
 80065ac:	2947      	cmp	r1, #71	@ 0x47
 80065ae:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80065b0:	d128      	bne.n	8006604 <_printf_float+0x178>
 80065b2:	1cc8      	adds	r0, r1, #3
 80065b4:	db02      	blt.n	80065bc <_printf_float+0x130>
 80065b6:	6863      	ldr	r3, [r4, #4]
 80065b8:	4299      	cmp	r1, r3
 80065ba:	dd40      	ble.n	800663e <_printf_float+0x1b2>
 80065bc:	f1aa 0a02 	sub.w	sl, sl, #2
 80065c0:	fa5f fa8a 	uxtb.w	sl, sl
 80065c4:	4652      	mov	r2, sl
 80065c6:	3901      	subs	r1, #1
 80065c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80065cc:	910d      	str	r1, [sp, #52]	@ 0x34
 80065ce:	f7ff ff23 	bl	8006418 <__exponent>
 80065d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80065d4:	4681      	mov	r9, r0
 80065d6:	1813      	adds	r3, r2, r0
 80065d8:	2a01      	cmp	r2, #1
 80065da:	6123      	str	r3, [r4, #16]
 80065dc:	dc02      	bgt.n	80065e4 <_printf_float+0x158>
 80065de:	6822      	ldr	r2, [r4, #0]
 80065e0:	07d2      	lsls	r2, r2, #31
 80065e2:	d501      	bpl.n	80065e8 <_printf_float+0x15c>
 80065e4:	3301      	adds	r3, #1
 80065e6:	6123      	str	r3, [r4, #16]
 80065e8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d09e      	beq.n	800652e <_printf_float+0xa2>
 80065f0:	232d      	movs	r3, #45	@ 0x2d
 80065f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065f6:	e79a      	b.n	800652e <_printf_float+0xa2>
 80065f8:	2947      	cmp	r1, #71	@ 0x47
 80065fa:	d1bf      	bne.n	800657c <_printf_float+0xf0>
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1bd      	bne.n	800657c <_printf_float+0xf0>
 8006600:	2301      	movs	r3, #1
 8006602:	e7ba      	b.n	800657a <_printf_float+0xee>
 8006604:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006608:	d9dc      	bls.n	80065c4 <_printf_float+0x138>
 800660a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800660e:	d118      	bne.n	8006642 <_printf_float+0x1b6>
 8006610:	2900      	cmp	r1, #0
 8006612:	6863      	ldr	r3, [r4, #4]
 8006614:	dd0b      	ble.n	800662e <_printf_float+0x1a2>
 8006616:	6121      	str	r1, [r4, #16]
 8006618:	b913      	cbnz	r3, 8006620 <_printf_float+0x194>
 800661a:	6822      	ldr	r2, [r4, #0]
 800661c:	07d0      	lsls	r0, r2, #31
 800661e:	d502      	bpl.n	8006626 <_printf_float+0x19a>
 8006620:	3301      	adds	r3, #1
 8006622:	440b      	add	r3, r1
 8006624:	6123      	str	r3, [r4, #16]
 8006626:	f04f 0900 	mov.w	r9, #0
 800662a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800662c:	e7dc      	b.n	80065e8 <_printf_float+0x15c>
 800662e:	b913      	cbnz	r3, 8006636 <_printf_float+0x1aa>
 8006630:	6822      	ldr	r2, [r4, #0]
 8006632:	07d2      	lsls	r2, r2, #31
 8006634:	d501      	bpl.n	800663a <_printf_float+0x1ae>
 8006636:	3302      	adds	r3, #2
 8006638:	e7f4      	b.n	8006624 <_printf_float+0x198>
 800663a:	2301      	movs	r3, #1
 800663c:	e7f2      	b.n	8006624 <_printf_float+0x198>
 800663e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006642:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006644:	4299      	cmp	r1, r3
 8006646:	db05      	blt.n	8006654 <_printf_float+0x1c8>
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	6121      	str	r1, [r4, #16]
 800664c:	07d8      	lsls	r0, r3, #31
 800664e:	d5ea      	bpl.n	8006626 <_printf_float+0x19a>
 8006650:	1c4b      	adds	r3, r1, #1
 8006652:	e7e7      	b.n	8006624 <_printf_float+0x198>
 8006654:	2900      	cmp	r1, #0
 8006656:	bfcc      	ite	gt
 8006658:	2201      	movgt	r2, #1
 800665a:	f1c1 0202 	rsble	r2, r1, #2
 800665e:	4413      	add	r3, r2
 8006660:	e7e0      	b.n	8006624 <_printf_float+0x198>
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	055a      	lsls	r2, r3, #21
 8006666:	d407      	bmi.n	8006678 <_printf_float+0x1ec>
 8006668:	6923      	ldr	r3, [r4, #16]
 800666a:	4642      	mov	r2, r8
 800666c:	4631      	mov	r1, r6
 800666e:	4628      	mov	r0, r5
 8006670:	47b8      	blx	r7
 8006672:	3001      	adds	r0, #1
 8006674:	d12b      	bne.n	80066ce <_printf_float+0x242>
 8006676:	e764      	b.n	8006542 <_printf_float+0xb6>
 8006678:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800667c:	f240 80dc 	bls.w	8006838 <_printf_float+0x3ac>
 8006680:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006684:	2200      	movs	r2, #0
 8006686:	2300      	movs	r3, #0
 8006688:	f7fa f98e 	bl	80009a8 <__aeabi_dcmpeq>
 800668c:	2800      	cmp	r0, #0
 800668e:	d033      	beq.n	80066f8 <_printf_float+0x26c>
 8006690:	2301      	movs	r3, #1
 8006692:	4631      	mov	r1, r6
 8006694:	4628      	mov	r0, r5
 8006696:	4a35      	ldr	r2, [pc, #212]	@ (800676c <_printf_float+0x2e0>)
 8006698:	47b8      	blx	r7
 800669a:	3001      	adds	r0, #1
 800669c:	f43f af51 	beq.w	8006542 <_printf_float+0xb6>
 80066a0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80066a4:	4543      	cmp	r3, r8
 80066a6:	db02      	blt.n	80066ae <_printf_float+0x222>
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	07d8      	lsls	r0, r3, #31
 80066ac:	d50f      	bpl.n	80066ce <_printf_float+0x242>
 80066ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80066b2:	4631      	mov	r1, r6
 80066b4:	4628      	mov	r0, r5
 80066b6:	47b8      	blx	r7
 80066b8:	3001      	adds	r0, #1
 80066ba:	f43f af42 	beq.w	8006542 <_printf_float+0xb6>
 80066be:	f04f 0900 	mov.w	r9, #0
 80066c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80066c6:	f104 0a1a 	add.w	sl, r4, #26
 80066ca:	45c8      	cmp	r8, r9
 80066cc:	dc09      	bgt.n	80066e2 <_printf_float+0x256>
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	079b      	lsls	r3, r3, #30
 80066d2:	f100 8102 	bmi.w	80068da <_printf_float+0x44e>
 80066d6:	68e0      	ldr	r0, [r4, #12]
 80066d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066da:	4298      	cmp	r0, r3
 80066dc:	bfb8      	it	lt
 80066de:	4618      	movlt	r0, r3
 80066e0:	e731      	b.n	8006546 <_printf_float+0xba>
 80066e2:	2301      	movs	r3, #1
 80066e4:	4652      	mov	r2, sl
 80066e6:	4631      	mov	r1, r6
 80066e8:	4628      	mov	r0, r5
 80066ea:	47b8      	blx	r7
 80066ec:	3001      	adds	r0, #1
 80066ee:	f43f af28 	beq.w	8006542 <_printf_float+0xb6>
 80066f2:	f109 0901 	add.w	r9, r9, #1
 80066f6:	e7e8      	b.n	80066ca <_printf_float+0x23e>
 80066f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	dc38      	bgt.n	8006770 <_printf_float+0x2e4>
 80066fe:	2301      	movs	r3, #1
 8006700:	4631      	mov	r1, r6
 8006702:	4628      	mov	r0, r5
 8006704:	4a19      	ldr	r2, [pc, #100]	@ (800676c <_printf_float+0x2e0>)
 8006706:	47b8      	blx	r7
 8006708:	3001      	adds	r0, #1
 800670a:	f43f af1a 	beq.w	8006542 <_printf_float+0xb6>
 800670e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006712:	ea59 0303 	orrs.w	r3, r9, r3
 8006716:	d102      	bne.n	800671e <_printf_float+0x292>
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	07d9      	lsls	r1, r3, #31
 800671c:	d5d7      	bpl.n	80066ce <_printf_float+0x242>
 800671e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006722:	4631      	mov	r1, r6
 8006724:	4628      	mov	r0, r5
 8006726:	47b8      	blx	r7
 8006728:	3001      	adds	r0, #1
 800672a:	f43f af0a 	beq.w	8006542 <_printf_float+0xb6>
 800672e:	f04f 0a00 	mov.w	sl, #0
 8006732:	f104 0b1a 	add.w	fp, r4, #26
 8006736:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006738:	425b      	negs	r3, r3
 800673a:	4553      	cmp	r3, sl
 800673c:	dc01      	bgt.n	8006742 <_printf_float+0x2b6>
 800673e:	464b      	mov	r3, r9
 8006740:	e793      	b.n	800666a <_printf_float+0x1de>
 8006742:	2301      	movs	r3, #1
 8006744:	465a      	mov	r2, fp
 8006746:	4631      	mov	r1, r6
 8006748:	4628      	mov	r0, r5
 800674a:	47b8      	blx	r7
 800674c:	3001      	adds	r0, #1
 800674e:	f43f aef8 	beq.w	8006542 <_printf_float+0xb6>
 8006752:	f10a 0a01 	add.w	sl, sl, #1
 8006756:	e7ee      	b.n	8006736 <_printf_float+0x2aa>
 8006758:	7fefffff 	.word	0x7fefffff
 800675c:	0800d34e 	.word	0x0800d34e
 8006760:	0800d352 	.word	0x0800d352
 8006764:	0800d356 	.word	0x0800d356
 8006768:	0800d35a 	.word	0x0800d35a
 800676c:	0800d35e 	.word	0x0800d35e
 8006770:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006772:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006776:	4553      	cmp	r3, sl
 8006778:	bfa8      	it	ge
 800677a:	4653      	movge	r3, sl
 800677c:	2b00      	cmp	r3, #0
 800677e:	4699      	mov	r9, r3
 8006780:	dc36      	bgt.n	80067f0 <_printf_float+0x364>
 8006782:	f04f 0b00 	mov.w	fp, #0
 8006786:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800678a:	f104 021a 	add.w	r2, r4, #26
 800678e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006790:	930a      	str	r3, [sp, #40]	@ 0x28
 8006792:	eba3 0309 	sub.w	r3, r3, r9
 8006796:	455b      	cmp	r3, fp
 8006798:	dc31      	bgt.n	80067fe <_printf_float+0x372>
 800679a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800679c:	459a      	cmp	sl, r3
 800679e:	dc3a      	bgt.n	8006816 <_printf_float+0x38a>
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	07da      	lsls	r2, r3, #31
 80067a4:	d437      	bmi.n	8006816 <_printf_float+0x38a>
 80067a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067a8:	ebaa 0903 	sub.w	r9, sl, r3
 80067ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067ae:	ebaa 0303 	sub.w	r3, sl, r3
 80067b2:	4599      	cmp	r9, r3
 80067b4:	bfa8      	it	ge
 80067b6:	4699      	movge	r9, r3
 80067b8:	f1b9 0f00 	cmp.w	r9, #0
 80067bc:	dc33      	bgt.n	8006826 <_printf_float+0x39a>
 80067be:	f04f 0800 	mov.w	r8, #0
 80067c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067c6:	f104 0b1a 	add.w	fp, r4, #26
 80067ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067cc:	ebaa 0303 	sub.w	r3, sl, r3
 80067d0:	eba3 0309 	sub.w	r3, r3, r9
 80067d4:	4543      	cmp	r3, r8
 80067d6:	f77f af7a 	ble.w	80066ce <_printf_float+0x242>
 80067da:	2301      	movs	r3, #1
 80067dc:	465a      	mov	r2, fp
 80067de:	4631      	mov	r1, r6
 80067e0:	4628      	mov	r0, r5
 80067e2:	47b8      	blx	r7
 80067e4:	3001      	adds	r0, #1
 80067e6:	f43f aeac 	beq.w	8006542 <_printf_float+0xb6>
 80067ea:	f108 0801 	add.w	r8, r8, #1
 80067ee:	e7ec      	b.n	80067ca <_printf_float+0x33e>
 80067f0:	4642      	mov	r2, r8
 80067f2:	4631      	mov	r1, r6
 80067f4:	4628      	mov	r0, r5
 80067f6:	47b8      	blx	r7
 80067f8:	3001      	adds	r0, #1
 80067fa:	d1c2      	bne.n	8006782 <_printf_float+0x2f6>
 80067fc:	e6a1      	b.n	8006542 <_printf_float+0xb6>
 80067fe:	2301      	movs	r3, #1
 8006800:	4631      	mov	r1, r6
 8006802:	4628      	mov	r0, r5
 8006804:	920a      	str	r2, [sp, #40]	@ 0x28
 8006806:	47b8      	blx	r7
 8006808:	3001      	adds	r0, #1
 800680a:	f43f ae9a 	beq.w	8006542 <_printf_float+0xb6>
 800680e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006810:	f10b 0b01 	add.w	fp, fp, #1
 8006814:	e7bb      	b.n	800678e <_printf_float+0x302>
 8006816:	4631      	mov	r1, r6
 8006818:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800681c:	4628      	mov	r0, r5
 800681e:	47b8      	blx	r7
 8006820:	3001      	adds	r0, #1
 8006822:	d1c0      	bne.n	80067a6 <_printf_float+0x31a>
 8006824:	e68d      	b.n	8006542 <_printf_float+0xb6>
 8006826:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006828:	464b      	mov	r3, r9
 800682a:	4631      	mov	r1, r6
 800682c:	4628      	mov	r0, r5
 800682e:	4442      	add	r2, r8
 8006830:	47b8      	blx	r7
 8006832:	3001      	adds	r0, #1
 8006834:	d1c3      	bne.n	80067be <_printf_float+0x332>
 8006836:	e684      	b.n	8006542 <_printf_float+0xb6>
 8006838:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800683c:	f1ba 0f01 	cmp.w	sl, #1
 8006840:	dc01      	bgt.n	8006846 <_printf_float+0x3ba>
 8006842:	07db      	lsls	r3, r3, #31
 8006844:	d536      	bpl.n	80068b4 <_printf_float+0x428>
 8006846:	2301      	movs	r3, #1
 8006848:	4642      	mov	r2, r8
 800684a:	4631      	mov	r1, r6
 800684c:	4628      	mov	r0, r5
 800684e:	47b8      	blx	r7
 8006850:	3001      	adds	r0, #1
 8006852:	f43f ae76 	beq.w	8006542 <_printf_float+0xb6>
 8006856:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800685a:	4631      	mov	r1, r6
 800685c:	4628      	mov	r0, r5
 800685e:	47b8      	blx	r7
 8006860:	3001      	adds	r0, #1
 8006862:	f43f ae6e 	beq.w	8006542 <_printf_float+0xb6>
 8006866:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800686a:	2200      	movs	r2, #0
 800686c:	2300      	movs	r3, #0
 800686e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006872:	f7fa f899 	bl	80009a8 <__aeabi_dcmpeq>
 8006876:	b9c0      	cbnz	r0, 80068aa <_printf_float+0x41e>
 8006878:	4653      	mov	r3, sl
 800687a:	f108 0201 	add.w	r2, r8, #1
 800687e:	4631      	mov	r1, r6
 8006880:	4628      	mov	r0, r5
 8006882:	47b8      	blx	r7
 8006884:	3001      	adds	r0, #1
 8006886:	d10c      	bne.n	80068a2 <_printf_float+0x416>
 8006888:	e65b      	b.n	8006542 <_printf_float+0xb6>
 800688a:	2301      	movs	r3, #1
 800688c:	465a      	mov	r2, fp
 800688e:	4631      	mov	r1, r6
 8006890:	4628      	mov	r0, r5
 8006892:	47b8      	blx	r7
 8006894:	3001      	adds	r0, #1
 8006896:	f43f ae54 	beq.w	8006542 <_printf_float+0xb6>
 800689a:	f108 0801 	add.w	r8, r8, #1
 800689e:	45d0      	cmp	r8, sl
 80068a0:	dbf3      	blt.n	800688a <_printf_float+0x3fe>
 80068a2:	464b      	mov	r3, r9
 80068a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80068a8:	e6e0      	b.n	800666c <_printf_float+0x1e0>
 80068aa:	f04f 0800 	mov.w	r8, #0
 80068ae:	f104 0b1a 	add.w	fp, r4, #26
 80068b2:	e7f4      	b.n	800689e <_printf_float+0x412>
 80068b4:	2301      	movs	r3, #1
 80068b6:	4642      	mov	r2, r8
 80068b8:	e7e1      	b.n	800687e <_printf_float+0x3f2>
 80068ba:	2301      	movs	r3, #1
 80068bc:	464a      	mov	r2, r9
 80068be:	4631      	mov	r1, r6
 80068c0:	4628      	mov	r0, r5
 80068c2:	47b8      	blx	r7
 80068c4:	3001      	adds	r0, #1
 80068c6:	f43f ae3c 	beq.w	8006542 <_printf_float+0xb6>
 80068ca:	f108 0801 	add.w	r8, r8, #1
 80068ce:	68e3      	ldr	r3, [r4, #12]
 80068d0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80068d2:	1a5b      	subs	r3, r3, r1
 80068d4:	4543      	cmp	r3, r8
 80068d6:	dcf0      	bgt.n	80068ba <_printf_float+0x42e>
 80068d8:	e6fd      	b.n	80066d6 <_printf_float+0x24a>
 80068da:	f04f 0800 	mov.w	r8, #0
 80068de:	f104 0919 	add.w	r9, r4, #25
 80068e2:	e7f4      	b.n	80068ce <_printf_float+0x442>

080068e4 <_printf_common>:
 80068e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068e8:	4616      	mov	r6, r2
 80068ea:	4698      	mov	r8, r3
 80068ec:	688a      	ldr	r2, [r1, #8]
 80068ee:	690b      	ldr	r3, [r1, #16]
 80068f0:	4607      	mov	r7, r0
 80068f2:	4293      	cmp	r3, r2
 80068f4:	bfb8      	it	lt
 80068f6:	4613      	movlt	r3, r2
 80068f8:	6033      	str	r3, [r6, #0]
 80068fa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80068fe:	460c      	mov	r4, r1
 8006900:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006904:	b10a      	cbz	r2, 800690a <_printf_common+0x26>
 8006906:	3301      	adds	r3, #1
 8006908:	6033      	str	r3, [r6, #0]
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	0699      	lsls	r1, r3, #26
 800690e:	bf42      	ittt	mi
 8006910:	6833      	ldrmi	r3, [r6, #0]
 8006912:	3302      	addmi	r3, #2
 8006914:	6033      	strmi	r3, [r6, #0]
 8006916:	6825      	ldr	r5, [r4, #0]
 8006918:	f015 0506 	ands.w	r5, r5, #6
 800691c:	d106      	bne.n	800692c <_printf_common+0x48>
 800691e:	f104 0a19 	add.w	sl, r4, #25
 8006922:	68e3      	ldr	r3, [r4, #12]
 8006924:	6832      	ldr	r2, [r6, #0]
 8006926:	1a9b      	subs	r3, r3, r2
 8006928:	42ab      	cmp	r3, r5
 800692a:	dc2b      	bgt.n	8006984 <_printf_common+0xa0>
 800692c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006930:	6822      	ldr	r2, [r4, #0]
 8006932:	3b00      	subs	r3, #0
 8006934:	bf18      	it	ne
 8006936:	2301      	movne	r3, #1
 8006938:	0692      	lsls	r2, r2, #26
 800693a:	d430      	bmi.n	800699e <_printf_common+0xba>
 800693c:	4641      	mov	r1, r8
 800693e:	4638      	mov	r0, r7
 8006940:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006944:	47c8      	blx	r9
 8006946:	3001      	adds	r0, #1
 8006948:	d023      	beq.n	8006992 <_printf_common+0xae>
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	6922      	ldr	r2, [r4, #16]
 800694e:	f003 0306 	and.w	r3, r3, #6
 8006952:	2b04      	cmp	r3, #4
 8006954:	bf14      	ite	ne
 8006956:	2500      	movne	r5, #0
 8006958:	6833      	ldreq	r3, [r6, #0]
 800695a:	f04f 0600 	mov.w	r6, #0
 800695e:	bf08      	it	eq
 8006960:	68e5      	ldreq	r5, [r4, #12]
 8006962:	f104 041a 	add.w	r4, r4, #26
 8006966:	bf08      	it	eq
 8006968:	1aed      	subeq	r5, r5, r3
 800696a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800696e:	bf08      	it	eq
 8006970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006974:	4293      	cmp	r3, r2
 8006976:	bfc4      	itt	gt
 8006978:	1a9b      	subgt	r3, r3, r2
 800697a:	18ed      	addgt	r5, r5, r3
 800697c:	42b5      	cmp	r5, r6
 800697e:	d11a      	bne.n	80069b6 <_printf_common+0xd2>
 8006980:	2000      	movs	r0, #0
 8006982:	e008      	b.n	8006996 <_printf_common+0xb2>
 8006984:	2301      	movs	r3, #1
 8006986:	4652      	mov	r2, sl
 8006988:	4641      	mov	r1, r8
 800698a:	4638      	mov	r0, r7
 800698c:	47c8      	blx	r9
 800698e:	3001      	adds	r0, #1
 8006990:	d103      	bne.n	800699a <_printf_common+0xb6>
 8006992:	f04f 30ff 	mov.w	r0, #4294967295
 8006996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800699a:	3501      	adds	r5, #1
 800699c:	e7c1      	b.n	8006922 <_printf_common+0x3e>
 800699e:	2030      	movs	r0, #48	@ 0x30
 80069a0:	18e1      	adds	r1, r4, r3
 80069a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80069a6:	1c5a      	adds	r2, r3, #1
 80069a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80069ac:	4422      	add	r2, r4
 80069ae:	3302      	adds	r3, #2
 80069b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80069b4:	e7c2      	b.n	800693c <_printf_common+0x58>
 80069b6:	2301      	movs	r3, #1
 80069b8:	4622      	mov	r2, r4
 80069ba:	4641      	mov	r1, r8
 80069bc:	4638      	mov	r0, r7
 80069be:	47c8      	blx	r9
 80069c0:	3001      	adds	r0, #1
 80069c2:	d0e6      	beq.n	8006992 <_printf_common+0xae>
 80069c4:	3601      	adds	r6, #1
 80069c6:	e7d9      	b.n	800697c <_printf_common+0x98>

080069c8 <_printf_i>:
 80069c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069cc:	7e0f      	ldrb	r7, [r1, #24]
 80069ce:	4691      	mov	r9, r2
 80069d0:	2f78      	cmp	r7, #120	@ 0x78
 80069d2:	4680      	mov	r8, r0
 80069d4:	460c      	mov	r4, r1
 80069d6:	469a      	mov	sl, r3
 80069d8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80069da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80069de:	d807      	bhi.n	80069f0 <_printf_i+0x28>
 80069e0:	2f62      	cmp	r7, #98	@ 0x62
 80069e2:	d80a      	bhi.n	80069fa <_printf_i+0x32>
 80069e4:	2f00      	cmp	r7, #0
 80069e6:	f000 80d3 	beq.w	8006b90 <_printf_i+0x1c8>
 80069ea:	2f58      	cmp	r7, #88	@ 0x58
 80069ec:	f000 80ba 	beq.w	8006b64 <_printf_i+0x19c>
 80069f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80069f8:	e03a      	b.n	8006a70 <_printf_i+0xa8>
 80069fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80069fe:	2b15      	cmp	r3, #21
 8006a00:	d8f6      	bhi.n	80069f0 <_printf_i+0x28>
 8006a02:	a101      	add	r1, pc, #4	@ (adr r1, 8006a08 <_printf_i+0x40>)
 8006a04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a08:	08006a61 	.word	0x08006a61
 8006a0c:	08006a75 	.word	0x08006a75
 8006a10:	080069f1 	.word	0x080069f1
 8006a14:	080069f1 	.word	0x080069f1
 8006a18:	080069f1 	.word	0x080069f1
 8006a1c:	080069f1 	.word	0x080069f1
 8006a20:	08006a75 	.word	0x08006a75
 8006a24:	080069f1 	.word	0x080069f1
 8006a28:	080069f1 	.word	0x080069f1
 8006a2c:	080069f1 	.word	0x080069f1
 8006a30:	080069f1 	.word	0x080069f1
 8006a34:	08006b77 	.word	0x08006b77
 8006a38:	08006a9f 	.word	0x08006a9f
 8006a3c:	08006b31 	.word	0x08006b31
 8006a40:	080069f1 	.word	0x080069f1
 8006a44:	080069f1 	.word	0x080069f1
 8006a48:	08006b99 	.word	0x08006b99
 8006a4c:	080069f1 	.word	0x080069f1
 8006a50:	08006a9f 	.word	0x08006a9f
 8006a54:	080069f1 	.word	0x080069f1
 8006a58:	080069f1 	.word	0x080069f1
 8006a5c:	08006b39 	.word	0x08006b39
 8006a60:	6833      	ldr	r3, [r6, #0]
 8006a62:	1d1a      	adds	r2, r3, #4
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6032      	str	r2, [r6, #0]
 8006a68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a70:	2301      	movs	r3, #1
 8006a72:	e09e      	b.n	8006bb2 <_printf_i+0x1ea>
 8006a74:	6833      	ldr	r3, [r6, #0]
 8006a76:	6820      	ldr	r0, [r4, #0]
 8006a78:	1d19      	adds	r1, r3, #4
 8006a7a:	6031      	str	r1, [r6, #0]
 8006a7c:	0606      	lsls	r6, r0, #24
 8006a7e:	d501      	bpl.n	8006a84 <_printf_i+0xbc>
 8006a80:	681d      	ldr	r5, [r3, #0]
 8006a82:	e003      	b.n	8006a8c <_printf_i+0xc4>
 8006a84:	0645      	lsls	r5, r0, #25
 8006a86:	d5fb      	bpl.n	8006a80 <_printf_i+0xb8>
 8006a88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a8c:	2d00      	cmp	r5, #0
 8006a8e:	da03      	bge.n	8006a98 <_printf_i+0xd0>
 8006a90:	232d      	movs	r3, #45	@ 0x2d
 8006a92:	426d      	negs	r5, r5
 8006a94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a98:	230a      	movs	r3, #10
 8006a9a:	4859      	ldr	r0, [pc, #356]	@ (8006c00 <_printf_i+0x238>)
 8006a9c:	e011      	b.n	8006ac2 <_printf_i+0xfa>
 8006a9e:	6821      	ldr	r1, [r4, #0]
 8006aa0:	6833      	ldr	r3, [r6, #0]
 8006aa2:	0608      	lsls	r0, r1, #24
 8006aa4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006aa8:	d402      	bmi.n	8006ab0 <_printf_i+0xe8>
 8006aaa:	0649      	lsls	r1, r1, #25
 8006aac:	bf48      	it	mi
 8006aae:	b2ad      	uxthmi	r5, r5
 8006ab0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ab2:	6033      	str	r3, [r6, #0]
 8006ab4:	bf14      	ite	ne
 8006ab6:	230a      	movne	r3, #10
 8006ab8:	2308      	moveq	r3, #8
 8006aba:	4851      	ldr	r0, [pc, #324]	@ (8006c00 <_printf_i+0x238>)
 8006abc:	2100      	movs	r1, #0
 8006abe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ac2:	6866      	ldr	r6, [r4, #4]
 8006ac4:	2e00      	cmp	r6, #0
 8006ac6:	bfa8      	it	ge
 8006ac8:	6821      	ldrge	r1, [r4, #0]
 8006aca:	60a6      	str	r6, [r4, #8]
 8006acc:	bfa4      	itt	ge
 8006ace:	f021 0104 	bicge.w	r1, r1, #4
 8006ad2:	6021      	strge	r1, [r4, #0]
 8006ad4:	b90d      	cbnz	r5, 8006ada <_printf_i+0x112>
 8006ad6:	2e00      	cmp	r6, #0
 8006ad8:	d04b      	beq.n	8006b72 <_printf_i+0x1aa>
 8006ada:	4616      	mov	r6, r2
 8006adc:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ae0:	fb03 5711 	mls	r7, r3, r1, r5
 8006ae4:	5dc7      	ldrb	r7, [r0, r7]
 8006ae6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006aea:	462f      	mov	r7, r5
 8006aec:	42bb      	cmp	r3, r7
 8006aee:	460d      	mov	r5, r1
 8006af0:	d9f4      	bls.n	8006adc <_printf_i+0x114>
 8006af2:	2b08      	cmp	r3, #8
 8006af4:	d10b      	bne.n	8006b0e <_printf_i+0x146>
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	07df      	lsls	r7, r3, #31
 8006afa:	d508      	bpl.n	8006b0e <_printf_i+0x146>
 8006afc:	6923      	ldr	r3, [r4, #16]
 8006afe:	6861      	ldr	r1, [r4, #4]
 8006b00:	4299      	cmp	r1, r3
 8006b02:	bfde      	ittt	le
 8006b04:	2330      	movle	r3, #48	@ 0x30
 8006b06:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b0a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b0e:	1b92      	subs	r2, r2, r6
 8006b10:	6122      	str	r2, [r4, #16]
 8006b12:	464b      	mov	r3, r9
 8006b14:	4621      	mov	r1, r4
 8006b16:	4640      	mov	r0, r8
 8006b18:	f8cd a000 	str.w	sl, [sp]
 8006b1c:	aa03      	add	r2, sp, #12
 8006b1e:	f7ff fee1 	bl	80068e4 <_printf_common>
 8006b22:	3001      	adds	r0, #1
 8006b24:	d14a      	bne.n	8006bbc <_printf_i+0x1f4>
 8006b26:	f04f 30ff 	mov.w	r0, #4294967295
 8006b2a:	b004      	add	sp, #16
 8006b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b30:	6823      	ldr	r3, [r4, #0]
 8006b32:	f043 0320 	orr.w	r3, r3, #32
 8006b36:	6023      	str	r3, [r4, #0]
 8006b38:	2778      	movs	r7, #120	@ 0x78
 8006b3a:	4832      	ldr	r0, [pc, #200]	@ (8006c04 <_printf_i+0x23c>)
 8006b3c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	6831      	ldr	r1, [r6, #0]
 8006b44:	061f      	lsls	r7, r3, #24
 8006b46:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b4a:	d402      	bmi.n	8006b52 <_printf_i+0x18a>
 8006b4c:	065f      	lsls	r7, r3, #25
 8006b4e:	bf48      	it	mi
 8006b50:	b2ad      	uxthmi	r5, r5
 8006b52:	6031      	str	r1, [r6, #0]
 8006b54:	07d9      	lsls	r1, r3, #31
 8006b56:	bf44      	itt	mi
 8006b58:	f043 0320 	orrmi.w	r3, r3, #32
 8006b5c:	6023      	strmi	r3, [r4, #0]
 8006b5e:	b11d      	cbz	r5, 8006b68 <_printf_i+0x1a0>
 8006b60:	2310      	movs	r3, #16
 8006b62:	e7ab      	b.n	8006abc <_printf_i+0xf4>
 8006b64:	4826      	ldr	r0, [pc, #152]	@ (8006c00 <_printf_i+0x238>)
 8006b66:	e7e9      	b.n	8006b3c <_printf_i+0x174>
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	f023 0320 	bic.w	r3, r3, #32
 8006b6e:	6023      	str	r3, [r4, #0]
 8006b70:	e7f6      	b.n	8006b60 <_printf_i+0x198>
 8006b72:	4616      	mov	r6, r2
 8006b74:	e7bd      	b.n	8006af2 <_printf_i+0x12a>
 8006b76:	6833      	ldr	r3, [r6, #0]
 8006b78:	6825      	ldr	r5, [r4, #0]
 8006b7a:	1d18      	adds	r0, r3, #4
 8006b7c:	6961      	ldr	r1, [r4, #20]
 8006b7e:	6030      	str	r0, [r6, #0]
 8006b80:	062e      	lsls	r6, r5, #24
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	d501      	bpl.n	8006b8a <_printf_i+0x1c2>
 8006b86:	6019      	str	r1, [r3, #0]
 8006b88:	e002      	b.n	8006b90 <_printf_i+0x1c8>
 8006b8a:	0668      	lsls	r0, r5, #25
 8006b8c:	d5fb      	bpl.n	8006b86 <_printf_i+0x1be>
 8006b8e:	8019      	strh	r1, [r3, #0]
 8006b90:	2300      	movs	r3, #0
 8006b92:	4616      	mov	r6, r2
 8006b94:	6123      	str	r3, [r4, #16]
 8006b96:	e7bc      	b.n	8006b12 <_printf_i+0x14a>
 8006b98:	6833      	ldr	r3, [r6, #0]
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	1d1a      	adds	r2, r3, #4
 8006b9e:	6032      	str	r2, [r6, #0]
 8006ba0:	681e      	ldr	r6, [r3, #0]
 8006ba2:	6862      	ldr	r2, [r4, #4]
 8006ba4:	4630      	mov	r0, r6
 8006ba6:	f000 fc32 	bl	800740e <memchr>
 8006baa:	b108      	cbz	r0, 8006bb0 <_printf_i+0x1e8>
 8006bac:	1b80      	subs	r0, r0, r6
 8006bae:	6060      	str	r0, [r4, #4]
 8006bb0:	6863      	ldr	r3, [r4, #4]
 8006bb2:	6123      	str	r3, [r4, #16]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bba:	e7aa      	b.n	8006b12 <_printf_i+0x14a>
 8006bbc:	4632      	mov	r2, r6
 8006bbe:	4649      	mov	r1, r9
 8006bc0:	4640      	mov	r0, r8
 8006bc2:	6923      	ldr	r3, [r4, #16]
 8006bc4:	47d0      	blx	sl
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	d0ad      	beq.n	8006b26 <_printf_i+0x15e>
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	079b      	lsls	r3, r3, #30
 8006bce:	d413      	bmi.n	8006bf8 <_printf_i+0x230>
 8006bd0:	68e0      	ldr	r0, [r4, #12]
 8006bd2:	9b03      	ldr	r3, [sp, #12]
 8006bd4:	4298      	cmp	r0, r3
 8006bd6:	bfb8      	it	lt
 8006bd8:	4618      	movlt	r0, r3
 8006bda:	e7a6      	b.n	8006b2a <_printf_i+0x162>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	4632      	mov	r2, r6
 8006be0:	4649      	mov	r1, r9
 8006be2:	4640      	mov	r0, r8
 8006be4:	47d0      	blx	sl
 8006be6:	3001      	adds	r0, #1
 8006be8:	d09d      	beq.n	8006b26 <_printf_i+0x15e>
 8006bea:	3501      	adds	r5, #1
 8006bec:	68e3      	ldr	r3, [r4, #12]
 8006bee:	9903      	ldr	r1, [sp, #12]
 8006bf0:	1a5b      	subs	r3, r3, r1
 8006bf2:	42ab      	cmp	r3, r5
 8006bf4:	dcf2      	bgt.n	8006bdc <_printf_i+0x214>
 8006bf6:	e7eb      	b.n	8006bd0 <_printf_i+0x208>
 8006bf8:	2500      	movs	r5, #0
 8006bfa:	f104 0619 	add.w	r6, r4, #25
 8006bfe:	e7f5      	b.n	8006bec <_printf_i+0x224>
 8006c00:	0800d360 	.word	0x0800d360
 8006c04:	0800d371 	.word	0x0800d371

08006c08 <_scanf_float>:
 8006c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c0c:	b087      	sub	sp, #28
 8006c0e:	9303      	str	r3, [sp, #12]
 8006c10:	688b      	ldr	r3, [r1, #8]
 8006c12:	4617      	mov	r7, r2
 8006c14:	1e5a      	subs	r2, r3, #1
 8006c16:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006c1a:	bf82      	ittt	hi
 8006c1c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006c20:	eb03 0b05 	addhi.w	fp, r3, r5
 8006c24:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006c28:	460a      	mov	r2, r1
 8006c2a:	f04f 0500 	mov.w	r5, #0
 8006c2e:	bf88      	it	hi
 8006c30:	608b      	strhi	r3, [r1, #8]
 8006c32:	680b      	ldr	r3, [r1, #0]
 8006c34:	4680      	mov	r8, r0
 8006c36:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006c3a:	f842 3b1c 	str.w	r3, [r2], #28
 8006c3e:	460c      	mov	r4, r1
 8006c40:	bf98      	it	ls
 8006c42:	f04f 0b00 	movls.w	fp, #0
 8006c46:	4616      	mov	r6, r2
 8006c48:	46aa      	mov	sl, r5
 8006c4a:	46a9      	mov	r9, r5
 8006c4c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006c50:	9201      	str	r2, [sp, #4]
 8006c52:	9502      	str	r5, [sp, #8]
 8006c54:	68a2      	ldr	r2, [r4, #8]
 8006c56:	b152      	cbz	r2, 8006c6e <_scanf_float+0x66>
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	2b4e      	cmp	r3, #78	@ 0x4e
 8006c5e:	d865      	bhi.n	8006d2c <_scanf_float+0x124>
 8006c60:	2b40      	cmp	r3, #64	@ 0x40
 8006c62:	d83d      	bhi.n	8006ce0 <_scanf_float+0xd8>
 8006c64:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006c68:	b2c8      	uxtb	r0, r1
 8006c6a:	280e      	cmp	r0, #14
 8006c6c:	d93b      	bls.n	8006ce6 <_scanf_float+0xde>
 8006c6e:	f1b9 0f00 	cmp.w	r9, #0
 8006c72:	d003      	beq.n	8006c7c <_scanf_float+0x74>
 8006c74:	6823      	ldr	r3, [r4, #0]
 8006c76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c7a:	6023      	str	r3, [r4, #0]
 8006c7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c80:	f1ba 0f01 	cmp.w	sl, #1
 8006c84:	f200 8118 	bhi.w	8006eb8 <_scanf_float+0x2b0>
 8006c88:	9b01      	ldr	r3, [sp, #4]
 8006c8a:	429e      	cmp	r6, r3
 8006c8c:	f200 8109 	bhi.w	8006ea2 <_scanf_float+0x29a>
 8006c90:	2001      	movs	r0, #1
 8006c92:	b007      	add	sp, #28
 8006c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c98:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006c9c:	2a0d      	cmp	r2, #13
 8006c9e:	d8e6      	bhi.n	8006c6e <_scanf_float+0x66>
 8006ca0:	a101      	add	r1, pc, #4	@ (adr r1, 8006ca8 <_scanf_float+0xa0>)
 8006ca2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006ca6:	bf00      	nop
 8006ca8:	08006def 	.word	0x08006def
 8006cac:	08006c6f 	.word	0x08006c6f
 8006cb0:	08006c6f 	.word	0x08006c6f
 8006cb4:	08006c6f 	.word	0x08006c6f
 8006cb8:	08006e4f 	.word	0x08006e4f
 8006cbc:	08006e27 	.word	0x08006e27
 8006cc0:	08006c6f 	.word	0x08006c6f
 8006cc4:	08006c6f 	.word	0x08006c6f
 8006cc8:	08006dfd 	.word	0x08006dfd
 8006ccc:	08006c6f 	.word	0x08006c6f
 8006cd0:	08006c6f 	.word	0x08006c6f
 8006cd4:	08006c6f 	.word	0x08006c6f
 8006cd8:	08006c6f 	.word	0x08006c6f
 8006cdc:	08006db5 	.word	0x08006db5
 8006ce0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006ce4:	e7da      	b.n	8006c9c <_scanf_float+0x94>
 8006ce6:	290e      	cmp	r1, #14
 8006ce8:	d8c1      	bhi.n	8006c6e <_scanf_float+0x66>
 8006cea:	a001      	add	r0, pc, #4	@ (adr r0, 8006cf0 <_scanf_float+0xe8>)
 8006cec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006cf0:	08006da5 	.word	0x08006da5
 8006cf4:	08006c6f 	.word	0x08006c6f
 8006cf8:	08006da5 	.word	0x08006da5
 8006cfc:	08006e3b 	.word	0x08006e3b
 8006d00:	08006c6f 	.word	0x08006c6f
 8006d04:	08006d4d 	.word	0x08006d4d
 8006d08:	08006d8b 	.word	0x08006d8b
 8006d0c:	08006d8b 	.word	0x08006d8b
 8006d10:	08006d8b 	.word	0x08006d8b
 8006d14:	08006d8b 	.word	0x08006d8b
 8006d18:	08006d8b 	.word	0x08006d8b
 8006d1c:	08006d8b 	.word	0x08006d8b
 8006d20:	08006d8b 	.word	0x08006d8b
 8006d24:	08006d8b 	.word	0x08006d8b
 8006d28:	08006d8b 	.word	0x08006d8b
 8006d2c:	2b6e      	cmp	r3, #110	@ 0x6e
 8006d2e:	d809      	bhi.n	8006d44 <_scanf_float+0x13c>
 8006d30:	2b60      	cmp	r3, #96	@ 0x60
 8006d32:	d8b1      	bhi.n	8006c98 <_scanf_float+0x90>
 8006d34:	2b54      	cmp	r3, #84	@ 0x54
 8006d36:	d07b      	beq.n	8006e30 <_scanf_float+0x228>
 8006d38:	2b59      	cmp	r3, #89	@ 0x59
 8006d3a:	d198      	bne.n	8006c6e <_scanf_float+0x66>
 8006d3c:	2d07      	cmp	r5, #7
 8006d3e:	d196      	bne.n	8006c6e <_scanf_float+0x66>
 8006d40:	2508      	movs	r5, #8
 8006d42:	e02c      	b.n	8006d9e <_scanf_float+0x196>
 8006d44:	2b74      	cmp	r3, #116	@ 0x74
 8006d46:	d073      	beq.n	8006e30 <_scanf_float+0x228>
 8006d48:	2b79      	cmp	r3, #121	@ 0x79
 8006d4a:	e7f6      	b.n	8006d3a <_scanf_float+0x132>
 8006d4c:	6821      	ldr	r1, [r4, #0]
 8006d4e:	05c8      	lsls	r0, r1, #23
 8006d50:	d51b      	bpl.n	8006d8a <_scanf_float+0x182>
 8006d52:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006d56:	6021      	str	r1, [r4, #0]
 8006d58:	f109 0901 	add.w	r9, r9, #1
 8006d5c:	f1bb 0f00 	cmp.w	fp, #0
 8006d60:	d003      	beq.n	8006d6a <_scanf_float+0x162>
 8006d62:	3201      	adds	r2, #1
 8006d64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d68:	60a2      	str	r2, [r4, #8]
 8006d6a:	68a3      	ldr	r3, [r4, #8]
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	60a3      	str	r3, [r4, #8]
 8006d70:	6923      	ldr	r3, [r4, #16]
 8006d72:	3301      	adds	r3, #1
 8006d74:	6123      	str	r3, [r4, #16]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	607b      	str	r3, [r7, #4]
 8006d7e:	f340 8087 	ble.w	8006e90 <_scanf_float+0x288>
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	3301      	adds	r3, #1
 8006d86:	603b      	str	r3, [r7, #0]
 8006d88:	e764      	b.n	8006c54 <_scanf_float+0x4c>
 8006d8a:	eb1a 0105 	adds.w	r1, sl, r5
 8006d8e:	f47f af6e 	bne.w	8006c6e <_scanf_float+0x66>
 8006d92:	460d      	mov	r5, r1
 8006d94:	468a      	mov	sl, r1
 8006d96:	6822      	ldr	r2, [r4, #0]
 8006d98:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006d9c:	6022      	str	r2, [r4, #0]
 8006d9e:	f806 3b01 	strb.w	r3, [r6], #1
 8006da2:	e7e2      	b.n	8006d6a <_scanf_float+0x162>
 8006da4:	6822      	ldr	r2, [r4, #0]
 8006da6:	0610      	lsls	r0, r2, #24
 8006da8:	f57f af61 	bpl.w	8006c6e <_scanf_float+0x66>
 8006dac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006db0:	6022      	str	r2, [r4, #0]
 8006db2:	e7f4      	b.n	8006d9e <_scanf_float+0x196>
 8006db4:	f1ba 0f00 	cmp.w	sl, #0
 8006db8:	d10e      	bne.n	8006dd8 <_scanf_float+0x1d0>
 8006dba:	f1b9 0f00 	cmp.w	r9, #0
 8006dbe:	d10e      	bne.n	8006dde <_scanf_float+0x1d6>
 8006dc0:	6822      	ldr	r2, [r4, #0]
 8006dc2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006dc6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006dca:	d108      	bne.n	8006dde <_scanf_float+0x1d6>
 8006dcc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006dd0:	f04f 0a01 	mov.w	sl, #1
 8006dd4:	6022      	str	r2, [r4, #0]
 8006dd6:	e7e2      	b.n	8006d9e <_scanf_float+0x196>
 8006dd8:	f1ba 0f02 	cmp.w	sl, #2
 8006ddc:	d055      	beq.n	8006e8a <_scanf_float+0x282>
 8006dde:	2d01      	cmp	r5, #1
 8006de0:	d002      	beq.n	8006de8 <_scanf_float+0x1e0>
 8006de2:	2d04      	cmp	r5, #4
 8006de4:	f47f af43 	bne.w	8006c6e <_scanf_float+0x66>
 8006de8:	3501      	adds	r5, #1
 8006dea:	b2ed      	uxtb	r5, r5
 8006dec:	e7d7      	b.n	8006d9e <_scanf_float+0x196>
 8006dee:	f1ba 0f01 	cmp.w	sl, #1
 8006df2:	f47f af3c 	bne.w	8006c6e <_scanf_float+0x66>
 8006df6:	f04f 0a02 	mov.w	sl, #2
 8006dfa:	e7d0      	b.n	8006d9e <_scanf_float+0x196>
 8006dfc:	b97d      	cbnz	r5, 8006e1e <_scanf_float+0x216>
 8006dfe:	f1b9 0f00 	cmp.w	r9, #0
 8006e02:	f47f af37 	bne.w	8006c74 <_scanf_float+0x6c>
 8006e06:	6822      	ldr	r2, [r4, #0]
 8006e08:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006e0c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006e10:	f040 8103 	bne.w	800701a <_scanf_float+0x412>
 8006e14:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e18:	2501      	movs	r5, #1
 8006e1a:	6022      	str	r2, [r4, #0]
 8006e1c:	e7bf      	b.n	8006d9e <_scanf_float+0x196>
 8006e1e:	2d03      	cmp	r5, #3
 8006e20:	d0e2      	beq.n	8006de8 <_scanf_float+0x1e0>
 8006e22:	2d05      	cmp	r5, #5
 8006e24:	e7de      	b.n	8006de4 <_scanf_float+0x1dc>
 8006e26:	2d02      	cmp	r5, #2
 8006e28:	f47f af21 	bne.w	8006c6e <_scanf_float+0x66>
 8006e2c:	2503      	movs	r5, #3
 8006e2e:	e7b6      	b.n	8006d9e <_scanf_float+0x196>
 8006e30:	2d06      	cmp	r5, #6
 8006e32:	f47f af1c 	bne.w	8006c6e <_scanf_float+0x66>
 8006e36:	2507      	movs	r5, #7
 8006e38:	e7b1      	b.n	8006d9e <_scanf_float+0x196>
 8006e3a:	6822      	ldr	r2, [r4, #0]
 8006e3c:	0591      	lsls	r1, r2, #22
 8006e3e:	f57f af16 	bpl.w	8006c6e <_scanf_float+0x66>
 8006e42:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006e46:	6022      	str	r2, [r4, #0]
 8006e48:	f8cd 9008 	str.w	r9, [sp, #8]
 8006e4c:	e7a7      	b.n	8006d9e <_scanf_float+0x196>
 8006e4e:	6822      	ldr	r2, [r4, #0]
 8006e50:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006e54:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006e58:	d006      	beq.n	8006e68 <_scanf_float+0x260>
 8006e5a:	0550      	lsls	r0, r2, #21
 8006e5c:	f57f af07 	bpl.w	8006c6e <_scanf_float+0x66>
 8006e60:	f1b9 0f00 	cmp.w	r9, #0
 8006e64:	f000 80d9 	beq.w	800701a <_scanf_float+0x412>
 8006e68:	0591      	lsls	r1, r2, #22
 8006e6a:	bf58      	it	pl
 8006e6c:	9902      	ldrpl	r1, [sp, #8]
 8006e6e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e72:	bf58      	it	pl
 8006e74:	eba9 0101 	subpl.w	r1, r9, r1
 8006e78:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006e7c:	f04f 0900 	mov.w	r9, #0
 8006e80:	bf58      	it	pl
 8006e82:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006e86:	6022      	str	r2, [r4, #0]
 8006e88:	e789      	b.n	8006d9e <_scanf_float+0x196>
 8006e8a:	f04f 0a03 	mov.w	sl, #3
 8006e8e:	e786      	b.n	8006d9e <_scanf_float+0x196>
 8006e90:	4639      	mov	r1, r7
 8006e92:	4640      	mov	r0, r8
 8006e94:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006e98:	4798      	blx	r3
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	f43f aeda 	beq.w	8006c54 <_scanf_float+0x4c>
 8006ea0:	e6e5      	b.n	8006c6e <_scanf_float+0x66>
 8006ea2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ea6:	463a      	mov	r2, r7
 8006ea8:	4640      	mov	r0, r8
 8006eaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006eae:	4798      	blx	r3
 8006eb0:	6923      	ldr	r3, [r4, #16]
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	6123      	str	r3, [r4, #16]
 8006eb6:	e6e7      	b.n	8006c88 <_scanf_float+0x80>
 8006eb8:	1e6b      	subs	r3, r5, #1
 8006eba:	2b06      	cmp	r3, #6
 8006ebc:	d824      	bhi.n	8006f08 <_scanf_float+0x300>
 8006ebe:	2d02      	cmp	r5, #2
 8006ec0:	d836      	bhi.n	8006f30 <_scanf_float+0x328>
 8006ec2:	9b01      	ldr	r3, [sp, #4]
 8006ec4:	429e      	cmp	r6, r3
 8006ec6:	f67f aee3 	bls.w	8006c90 <_scanf_float+0x88>
 8006eca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ece:	463a      	mov	r2, r7
 8006ed0:	4640      	mov	r0, r8
 8006ed2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ed6:	4798      	blx	r3
 8006ed8:	6923      	ldr	r3, [r4, #16]
 8006eda:	3b01      	subs	r3, #1
 8006edc:	6123      	str	r3, [r4, #16]
 8006ede:	e7f0      	b.n	8006ec2 <_scanf_float+0x2ba>
 8006ee0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ee4:	463a      	mov	r2, r7
 8006ee6:	4640      	mov	r0, r8
 8006ee8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006eec:	4798      	blx	r3
 8006eee:	6923      	ldr	r3, [r4, #16]
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	6123      	str	r3, [r4, #16]
 8006ef4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ef8:	fa5f fa8a 	uxtb.w	sl, sl
 8006efc:	f1ba 0f02 	cmp.w	sl, #2
 8006f00:	d1ee      	bne.n	8006ee0 <_scanf_float+0x2d8>
 8006f02:	3d03      	subs	r5, #3
 8006f04:	b2ed      	uxtb	r5, r5
 8006f06:	1b76      	subs	r6, r6, r5
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	05da      	lsls	r2, r3, #23
 8006f0c:	d530      	bpl.n	8006f70 <_scanf_float+0x368>
 8006f0e:	055b      	lsls	r3, r3, #21
 8006f10:	d511      	bpl.n	8006f36 <_scanf_float+0x32e>
 8006f12:	9b01      	ldr	r3, [sp, #4]
 8006f14:	429e      	cmp	r6, r3
 8006f16:	f67f aebb 	bls.w	8006c90 <_scanf_float+0x88>
 8006f1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f1e:	463a      	mov	r2, r7
 8006f20:	4640      	mov	r0, r8
 8006f22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f26:	4798      	blx	r3
 8006f28:	6923      	ldr	r3, [r4, #16]
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	6123      	str	r3, [r4, #16]
 8006f2e:	e7f0      	b.n	8006f12 <_scanf_float+0x30a>
 8006f30:	46aa      	mov	sl, r5
 8006f32:	46b3      	mov	fp, r6
 8006f34:	e7de      	b.n	8006ef4 <_scanf_float+0x2ec>
 8006f36:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006f3a:	6923      	ldr	r3, [r4, #16]
 8006f3c:	2965      	cmp	r1, #101	@ 0x65
 8006f3e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f42:	f106 35ff 	add.w	r5, r6, #4294967295
 8006f46:	6123      	str	r3, [r4, #16]
 8006f48:	d00c      	beq.n	8006f64 <_scanf_float+0x35c>
 8006f4a:	2945      	cmp	r1, #69	@ 0x45
 8006f4c:	d00a      	beq.n	8006f64 <_scanf_float+0x35c>
 8006f4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f52:	463a      	mov	r2, r7
 8006f54:	4640      	mov	r0, r8
 8006f56:	4798      	blx	r3
 8006f58:	6923      	ldr	r3, [r4, #16]
 8006f5a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	1eb5      	subs	r5, r6, #2
 8006f62:	6123      	str	r3, [r4, #16]
 8006f64:	463a      	mov	r2, r7
 8006f66:	4640      	mov	r0, r8
 8006f68:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f6c:	4798      	blx	r3
 8006f6e:	462e      	mov	r6, r5
 8006f70:	6822      	ldr	r2, [r4, #0]
 8006f72:	f012 0210 	ands.w	r2, r2, #16
 8006f76:	d001      	beq.n	8006f7c <_scanf_float+0x374>
 8006f78:	2000      	movs	r0, #0
 8006f7a:	e68a      	b.n	8006c92 <_scanf_float+0x8a>
 8006f7c:	7032      	strb	r2, [r6, #0]
 8006f7e:	6823      	ldr	r3, [r4, #0]
 8006f80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006f84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f88:	d11c      	bne.n	8006fc4 <_scanf_float+0x3bc>
 8006f8a:	9b02      	ldr	r3, [sp, #8]
 8006f8c:	454b      	cmp	r3, r9
 8006f8e:	eba3 0209 	sub.w	r2, r3, r9
 8006f92:	d123      	bne.n	8006fdc <_scanf_float+0x3d4>
 8006f94:	2200      	movs	r2, #0
 8006f96:	4640      	mov	r0, r8
 8006f98:	9901      	ldr	r1, [sp, #4]
 8006f9a:	f002 fc49 	bl	8009830 <_strtod_r>
 8006f9e:	9b03      	ldr	r3, [sp, #12]
 8006fa0:	6825      	ldr	r5, [r4, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f015 0f02 	tst.w	r5, #2
 8006fa8:	4606      	mov	r6, r0
 8006faa:	460f      	mov	r7, r1
 8006fac:	f103 0204 	add.w	r2, r3, #4
 8006fb0:	d01f      	beq.n	8006ff2 <_scanf_float+0x3ea>
 8006fb2:	9903      	ldr	r1, [sp, #12]
 8006fb4:	600a      	str	r2, [r1, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	e9c3 6700 	strd	r6, r7, [r3]
 8006fbc:	68e3      	ldr	r3, [r4, #12]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	60e3      	str	r3, [r4, #12]
 8006fc2:	e7d9      	b.n	8006f78 <_scanf_float+0x370>
 8006fc4:	9b04      	ldr	r3, [sp, #16]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d0e4      	beq.n	8006f94 <_scanf_float+0x38c>
 8006fca:	9905      	ldr	r1, [sp, #20]
 8006fcc:	230a      	movs	r3, #10
 8006fce:	4640      	mov	r0, r8
 8006fd0:	3101      	adds	r1, #1
 8006fd2:	f002 fcad 	bl	8009930 <_strtol_r>
 8006fd6:	9b04      	ldr	r3, [sp, #16]
 8006fd8:	9e05      	ldr	r6, [sp, #20]
 8006fda:	1ac2      	subs	r2, r0, r3
 8006fdc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006fe0:	429e      	cmp	r6, r3
 8006fe2:	bf28      	it	cs
 8006fe4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006fe8:	4630      	mov	r0, r6
 8006fea:	490d      	ldr	r1, [pc, #52]	@ (8007020 <_scanf_float+0x418>)
 8006fec:	f000 f912 	bl	8007214 <siprintf>
 8006ff0:	e7d0      	b.n	8006f94 <_scanf_float+0x38c>
 8006ff2:	076d      	lsls	r5, r5, #29
 8006ff4:	d4dd      	bmi.n	8006fb2 <_scanf_float+0x3aa>
 8006ff6:	9d03      	ldr	r5, [sp, #12]
 8006ff8:	602a      	str	r2, [r5, #0]
 8006ffa:	681d      	ldr	r5, [r3, #0]
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	f7f9 fd04 	bl	8000a0c <__aeabi_dcmpun>
 8007004:	b120      	cbz	r0, 8007010 <_scanf_float+0x408>
 8007006:	4807      	ldr	r0, [pc, #28]	@ (8007024 <_scanf_float+0x41c>)
 8007008:	f000 fa1e 	bl	8007448 <nanf>
 800700c:	6028      	str	r0, [r5, #0]
 800700e:	e7d5      	b.n	8006fbc <_scanf_float+0x3b4>
 8007010:	4630      	mov	r0, r6
 8007012:	4639      	mov	r1, r7
 8007014:	f7f9 fd58 	bl	8000ac8 <__aeabi_d2f>
 8007018:	e7f8      	b.n	800700c <_scanf_float+0x404>
 800701a:	f04f 0900 	mov.w	r9, #0
 800701e:	e62d      	b.n	8006c7c <_scanf_float+0x74>
 8007020:	0800d382 	.word	0x0800d382
 8007024:	0800d71d 	.word	0x0800d71d

08007028 <std>:
 8007028:	2300      	movs	r3, #0
 800702a:	b510      	push	{r4, lr}
 800702c:	4604      	mov	r4, r0
 800702e:	e9c0 3300 	strd	r3, r3, [r0]
 8007032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007036:	6083      	str	r3, [r0, #8]
 8007038:	8181      	strh	r1, [r0, #12]
 800703a:	6643      	str	r3, [r0, #100]	@ 0x64
 800703c:	81c2      	strh	r2, [r0, #14]
 800703e:	6183      	str	r3, [r0, #24]
 8007040:	4619      	mov	r1, r3
 8007042:	2208      	movs	r2, #8
 8007044:	305c      	adds	r0, #92	@ 0x5c
 8007046:	f000 f962 	bl	800730e <memset>
 800704a:	4b0d      	ldr	r3, [pc, #52]	@ (8007080 <std+0x58>)
 800704c:	6224      	str	r4, [r4, #32]
 800704e:	6263      	str	r3, [r4, #36]	@ 0x24
 8007050:	4b0c      	ldr	r3, [pc, #48]	@ (8007084 <std+0x5c>)
 8007052:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007054:	4b0c      	ldr	r3, [pc, #48]	@ (8007088 <std+0x60>)
 8007056:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007058:	4b0c      	ldr	r3, [pc, #48]	@ (800708c <std+0x64>)
 800705a:	6323      	str	r3, [r4, #48]	@ 0x30
 800705c:	4b0c      	ldr	r3, [pc, #48]	@ (8007090 <std+0x68>)
 800705e:	429c      	cmp	r4, r3
 8007060:	d006      	beq.n	8007070 <std+0x48>
 8007062:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007066:	4294      	cmp	r4, r2
 8007068:	d002      	beq.n	8007070 <std+0x48>
 800706a:	33d0      	adds	r3, #208	@ 0xd0
 800706c:	429c      	cmp	r4, r3
 800706e:	d105      	bne.n	800707c <std+0x54>
 8007070:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007078:	f000 b9c6 	b.w	8007408 <__retarget_lock_init_recursive>
 800707c:	bd10      	pop	{r4, pc}
 800707e:	bf00      	nop
 8007080:	08007255 	.word	0x08007255
 8007084:	08007277 	.word	0x08007277
 8007088:	080072af 	.word	0x080072af
 800708c:	080072d3 	.word	0x080072d3
 8007090:	2000077c 	.word	0x2000077c

08007094 <stdio_exit_handler>:
 8007094:	4a02      	ldr	r2, [pc, #8]	@ (80070a0 <stdio_exit_handler+0xc>)
 8007096:	4903      	ldr	r1, [pc, #12]	@ (80070a4 <stdio_exit_handler+0x10>)
 8007098:	4803      	ldr	r0, [pc, #12]	@ (80070a8 <stdio_exit_handler+0x14>)
 800709a:	f000 b869 	b.w	8007170 <_fwalk_sglue>
 800709e:	bf00      	nop
 80070a0:	20000014 	.word	0x20000014
 80070a4:	08009ce5 	.word	0x08009ce5
 80070a8:	20000024 	.word	0x20000024

080070ac <cleanup_stdio>:
 80070ac:	6841      	ldr	r1, [r0, #4]
 80070ae:	4b0c      	ldr	r3, [pc, #48]	@ (80070e0 <cleanup_stdio+0x34>)
 80070b0:	b510      	push	{r4, lr}
 80070b2:	4299      	cmp	r1, r3
 80070b4:	4604      	mov	r4, r0
 80070b6:	d001      	beq.n	80070bc <cleanup_stdio+0x10>
 80070b8:	f002 fe14 	bl	8009ce4 <_fflush_r>
 80070bc:	68a1      	ldr	r1, [r4, #8]
 80070be:	4b09      	ldr	r3, [pc, #36]	@ (80070e4 <cleanup_stdio+0x38>)
 80070c0:	4299      	cmp	r1, r3
 80070c2:	d002      	beq.n	80070ca <cleanup_stdio+0x1e>
 80070c4:	4620      	mov	r0, r4
 80070c6:	f002 fe0d 	bl	8009ce4 <_fflush_r>
 80070ca:	68e1      	ldr	r1, [r4, #12]
 80070cc:	4b06      	ldr	r3, [pc, #24]	@ (80070e8 <cleanup_stdio+0x3c>)
 80070ce:	4299      	cmp	r1, r3
 80070d0:	d004      	beq.n	80070dc <cleanup_stdio+0x30>
 80070d2:	4620      	mov	r0, r4
 80070d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070d8:	f002 be04 	b.w	8009ce4 <_fflush_r>
 80070dc:	bd10      	pop	{r4, pc}
 80070de:	bf00      	nop
 80070e0:	2000077c 	.word	0x2000077c
 80070e4:	200007e4 	.word	0x200007e4
 80070e8:	2000084c 	.word	0x2000084c

080070ec <global_stdio_init.part.0>:
 80070ec:	b510      	push	{r4, lr}
 80070ee:	4b0b      	ldr	r3, [pc, #44]	@ (800711c <global_stdio_init.part.0+0x30>)
 80070f0:	4c0b      	ldr	r4, [pc, #44]	@ (8007120 <global_stdio_init.part.0+0x34>)
 80070f2:	4a0c      	ldr	r2, [pc, #48]	@ (8007124 <global_stdio_init.part.0+0x38>)
 80070f4:	4620      	mov	r0, r4
 80070f6:	601a      	str	r2, [r3, #0]
 80070f8:	2104      	movs	r1, #4
 80070fa:	2200      	movs	r2, #0
 80070fc:	f7ff ff94 	bl	8007028 <std>
 8007100:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007104:	2201      	movs	r2, #1
 8007106:	2109      	movs	r1, #9
 8007108:	f7ff ff8e 	bl	8007028 <std>
 800710c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007110:	2202      	movs	r2, #2
 8007112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007116:	2112      	movs	r1, #18
 8007118:	f7ff bf86 	b.w	8007028 <std>
 800711c:	200008b4 	.word	0x200008b4
 8007120:	2000077c 	.word	0x2000077c
 8007124:	08007095 	.word	0x08007095

08007128 <__sfp_lock_acquire>:
 8007128:	4801      	ldr	r0, [pc, #4]	@ (8007130 <__sfp_lock_acquire+0x8>)
 800712a:	f000 b96e 	b.w	800740a <__retarget_lock_acquire_recursive>
 800712e:	bf00      	nop
 8007130:	200008bd 	.word	0x200008bd

08007134 <__sfp_lock_release>:
 8007134:	4801      	ldr	r0, [pc, #4]	@ (800713c <__sfp_lock_release+0x8>)
 8007136:	f000 b969 	b.w	800740c <__retarget_lock_release_recursive>
 800713a:	bf00      	nop
 800713c:	200008bd 	.word	0x200008bd

08007140 <__sinit>:
 8007140:	b510      	push	{r4, lr}
 8007142:	4604      	mov	r4, r0
 8007144:	f7ff fff0 	bl	8007128 <__sfp_lock_acquire>
 8007148:	6a23      	ldr	r3, [r4, #32]
 800714a:	b11b      	cbz	r3, 8007154 <__sinit+0x14>
 800714c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007150:	f7ff bff0 	b.w	8007134 <__sfp_lock_release>
 8007154:	4b04      	ldr	r3, [pc, #16]	@ (8007168 <__sinit+0x28>)
 8007156:	6223      	str	r3, [r4, #32]
 8007158:	4b04      	ldr	r3, [pc, #16]	@ (800716c <__sinit+0x2c>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1f5      	bne.n	800714c <__sinit+0xc>
 8007160:	f7ff ffc4 	bl	80070ec <global_stdio_init.part.0>
 8007164:	e7f2      	b.n	800714c <__sinit+0xc>
 8007166:	bf00      	nop
 8007168:	080070ad 	.word	0x080070ad
 800716c:	200008b4 	.word	0x200008b4

08007170 <_fwalk_sglue>:
 8007170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007174:	4607      	mov	r7, r0
 8007176:	4688      	mov	r8, r1
 8007178:	4614      	mov	r4, r2
 800717a:	2600      	movs	r6, #0
 800717c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007180:	f1b9 0901 	subs.w	r9, r9, #1
 8007184:	d505      	bpl.n	8007192 <_fwalk_sglue+0x22>
 8007186:	6824      	ldr	r4, [r4, #0]
 8007188:	2c00      	cmp	r4, #0
 800718a:	d1f7      	bne.n	800717c <_fwalk_sglue+0xc>
 800718c:	4630      	mov	r0, r6
 800718e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007192:	89ab      	ldrh	r3, [r5, #12]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d907      	bls.n	80071a8 <_fwalk_sglue+0x38>
 8007198:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800719c:	3301      	adds	r3, #1
 800719e:	d003      	beq.n	80071a8 <_fwalk_sglue+0x38>
 80071a0:	4629      	mov	r1, r5
 80071a2:	4638      	mov	r0, r7
 80071a4:	47c0      	blx	r8
 80071a6:	4306      	orrs	r6, r0
 80071a8:	3568      	adds	r5, #104	@ 0x68
 80071aa:	e7e9      	b.n	8007180 <_fwalk_sglue+0x10>

080071ac <sniprintf>:
 80071ac:	b40c      	push	{r2, r3}
 80071ae:	b530      	push	{r4, r5, lr}
 80071b0:	4b17      	ldr	r3, [pc, #92]	@ (8007210 <sniprintf+0x64>)
 80071b2:	1e0c      	subs	r4, r1, #0
 80071b4:	681d      	ldr	r5, [r3, #0]
 80071b6:	b09d      	sub	sp, #116	@ 0x74
 80071b8:	da08      	bge.n	80071cc <sniprintf+0x20>
 80071ba:	238b      	movs	r3, #139	@ 0x8b
 80071bc:	f04f 30ff 	mov.w	r0, #4294967295
 80071c0:	602b      	str	r3, [r5, #0]
 80071c2:	b01d      	add	sp, #116	@ 0x74
 80071c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071c8:	b002      	add	sp, #8
 80071ca:	4770      	bx	lr
 80071cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80071d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80071d4:	bf0c      	ite	eq
 80071d6:	4623      	moveq	r3, r4
 80071d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80071dc:	9304      	str	r3, [sp, #16]
 80071de:	9307      	str	r3, [sp, #28]
 80071e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80071e4:	9002      	str	r0, [sp, #8]
 80071e6:	9006      	str	r0, [sp, #24]
 80071e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80071ec:	4628      	mov	r0, r5
 80071ee:	ab21      	add	r3, sp, #132	@ 0x84
 80071f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80071f2:	a902      	add	r1, sp, #8
 80071f4:	9301      	str	r3, [sp, #4]
 80071f6:	f002 fbf9 	bl	80099ec <_svfiprintf_r>
 80071fa:	1c43      	adds	r3, r0, #1
 80071fc:	bfbc      	itt	lt
 80071fe:	238b      	movlt	r3, #139	@ 0x8b
 8007200:	602b      	strlt	r3, [r5, #0]
 8007202:	2c00      	cmp	r4, #0
 8007204:	d0dd      	beq.n	80071c2 <sniprintf+0x16>
 8007206:	2200      	movs	r2, #0
 8007208:	9b02      	ldr	r3, [sp, #8]
 800720a:	701a      	strb	r2, [r3, #0]
 800720c:	e7d9      	b.n	80071c2 <sniprintf+0x16>
 800720e:	bf00      	nop
 8007210:	20000020 	.word	0x20000020

08007214 <siprintf>:
 8007214:	b40e      	push	{r1, r2, r3}
 8007216:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800721a:	b500      	push	{lr}
 800721c:	b09c      	sub	sp, #112	@ 0x70
 800721e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007220:	9002      	str	r0, [sp, #8]
 8007222:	9006      	str	r0, [sp, #24]
 8007224:	9107      	str	r1, [sp, #28]
 8007226:	9104      	str	r1, [sp, #16]
 8007228:	4808      	ldr	r0, [pc, #32]	@ (800724c <siprintf+0x38>)
 800722a:	4909      	ldr	r1, [pc, #36]	@ (8007250 <siprintf+0x3c>)
 800722c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007230:	9105      	str	r1, [sp, #20]
 8007232:	6800      	ldr	r0, [r0, #0]
 8007234:	a902      	add	r1, sp, #8
 8007236:	9301      	str	r3, [sp, #4]
 8007238:	f002 fbd8 	bl	80099ec <_svfiprintf_r>
 800723c:	2200      	movs	r2, #0
 800723e:	9b02      	ldr	r3, [sp, #8]
 8007240:	701a      	strb	r2, [r3, #0]
 8007242:	b01c      	add	sp, #112	@ 0x70
 8007244:	f85d eb04 	ldr.w	lr, [sp], #4
 8007248:	b003      	add	sp, #12
 800724a:	4770      	bx	lr
 800724c:	20000020 	.word	0x20000020
 8007250:	ffff0208 	.word	0xffff0208

08007254 <__sread>:
 8007254:	b510      	push	{r4, lr}
 8007256:	460c      	mov	r4, r1
 8007258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800725c:	f000 f886 	bl	800736c <_read_r>
 8007260:	2800      	cmp	r0, #0
 8007262:	bfab      	itete	ge
 8007264:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007266:	89a3      	ldrhlt	r3, [r4, #12]
 8007268:	181b      	addge	r3, r3, r0
 800726a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800726e:	bfac      	ite	ge
 8007270:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007272:	81a3      	strhlt	r3, [r4, #12]
 8007274:	bd10      	pop	{r4, pc}

08007276 <__swrite>:
 8007276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800727a:	461f      	mov	r7, r3
 800727c:	898b      	ldrh	r3, [r1, #12]
 800727e:	4605      	mov	r5, r0
 8007280:	05db      	lsls	r3, r3, #23
 8007282:	460c      	mov	r4, r1
 8007284:	4616      	mov	r6, r2
 8007286:	d505      	bpl.n	8007294 <__swrite+0x1e>
 8007288:	2302      	movs	r3, #2
 800728a:	2200      	movs	r2, #0
 800728c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007290:	f000 f85a 	bl	8007348 <_lseek_r>
 8007294:	89a3      	ldrh	r3, [r4, #12]
 8007296:	4632      	mov	r2, r6
 8007298:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800729c:	81a3      	strh	r3, [r4, #12]
 800729e:	4628      	mov	r0, r5
 80072a0:	463b      	mov	r3, r7
 80072a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072aa:	f000 b871 	b.w	8007390 <_write_r>

080072ae <__sseek>:
 80072ae:	b510      	push	{r4, lr}
 80072b0:	460c      	mov	r4, r1
 80072b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072b6:	f000 f847 	bl	8007348 <_lseek_r>
 80072ba:	1c43      	adds	r3, r0, #1
 80072bc:	89a3      	ldrh	r3, [r4, #12]
 80072be:	bf15      	itete	ne
 80072c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80072c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80072c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80072ca:	81a3      	strheq	r3, [r4, #12]
 80072cc:	bf18      	it	ne
 80072ce:	81a3      	strhne	r3, [r4, #12]
 80072d0:	bd10      	pop	{r4, pc}

080072d2 <__sclose>:
 80072d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d6:	f000 b827 	b.w	8007328 <_close_r>

080072da <memmove>:
 80072da:	4288      	cmp	r0, r1
 80072dc:	b510      	push	{r4, lr}
 80072de:	eb01 0402 	add.w	r4, r1, r2
 80072e2:	d902      	bls.n	80072ea <memmove+0x10>
 80072e4:	4284      	cmp	r4, r0
 80072e6:	4623      	mov	r3, r4
 80072e8:	d807      	bhi.n	80072fa <memmove+0x20>
 80072ea:	1e43      	subs	r3, r0, #1
 80072ec:	42a1      	cmp	r1, r4
 80072ee:	d008      	beq.n	8007302 <memmove+0x28>
 80072f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072f8:	e7f8      	b.n	80072ec <memmove+0x12>
 80072fa:	4601      	mov	r1, r0
 80072fc:	4402      	add	r2, r0
 80072fe:	428a      	cmp	r2, r1
 8007300:	d100      	bne.n	8007304 <memmove+0x2a>
 8007302:	bd10      	pop	{r4, pc}
 8007304:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007308:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800730c:	e7f7      	b.n	80072fe <memmove+0x24>

0800730e <memset>:
 800730e:	4603      	mov	r3, r0
 8007310:	4402      	add	r2, r0
 8007312:	4293      	cmp	r3, r2
 8007314:	d100      	bne.n	8007318 <memset+0xa>
 8007316:	4770      	bx	lr
 8007318:	f803 1b01 	strb.w	r1, [r3], #1
 800731c:	e7f9      	b.n	8007312 <memset+0x4>
	...

08007320 <_localeconv_r>:
 8007320:	4800      	ldr	r0, [pc, #0]	@ (8007324 <_localeconv_r+0x4>)
 8007322:	4770      	bx	lr
 8007324:	20000160 	.word	0x20000160

08007328 <_close_r>:
 8007328:	b538      	push	{r3, r4, r5, lr}
 800732a:	2300      	movs	r3, #0
 800732c:	4d05      	ldr	r5, [pc, #20]	@ (8007344 <_close_r+0x1c>)
 800732e:	4604      	mov	r4, r0
 8007330:	4608      	mov	r0, r1
 8007332:	602b      	str	r3, [r5, #0]
 8007334:	f7fb fd61 	bl	8002dfa <_close>
 8007338:	1c43      	adds	r3, r0, #1
 800733a:	d102      	bne.n	8007342 <_close_r+0x1a>
 800733c:	682b      	ldr	r3, [r5, #0]
 800733e:	b103      	cbz	r3, 8007342 <_close_r+0x1a>
 8007340:	6023      	str	r3, [r4, #0]
 8007342:	bd38      	pop	{r3, r4, r5, pc}
 8007344:	200008b8 	.word	0x200008b8

08007348 <_lseek_r>:
 8007348:	b538      	push	{r3, r4, r5, lr}
 800734a:	4604      	mov	r4, r0
 800734c:	4608      	mov	r0, r1
 800734e:	4611      	mov	r1, r2
 8007350:	2200      	movs	r2, #0
 8007352:	4d05      	ldr	r5, [pc, #20]	@ (8007368 <_lseek_r+0x20>)
 8007354:	602a      	str	r2, [r5, #0]
 8007356:	461a      	mov	r2, r3
 8007358:	f7fb fd73 	bl	8002e42 <_lseek>
 800735c:	1c43      	adds	r3, r0, #1
 800735e:	d102      	bne.n	8007366 <_lseek_r+0x1e>
 8007360:	682b      	ldr	r3, [r5, #0]
 8007362:	b103      	cbz	r3, 8007366 <_lseek_r+0x1e>
 8007364:	6023      	str	r3, [r4, #0]
 8007366:	bd38      	pop	{r3, r4, r5, pc}
 8007368:	200008b8 	.word	0x200008b8

0800736c <_read_r>:
 800736c:	b538      	push	{r3, r4, r5, lr}
 800736e:	4604      	mov	r4, r0
 8007370:	4608      	mov	r0, r1
 8007372:	4611      	mov	r1, r2
 8007374:	2200      	movs	r2, #0
 8007376:	4d05      	ldr	r5, [pc, #20]	@ (800738c <_read_r+0x20>)
 8007378:	602a      	str	r2, [r5, #0]
 800737a:	461a      	mov	r2, r3
 800737c:	f7fb fd04 	bl	8002d88 <_read>
 8007380:	1c43      	adds	r3, r0, #1
 8007382:	d102      	bne.n	800738a <_read_r+0x1e>
 8007384:	682b      	ldr	r3, [r5, #0]
 8007386:	b103      	cbz	r3, 800738a <_read_r+0x1e>
 8007388:	6023      	str	r3, [r4, #0]
 800738a:	bd38      	pop	{r3, r4, r5, pc}
 800738c:	200008b8 	.word	0x200008b8

08007390 <_write_r>:
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	4604      	mov	r4, r0
 8007394:	4608      	mov	r0, r1
 8007396:	4611      	mov	r1, r2
 8007398:	2200      	movs	r2, #0
 800739a:	4d05      	ldr	r5, [pc, #20]	@ (80073b0 <_write_r+0x20>)
 800739c:	602a      	str	r2, [r5, #0]
 800739e:	461a      	mov	r2, r3
 80073a0:	f7fb fd0f 	bl	8002dc2 <_write>
 80073a4:	1c43      	adds	r3, r0, #1
 80073a6:	d102      	bne.n	80073ae <_write_r+0x1e>
 80073a8:	682b      	ldr	r3, [r5, #0]
 80073aa:	b103      	cbz	r3, 80073ae <_write_r+0x1e>
 80073ac:	6023      	str	r3, [r4, #0]
 80073ae:	bd38      	pop	{r3, r4, r5, pc}
 80073b0:	200008b8 	.word	0x200008b8

080073b4 <__errno>:
 80073b4:	4b01      	ldr	r3, [pc, #4]	@ (80073bc <__errno+0x8>)
 80073b6:	6818      	ldr	r0, [r3, #0]
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	20000020 	.word	0x20000020

080073c0 <__libc_init_array>:
 80073c0:	b570      	push	{r4, r5, r6, lr}
 80073c2:	2600      	movs	r6, #0
 80073c4:	4d0c      	ldr	r5, [pc, #48]	@ (80073f8 <__libc_init_array+0x38>)
 80073c6:	4c0d      	ldr	r4, [pc, #52]	@ (80073fc <__libc_init_array+0x3c>)
 80073c8:	1b64      	subs	r4, r4, r5
 80073ca:	10a4      	asrs	r4, r4, #2
 80073cc:	42a6      	cmp	r6, r4
 80073ce:	d109      	bne.n	80073e4 <__libc_init_array+0x24>
 80073d0:	f003 fb4c 	bl	800aa6c <_init>
 80073d4:	2600      	movs	r6, #0
 80073d6:	4d0a      	ldr	r5, [pc, #40]	@ (8007400 <__libc_init_array+0x40>)
 80073d8:	4c0a      	ldr	r4, [pc, #40]	@ (8007404 <__libc_init_array+0x44>)
 80073da:	1b64      	subs	r4, r4, r5
 80073dc:	10a4      	asrs	r4, r4, #2
 80073de:	42a6      	cmp	r6, r4
 80073e0:	d105      	bne.n	80073ee <__libc_init_array+0x2e>
 80073e2:	bd70      	pop	{r4, r5, r6, pc}
 80073e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073e8:	4798      	blx	r3
 80073ea:	3601      	adds	r6, #1
 80073ec:	e7ee      	b.n	80073cc <__libc_init_array+0xc>
 80073ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80073f2:	4798      	blx	r3
 80073f4:	3601      	adds	r6, #1
 80073f6:	e7f2      	b.n	80073de <__libc_init_array+0x1e>
 80073f8:	0800d788 	.word	0x0800d788
 80073fc:	0800d788 	.word	0x0800d788
 8007400:	0800d788 	.word	0x0800d788
 8007404:	0800d78c 	.word	0x0800d78c

08007408 <__retarget_lock_init_recursive>:
 8007408:	4770      	bx	lr

0800740a <__retarget_lock_acquire_recursive>:
 800740a:	4770      	bx	lr

0800740c <__retarget_lock_release_recursive>:
 800740c:	4770      	bx	lr

0800740e <memchr>:
 800740e:	4603      	mov	r3, r0
 8007410:	b510      	push	{r4, lr}
 8007412:	b2c9      	uxtb	r1, r1
 8007414:	4402      	add	r2, r0
 8007416:	4293      	cmp	r3, r2
 8007418:	4618      	mov	r0, r3
 800741a:	d101      	bne.n	8007420 <memchr+0x12>
 800741c:	2000      	movs	r0, #0
 800741e:	e003      	b.n	8007428 <memchr+0x1a>
 8007420:	7804      	ldrb	r4, [r0, #0]
 8007422:	3301      	adds	r3, #1
 8007424:	428c      	cmp	r4, r1
 8007426:	d1f6      	bne.n	8007416 <memchr+0x8>
 8007428:	bd10      	pop	{r4, pc}

0800742a <memcpy>:
 800742a:	440a      	add	r2, r1
 800742c:	4291      	cmp	r1, r2
 800742e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007432:	d100      	bne.n	8007436 <memcpy+0xc>
 8007434:	4770      	bx	lr
 8007436:	b510      	push	{r4, lr}
 8007438:	f811 4b01 	ldrb.w	r4, [r1], #1
 800743c:	4291      	cmp	r1, r2
 800743e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007442:	d1f9      	bne.n	8007438 <memcpy+0xe>
 8007444:	bd10      	pop	{r4, pc}
	...

08007448 <nanf>:
 8007448:	4800      	ldr	r0, [pc, #0]	@ (800744c <nanf+0x4>)
 800744a:	4770      	bx	lr
 800744c:	7fc00000 	.word	0x7fc00000

08007450 <quorem>:
 8007450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007454:	6903      	ldr	r3, [r0, #16]
 8007456:	690c      	ldr	r4, [r1, #16]
 8007458:	4607      	mov	r7, r0
 800745a:	42a3      	cmp	r3, r4
 800745c:	db7e      	blt.n	800755c <quorem+0x10c>
 800745e:	3c01      	subs	r4, #1
 8007460:	00a3      	lsls	r3, r4, #2
 8007462:	f100 0514 	add.w	r5, r0, #20
 8007466:	f101 0814 	add.w	r8, r1, #20
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007470:	9301      	str	r3, [sp, #4]
 8007472:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007476:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800747a:	3301      	adds	r3, #1
 800747c:	429a      	cmp	r2, r3
 800747e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007482:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007486:	d32e      	bcc.n	80074e6 <quorem+0x96>
 8007488:	f04f 0a00 	mov.w	sl, #0
 800748c:	46c4      	mov	ip, r8
 800748e:	46ae      	mov	lr, r5
 8007490:	46d3      	mov	fp, sl
 8007492:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007496:	b298      	uxth	r0, r3
 8007498:	fb06 a000 	mla	r0, r6, r0, sl
 800749c:	0c1b      	lsrs	r3, r3, #16
 800749e:	0c02      	lsrs	r2, r0, #16
 80074a0:	fb06 2303 	mla	r3, r6, r3, r2
 80074a4:	f8de 2000 	ldr.w	r2, [lr]
 80074a8:	b280      	uxth	r0, r0
 80074aa:	b292      	uxth	r2, r2
 80074ac:	1a12      	subs	r2, r2, r0
 80074ae:	445a      	add	r2, fp
 80074b0:	f8de 0000 	ldr.w	r0, [lr]
 80074b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80074be:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80074c2:	b292      	uxth	r2, r2
 80074c4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80074c8:	45e1      	cmp	r9, ip
 80074ca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80074ce:	f84e 2b04 	str.w	r2, [lr], #4
 80074d2:	d2de      	bcs.n	8007492 <quorem+0x42>
 80074d4:	9b00      	ldr	r3, [sp, #0]
 80074d6:	58eb      	ldr	r3, [r5, r3]
 80074d8:	b92b      	cbnz	r3, 80074e6 <quorem+0x96>
 80074da:	9b01      	ldr	r3, [sp, #4]
 80074dc:	3b04      	subs	r3, #4
 80074de:	429d      	cmp	r5, r3
 80074e0:	461a      	mov	r2, r3
 80074e2:	d32f      	bcc.n	8007544 <quorem+0xf4>
 80074e4:	613c      	str	r4, [r7, #16]
 80074e6:	4638      	mov	r0, r7
 80074e8:	f001 f9c2 	bl	8008870 <__mcmp>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	db25      	blt.n	800753c <quorem+0xec>
 80074f0:	4629      	mov	r1, r5
 80074f2:	2000      	movs	r0, #0
 80074f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80074f8:	f8d1 c000 	ldr.w	ip, [r1]
 80074fc:	fa1f fe82 	uxth.w	lr, r2
 8007500:	fa1f f38c 	uxth.w	r3, ip
 8007504:	eba3 030e 	sub.w	r3, r3, lr
 8007508:	4403      	add	r3, r0
 800750a:	0c12      	lsrs	r2, r2, #16
 800750c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007510:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007514:	b29b      	uxth	r3, r3
 8007516:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800751a:	45c1      	cmp	r9, r8
 800751c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007520:	f841 3b04 	str.w	r3, [r1], #4
 8007524:	d2e6      	bcs.n	80074f4 <quorem+0xa4>
 8007526:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800752a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800752e:	b922      	cbnz	r2, 800753a <quorem+0xea>
 8007530:	3b04      	subs	r3, #4
 8007532:	429d      	cmp	r5, r3
 8007534:	461a      	mov	r2, r3
 8007536:	d30b      	bcc.n	8007550 <quorem+0x100>
 8007538:	613c      	str	r4, [r7, #16]
 800753a:	3601      	adds	r6, #1
 800753c:	4630      	mov	r0, r6
 800753e:	b003      	add	sp, #12
 8007540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007544:	6812      	ldr	r2, [r2, #0]
 8007546:	3b04      	subs	r3, #4
 8007548:	2a00      	cmp	r2, #0
 800754a:	d1cb      	bne.n	80074e4 <quorem+0x94>
 800754c:	3c01      	subs	r4, #1
 800754e:	e7c6      	b.n	80074de <quorem+0x8e>
 8007550:	6812      	ldr	r2, [r2, #0]
 8007552:	3b04      	subs	r3, #4
 8007554:	2a00      	cmp	r2, #0
 8007556:	d1ef      	bne.n	8007538 <quorem+0xe8>
 8007558:	3c01      	subs	r4, #1
 800755a:	e7ea      	b.n	8007532 <quorem+0xe2>
 800755c:	2000      	movs	r0, #0
 800755e:	e7ee      	b.n	800753e <quorem+0xee>

08007560 <_dtoa_r>:
 8007560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007564:	4614      	mov	r4, r2
 8007566:	461d      	mov	r5, r3
 8007568:	69c7      	ldr	r7, [r0, #28]
 800756a:	b097      	sub	sp, #92	@ 0x5c
 800756c:	4683      	mov	fp, r0
 800756e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007572:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007574:	b97f      	cbnz	r7, 8007596 <_dtoa_r+0x36>
 8007576:	2010      	movs	r0, #16
 8007578:	f000 fe02 	bl	8008180 <malloc>
 800757c:	4602      	mov	r2, r0
 800757e:	f8cb 001c 	str.w	r0, [fp, #28]
 8007582:	b920      	cbnz	r0, 800758e <_dtoa_r+0x2e>
 8007584:	21ef      	movs	r1, #239	@ 0xef
 8007586:	4ba8      	ldr	r3, [pc, #672]	@ (8007828 <_dtoa_r+0x2c8>)
 8007588:	48a8      	ldr	r0, [pc, #672]	@ (800782c <_dtoa_r+0x2cc>)
 800758a:	f002 fbfb 	bl	8009d84 <__assert_func>
 800758e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007592:	6007      	str	r7, [r0, #0]
 8007594:	60c7      	str	r7, [r0, #12]
 8007596:	f8db 301c 	ldr.w	r3, [fp, #28]
 800759a:	6819      	ldr	r1, [r3, #0]
 800759c:	b159      	cbz	r1, 80075b6 <_dtoa_r+0x56>
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	2301      	movs	r3, #1
 80075a2:	4093      	lsls	r3, r2
 80075a4:	604a      	str	r2, [r1, #4]
 80075a6:	608b      	str	r3, [r1, #8]
 80075a8:	4658      	mov	r0, fp
 80075aa:	f000 fedf 	bl	800836c <_Bfree>
 80075ae:	2200      	movs	r2, #0
 80075b0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80075b4:	601a      	str	r2, [r3, #0]
 80075b6:	1e2b      	subs	r3, r5, #0
 80075b8:	bfaf      	iteee	ge
 80075ba:	2300      	movge	r3, #0
 80075bc:	2201      	movlt	r2, #1
 80075be:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80075c2:	9303      	strlt	r3, [sp, #12]
 80075c4:	bfa8      	it	ge
 80075c6:	6033      	strge	r3, [r6, #0]
 80075c8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80075cc:	4b98      	ldr	r3, [pc, #608]	@ (8007830 <_dtoa_r+0x2d0>)
 80075ce:	bfb8      	it	lt
 80075d0:	6032      	strlt	r2, [r6, #0]
 80075d2:	ea33 0308 	bics.w	r3, r3, r8
 80075d6:	d112      	bne.n	80075fe <_dtoa_r+0x9e>
 80075d8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80075dc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80075de:	6013      	str	r3, [r2, #0]
 80075e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80075e4:	4323      	orrs	r3, r4
 80075e6:	f000 8550 	beq.w	800808a <_dtoa_r+0xb2a>
 80075ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80075ec:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007834 <_dtoa_r+0x2d4>
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f000 8552 	beq.w	800809a <_dtoa_r+0xb3a>
 80075f6:	f10a 0303 	add.w	r3, sl, #3
 80075fa:	f000 bd4c 	b.w	8008096 <_dtoa_r+0xb36>
 80075fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007602:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007606:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800760a:	2200      	movs	r2, #0
 800760c:	2300      	movs	r3, #0
 800760e:	f7f9 f9cb 	bl	80009a8 <__aeabi_dcmpeq>
 8007612:	4607      	mov	r7, r0
 8007614:	b158      	cbz	r0, 800762e <_dtoa_r+0xce>
 8007616:	2301      	movs	r3, #1
 8007618:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800761a:	6013      	str	r3, [r2, #0]
 800761c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800761e:	b113      	cbz	r3, 8007626 <_dtoa_r+0xc6>
 8007620:	4b85      	ldr	r3, [pc, #532]	@ (8007838 <_dtoa_r+0x2d8>)
 8007622:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007624:	6013      	str	r3, [r2, #0]
 8007626:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800783c <_dtoa_r+0x2dc>
 800762a:	f000 bd36 	b.w	800809a <_dtoa_r+0xb3a>
 800762e:	ab14      	add	r3, sp, #80	@ 0x50
 8007630:	9301      	str	r3, [sp, #4]
 8007632:	ab15      	add	r3, sp, #84	@ 0x54
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	4658      	mov	r0, fp
 8007638:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800763c:	f001 fa30 	bl	8008aa0 <__d2b>
 8007640:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007644:	4681      	mov	r9, r0
 8007646:	2e00      	cmp	r6, #0
 8007648:	d077      	beq.n	800773a <_dtoa_r+0x1da>
 800764a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800764e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007650:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007658:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800765c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007660:	9712      	str	r7, [sp, #72]	@ 0x48
 8007662:	4619      	mov	r1, r3
 8007664:	2200      	movs	r2, #0
 8007666:	4b76      	ldr	r3, [pc, #472]	@ (8007840 <_dtoa_r+0x2e0>)
 8007668:	f7f8 fd7e 	bl	8000168 <__aeabi_dsub>
 800766c:	a368      	add	r3, pc, #416	@ (adr r3, 8007810 <_dtoa_r+0x2b0>)
 800766e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007672:	f7f8 ff31 	bl	80004d8 <__aeabi_dmul>
 8007676:	a368      	add	r3, pc, #416	@ (adr r3, 8007818 <_dtoa_r+0x2b8>)
 8007678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767c:	f7f8 fd76 	bl	800016c <__adddf3>
 8007680:	4604      	mov	r4, r0
 8007682:	4630      	mov	r0, r6
 8007684:	460d      	mov	r5, r1
 8007686:	f7f8 febd 	bl	8000404 <__aeabi_i2d>
 800768a:	a365      	add	r3, pc, #404	@ (adr r3, 8007820 <_dtoa_r+0x2c0>)
 800768c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007690:	f7f8 ff22 	bl	80004d8 <__aeabi_dmul>
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	4620      	mov	r0, r4
 800769a:	4629      	mov	r1, r5
 800769c:	f7f8 fd66 	bl	800016c <__adddf3>
 80076a0:	4604      	mov	r4, r0
 80076a2:	460d      	mov	r5, r1
 80076a4:	f7f9 f9c8 	bl	8000a38 <__aeabi_d2iz>
 80076a8:	2200      	movs	r2, #0
 80076aa:	4607      	mov	r7, r0
 80076ac:	2300      	movs	r3, #0
 80076ae:	4620      	mov	r0, r4
 80076b0:	4629      	mov	r1, r5
 80076b2:	f7f9 f983 	bl	80009bc <__aeabi_dcmplt>
 80076b6:	b140      	cbz	r0, 80076ca <_dtoa_r+0x16a>
 80076b8:	4638      	mov	r0, r7
 80076ba:	f7f8 fea3 	bl	8000404 <__aeabi_i2d>
 80076be:	4622      	mov	r2, r4
 80076c0:	462b      	mov	r3, r5
 80076c2:	f7f9 f971 	bl	80009a8 <__aeabi_dcmpeq>
 80076c6:	b900      	cbnz	r0, 80076ca <_dtoa_r+0x16a>
 80076c8:	3f01      	subs	r7, #1
 80076ca:	2f16      	cmp	r7, #22
 80076cc:	d853      	bhi.n	8007776 <_dtoa_r+0x216>
 80076ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076d2:	4b5c      	ldr	r3, [pc, #368]	@ (8007844 <_dtoa_r+0x2e4>)
 80076d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80076d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076dc:	f7f9 f96e 	bl	80009bc <__aeabi_dcmplt>
 80076e0:	2800      	cmp	r0, #0
 80076e2:	d04a      	beq.n	800777a <_dtoa_r+0x21a>
 80076e4:	2300      	movs	r3, #0
 80076e6:	3f01      	subs	r7, #1
 80076e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80076ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80076ec:	1b9b      	subs	r3, r3, r6
 80076ee:	1e5a      	subs	r2, r3, #1
 80076f0:	bf46      	itte	mi
 80076f2:	f1c3 0801 	rsbmi	r8, r3, #1
 80076f6:	2300      	movmi	r3, #0
 80076f8:	f04f 0800 	movpl.w	r8, #0
 80076fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80076fe:	bf48      	it	mi
 8007700:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007702:	2f00      	cmp	r7, #0
 8007704:	db3b      	blt.n	800777e <_dtoa_r+0x21e>
 8007706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007708:	970e      	str	r7, [sp, #56]	@ 0x38
 800770a:	443b      	add	r3, r7
 800770c:	9309      	str	r3, [sp, #36]	@ 0x24
 800770e:	2300      	movs	r3, #0
 8007710:	930a      	str	r3, [sp, #40]	@ 0x28
 8007712:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007714:	2b09      	cmp	r3, #9
 8007716:	d866      	bhi.n	80077e6 <_dtoa_r+0x286>
 8007718:	2b05      	cmp	r3, #5
 800771a:	bfc4      	itt	gt
 800771c:	3b04      	subgt	r3, #4
 800771e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007720:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007722:	bfc8      	it	gt
 8007724:	2400      	movgt	r4, #0
 8007726:	f1a3 0302 	sub.w	r3, r3, #2
 800772a:	bfd8      	it	le
 800772c:	2401      	movle	r4, #1
 800772e:	2b03      	cmp	r3, #3
 8007730:	d864      	bhi.n	80077fc <_dtoa_r+0x29c>
 8007732:	e8df f003 	tbb	[pc, r3]
 8007736:	382b      	.short	0x382b
 8007738:	5636      	.short	0x5636
 800773a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800773e:	441e      	add	r6, r3
 8007740:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007744:	2b20      	cmp	r3, #32
 8007746:	bfc1      	itttt	gt
 8007748:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800774c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007750:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007754:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007758:	bfd6      	itet	le
 800775a:	f1c3 0320 	rsble	r3, r3, #32
 800775e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007762:	fa04 f003 	lslle.w	r0, r4, r3
 8007766:	f7f8 fe3d 	bl	80003e4 <__aeabi_ui2d>
 800776a:	2201      	movs	r2, #1
 800776c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007770:	3e01      	subs	r6, #1
 8007772:	9212      	str	r2, [sp, #72]	@ 0x48
 8007774:	e775      	b.n	8007662 <_dtoa_r+0x102>
 8007776:	2301      	movs	r3, #1
 8007778:	e7b6      	b.n	80076e8 <_dtoa_r+0x188>
 800777a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800777c:	e7b5      	b.n	80076ea <_dtoa_r+0x18a>
 800777e:	427b      	negs	r3, r7
 8007780:	930a      	str	r3, [sp, #40]	@ 0x28
 8007782:	2300      	movs	r3, #0
 8007784:	eba8 0807 	sub.w	r8, r8, r7
 8007788:	930e      	str	r3, [sp, #56]	@ 0x38
 800778a:	e7c2      	b.n	8007712 <_dtoa_r+0x1b2>
 800778c:	2300      	movs	r3, #0
 800778e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007790:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007792:	2b00      	cmp	r3, #0
 8007794:	dc35      	bgt.n	8007802 <_dtoa_r+0x2a2>
 8007796:	2301      	movs	r3, #1
 8007798:	461a      	mov	r2, r3
 800779a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800779e:	9221      	str	r2, [sp, #132]	@ 0x84
 80077a0:	e00b      	b.n	80077ba <_dtoa_r+0x25a>
 80077a2:	2301      	movs	r3, #1
 80077a4:	e7f3      	b.n	800778e <_dtoa_r+0x22e>
 80077a6:	2300      	movs	r3, #0
 80077a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80077ac:	18fb      	adds	r3, r7, r3
 80077ae:	9308      	str	r3, [sp, #32]
 80077b0:	3301      	adds	r3, #1
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	9307      	str	r3, [sp, #28]
 80077b6:	bfb8      	it	lt
 80077b8:	2301      	movlt	r3, #1
 80077ba:	2100      	movs	r1, #0
 80077bc:	2204      	movs	r2, #4
 80077be:	f8db 001c 	ldr.w	r0, [fp, #28]
 80077c2:	f102 0514 	add.w	r5, r2, #20
 80077c6:	429d      	cmp	r5, r3
 80077c8:	d91f      	bls.n	800780a <_dtoa_r+0x2aa>
 80077ca:	6041      	str	r1, [r0, #4]
 80077cc:	4658      	mov	r0, fp
 80077ce:	f000 fd8d 	bl	80082ec <_Balloc>
 80077d2:	4682      	mov	sl, r0
 80077d4:	2800      	cmp	r0, #0
 80077d6:	d139      	bne.n	800784c <_dtoa_r+0x2ec>
 80077d8:	4602      	mov	r2, r0
 80077da:	f240 11af 	movw	r1, #431	@ 0x1af
 80077de:	4b1a      	ldr	r3, [pc, #104]	@ (8007848 <_dtoa_r+0x2e8>)
 80077e0:	e6d2      	b.n	8007588 <_dtoa_r+0x28>
 80077e2:	2301      	movs	r3, #1
 80077e4:	e7e0      	b.n	80077a8 <_dtoa_r+0x248>
 80077e6:	2401      	movs	r4, #1
 80077e8:	2300      	movs	r3, #0
 80077ea:	940b      	str	r4, [sp, #44]	@ 0x2c
 80077ec:	9320      	str	r3, [sp, #128]	@ 0x80
 80077ee:	f04f 33ff 	mov.w	r3, #4294967295
 80077f2:	2200      	movs	r2, #0
 80077f4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80077f8:	2312      	movs	r3, #18
 80077fa:	e7d0      	b.n	800779e <_dtoa_r+0x23e>
 80077fc:	2301      	movs	r3, #1
 80077fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007800:	e7f5      	b.n	80077ee <_dtoa_r+0x28e>
 8007802:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007804:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007808:	e7d7      	b.n	80077ba <_dtoa_r+0x25a>
 800780a:	3101      	adds	r1, #1
 800780c:	0052      	lsls	r2, r2, #1
 800780e:	e7d8      	b.n	80077c2 <_dtoa_r+0x262>
 8007810:	636f4361 	.word	0x636f4361
 8007814:	3fd287a7 	.word	0x3fd287a7
 8007818:	8b60c8b3 	.word	0x8b60c8b3
 800781c:	3fc68a28 	.word	0x3fc68a28
 8007820:	509f79fb 	.word	0x509f79fb
 8007824:	3fd34413 	.word	0x3fd34413
 8007828:	0800d394 	.word	0x0800d394
 800782c:	0800d3ab 	.word	0x0800d3ab
 8007830:	7ff00000 	.word	0x7ff00000
 8007834:	0800d390 	.word	0x0800d390
 8007838:	0800d35f 	.word	0x0800d35f
 800783c:	0800d35e 	.word	0x0800d35e
 8007840:	3ff80000 	.word	0x3ff80000
 8007844:	0800d4a8 	.word	0x0800d4a8
 8007848:	0800d403 	.word	0x0800d403
 800784c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007850:	6018      	str	r0, [r3, #0]
 8007852:	9b07      	ldr	r3, [sp, #28]
 8007854:	2b0e      	cmp	r3, #14
 8007856:	f200 80a4 	bhi.w	80079a2 <_dtoa_r+0x442>
 800785a:	2c00      	cmp	r4, #0
 800785c:	f000 80a1 	beq.w	80079a2 <_dtoa_r+0x442>
 8007860:	2f00      	cmp	r7, #0
 8007862:	dd33      	ble.n	80078cc <_dtoa_r+0x36c>
 8007864:	4b86      	ldr	r3, [pc, #536]	@ (8007a80 <_dtoa_r+0x520>)
 8007866:	f007 020f 	and.w	r2, r7, #15
 800786a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800786e:	05f8      	lsls	r0, r7, #23
 8007870:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007874:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007878:	ea4f 1427 	mov.w	r4, r7, asr #4
 800787c:	d516      	bpl.n	80078ac <_dtoa_r+0x34c>
 800787e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007882:	4b80      	ldr	r3, [pc, #512]	@ (8007a84 <_dtoa_r+0x524>)
 8007884:	2603      	movs	r6, #3
 8007886:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800788a:	f7f8 ff4f 	bl	800072c <__aeabi_ddiv>
 800788e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007892:	f004 040f 	and.w	r4, r4, #15
 8007896:	4d7b      	ldr	r5, [pc, #492]	@ (8007a84 <_dtoa_r+0x524>)
 8007898:	b954      	cbnz	r4, 80078b0 <_dtoa_r+0x350>
 800789a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800789e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078a2:	f7f8 ff43 	bl	800072c <__aeabi_ddiv>
 80078a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078aa:	e028      	b.n	80078fe <_dtoa_r+0x39e>
 80078ac:	2602      	movs	r6, #2
 80078ae:	e7f2      	b.n	8007896 <_dtoa_r+0x336>
 80078b0:	07e1      	lsls	r1, r4, #31
 80078b2:	d508      	bpl.n	80078c6 <_dtoa_r+0x366>
 80078b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80078bc:	f7f8 fe0c 	bl	80004d8 <__aeabi_dmul>
 80078c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078c4:	3601      	adds	r6, #1
 80078c6:	1064      	asrs	r4, r4, #1
 80078c8:	3508      	adds	r5, #8
 80078ca:	e7e5      	b.n	8007898 <_dtoa_r+0x338>
 80078cc:	f000 80d2 	beq.w	8007a74 <_dtoa_r+0x514>
 80078d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078d4:	427c      	negs	r4, r7
 80078d6:	4b6a      	ldr	r3, [pc, #424]	@ (8007a80 <_dtoa_r+0x520>)
 80078d8:	f004 020f 	and.w	r2, r4, #15
 80078dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e4:	f7f8 fdf8 	bl	80004d8 <__aeabi_dmul>
 80078e8:	2602      	movs	r6, #2
 80078ea:	2300      	movs	r3, #0
 80078ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078f0:	4d64      	ldr	r5, [pc, #400]	@ (8007a84 <_dtoa_r+0x524>)
 80078f2:	1124      	asrs	r4, r4, #4
 80078f4:	2c00      	cmp	r4, #0
 80078f6:	f040 80b2 	bne.w	8007a5e <_dtoa_r+0x4fe>
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1d3      	bne.n	80078a6 <_dtoa_r+0x346>
 80078fe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007902:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 80b7 	beq.w	8007a78 <_dtoa_r+0x518>
 800790a:	2200      	movs	r2, #0
 800790c:	4620      	mov	r0, r4
 800790e:	4629      	mov	r1, r5
 8007910:	4b5d      	ldr	r3, [pc, #372]	@ (8007a88 <_dtoa_r+0x528>)
 8007912:	f7f9 f853 	bl	80009bc <__aeabi_dcmplt>
 8007916:	2800      	cmp	r0, #0
 8007918:	f000 80ae 	beq.w	8007a78 <_dtoa_r+0x518>
 800791c:	9b07      	ldr	r3, [sp, #28]
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 80aa 	beq.w	8007a78 <_dtoa_r+0x518>
 8007924:	9b08      	ldr	r3, [sp, #32]
 8007926:	2b00      	cmp	r3, #0
 8007928:	dd37      	ble.n	800799a <_dtoa_r+0x43a>
 800792a:	1e7b      	subs	r3, r7, #1
 800792c:	4620      	mov	r0, r4
 800792e:	9304      	str	r3, [sp, #16]
 8007930:	2200      	movs	r2, #0
 8007932:	4629      	mov	r1, r5
 8007934:	4b55      	ldr	r3, [pc, #340]	@ (8007a8c <_dtoa_r+0x52c>)
 8007936:	f7f8 fdcf 	bl	80004d8 <__aeabi_dmul>
 800793a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800793e:	9c08      	ldr	r4, [sp, #32]
 8007940:	3601      	adds	r6, #1
 8007942:	4630      	mov	r0, r6
 8007944:	f7f8 fd5e 	bl	8000404 <__aeabi_i2d>
 8007948:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800794c:	f7f8 fdc4 	bl	80004d8 <__aeabi_dmul>
 8007950:	2200      	movs	r2, #0
 8007952:	4b4f      	ldr	r3, [pc, #316]	@ (8007a90 <_dtoa_r+0x530>)
 8007954:	f7f8 fc0a 	bl	800016c <__adddf3>
 8007958:	4605      	mov	r5, r0
 800795a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800795e:	2c00      	cmp	r4, #0
 8007960:	f040 809a 	bne.w	8007a98 <_dtoa_r+0x538>
 8007964:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007968:	2200      	movs	r2, #0
 800796a:	4b4a      	ldr	r3, [pc, #296]	@ (8007a94 <_dtoa_r+0x534>)
 800796c:	f7f8 fbfc 	bl	8000168 <__aeabi_dsub>
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007978:	462a      	mov	r2, r5
 800797a:	4633      	mov	r3, r6
 800797c:	f7f9 f83c 	bl	80009f8 <__aeabi_dcmpgt>
 8007980:	2800      	cmp	r0, #0
 8007982:	f040 828e 	bne.w	8007ea2 <_dtoa_r+0x942>
 8007986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800798a:	462a      	mov	r2, r5
 800798c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007990:	f7f9 f814 	bl	80009bc <__aeabi_dcmplt>
 8007994:	2800      	cmp	r0, #0
 8007996:	f040 8127 	bne.w	8007be8 <_dtoa_r+0x688>
 800799a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800799e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80079a2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f2c0 8163 	blt.w	8007c70 <_dtoa_r+0x710>
 80079aa:	2f0e      	cmp	r7, #14
 80079ac:	f300 8160 	bgt.w	8007c70 <_dtoa_r+0x710>
 80079b0:	4b33      	ldr	r3, [pc, #204]	@ (8007a80 <_dtoa_r+0x520>)
 80079b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80079b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80079ba:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80079be:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	da03      	bge.n	80079cc <_dtoa_r+0x46c>
 80079c4:	9b07      	ldr	r3, [sp, #28]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f340 8100 	ble.w	8007bcc <_dtoa_r+0x66c>
 80079cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80079d0:	4656      	mov	r6, sl
 80079d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079d6:	4620      	mov	r0, r4
 80079d8:	4629      	mov	r1, r5
 80079da:	f7f8 fea7 	bl	800072c <__aeabi_ddiv>
 80079de:	f7f9 f82b 	bl	8000a38 <__aeabi_d2iz>
 80079e2:	4680      	mov	r8, r0
 80079e4:	f7f8 fd0e 	bl	8000404 <__aeabi_i2d>
 80079e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079ec:	f7f8 fd74 	bl	80004d8 <__aeabi_dmul>
 80079f0:	4602      	mov	r2, r0
 80079f2:	460b      	mov	r3, r1
 80079f4:	4620      	mov	r0, r4
 80079f6:	4629      	mov	r1, r5
 80079f8:	f7f8 fbb6 	bl	8000168 <__aeabi_dsub>
 80079fc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007a00:	9d07      	ldr	r5, [sp, #28]
 8007a02:	f806 4b01 	strb.w	r4, [r6], #1
 8007a06:	eba6 040a 	sub.w	r4, r6, sl
 8007a0a:	42a5      	cmp	r5, r4
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	460b      	mov	r3, r1
 8007a10:	f040 8116 	bne.w	8007c40 <_dtoa_r+0x6e0>
 8007a14:	f7f8 fbaa 	bl	800016c <__adddf3>
 8007a18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a1c:	4604      	mov	r4, r0
 8007a1e:	460d      	mov	r5, r1
 8007a20:	f7f8 ffea 	bl	80009f8 <__aeabi_dcmpgt>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	f040 80f8 	bne.w	8007c1a <_dtoa_r+0x6ba>
 8007a2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a2e:	4620      	mov	r0, r4
 8007a30:	4629      	mov	r1, r5
 8007a32:	f7f8 ffb9 	bl	80009a8 <__aeabi_dcmpeq>
 8007a36:	b118      	cbz	r0, 8007a40 <_dtoa_r+0x4e0>
 8007a38:	f018 0f01 	tst.w	r8, #1
 8007a3c:	f040 80ed 	bne.w	8007c1a <_dtoa_r+0x6ba>
 8007a40:	4649      	mov	r1, r9
 8007a42:	4658      	mov	r0, fp
 8007a44:	f000 fc92 	bl	800836c <_Bfree>
 8007a48:	2300      	movs	r3, #0
 8007a4a:	7033      	strb	r3, [r6, #0]
 8007a4c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007a4e:	3701      	adds	r7, #1
 8007a50:	601f      	str	r7, [r3, #0]
 8007a52:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 8320 	beq.w	800809a <_dtoa_r+0xb3a>
 8007a5a:	601e      	str	r6, [r3, #0]
 8007a5c:	e31d      	b.n	800809a <_dtoa_r+0xb3a>
 8007a5e:	07e2      	lsls	r2, r4, #31
 8007a60:	d505      	bpl.n	8007a6e <_dtoa_r+0x50e>
 8007a62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a66:	f7f8 fd37 	bl	80004d8 <__aeabi_dmul>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	3601      	adds	r6, #1
 8007a6e:	1064      	asrs	r4, r4, #1
 8007a70:	3508      	adds	r5, #8
 8007a72:	e73f      	b.n	80078f4 <_dtoa_r+0x394>
 8007a74:	2602      	movs	r6, #2
 8007a76:	e742      	b.n	80078fe <_dtoa_r+0x39e>
 8007a78:	9c07      	ldr	r4, [sp, #28]
 8007a7a:	9704      	str	r7, [sp, #16]
 8007a7c:	e761      	b.n	8007942 <_dtoa_r+0x3e2>
 8007a7e:	bf00      	nop
 8007a80:	0800d4a8 	.word	0x0800d4a8
 8007a84:	0800d480 	.word	0x0800d480
 8007a88:	3ff00000 	.word	0x3ff00000
 8007a8c:	40240000 	.word	0x40240000
 8007a90:	401c0000 	.word	0x401c0000
 8007a94:	40140000 	.word	0x40140000
 8007a98:	4b70      	ldr	r3, [pc, #448]	@ (8007c5c <_dtoa_r+0x6fc>)
 8007a9a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007aa0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007aa4:	4454      	add	r4, sl
 8007aa6:	2900      	cmp	r1, #0
 8007aa8:	d045      	beq.n	8007b36 <_dtoa_r+0x5d6>
 8007aaa:	2000      	movs	r0, #0
 8007aac:	496c      	ldr	r1, [pc, #432]	@ (8007c60 <_dtoa_r+0x700>)
 8007aae:	f7f8 fe3d 	bl	800072c <__aeabi_ddiv>
 8007ab2:	4633      	mov	r3, r6
 8007ab4:	462a      	mov	r2, r5
 8007ab6:	f7f8 fb57 	bl	8000168 <__aeabi_dsub>
 8007aba:	4656      	mov	r6, sl
 8007abc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ac0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ac4:	f7f8 ffb8 	bl	8000a38 <__aeabi_d2iz>
 8007ac8:	4605      	mov	r5, r0
 8007aca:	f7f8 fc9b 	bl	8000404 <__aeabi_i2d>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ad6:	f7f8 fb47 	bl	8000168 <__aeabi_dsub>
 8007ada:	4602      	mov	r2, r0
 8007adc:	460b      	mov	r3, r1
 8007ade:	3530      	adds	r5, #48	@ 0x30
 8007ae0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ae4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ae8:	f806 5b01 	strb.w	r5, [r6], #1
 8007aec:	f7f8 ff66 	bl	80009bc <__aeabi_dcmplt>
 8007af0:	2800      	cmp	r0, #0
 8007af2:	d163      	bne.n	8007bbc <_dtoa_r+0x65c>
 8007af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007af8:	2000      	movs	r0, #0
 8007afa:	495a      	ldr	r1, [pc, #360]	@ (8007c64 <_dtoa_r+0x704>)
 8007afc:	f7f8 fb34 	bl	8000168 <__aeabi_dsub>
 8007b00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007b04:	f7f8 ff5a 	bl	80009bc <__aeabi_dcmplt>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	f040 8087 	bne.w	8007c1c <_dtoa_r+0x6bc>
 8007b0e:	42a6      	cmp	r6, r4
 8007b10:	f43f af43 	beq.w	800799a <_dtoa_r+0x43a>
 8007b14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007b18:	2200      	movs	r2, #0
 8007b1a:	4b53      	ldr	r3, [pc, #332]	@ (8007c68 <_dtoa_r+0x708>)
 8007b1c:	f7f8 fcdc 	bl	80004d8 <__aeabi_dmul>
 8007b20:	2200      	movs	r2, #0
 8007b22:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b2a:	4b4f      	ldr	r3, [pc, #316]	@ (8007c68 <_dtoa_r+0x708>)
 8007b2c:	f7f8 fcd4 	bl	80004d8 <__aeabi_dmul>
 8007b30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b34:	e7c4      	b.n	8007ac0 <_dtoa_r+0x560>
 8007b36:	4631      	mov	r1, r6
 8007b38:	4628      	mov	r0, r5
 8007b3a:	f7f8 fccd 	bl	80004d8 <__aeabi_dmul>
 8007b3e:	4656      	mov	r6, sl
 8007b40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007b44:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007b46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b4a:	f7f8 ff75 	bl	8000a38 <__aeabi_d2iz>
 8007b4e:	4605      	mov	r5, r0
 8007b50:	f7f8 fc58 	bl	8000404 <__aeabi_i2d>
 8007b54:	4602      	mov	r2, r0
 8007b56:	460b      	mov	r3, r1
 8007b58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b5c:	f7f8 fb04 	bl	8000168 <__aeabi_dsub>
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	3530      	adds	r5, #48	@ 0x30
 8007b66:	f806 5b01 	strb.w	r5, [r6], #1
 8007b6a:	42a6      	cmp	r6, r4
 8007b6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b70:	f04f 0200 	mov.w	r2, #0
 8007b74:	d124      	bne.n	8007bc0 <_dtoa_r+0x660>
 8007b76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007b7a:	4b39      	ldr	r3, [pc, #228]	@ (8007c60 <_dtoa_r+0x700>)
 8007b7c:	f7f8 faf6 	bl	800016c <__adddf3>
 8007b80:	4602      	mov	r2, r0
 8007b82:	460b      	mov	r3, r1
 8007b84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b88:	f7f8 ff36 	bl	80009f8 <__aeabi_dcmpgt>
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	d145      	bne.n	8007c1c <_dtoa_r+0x6bc>
 8007b90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007b94:	2000      	movs	r0, #0
 8007b96:	4932      	ldr	r1, [pc, #200]	@ (8007c60 <_dtoa_r+0x700>)
 8007b98:	f7f8 fae6 	bl	8000168 <__aeabi_dsub>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ba4:	f7f8 ff0a 	bl	80009bc <__aeabi_dcmplt>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	f43f aef6 	beq.w	800799a <_dtoa_r+0x43a>
 8007bae:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007bb0:	1e73      	subs	r3, r6, #1
 8007bb2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007bb4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007bb8:	2b30      	cmp	r3, #48	@ 0x30
 8007bba:	d0f8      	beq.n	8007bae <_dtoa_r+0x64e>
 8007bbc:	9f04      	ldr	r7, [sp, #16]
 8007bbe:	e73f      	b.n	8007a40 <_dtoa_r+0x4e0>
 8007bc0:	4b29      	ldr	r3, [pc, #164]	@ (8007c68 <_dtoa_r+0x708>)
 8007bc2:	f7f8 fc89 	bl	80004d8 <__aeabi_dmul>
 8007bc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bca:	e7bc      	b.n	8007b46 <_dtoa_r+0x5e6>
 8007bcc:	d10c      	bne.n	8007be8 <_dtoa_r+0x688>
 8007bce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	4b25      	ldr	r3, [pc, #148]	@ (8007c6c <_dtoa_r+0x70c>)
 8007bd6:	f7f8 fc7f 	bl	80004d8 <__aeabi_dmul>
 8007bda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bde:	f7f8 ff01 	bl	80009e4 <__aeabi_dcmpge>
 8007be2:	2800      	cmp	r0, #0
 8007be4:	f000 815b 	beq.w	8007e9e <_dtoa_r+0x93e>
 8007be8:	2400      	movs	r4, #0
 8007bea:	4625      	mov	r5, r4
 8007bec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007bee:	4656      	mov	r6, sl
 8007bf0:	43db      	mvns	r3, r3
 8007bf2:	9304      	str	r3, [sp, #16]
 8007bf4:	2700      	movs	r7, #0
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	4658      	mov	r0, fp
 8007bfa:	f000 fbb7 	bl	800836c <_Bfree>
 8007bfe:	2d00      	cmp	r5, #0
 8007c00:	d0dc      	beq.n	8007bbc <_dtoa_r+0x65c>
 8007c02:	b12f      	cbz	r7, 8007c10 <_dtoa_r+0x6b0>
 8007c04:	42af      	cmp	r7, r5
 8007c06:	d003      	beq.n	8007c10 <_dtoa_r+0x6b0>
 8007c08:	4639      	mov	r1, r7
 8007c0a:	4658      	mov	r0, fp
 8007c0c:	f000 fbae 	bl	800836c <_Bfree>
 8007c10:	4629      	mov	r1, r5
 8007c12:	4658      	mov	r0, fp
 8007c14:	f000 fbaa 	bl	800836c <_Bfree>
 8007c18:	e7d0      	b.n	8007bbc <_dtoa_r+0x65c>
 8007c1a:	9704      	str	r7, [sp, #16]
 8007c1c:	4633      	mov	r3, r6
 8007c1e:	461e      	mov	r6, r3
 8007c20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c24:	2a39      	cmp	r2, #57	@ 0x39
 8007c26:	d107      	bne.n	8007c38 <_dtoa_r+0x6d8>
 8007c28:	459a      	cmp	sl, r3
 8007c2a:	d1f8      	bne.n	8007c1e <_dtoa_r+0x6be>
 8007c2c:	9a04      	ldr	r2, [sp, #16]
 8007c2e:	3201      	adds	r2, #1
 8007c30:	9204      	str	r2, [sp, #16]
 8007c32:	2230      	movs	r2, #48	@ 0x30
 8007c34:	f88a 2000 	strb.w	r2, [sl]
 8007c38:	781a      	ldrb	r2, [r3, #0]
 8007c3a:	3201      	adds	r2, #1
 8007c3c:	701a      	strb	r2, [r3, #0]
 8007c3e:	e7bd      	b.n	8007bbc <_dtoa_r+0x65c>
 8007c40:	2200      	movs	r2, #0
 8007c42:	4b09      	ldr	r3, [pc, #36]	@ (8007c68 <_dtoa_r+0x708>)
 8007c44:	f7f8 fc48 	bl	80004d8 <__aeabi_dmul>
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	4604      	mov	r4, r0
 8007c4e:	460d      	mov	r5, r1
 8007c50:	f7f8 feaa 	bl	80009a8 <__aeabi_dcmpeq>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	f43f aebc 	beq.w	80079d2 <_dtoa_r+0x472>
 8007c5a:	e6f1      	b.n	8007a40 <_dtoa_r+0x4e0>
 8007c5c:	0800d4a8 	.word	0x0800d4a8
 8007c60:	3fe00000 	.word	0x3fe00000
 8007c64:	3ff00000 	.word	0x3ff00000
 8007c68:	40240000 	.word	0x40240000
 8007c6c:	40140000 	.word	0x40140000
 8007c70:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007c72:	2a00      	cmp	r2, #0
 8007c74:	f000 80db 	beq.w	8007e2e <_dtoa_r+0x8ce>
 8007c78:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007c7a:	2a01      	cmp	r2, #1
 8007c7c:	f300 80bf 	bgt.w	8007dfe <_dtoa_r+0x89e>
 8007c80:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007c82:	2a00      	cmp	r2, #0
 8007c84:	f000 80b7 	beq.w	8007df6 <_dtoa_r+0x896>
 8007c88:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007c8c:	4646      	mov	r6, r8
 8007c8e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007c90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c92:	2101      	movs	r1, #1
 8007c94:	441a      	add	r2, r3
 8007c96:	4658      	mov	r0, fp
 8007c98:	4498      	add	r8, r3
 8007c9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c9c:	f000 fc64 	bl	8008568 <__i2b>
 8007ca0:	4605      	mov	r5, r0
 8007ca2:	b15e      	cbz	r6, 8007cbc <_dtoa_r+0x75c>
 8007ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	dd08      	ble.n	8007cbc <_dtoa_r+0x75c>
 8007caa:	42b3      	cmp	r3, r6
 8007cac:	bfa8      	it	ge
 8007cae:	4633      	movge	r3, r6
 8007cb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cb2:	eba8 0803 	sub.w	r8, r8, r3
 8007cb6:	1af6      	subs	r6, r6, r3
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cbe:	b1f3      	cbz	r3, 8007cfe <_dtoa_r+0x79e>
 8007cc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f000 80b7 	beq.w	8007e36 <_dtoa_r+0x8d6>
 8007cc8:	b18c      	cbz	r4, 8007cee <_dtoa_r+0x78e>
 8007cca:	4629      	mov	r1, r5
 8007ccc:	4622      	mov	r2, r4
 8007cce:	4658      	mov	r0, fp
 8007cd0:	f000 fd08 	bl	80086e4 <__pow5mult>
 8007cd4:	464a      	mov	r2, r9
 8007cd6:	4601      	mov	r1, r0
 8007cd8:	4605      	mov	r5, r0
 8007cda:	4658      	mov	r0, fp
 8007cdc:	f000 fc5a 	bl	8008594 <__multiply>
 8007ce0:	4649      	mov	r1, r9
 8007ce2:	9004      	str	r0, [sp, #16]
 8007ce4:	4658      	mov	r0, fp
 8007ce6:	f000 fb41 	bl	800836c <_Bfree>
 8007cea:	9b04      	ldr	r3, [sp, #16]
 8007cec:	4699      	mov	r9, r3
 8007cee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cf0:	1b1a      	subs	r2, r3, r4
 8007cf2:	d004      	beq.n	8007cfe <_dtoa_r+0x79e>
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	4658      	mov	r0, fp
 8007cf8:	f000 fcf4 	bl	80086e4 <__pow5mult>
 8007cfc:	4681      	mov	r9, r0
 8007cfe:	2101      	movs	r1, #1
 8007d00:	4658      	mov	r0, fp
 8007d02:	f000 fc31 	bl	8008568 <__i2b>
 8007d06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d08:	4604      	mov	r4, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f000 81c9 	beq.w	80080a2 <_dtoa_r+0xb42>
 8007d10:	461a      	mov	r2, r3
 8007d12:	4601      	mov	r1, r0
 8007d14:	4658      	mov	r0, fp
 8007d16:	f000 fce5 	bl	80086e4 <__pow5mult>
 8007d1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007d1c:	4604      	mov	r4, r0
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	f300 808f 	bgt.w	8007e42 <_dtoa_r+0x8e2>
 8007d24:	9b02      	ldr	r3, [sp, #8]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f040 8087 	bne.w	8007e3a <_dtoa_r+0x8da>
 8007d2c:	9b03      	ldr	r3, [sp, #12]
 8007d2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f040 8083 	bne.w	8007e3e <_dtoa_r+0x8de>
 8007d38:	9b03      	ldr	r3, [sp, #12]
 8007d3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d3e:	0d1b      	lsrs	r3, r3, #20
 8007d40:	051b      	lsls	r3, r3, #20
 8007d42:	b12b      	cbz	r3, 8007d50 <_dtoa_r+0x7f0>
 8007d44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d46:	f108 0801 	add.w	r8, r8, #1
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d4e:	2301      	movs	r3, #1
 8007d50:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f000 81aa 	beq.w	80080ae <_dtoa_r+0xb4e>
 8007d5a:	6923      	ldr	r3, [r4, #16]
 8007d5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007d60:	6918      	ldr	r0, [r3, #16]
 8007d62:	f000 fbb5 	bl	80084d0 <__hi0bits>
 8007d66:	f1c0 0020 	rsb	r0, r0, #32
 8007d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d6c:	4418      	add	r0, r3
 8007d6e:	f010 001f 	ands.w	r0, r0, #31
 8007d72:	d071      	beq.n	8007e58 <_dtoa_r+0x8f8>
 8007d74:	f1c0 0320 	rsb	r3, r0, #32
 8007d78:	2b04      	cmp	r3, #4
 8007d7a:	dd65      	ble.n	8007e48 <_dtoa_r+0x8e8>
 8007d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d7e:	f1c0 001c 	rsb	r0, r0, #28
 8007d82:	4403      	add	r3, r0
 8007d84:	4480      	add	r8, r0
 8007d86:	4406      	add	r6, r0
 8007d88:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d8a:	f1b8 0f00 	cmp.w	r8, #0
 8007d8e:	dd05      	ble.n	8007d9c <_dtoa_r+0x83c>
 8007d90:	4649      	mov	r1, r9
 8007d92:	4642      	mov	r2, r8
 8007d94:	4658      	mov	r0, fp
 8007d96:	f000 fcff 	bl	8008798 <__lshift>
 8007d9a:	4681      	mov	r9, r0
 8007d9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	dd05      	ble.n	8007dae <_dtoa_r+0x84e>
 8007da2:	4621      	mov	r1, r4
 8007da4:	461a      	mov	r2, r3
 8007da6:	4658      	mov	r0, fp
 8007da8:	f000 fcf6 	bl	8008798 <__lshift>
 8007dac:	4604      	mov	r4, r0
 8007dae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d053      	beq.n	8007e5c <_dtoa_r+0x8fc>
 8007db4:	4621      	mov	r1, r4
 8007db6:	4648      	mov	r0, r9
 8007db8:	f000 fd5a 	bl	8008870 <__mcmp>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	da4d      	bge.n	8007e5c <_dtoa_r+0x8fc>
 8007dc0:	1e7b      	subs	r3, r7, #1
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	9304      	str	r3, [sp, #16]
 8007dc6:	220a      	movs	r2, #10
 8007dc8:	2300      	movs	r3, #0
 8007dca:	4658      	mov	r0, fp
 8007dcc:	f000 faf0 	bl	80083b0 <__multadd>
 8007dd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007dd2:	4681      	mov	r9, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f000 816c 	beq.w	80080b2 <_dtoa_r+0xb52>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	4629      	mov	r1, r5
 8007dde:	220a      	movs	r2, #10
 8007de0:	4658      	mov	r0, fp
 8007de2:	f000 fae5 	bl	80083b0 <__multadd>
 8007de6:	9b08      	ldr	r3, [sp, #32]
 8007de8:	4605      	mov	r5, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	dc61      	bgt.n	8007eb2 <_dtoa_r+0x952>
 8007dee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	dc3b      	bgt.n	8007e6c <_dtoa_r+0x90c>
 8007df4:	e05d      	b.n	8007eb2 <_dtoa_r+0x952>
 8007df6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007df8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007dfc:	e746      	b.n	8007c8c <_dtoa_r+0x72c>
 8007dfe:	9b07      	ldr	r3, [sp, #28]
 8007e00:	1e5c      	subs	r4, r3, #1
 8007e02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e04:	42a3      	cmp	r3, r4
 8007e06:	bfbf      	itttt	lt
 8007e08:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007e0a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007e0c:	1ae3      	sublt	r3, r4, r3
 8007e0e:	18d2      	addlt	r2, r2, r3
 8007e10:	bfa8      	it	ge
 8007e12:	1b1c      	subge	r4, r3, r4
 8007e14:	9b07      	ldr	r3, [sp, #28]
 8007e16:	bfbe      	ittt	lt
 8007e18:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007e1a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007e1c:	2400      	movlt	r4, #0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	bfb5      	itete	lt
 8007e22:	eba8 0603 	sublt.w	r6, r8, r3
 8007e26:	4646      	movge	r6, r8
 8007e28:	2300      	movlt	r3, #0
 8007e2a:	9b07      	ldrge	r3, [sp, #28]
 8007e2c:	e730      	b.n	8007c90 <_dtoa_r+0x730>
 8007e2e:	4646      	mov	r6, r8
 8007e30:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007e32:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007e34:	e735      	b.n	8007ca2 <_dtoa_r+0x742>
 8007e36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e38:	e75c      	b.n	8007cf4 <_dtoa_r+0x794>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	e788      	b.n	8007d50 <_dtoa_r+0x7f0>
 8007e3e:	9b02      	ldr	r3, [sp, #8]
 8007e40:	e786      	b.n	8007d50 <_dtoa_r+0x7f0>
 8007e42:	2300      	movs	r3, #0
 8007e44:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e46:	e788      	b.n	8007d5a <_dtoa_r+0x7fa>
 8007e48:	d09f      	beq.n	8007d8a <_dtoa_r+0x82a>
 8007e4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e4c:	331c      	adds	r3, #28
 8007e4e:	441a      	add	r2, r3
 8007e50:	4498      	add	r8, r3
 8007e52:	441e      	add	r6, r3
 8007e54:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e56:	e798      	b.n	8007d8a <_dtoa_r+0x82a>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	e7f6      	b.n	8007e4a <_dtoa_r+0x8ea>
 8007e5c:	9b07      	ldr	r3, [sp, #28]
 8007e5e:	9704      	str	r7, [sp, #16]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	dc20      	bgt.n	8007ea6 <_dtoa_r+0x946>
 8007e64:	9308      	str	r3, [sp, #32]
 8007e66:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	dd1e      	ble.n	8007eaa <_dtoa_r+0x94a>
 8007e6c:	9b08      	ldr	r3, [sp, #32]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f47f aebc 	bne.w	8007bec <_dtoa_r+0x68c>
 8007e74:	4621      	mov	r1, r4
 8007e76:	2205      	movs	r2, #5
 8007e78:	4658      	mov	r0, fp
 8007e7a:	f000 fa99 	bl	80083b0 <__multadd>
 8007e7e:	4601      	mov	r1, r0
 8007e80:	4604      	mov	r4, r0
 8007e82:	4648      	mov	r0, r9
 8007e84:	f000 fcf4 	bl	8008870 <__mcmp>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	f77f aeaf 	ble.w	8007bec <_dtoa_r+0x68c>
 8007e8e:	2331      	movs	r3, #49	@ 0x31
 8007e90:	4656      	mov	r6, sl
 8007e92:	f806 3b01 	strb.w	r3, [r6], #1
 8007e96:	9b04      	ldr	r3, [sp, #16]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	9304      	str	r3, [sp, #16]
 8007e9c:	e6aa      	b.n	8007bf4 <_dtoa_r+0x694>
 8007e9e:	9c07      	ldr	r4, [sp, #28]
 8007ea0:	9704      	str	r7, [sp, #16]
 8007ea2:	4625      	mov	r5, r4
 8007ea4:	e7f3      	b.n	8007e8e <_dtoa_r+0x92e>
 8007ea6:	9b07      	ldr	r3, [sp, #28]
 8007ea8:	9308      	str	r3, [sp, #32]
 8007eaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f000 8104 	beq.w	80080ba <_dtoa_r+0xb5a>
 8007eb2:	2e00      	cmp	r6, #0
 8007eb4:	dd05      	ble.n	8007ec2 <_dtoa_r+0x962>
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	4632      	mov	r2, r6
 8007eba:	4658      	mov	r0, fp
 8007ebc:	f000 fc6c 	bl	8008798 <__lshift>
 8007ec0:	4605      	mov	r5, r0
 8007ec2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d05a      	beq.n	8007f7e <_dtoa_r+0xa1e>
 8007ec8:	4658      	mov	r0, fp
 8007eca:	6869      	ldr	r1, [r5, #4]
 8007ecc:	f000 fa0e 	bl	80082ec <_Balloc>
 8007ed0:	4606      	mov	r6, r0
 8007ed2:	b928      	cbnz	r0, 8007ee0 <_dtoa_r+0x980>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007eda:	4b83      	ldr	r3, [pc, #524]	@ (80080e8 <_dtoa_r+0xb88>)
 8007edc:	f7ff bb54 	b.w	8007588 <_dtoa_r+0x28>
 8007ee0:	692a      	ldr	r2, [r5, #16]
 8007ee2:	f105 010c 	add.w	r1, r5, #12
 8007ee6:	3202      	adds	r2, #2
 8007ee8:	0092      	lsls	r2, r2, #2
 8007eea:	300c      	adds	r0, #12
 8007eec:	f7ff fa9d 	bl	800742a <memcpy>
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	4631      	mov	r1, r6
 8007ef4:	4658      	mov	r0, fp
 8007ef6:	f000 fc4f 	bl	8008798 <__lshift>
 8007efa:	462f      	mov	r7, r5
 8007efc:	4605      	mov	r5, r0
 8007efe:	f10a 0301 	add.w	r3, sl, #1
 8007f02:	9307      	str	r3, [sp, #28]
 8007f04:	9b08      	ldr	r3, [sp, #32]
 8007f06:	4453      	add	r3, sl
 8007f08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f0a:	9b02      	ldr	r3, [sp, #8]
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f12:	9b07      	ldr	r3, [sp, #28]
 8007f14:	4621      	mov	r1, r4
 8007f16:	3b01      	subs	r3, #1
 8007f18:	4648      	mov	r0, r9
 8007f1a:	9302      	str	r3, [sp, #8]
 8007f1c:	f7ff fa98 	bl	8007450 <quorem>
 8007f20:	4639      	mov	r1, r7
 8007f22:	9008      	str	r0, [sp, #32]
 8007f24:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007f28:	4648      	mov	r0, r9
 8007f2a:	f000 fca1 	bl	8008870 <__mcmp>
 8007f2e:	462a      	mov	r2, r5
 8007f30:	9009      	str	r0, [sp, #36]	@ 0x24
 8007f32:	4621      	mov	r1, r4
 8007f34:	4658      	mov	r0, fp
 8007f36:	f000 fcb7 	bl	80088a8 <__mdiff>
 8007f3a:	68c2      	ldr	r2, [r0, #12]
 8007f3c:	4606      	mov	r6, r0
 8007f3e:	bb02      	cbnz	r2, 8007f82 <_dtoa_r+0xa22>
 8007f40:	4601      	mov	r1, r0
 8007f42:	4648      	mov	r0, r9
 8007f44:	f000 fc94 	bl	8008870 <__mcmp>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	4631      	mov	r1, r6
 8007f4c:	4658      	mov	r0, fp
 8007f4e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007f50:	f000 fa0c 	bl	800836c <_Bfree>
 8007f54:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f56:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007f58:	9e07      	ldr	r6, [sp, #28]
 8007f5a:	ea43 0102 	orr.w	r1, r3, r2
 8007f5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f60:	4319      	orrs	r1, r3
 8007f62:	d110      	bne.n	8007f86 <_dtoa_r+0xa26>
 8007f64:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007f68:	d029      	beq.n	8007fbe <_dtoa_r+0xa5e>
 8007f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	dd02      	ble.n	8007f76 <_dtoa_r+0xa16>
 8007f70:	9b08      	ldr	r3, [sp, #32]
 8007f72:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007f76:	9b02      	ldr	r3, [sp, #8]
 8007f78:	f883 8000 	strb.w	r8, [r3]
 8007f7c:	e63b      	b.n	8007bf6 <_dtoa_r+0x696>
 8007f7e:	4628      	mov	r0, r5
 8007f80:	e7bb      	b.n	8007efa <_dtoa_r+0x99a>
 8007f82:	2201      	movs	r2, #1
 8007f84:	e7e1      	b.n	8007f4a <_dtoa_r+0x9ea>
 8007f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	db04      	blt.n	8007f96 <_dtoa_r+0xa36>
 8007f8c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007f8e:	430b      	orrs	r3, r1
 8007f90:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007f92:	430b      	orrs	r3, r1
 8007f94:	d120      	bne.n	8007fd8 <_dtoa_r+0xa78>
 8007f96:	2a00      	cmp	r2, #0
 8007f98:	dded      	ble.n	8007f76 <_dtoa_r+0xa16>
 8007f9a:	4649      	mov	r1, r9
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	4658      	mov	r0, fp
 8007fa0:	f000 fbfa 	bl	8008798 <__lshift>
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	4681      	mov	r9, r0
 8007fa8:	f000 fc62 	bl	8008870 <__mcmp>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	dc03      	bgt.n	8007fb8 <_dtoa_r+0xa58>
 8007fb0:	d1e1      	bne.n	8007f76 <_dtoa_r+0xa16>
 8007fb2:	f018 0f01 	tst.w	r8, #1
 8007fb6:	d0de      	beq.n	8007f76 <_dtoa_r+0xa16>
 8007fb8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007fbc:	d1d8      	bne.n	8007f70 <_dtoa_r+0xa10>
 8007fbe:	2339      	movs	r3, #57	@ 0x39
 8007fc0:	9a02      	ldr	r2, [sp, #8]
 8007fc2:	7013      	strb	r3, [r2, #0]
 8007fc4:	4633      	mov	r3, r6
 8007fc6:	461e      	mov	r6, r3
 8007fc8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	2a39      	cmp	r2, #57	@ 0x39
 8007fd0:	d052      	beq.n	8008078 <_dtoa_r+0xb18>
 8007fd2:	3201      	adds	r2, #1
 8007fd4:	701a      	strb	r2, [r3, #0]
 8007fd6:	e60e      	b.n	8007bf6 <_dtoa_r+0x696>
 8007fd8:	2a00      	cmp	r2, #0
 8007fda:	dd07      	ble.n	8007fec <_dtoa_r+0xa8c>
 8007fdc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007fe0:	d0ed      	beq.n	8007fbe <_dtoa_r+0xa5e>
 8007fe2:	9a02      	ldr	r2, [sp, #8]
 8007fe4:	f108 0301 	add.w	r3, r8, #1
 8007fe8:	7013      	strb	r3, [r2, #0]
 8007fea:	e604      	b.n	8007bf6 <_dtoa_r+0x696>
 8007fec:	9b07      	ldr	r3, [sp, #28]
 8007fee:	9a07      	ldr	r2, [sp, #28]
 8007ff0:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007ff4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d028      	beq.n	800804c <_dtoa_r+0xaec>
 8007ffa:	4649      	mov	r1, r9
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	220a      	movs	r2, #10
 8008000:	4658      	mov	r0, fp
 8008002:	f000 f9d5 	bl	80083b0 <__multadd>
 8008006:	42af      	cmp	r7, r5
 8008008:	4681      	mov	r9, r0
 800800a:	f04f 0300 	mov.w	r3, #0
 800800e:	f04f 020a 	mov.w	r2, #10
 8008012:	4639      	mov	r1, r7
 8008014:	4658      	mov	r0, fp
 8008016:	d107      	bne.n	8008028 <_dtoa_r+0xac8>
 8008018:	f000 f9ca 	bl	80083b0 <__multadd>
 800801c:	4607      	mov	r7, r0
 800801e:	4605      	mov	r5, r0
 8008020:	9b07      	ldr	r3, [sp, #28]
 8008022:	3301      	adds	r3, #1
 8008024:	9307      	str	r3, [sp, #28]
 8008026:	e774      	b.n	8007f12 <_dtoa_r+0x9b2>
 8008028:	f000 f9c2 	bl	80083b0 <__multadd>
 800802c:	4629      	mov	r1, r5
 800802e:	4607      	mov	r7, r0
 8008030:	2300      	movs	r3, #0
 8008032:	220a      	movs	r2, #10
 8008034:	4658      	mov	r0, fp
 8008036:	f000 f9bb 	bl	80083b0 <__multadd>
 800803a:	4605      	mov	r5, r0
 800803c:	e7f0      	b.n	8008020 <_dtoa_r+0xac0>
 800803e:	9b08      	ldr	r3, [sp, #32]
 8008040:	2700      	movs	r7, #0
 8008042:	2b00      	cmp	r3, #0
 8008044:	bfcc      	ite	gt
 8008046:	461e      	movgt	r6, r3
 8008048:	2601      	movle	r6, #1
 800804a:	4456      	add	r6, sl
 800804c:	4649      	mov	r1, r9
 800804e:	2201      	movs	r2, #1
 8008050:	4658      	mov	r0, fp
 8008052:	f000 fba1 	bl	8008798 <__lshift>
 8008056:	4621      	mov	r1, r4
 8008058:	4681      	mov	r9, r0
 800805a:	f000 fc09 	bl	8008870 <__mcmp>
 800805e:	2800      	cmp	r0, #0
 8008060:	dcb0      	bgt.n	8007fc4 <_dtoa_r+0xa64>
 8008062:	d102      	bne.n	800806a <_dtoa_r+0xb0a>
 8008064:	f018 0f01 	tst.w	r8, #1
 8008068:	d1ac      	bne.n	8007fc4 <_dtoa_r+0xa64>
 800806a:	4633      	mov	r3, r6
 800806c:	461e      	mov	r6, r3
 800806e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008072:	2a30      	cmp	r2, #48	@ 0x30
 8008074:	d0fa      	beq.n	800806c <_dtoa_r+0xb0c>
 8008076:	e5be      	b.n	8007bf6 <_dtoa_r+0x696>
 8008078:	459a      	cmp	sl, r3
 800807a:	d1a4      	bne.n	8007fc6 <_dtoa_r+0xa66>
 800807c:	9b04      	ldr	r3, [sp, #16]
 800807e:	3301      	adds	r3, #1
 8008080:	9304      	str	r3, [sp, #16]
 8008082:	2331      	movs	r3, #49	@ 0x31
 8008084:	f88a 3000 	strb.w	r3, [sl]
 8008088:	e5b5      	b.n	8007bf6 <_dtoa_r+0x696>
 800808a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800808c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80080ec <_dtoa_r+0xb8c>
 8008090:	b11b      	cbz	r3, 800809a <_dtoa_r+0xb3a>
 8008092:	f10a 0308 	add.w	r3, sl, #8
 8008096:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008098:	6013      	str	r3, [r2, #0]
 800809a:	4650      	mov	r0, sl
 800809c:	b017      	add	sp, #92	@ 0x5c
 800809e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	f77f ae3d 	ble.w	8007d24 <_dtoa_r+0x7c4>
 80080aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80080ae:	2001      	movs	r0, #1
 80080b0:	e65b      	b.n	8007d6a <_dtoa_r+0x80a>
 80080b2:	9b08      	ldr	r3, [sp, #32]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f77f aed6 	ble.w	8007e66 <_dtoa_r+0x906>
 80080ba:	4656      	mov	r6, sl
 80080bc:	4621      	mov	r1, r4
 80080be:	4648      	mov	r0, r9
 80080c0:	f7ff f9c6 	bl	8007450 <quorem>
 80080c4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80080c8:	9b08      	ldr	r3, [sp, #32]
 80080ca:	f806 8b01 	strb.w	r8, [r6], #1
 80080ce:	eba6 020a 	sub.w	r2, r6, sl
 80080d2:	4293      	cmp	r3, r2
 80080d4:	ddb3      	ble.n	800803e <_dtoa_r+0xade>
 80080d6:	4649      	mov	r1, r9
 80080d8:	2300      	movs	r3, #0
 80080da:	220a      	movs	r2, #10
 80080dc:	4658      	mov	r0, fp
 80080de:	f000 f967 	bl	80083b0 <__multadd>
 80080e2:	4681      	mov	r9, r0
 80080e4:	e7ea      	b.n	80080bc <_dtoa_r+0xb5c>
 80080e6:	bf00      	nop
 80080e8:	0800d403 	.word	0x0800d403
 80080ec:	0800d387 	.word	0x0800d387

080080f0 <_free_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	4605      	mov	r5, r0
 80080f4:	2900      	cmp	r1, #0
 80080f6:	d040      	beq.n	800817a <_free_r+0x8a>
 80080f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080fc:	1f0c      	subs	r4, r1, #4
 80080fe:	2b00      	cmp	r3, #0
 8008100:	bfb8      	it	lt
 8008102:	18e4      	addlt	r4, r4, r3
 8008104:	f000 f8e6 	bl	80082d4 <__malloc_lock>
 8008108:	4a1c      	ldr	r2, [pc, #112]	@ (800817c <_free_r+0x8c>)
 800810a:	6813      	ldr	r3, [r2, #0]
 800810c:	b933      	cbnz	r3, 800811c <_free_r+0x2c>
 800810e:	6063      	str	r3, [r4, #4]
 8008110:	6014      	str	r4, [r2, #0]
 8008112:	4628      	mov	r0, r5
 8008114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008118:	f000 b8e2 	b.w	80082e0 <__malloc_unlock>
 800811c:	42a3      	cmp	r3, r4
 800811e:	d908      	bls.n	8008132 <_free_r+0x42>
 8008120:	6820      	ldr	r0, [r4, #0]
 8008122:	1821      	adds	r1, r4, r0
 8008124:	428b      	cmp	r3, r1
 8008126:	bf01      	itttt	eq
 8008128:	6819      	ldreq	r1, [r3, #0]
 800812a:	685b      	ldreq	r3, [r3, #4]
 800812c:	1809      	addeq	r1, r1, r0
 800812e:	6021      	streq	r1, [r4, #0]
 8008130:	e7ed      	b.n	800810e <_free_r+0x1e>
 8008132:	461a      	mov	r2, r3
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	b10b      	cbz	r3, 800813c <_free_r+0x4c>
 8008138:	42a3      	cmp	r3, r4
 800813a:	d9fa      	bls.n	8008132 <_free_r+0x42>
 800813c:	6811      	ldr	r1, [r2, #0]
 800813e:	1850      	adds	r0, r2, r1
 8008140:	42a0      	cmp	r0, r4
 8008142:	d10b      	bne.n	800815c <_free_r+0x6c>
 8008144:	6820      	ldr	r0, [r4, #0]
 8008146:	4401      	add	r1, r0
 8008148:	1850      	adds	r0, r2, r1
 800814a:	4283      	cmp	r3, r0
 800814c:	6011      	str	r1, [r2, #0]
 800814e:	d1e0      	bne.n	8008112 <_free_r+0x22>
 8008150:	6818      	ldr	r0, [r3, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	4408      	add	r0, r1
 8008156:	6010      	str	r0, [r2, #0]
 8008158:	6053      	str	r3, [r2, #4]
 800815a:	e7da      	b.n	8008112 <_free_r+0x22>
 800815c:	d902      	bls.n	8008164 <_free_r+0x74>
 800815e:	230c      	movs	r3, #12
 8008160:	602b      	str	r3, [r5, #0]
 8008162:	e7d6      	b.n	8008112 <_free_r+0x22>
 8008164:	6820      	ldr	r0, [r4, #0]
 8008166:	1821      	adds	r1, r4, r0
 8008168:	428b      	cmp	r3, r1
 800816a:	bf01      	itttt	eq
 800816c:	6819      	ldreq	r1, [r3, #0]
 800816e:	685b      	ldreq	r3, [r3, #4]
 8008170:	1809      	addeq	r1, r1, r0
 8008172:	6021      	streq	r1, [r4, #0]
 8008174:	6063      	str	r3, [r4, #4]
 8008176:	6054      	str	r4, [r2, #4]
 8008178:	e7cb      	b.n	8008112 <_free_r+0x22>
 800817a:	bd38      	pop	{r3, r4, r5, pc}
 800817c:	200008c4 	.word	0x200008c4

08008180 <malloc>:
 8008180:	4b02      	ldr	r3, [pc, #8]	@ (800818c <malloc+0xc>)
 8008182:	4601      	mov	r1, r0
 8008184:	6818      	ldr	r0, [r3, #0]
 8008186:	f000 b825 	b.w	80081d4 <_malloc_r>
 800818a:	bf00      	nop
 800818c:	20000020 	.word	0x20000020

08008190 <sbrk_aligned>:
 8008190:	b570      	push	{r4, r5, r6, lr}
 8008192:	4e0f      	ldr	r6, [pc, #60]	@ (80081d0 <sbrk_aligned+0x40>)
 8008194:	460c      	mov	r4, r1
 8008196:	6831      	ldr	r1, [r6, #0]
 8008198:	4605      	mov	r5, r0
 800819a:	b911      	cbnz	r1, 80081a2 <sbrk_aligned+0x12>
 800819c:	f001 fddc 	bl	8009d58 <_sbrk_r>
 80081a0:	6030      	str	r0, [r6, #0]
 80081a2:	4621      	mov	r1, r4
 80081a4:	4628      	mov	r0, r5
 80081a6:	f001 fdd7 	bl	8009d58 <_sbrk_r>
 80081aa:	1c43      	adds	r3, r0, #1
 80081ac:	d103      	bne.n	80081b6 <sbrk_aligned+0x26>
 80081ae:	f04f 34ff 	mov.w	r4, #4294967295
 80081b2:	4620      	mov	r0, r4
 80081b4:	bd70      	pop	{r4, r5, r6, pc}
 80081b6:	1cc4      	adds	r4, r0, #3
 80081b8:	f024 0403 	bic.w	r4, r4, #3
 80081bc:	42a0      	cmp	r0, r4
 80081be:	d0f8      	beq.n	80081b2 <sbrk_aligned+0x22>
 80081c0:	1a21      	subs	r1, r4, r0
 80081c2:	4628      	mov	r0, r5
 80081c4:	f001 fdc8 	bl	8009d58 <_sbrk_r>
 80081c8:	3001      	adds	r0, #1
 80081ca:	d1f2      	bne.n	80081b2 <sbrk_aligned+0x22>
 80081cc:	e7ef      	b.n	80081ae <sbrk_aligned+0x1e>
 80081ce:	bf00      	nop
 80081d0:	200008c0 	.word	0x200008c0

080081d4 <_malloc_r>:
 80081d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081d8:	1ccd      	adds	r5, r1, #3
 80081da:	f025 0503 	bic.w	r5, r5, #3
 80081de:	3508      	adds	r5, #8
 80081e0:	2d0c      	cmp	r5, #12
 80081e2:	bf38      	it	cc
 80081e4:	250c      	movcc	r5, #12
 80081e6:	2d00      	cmp	r5, #0
 80081e8:	4606      	mov	r6, r0
 80081ea:	db01      	blt.n	80081f0 <_malloc_r+0x1c>
 80081ec:	42a9      	cmp	r1, r5
 80081ee:	d904      	bls.n	80081fa <_malloc_r+0x26>
 80081f0:	230c      	movs	r3, #12
 80081f2:	6033      	str	r3, [r6, #0]
 80081f4:	2000      	movs	r0, #0
 80081f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80082d0 <_malloc_r+0xfc>
 80081fe:	f000 f869 	bl	80082d4 <__malloc_lock>
 8008202:	f8d8 3000 	ldr.w	r3, [r8]
 8008206:	461c      	mov	r4, r3
 8008208:	bb44      	cbnz	r4, 800825c <_malloc_r+0x88>
 800820a:	4629      	mov	r1, r5
 800820c:	4630      	mov	r0, r6
 800820e:	f7ff ffbf 	bl	8008190 <sbrk_aligned>
 8008212:	1c43      	adds	r3, r0, #1
 8008214:	4604      	mov	r4, r0
 8008216:	d158      	bne.n	80082ca <_malloc_r+0xf6>
 8008218:	f8d8 4000 	ldr.w	r4, [r8]
 800821c:	4627      	mov	r7, r4
 800821e:	2f00      	cmp	r7, #0
 8008220:	d143      	bne.n	80082aa <_malloc_r+0xd6>
 8008222:	2c00      	cmp	r4, #0
 8008224:	d04b      	beq.n	80082be <_malloc_r+0xea>
 8008226:	6823      	ldr	r3, [r4, #0]
 8008228:	4639      	mov	r1, r7
 800822a:	4630      	mov	r0, r6
 800822c:	eb04 0903 	add.w	r9, r4, r3
 8008230:	f001 fd92 	bl	8009d58 <_sbrk_r>
 8008234:	4581      	cmp	r9, r0
 8008236:	d142      	bne.n	80082be <_malloc_r+0xea>
 8008238:	6821      	ldr	r1, [r4, #0]
 800823a:	4630      	mov	r0, r6
 800823c:	1a6d      	subs	r5, r5, r1
 800823e:	4629      	mov	r1, r5
 8008240:	f7ff ffa6 	bl	8008190 <sbrk_aligned>
 8008244:	3001      	adds	r0, #1
 8008246:	d03a      	beq.n	80082be <_malloc_r+0xea>
 8008248:	6823      	ldr	r3, [r4, #0]
 800824a:	442b      	add	r3, r5
 800824c:	6023      	str	r3, [r4, #0]
 800824e:	f8d8 3000 	ldr.w	r3, [r8]
 8008252:	685a      	ldr	r2, [r3, #4]
 8008254:	bb62      	cbnz	r2, 80082b0 <_malloc_r+0xdc>
 8008256:	f8c8 7000 	str.w	r7, [r8]
 800825a:	e00f      	b.n	800827c <_malloc_r+0xa8>
 800825c:	6822      	ldr	r2, [r4, #0]
 800825e:	1b52      	subs	r2, r2, r5
 8008260:	d420      	bmi.n	80082a4 <_malloc_r+0xd0>
 8008262:	2a0b      	cmp	r2, #11
 8008264:	d917      	bls.n	8008296 <_malloc_r+0xc2>
 8008266:	1961      	adds	r1, r4, r5
 8008268:	42a3      	cmp	r3, r4
 800826a:	6025      	str	r5, [r4, #0]
 800826c:	bf18      	it	ne
 800826e:	6059      	strne	r1, [r3, #4]
 8008270:	6863      	ldr	r3, [r4, #4]
 8008272:	bf08      	it	eq
 8008274:	f8c8 1000 	streq.w	r1, [r8]
 8008278:	5162      	str	r2, [r4, r5]
 800827a:	604b      	str	r3, [r1, #4]
 800827c:	4630      	mov	r0, r6
 800827e:	f000 f82f 	bl	80082e0 <__malloc_unlock>
 8008282:	f104 000b 	add.w	r0, r4, #11
 8008286:	1d23      	adds	r3, r4, #4
 8008288:	f020 0007 	bic.w	r0, r0, #7
 800828c:	1ac2      	subs	r2, r0, r3
 800828e:	bf1c      	itt	ne
 8008290:	1a1b      	subne	r3, r3, r0
 8008292:	50a3      	strne	r3, [r4, r2]
 8008294:	e7af      	b.n	80081f6 <_malloc_r+0x22>
 8008296:	6862      	ldr	r2, [r4, #4]
 8008298:	42a3      	cmp	r3, r4
 800829a:	bf0c      	ite	eq
 800829c:	f8c8 2000 	streq.w	r2, [r8]
 80082a0:	605a      	strne	r2, [r3, #4]
 80082a2:	e7eb      	b.n	800827c <_malloc_r+0xa8>
 80082a4:	4623      	mov	r3, r4
 80082a6:	6864      	ldr	r4, [r4, #4]
 80082a8:	e7ae      	b.n	8008208 <_malloc_r+0x34>
 80082aa:	463c      	mov	r4, r7
 80082ac:	687f      	ldr	r7, [r7, #4]
 80082ae:	e7b6      	b.n	800821e <_malloc_r+0x4a>
 80082b0:	461a      	mov	r2, r3
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	42a3      	cmp	r3, r4
 80082b6:	d1fb      	bne.n	80082b0 <_malloc_r+0xdc>
 80082b8:	2300      	movs	r3, #0
 80082ba:	6053      	str	r3, [r2, #4]
 80082bc:	e7de      	b.n	800827c <_malloc_r+0xa8>
 80082be:	230c      	movs	r3, #12
 80082c0:	4630      	mov	r0, r6
 80082c2:	6033      	str	r3, [r6, #0]
 80082c4:	f000 f80c 	bl	80082e0 <__malloc_unlock>
 80082c8:	e794      	b.n	80081f4 <_malloc_r+0x20>
 80082ca:	6005      	str	r5, [r0, #0]
 80082cc:	e7d6      	b.n	800827c <_malloc_r+0xa8>
 80082ce:	bf00      	nop
 80082d0:	200008c4 	.word	0x200008c4

080082d4 <__malloc_lock>:
 80082d4:	4801      	ldr	r0, [pc, #4]	@ (80082dc <__malloc_lock+0x8>)
 80082d6:	f7ff b898 	b.w	800740a <__retarget_lock_acquire_recursive>
 80082da:	bf00      	nop
 80082dc:	200008bc 	.word	0x200008bc

080082e0 <__malloc_unlock>:
 80082e0:	4801      	ldr	r0, [pc, #4]	@ (80082e8 <__malloc_unlock+0x8>)
 80082e2:	f7ff b893 	b.w	800740c <__retarget_lock_release_recursive>
 80082e6:	bf00      	nop
 80082e8:	200008bc 	.word	0x200008bc

080082ec <_Balloc>:
 80082ec:	b570      	push	{r4, r5, r6, lr}
 80082ee:	69c6      	ldr	r6, [r0, #28]
 80082f0:	4604      	mov	r4, r0
 80082f2:	460d      	mov	r5, r1
 80082f4:	b976      	cbnz	r6, 8008314 <_Balloc+0x28>
 80082f6:	2010      	movs	r0, #16
 80082f8:	f7ff ff42 	bl	8008180 <malloc>
 80082fc:	4602      	mov	r2, r0
 80082fe:	61e0      	str	r0, [r4, #28]
 8008300:	b920      	cbnz	r0, 800830c <_Balloc+0x20>
 8008302:	216b      	movs	r1, #107	@ 0x6b
 8008304:	4b17      	ldr	r3, [pc, #92]	@ (8008364 <_Balloc+0x78>)
 8008306:	4818      	ldr	r0, [pc, #96]	@ (8008368 <_Balloc+0x7c>)
 8008308:	f001 fd3c 	bl	8009d84 <__assert_func>
 800830c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008310:	6006      	str	r6, [r0, #0]
 8008312:	60c6      	str	r6, [r0, #12]
 8008314:	69e6      	ldr	r6, [r4, #28]
 8008316:	68f3      	ldr	r3, [r6, #12]
 8008318:	b183      	cbz	r3, 800833c <_Balloc+0x50>
 800831a:	69e3      	ldr	r3, [r4, #28]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008322:	b9b8      	cbnz	r0, 8008354 <_Balloc+0x68>
 8008324:	2101      	movs	r1, #1
 8008326:	fa01 f605 	lsl.w	r6, r1, r5
 800832a:	1d72      	adds	r2, r6, #5
 800832c:	4620      	mov	r0, r4
 800832e:	0092      	lsls	r2, r2, #2
 8008330:	f001 fd46 	bl	8009dc0 <_calloc_r>
 8008334:	b160      	cbz	r0, 8008350 <_Balloc+0x64>
 8008336:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800833a:	e00e      	b.n	800835a <_Balloc+0x6e>
 800833c:	2221      	movs	r2, #33	@ 0x21
 800833e:	2104      	movs	r1, #4
 8008340:	4620      	mov	r0, r4
 8008342:	f001 fd3d 	bl	8009dc0 <_calloc_r>
 8008346:	69e3      	ldr	r3, [r4, #28]
 8008348:	60f0      	str	r0, [r6, #12]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1e4      	bne.n	800831a <_Balloc+0x2e>
 8008350:	2000      	movs	r0, #0
 8008352:	bd70      	pop	{r4, r5, r6, pc}
 8008354:	6802      	ldr	r2, [r0, #0]
 8008356:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800835a:	2300      	movs	r3, #0
 800835c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008360:	e7f7      	b.n	8008352 <_Balloc+0x66>
 8008362:	bf00      	nop
 8008364:	0800d394 	.word	0x0800d394
 8008368:	0800d414 	.word	0x0800d414

0800836c <_Bfree>:
 800836c:	b570      	push	{r4, r5, r6, lr}
 800836e:	69c6      	ldr	r6, [r0, #28]
 8008370:	4605      	mov	r5, r0
 8008372:	460c      	mov	r4, r1
 8008374:	b976      	cbnz	r6, 8008394 <_Bfree+0x28>
 8008376:	2010      	movs	r0, #16
 8008378:	f7ff ff02 	bl	8008180 <malloc>
 800837c:	4602      	mov	r2, r0
 800837e:	61e8      	str	r0, [r5, #28]
 8008380:	b920      	cbnz	r0, 800838c <_Bfree+0x20>
 8008382:	218f      	movs	r1, #143	@ 0x8f
 8008384:	4b08      	ldr	r3, [pc, #32]	@ (80083a8 <_Bfree+0x3c>)
 8008386:	4809      	ldr	r0, [pc, #36]	@ (80083ac <_Bfree+0x40>)
 8008388:	f001 fcfc 	bl	8009d84 <__assert_func>
 800838c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008390:	6006      	str	r6, [r0, #0]
 8008392:	60c6      	str	r6, [r0, #12]
 8008394:	b13c      	cbz	r4, 80083a6 <_Bfree+0x3a>
 8008396:	69eb      	ldr	r3, [r5, #28]
 8008398:	6862      	ldr	r2, [r4, #4]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083a0:	6021      	str	r1, [r4, #0]
 80083a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80083a6:	bd70      	pop	{r4, r5, r6, pc}
 80083a8:	0800d394 	.word	0x0800d394
 80083ac:	0800d414 	.word	0x0800d414

080083b0 <__multadd>:
 80083b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083b4:	4607      	mov	r7, r0
 80083b6:	460c      	mov	r4, r1
 80083b8:	461e      	mov	r6, r3
 80083ba:	2000      	movs	r0, #0
 80083bc:	690d      	ldr	r5, [r1, #16]
 80083be:	f101 0c14 	add.w	ip, r1, #20
 80083c2:	f8dc 3000 	ldr.w	r3, [ip]
 80083c6:	3001      	adds	r0, #1
 80083c8:	b299      	uxth	r1, r3
 80083ca:	fb02 6101 	mla	r1, r2, r1, r6
 80083ce:	0c1e      	lsrs	r6, r3, #16
 80083d0:	0c0b      	lsrs	r3, r1, #16
 80083d2:	fb02 3306 	mla	r3, r2, r6, r3
 80083d6:	b289      	uxth	r1, r1
 80083d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80083dc:	4285      	cmp	r5, r0
 80083de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80083e2:	f84c 1b04 	str.w	r1, [ip], #4
 80083e6:	dcec      	bgt.n	80083c2 <__multadd+0x12>
 80083e8:	b30e      	cbz	r6, 800842e <__multadd+0x7e>
 80083ea:	68a3      	ldr	r3, [r4, #8]
 80083ec:	42ab      	cmp	r3, r5
 80083ee:	dc19      	bgt.n	8008424 <__multadd+0x74>
 80083f0:	6861      	ldr	r1, [r4, #4]
 80083f2:	4638      	mov	r0, r7
 80083f4:	3101      	adds	r1, #1
 80083f6:	f7ff ff79 	bl	80082ec <_Balloc>
 80083fa:	4680      	mov	r8, r0
 80083fc:	b928      	cbnz	r0, 800840a <__multadd+0x5a>
 80083fe:	4602      	mov	r2, r0
 8008400:	21ba      	movs	r1, #186	@ 0xba
 8008402:	4b0c      	ldr	r3, [pc, #48]	@ (8008434 <__multadd+0x84>)
 8008404:	480c      	ldr	r0, [pc, #48]	@ (8008438 <__multadd+0x88>)
 8008406:	f001 fcbd 	bl	8009d84 <__assert_func>
 800840a:	6922      	ldr	r2, [r4, #16]
 800840c:	f104 010c 	add.w	r1, r4, #12
 8008410:	3202      	adds	r2, #2
 8008412:	0092      	lsls	r2, r2, #2
 8008414:	300c      	adds	r0, #12
 8008416:	f7ff f808 	bl	800742a <memcpy>
 800841a:	4621      	mov	r1, r4
 800841c:	4638      	mov	r0, r7
 800841e:	f7ff ffa5 	bl	800836c <_Bfree>
 8008422:	4644      	mov	r4, r8
 8008424:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008428:	3501      	adds	r5, #1
 800842a:	615e      	str	r6, [r3, #20]
 800842c:	6125      	str	r5, [r4, #16]
 800842e:	4620      	mov	r0, r4
 8008430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008434:	0800d403 	.word	0x0800d403
 8008438:	0800d414 	.word	0x0800d414

0800843c <__s2b>:
 800843c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008440:	4615      	mov	r5, r2
 8008442:	2209      	movs	r2, #9
 8008444:	461f      	mov	r7, r3
 8008446:	3308      	adds	r3, #8
 8008448:	460c      	mov	r4, r1
 800844a:	fb93 f3f2 	sdiv	r3, r3, r2
 800844e:	4606      	mov	r6, r0
 8008450:	2201      	movs	r2, #1
 8008452:	2100      	movs	r1, #0
 8008454:	429a      	cmp	r2, r3
 8008456:	db09      	blt.n	800846c <__s2b+0x30>
 8008458:	4630      	mov	r0, r6
 800845a:	f7ff ff47 	bl	80082ec <_Balloc>
 800845e:	b940      	cbnz	r0, 8008472 <__s2b+0x36>
 8008460:	4602      	mov	r2, r0
 8008462:	21d3      	movs	r1, #211	@ 0xd3
 8008464:	4b18      	ldr	r3, [pc, #96]	@ (80084c8 <__s2b+0x8c>)
 8008466:	4819      	ldr	r0, [pc, #100]	@ (80084cc <__s2b+0x90>)
 8008468:	f001 fc8c 	bl	8009d84 <__assert_func>
 800846c:	0052      	lsls	r2, r2, #1
 800846e:	3101      	adds	r1, #1
 8008470:	e7f0      	b.n	8008454 <__s2b+0x18>
 8008472:	9b08      	ldr	r3, [sp, #32]
 8008474:	2d09      	cmp	r5, #9
 8008476:	6143      	str	r3, [r0, #20]
 8008478:	f04f 0301 	mov.w	r3, #1
 800847c:	6103      	str	r3, [r0, #16]
 800847e:	dd16      	ble.n	80084ae <__s2b+0x72>
 8008480:	f104 0909 	add.w	r9, r4, #9
 8008484:	46c8      	mov	r8, r9
 8008486:	442c      	add	r4, r5
 8008488:	f818 3b01 	ldrb.w	r3, [r8], #1
 800848c:	4601      	mov	r1, r0
 800848e:	220a      	movs	r2, #10
 8008490:	4630      	mov	r0, r6
 8008492:	3b30      	subs	r3, #48	@ 0x30
 8008494:	f7ff ff8c 	bl	80083b0 <__multadd>
 8008498:	45a0      	cmp	r8, r4
 800849a:	d1f5      	bne.n	8008488 <__s2b+0x4c>
 800849c:	f1a5 0408 	sub.w	r4, r5, #8
 80084a0:	444c      	add	r4, r9
 80084a2:	1b2d      	subs	r5, r5, r4
 80084a4:	1963      	adds	r3, r4, r5
 80084a6:	42bb      	cmp	r3, r7
 80084a8:	db04      	blt.n	80084b4 <__s2b+0x78>
 80084aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084ae:	2509      	movs	r5, #9
 80084b0:	340a      	adds	r4, #10
 80084b2:	e7f6      	b.n	80084a2 <__s2b+0x66>
 80084b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80084b8:	4601      	mov	r1, r0
 80084ba:	220a      	movs	r2, #10
 80084bc:	4630      	mov	r0, r6
 80084be:	3b30      	subs	r3, #48	@ 0x30
 80084c0:	f7ff ff76 	bl	80083b0 <__multadd>
 80084c4:	e7ee      	b.n	80084a4 <__s2b+0x68>
 80084c6:	bf00      	nop
 80084c8:	0800d403 	.word	0x0800d403
 80084cc:	0800d414 	.word	0x0800d414

080084d0 <__hi0bits>:
 80084d0:	4603      	mov	r3, r0
 80084d2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80084d6:	bf3a      	itte	cc
 80084d8:	0403      	lslcc	r3, r0, #16
 80084da:	2010      	movcc	r0, #16
 80084dc:	2000      	movcs	r0, #0
 80084de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80084e2:	bf3c      	itt	cc
 80084e4:	021b      	lslcc	r3, r3, #8
 80084e6:	3008      	addcc	r0, #8
 80084e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084ec:	bf3c      	itt	cc
 80084ee:	011b      	lslcc	r3, r3, #4
 80084f0:	3004      	addcc	r0, #4
 80084f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084f6:	bf3c      	itt	cc
 80084f8:	009b      	lslcc	r3, r3, #2
 80084fa:	3002      	addcc	r0, #2
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	db05      	blt.n	800850c <__hi0bits+0x3c>
 8008500:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008504:	f100 0001 	add.w	r0, r0, #1
 8008508:	bf08      	it	eq
 800850a:	2020      	moveq	r0, #32
 800850c:	4770      	bx	lr

0800850e <__lo0bits>:
 800850e:	6803      	ldr	r3, [r0, #0]
 8008510:	4602      	mov	r2, r0
 8008512:	f013 0007 	ands.w	r0, r3, #7
 8008516:	d00b      	beq.n	8008530 <__lo0bits+0x22>
 8008518:	07d9      	lsls	r1, r3, #31
 800851a:	d421      	bmi.n	8008560 <__lo0bits+0x52>
 800851c:	0798      	lsls	r0, r3, #30
 800851e:	bf49      	itett	mi
 8008520:	085b      	lsrmi	r3, r3, #1
 8008522:	089b      	lsrpl	r3, r3, #2
 8008524:	2001      	movmi	r0, #1
 8008526:	6013      	strmi	r3, [r2, #0]
 8008528:	bf5c      	itt	pl
 800852a:	2002      	movpl	r0, #2
 800852c:	6013      	strpl	r3, [r2, #0]
 800852e:	4770      	bx	lr
 8008530:	b299      	uxth	r1, r3
 8008532:	b909      	cbnz	r1, 8008538 <__lo0bits+0x2a>
 8008534:	2010      	movs	r0, #16
 8008536:	0c1b      	lsrs	r3, r3, #16
 8008538:	b2d9      	uxtb	r1, r3
 800853a:	b909      	cbnz	r1, 8008540 <__lo0bits+0x32>
 800853c:	3008      	adds	r0, #8
 800853e:	0a1b      	lsrs	r3, r3, #8
 8008540:	0719      	lsls	r1, r3, #28
 8008542:	bf04      	itt	eq
 8008544:	091b      	lsreq	r3, r3, #4
 8008546:	3004      	addeq	r0, #4
 8008548:	0799      	lsls	r1, r3, #30
 800854a:	bf04      	itt	eq
 800854c:	089b      	lsreq	r3, r3, #2
 800854e:	3002      	addeq	r0, #2
 8008550:	07d9      	lsls	r1, r3, #31
 8008552:	d403      	bmi.n	800855c <__lo0bits+0x4e>
 8008554:	085b      	lsrs	r3, r3, #1
 8008556:	f100 0001 	add.w	r0, r0, #1
 800855a:	d003      	beq.n	8008564 <__lo0bits+0x56>
 800855c:	6013      	str	r3, [r2, #0]
 800855e:	4770      	bx	lr
 8008560:	2000      	movs	r0, #0
 8008562:	4770      	bx	lr
 8008564:	2020      	movs	r0, #32
 8008566:	4770      	bx	lr

08008568 <__i2b>:
 8008568:	b510      	push	{r4, lr}
 800856a:	460c      	mov	r4, r1
 800856c:	2101      	movs	r1, #1
 800856e:	f7ff febd 	bl	80082ec <_Balloc>
 8008572:	4602      	mov	r2, r0
 8008574:	b928      	cbnz	r0, 8008582 <__i2b+0x1a>
 8008576:	f240 1145 	movw	r1, #325	@ 0x145
 800857a:	4b04      	ldr	r3, [pc, #16]	@ (800858c <__i2b+0x24>)
 800857c:	4804      	ldr	r0, [pc, #16]	@ (8008590 <__i2b+0x28>)
 800857e:	f001 fc01 	bl	8009d84 <__assert_func>
 8008582:	2301      	movs	r3, #1
 8008584:	6144      	str	r4, [r0, #20]
 8008586:	6103      	str	r3, [r0, #16]
 8008588:	bd10      	pop	{r4, pc}
 800858a:	bf00      	nop
 800858c:	0800d403 	.word	0x0800d403
 8008590:	0800d414 	.word	0x0800d414

08008594 <__multiply>:
 8008594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008598:	4614      	mov	r4, r2
 800859a:	690a      	ldr	r2, [r1, #16]
 800859c:	6923      	ldr	r3, [r4, #16]
 800859e:	460f      	mov	r7, r1
 80085a0:	429a      	cmp	r2, r3
 80085a2:	bfa2      	ittt	ge
 80085a4:	4623      	movge	r3, r4
 80085a6:	460c      	movge	r4, r1
 80085a8:	461f      	movge	r7, r3
 80085aa:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80085ae:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80085b2:	68a3      	ldr	r3, [r4, #8]
 80085b4:	6861      	ldr	r1, [r4, #4]
 80085b6:	eb0a 0609 	add.w	r6, sl, r9
 80085ba:	42b3      	cmp	r3, r6
 80085bc:	b085      	sub	sp, #20
 80085be:	bfb8      	it	lt
 80085c0:	3101      	addlt	r1, #1
 80085c2:	f7ff fe93 	bl	80082ec <_Balloc>
 80085c6:	b930      	cbnz	r0, 80085d6 <__multiply+0x42>
 80085c8:	4602      	mov	r2, r0
 80085ca:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80085ce:	4b43      	ldr	r3, [pc, #268]	@ (80086dc <__multiply+0x148>)
 80085d0:	4843      	ldr	r0, [pc, #268]	@ (80086e0 <__multiply+0x14c>)
 80085d2:	f001 fbd7 	bl	8009d84 <__assert_func>
 80085d6:	f100 0514 	add.w	r5, r0, #20
 80085da:	462b      	mov	r3, r5
 80085dc:	2200      	movs	r2, #0
 80085de:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80085e2:	4543      	cmp	r3, r8
 80085e4:	d321      	bcc.n	800862a <__multiply+0x96>
 80085e6:	f107 0114 	add.w	r1, r7, #20
 80085ea:	f104 0214 	add.w	r2, r4, #20
 80085ee:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80085f2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80085f6:	9302      	str	r3, [sp, #8]
 80085f8:	1b13      	subs	r3, r2, r4
 80085fa:	3b15      	subs	r3, #21
 80085fc:	f023 0303 	bic.w	r3, r3, #3
 8008600:	3304      	adds	r3, #4
 8008602:	f104 0715 	add.w	r7, r4, #21
 8008606:	42ba      	cmp	r2, r7
 8008608:	bf38      	it	cc
 800860a:	2304      	movcc	r3, #4
 800860c:	9301      	str	r3, [sp, #4]
 800860e:	9b02      	ldr	r3, [sp, #8]
 8008610:	9103      	str	r1, [sp, #12]
 8008612:	428b      	cmp	r3, r1
 8008614:	d80c      	bhi.n	8008630 <__multiply+0x9c>
 8008616:	2e00      	cmp	r6, #0
 8008618:	dd03      	ble.n	8008622 <__multiply+0x8e>
 800861a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800861e:	2b00      	cmp	r3, #0
 8008620:	d05a      	beq.n	80086d8 <__multiply+0x144>
 8008622:	6106      	str	r6, [r0, #16]
 8008624:	b005      	add	sp, #20
 8008626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800862a:	f843 2b04 	str.w	r2, [r3], #4
 800862e:	e7d8      	b.n	80085e2 <__multiply+0x4e>
 8008630:	f8b1 a000 	ldrh.w	sl, [r1]
 8008634:	f1ba 0f00 	cmp.w	sl, #0
 8008638:	d023      	beq.n	8008682 <__multiply+0xee>
 800863a:	46a9      	mov	r9, r5
 800863c:	f04f 0c00 	mov.w	ip, #0
 8008640:	f104 0e14 	add.w	lr, r4, #20
 8008644:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008648:	f8d9 3000 	ldr.w	r3, [r9]
 800864c:	fa1f fb87 	uxth.w	fp, r7
 8008650:	b29b      	uxth	r3, r3
 8008652:	fb0a 330b 	mla	r3, sl, fp, r3
 8008656:	4463      	add	r3, ip
 8008658:	f8d9 c000 	ldr.w	ip, [r9]
 800865c:	0c3f      	lsrs	r7, r7, #16
 800865e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008662:	fb0a c707 	mla	r7, sl, r7, ip
 8008666:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800866a:	b29b      	uxth	r3, r3
 800866c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008670:	4572      	cmp	r2, lr
 8008672:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008676:	f849 3b04 	str.w	r3, [r9], #4
 800867a:	d8e3      	bhi.n	8008644 <__multiply+0xb0>
 800867c:	9b01      	ldr	r3, [sp, #4]
 800867e:	f845 c003 	str.w	ip, [r5, r3]
 8008682:	9b03      	ldr	r3, [sp, #12]
 8008684:	3104      	adds	r1, #4
 8008686:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800868a:	f1b9 0f00 	cmp.w	r9, #0
 800868e:	d021      	beq.n	80086d4 <__multiply+0x140>
 8008690:	46ae      	mov	lr, r5
 8008692:	f04f 0a00 	mov.w	sl, #0
 8008696:	682b      	ldr	r3, [r5, #0]
 8008698:	f104 0c14 	add.w	ip, r4, #20
 800869c:	f8bc b000 	ldrh.w	fp, [ip]
 80086a0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	fb09 770b 	mla	r7, r9, fp, r7
 80086aa:	4457      	add	r7, sl
 80086ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80086b0:	f84e 3b04 	str.w	r3, [lr], #4
 80086b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80086b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80086bc:	f8be 3000 	ldrh.w	r3, [lr]
 80086c0:	4562      	cmp	r2, ip
 80086c2:	fb09 330a 	mla	r3, r9, sl, r3
 80086c6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80086ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80086ce:	d8e5      	bhi.n	800869c <__multiply+0x108>
 80086d0:	9f01      	ldr	r7, [sp, #4]
 80086d2:	51eb      	str	r3, [r5, r7]
 80086d4:	3504      	adds	r5, #4
 80086d6:	e79a      	b.n	800860e <__multiply+0x7a>
 80086d8:	3e01      	subs	r6, #1
 80086da:	e79c      	b.n	8008616 <__multiply+0x82>
 80086dc:	0800d403 	.word	0x0800d403
 80086e0:	0800d414 	.word	0x0800d414

080086e4 <__pow5mult>:
 80086e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086e8:	4615      	mov	r5, r2
 80086ea:	f012 0203 	ands.w	r2, r2, #3
 80086ee:	4607      	mov	r7, r0
 80086f0:	460e      	mov	r6, r1
 80086f2:	d007      	beq.n	8008704 <__pow5mult+0x20>
 80086f4:	4c25      	ldr	r4, [pc, #148]	@ (800878c <__pow5mult+0xa8>)
 80086f6:	3a01      	subs	r2, #1
 80086f8:	2300      	movs	r3, #0
 80086fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086fe:	f7ff fe57 	bl	80083b0 <__multadd>
 8008702:	4606      	mov	r6, r0
 8008704:	10ad      	asrs	r5, r5, #2
 8008706:	d03d      	beq.n	8008784 <__pow5mult+0xa0>
 8008708:	69fc      	ldr	r4, [r7, #28]
 800870a:	b97c      	cbnz	r4, 800872c <__pow5mult+0x48>
 800870c:	2010      	movs	r0, #16
 800870e:	f7ff fd37 	bl	8008180 <malloc>
 8008712:	4602      	mov	r2, r0
 8008714:	61f8      	str	r0, [r7, #28]
 8008716:	b928      	cbnz	r0, 8008724 <__pow5mult+0x40>
 8008718:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800871c:	4b1c      	ldr	r3, [pc, #112]	@ (8008790 <__pow5mult+0xac>)
 800871e:	481d      	ldr	r0, [pc, #116]	@ (8008794 <__pow5mult+0xb0>)
 8008720:	f001 fb30 	bl	8009d84 <__assert_func>
 8008724:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008728:	6004      	str	r4, [r0, #0]
 800872a:	60c4      	str	r4, [r0, #12]
 800872c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008730:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008734:	b94c      	cbnz	r4, 800874a <__pow5mult+0x66>
 8008736:	f240 2171 	movw	r1, #625	@ 0x271
 800873a:	4638      	mov	r0, r7
 800873c:	f7ff ff14 	bl	8008568 <__i2b>
 8008740:	2300      	movs	r3, #0
 8008742:	4604      	mov	r4, r0
 8008744:	f8c8 0008 	str.w	r0, [r8, #8]
 8008748:	6003      	str	r3, [r0, #0]
 800874a:	f04f 0900 	mov.w	r9, #0
 800874e:	07eb      	lsls	r3, r5, #31
 8008750:	d50a      	bpl.n	8008768 <__pow5mult+0x84>
 8008752:	4631      	mov	r1, r6
 8008754:	4622      	mov	r2, r4
 8008756:	4638      	mov	r0, r7
 8008758:	f7ff ff1c 	bl	8008594 <__multiply>
 800875c:	4680      	mov	r8, r0
 800875e:	4631      	mov	r1, r6
 8008760:	4638      	mov	r0, r7
 8008762:	f7ff fe03 	bl	800836c <_Bfree>
 8008766:	4646      	mov	r6, r8
 8008768:	106d      	asrs	r5, r5, #1
 800876a:	d00b      	beq.n	8008784 <__pow5mult+0xa0>
 800876c:	6820      	ldr	r0, [r4, #0]
 800876e:	b938      	cbnz	r0, 8008780 <__pow5mult+0x9c>
 8008770:	4622      	mov	r2, r4
 8008772:	4621      	mov	r1, r4
 8008774:	4638      	mov	r0, r7
 8008776:	f7ff ff0d 	bl	8008594 <__multiply>
 800877a:	6020      	str	r0, [r4, #0]
 800877c:	f8c0 9000 	str.w	r9, [r0]
 8008780:	4604      	mov	r4, r0
 8008782:	e7e4      	b.n	800874e <__pow5mult+0x6a>
 8008784:	4630      	mov	r0, r6
 8008786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800878a:	bf00      	nop
 800878c:	0800d470 	.word	0x0800d470
 8008790:	0800d394 	.word	0x0800d394
 8008794:	0800d414 	.word	0x0800d414

08008798 <__lshift>:
 8008798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800879c:	460c      	mov	r4, r1
 800879e:	4607      	mov	r7, r0
 80087a0:	4691      	mov	r9, r2
 80087a2:	6923      	ldr	r3, [r4, #16]
 80087a4:	6849      	ldr	r1, [r1, #4]
 80087a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087aa:	68a3      	ldr	r3, [r4, #8]
 80087ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80087b0:	f108 0601 	add.w	r6, r8, #1
 80087b4:	42b3      	cmp	r3, r6
 80087b6:	db0b      	blt.n	80087d0 <__lshift+0x38>
 80087b8:	4638      	mov	r0, r7
 80087ba:	f7ff fd97 	bl	80082ec <_Balloc>
 80087be:	4605      	mov	r5, r0
 80087c0:	b948      	cbnz	r0, 80087d6 <__lshift+0x3e>
 80087c2:	4602      	mov	r2, r0
 80087c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80087c8:	4b27      	ldr	r3, [pc, #156]	@ (8008868 <__lshift+0xd0>)
 80087ca:	4828      	ldr	r0, [pc, #160]	@ (800886c <__lshift+0xd4>)
 80087cc:	f001 fada 	bl	8009d84 <__assert_func>
 80087d0:	3101      	adds	r1, #1
 80087d2:	005b      	lsls	r3, r3, #1
 80087d4:	e7ee      	b.n	80087b4 <__lshift+0x1c>
 80087d6:	2300      	movs	r3, #0
 80087d8:	f100 0114 	add.w	r1, r0, #20
 80087dc:	f100 0210 	add.w	r2, r0, #16
 80087e0:	4618      	mov	r0, r3
 80087e2:	4553      	cmp	r3, sl
 80087e4:	db33      	blt.n	800884e <__lshift+0xb6>
 80087e6:	6920      	ldr	r0, [r4, #16]
 80087e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80087ec:	f104 0314 	add.w	r3, r4, #20
 80087f0:	f019 091f 	ands.w	r9, r9, #31
 80087f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80087f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80087fc:	d02b      	beq.n	8008856 <__lshift+0xbe>
 80087fe:	468a      	mov	sl, r1
 8008800:	2200      	movs	r2, #0
 8008802:	f1c9 0e20 	rsb	lr, r9, #32
 8008806:	6818      	ldr	r0, [r3, #0]
 8008808:	fa00 f009 	lsl.w	r0, r0, r9
 800880c:	4310      	orrs	r0, r2
 800880e:	f84a 0b04 	str.w	r0, [sl], #4
 8008812:	f853 2b04 	ldr.w	r2, [r3], #4
 8008816:	459c      	cmp	ip, r3
 8008818:	fa22 f20e 	lsr.w	r2, r2, lr
 800881c:	d8f3      	bhi.n	8008806 <__lshift+0x6e>
 800881e:	ebac 0304 	sub.w	r3, ip, r4
 8008822:	3b15      	subs	r3, #21
 8008824:	f023 0303 	bic.w	r3, r3, #3
 8008828:	3304      	adds	r3, #4
 800882a:	f104 0015 	add.w	r0, r4, #21
 800882e:	4584      	cmp	ip, r0
 8008830:	bf38      	it	cc
 8008832:	2304      	movcc	r3, #4
 8008834:	50ca      	str	r2, [r1, r3]
 8008836:	b10a      	cbz	r2, 800883c <__lshift+0xa4>
 8008838:	f108 0602 	add.w	r6, r8, #2
 800883c:	3e01      	subs	r6, #1
 800883e:	4638      	mov	r0, r7
 8008840:	4621      	mov	r1, r4
 8008842:	612e      	str	r6, [r5, #16]
 8008844:	f7ff fd92 	bl	800836c <_Bfree>
 8008848:	4628      	mov	r0, r5
 800884a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800884e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008852:	3301      	adds	r3, #1
 8008854:	e7c5      	b.n	80087e2 <__lshift+0x4a>
 8008856:	3904      	subs	r1, #4
 8008858:	f853 2b04 	ldr.w	r2, [r3], #4
 800885c:	459c      	cmp	ip, r3
 800885e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008862:	d8f9      	bhi.n	8008858 <__lshift+0xc0>
 8008864:	e7ea      	b.n	800883c <__lshift+0xa4>
 8008866:	bf00      	nop
 8008868:	0800d403 	.word	0x0800d403
 800886c:	0800d414 	.word	0x0800d414

08008870 <__mcmp>:
 8008870:	4603      	mov	r3, r0
 8008872:	690a      	ldr	r2, [r1, #16]
 8008874:	6900      	ldr	r0, [r0, #16]
 8008876:	b530      	push	{r4, r5, lr}
 8008878:	1a80      	subs	r0, r0, r2
 800887a:	d10e      	bne.n	800889a <__mcmp+0x2a>
 800887c:	3314      	adds	r3, #20
 800887e:	3114      	adds	r1, #20
 8008880:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008884:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008888:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800888c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008890:	4295      	cmp	r5, r2
 8008892:	d003      	beq.n	800889c <__mcmp+0x2c>
 8008894:	d205      	bcs.n	80088a2 <__mcmp+0x32>
 8008896:	f04f 30ff 	mov.w	r0, #4294967295
 800889a:	bd30      	pop	{r4, r5, pc}
 800889c:	42a3      	cmp	r3, r4
 800889e:	d3f3      	bcc.n	8008888 <__mcmp+0x18>
 80088a0:	e7fb      	b.n	800889a <__mcmp+0x2a>
 80088a2:	2001      	movs	r0, #1
 80088a4:	e7f9      	b.n	800889a <__mcmp+0x2a>
	...

080088a8 <__mdiff>:
 80088a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ac:	4689      	mov	r9, r1
 80088ae:	4606      	mov	r6, r0
 80088b0:	4611      	mov	r1, r2
 80088b2:	4648      	mov	r0, r9
 80088b4:	4614      	mov	r4, r2
 80088b6:	f7ff ffdb 	bl	8008870 <__mcmp>
 80088ba:	1e05      	subs	r5, r0, #0
 80088bc:	d112      	bne.n	80088e4 <__mdiff+0x3c>
 80088be:	4629      	mov	r1, r5
 80088c0:	4630      	mov	r0, r6
 80088c2:	f7ff fd13 	bl	80082ec <_Balloc>
 80088c6:	4602      	mov	r2, r0
 80088c8:	b928      	cbnz	r0, 80088d6 <__mdiff+0x2e>
 80088ca:	f240 2137 	movw	r1, #567	@ 0x237
 80088ce:	4b3e      	ldr	r3, [pc, #248]	@ (80089c8 <__mdiff+0x120>)
 80088d0:	483e      	ldr	r0, [pc, #248]	@ (80089cc <__mdiff+0x124>)
 80088d2:	f001 fa57 	bl	8009d84 <__assert_func>
 80088d6:	2301      	movs	r3, #1
 80088d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80088dc:	4610      	mov	r0, r2
 80088de:	b003      	add	sp, #12
 80088e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e4:	bfbc      	itt	lt
 80088e6:	464b      	movlt	r3, r9
 80088e8:	46a1      	movlt	r9, r4
 80088ea:	4630      	mov	r0, r6
 80088ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80088f0:	bfba      	itte	lt
 80088f2:	461c      	movlt	r4, r3
 80088f4:	2501      	movlt	r5, #1
 80088f6:	2500      	movge	r5, #0
 80088f8:	f7ff fcf8 	bl	80082ec <_Balloc>
 80088fc:	4602      	mov	r2, r0
 80088fe:	b918      	cbnz	r0, 8008908 <__mdiff+0x60>
 8008900:	f240 2145 	movw	r1, #581	@ 0x245
 8008904:	4b30      	ldr	r3, [pc, #192]	@ (80089c8 <__mdiff+0x120>)
 8008906:	e7e3      	b.n	80088d0 <__mdiff+0x28>
 8008908:	f100 0b14 	add.w	fp, r0, #20
 800890c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008910:	f109 0310 	add.w	r3, r9, #16
 8008914:	60c5      	str	r5, [r0, #12]
 8008916:	f04f 0c00 	mov.w	ip, #0
 800891a:	f109 0514 	add.w	r5, r9, #20
 800891e:	46d9      	mov	r9, fp
 8008920:	6926      	ldr	r6, [r4, #16]
 8008922:	f104 0e14 	add.w	lr, r4, #20
 8008926:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800892a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800892e:	9301      	str	r3, [sp, #4]
 8008930:	9b01      	ldr	r3, [sp, #4]
 8008932:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008936:	f853 af04 	ldr.w	sl, [r3, #4]!
 800893a:	b281      	uxth	r1, r0
 800893c:	9301      	str	r3, [sp, #4]
 800893e:	fa1f f38a 	uxth.w	r3, sl
 8008942:	1a5b      	subs	r3, r3, r1
 8008944:	0c00      	lsrs	r0, r0, #16
 8008946:	4463      	add	r3, ip
 8008948:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800894c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008950:	b29b      	uxth	r3, r3
 8008952:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008956:	4576      	cmp	r6, lr
 8008958:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800895c:	f849 3b04 	str.w	r3, [r9], #4
 8008960:	d8e6      	bhi.n	8008930 <__mdiff+0x88>
 8008962:	1b33      	subs	r3, r6, r4
 8008964:	3b15      	subs	r3, #21
 8008966:	f023 0303 	bic.w	r3, r3, #3
 800896a:	3415      	adds	r4, #21
 800896c:	3304      	adds	r3, #4
 800896e:	42a6      	cmp	r6, r4
 8008970:	bf38      	it	cc
 8008972:	2304      	movcc	r3, #4
 8008974:	441d      	add	r5, r3
 8008976:	445b      	add	r3, fp
 8008978:	461e      	mov	r6, r3
 800897a:	462c      	mov	r4, r5
 800897c:	4544      	cmp	r4, r8
 800897e:	d30e      	bcc.n	800899e <__mdiff+0xf6>
 8008980:	f108 0103 	add.w	r1, r8, #3
 8008984:	1b49      	subs	r1, r1, r5
 8008986:	f021 0103 	bic.w	r1, r1, #3
 800898a:	3d03      	subs	r5, #3
 800898c:	45a8      	cmp	r8, r5
 800898e:	bf38      	it	cc
 8008990:	2100      	movcc	r1, #0
 8008992:	440b      	add	r3, r1
 8008994:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008998:	b199      	cbz	r1, 80089c2 <__mdiff+0x11a>
 800899a:	6117      	str	r7, [r2, #16]
 800899c:	e79e      	b.n	80088dc <__mdiff+0x34>
 800899e:	46e6      	mov	lr, ip
 80089a0:	f854 1b04 	ldr.w	r1, [r4], #4
 80089a4:	fa1f fc81 	uxth.w	ip, r1
 80089a8:	44f4      	add	ip, lr
 80089aa:	0c08      	lsrs	r0, r1, #16
 80089ac:	4471      	add	r1, lr
 80089ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80089b2:	b289      	uxth	r1, r1
 80089b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80089b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80089bc:	f846 1b04 	str.w	r1, [r6], #4
 80089c0:	e7dc      	b.n	800897c <__mdiff+0xd4>
 80089c2:	3f01      	subs	r7, #1
 80089c4:	e7e6      	b.n	8008994 <__mdiff+0xec>
 80089c6:	bf00      	nop
 80089c8:	0800d403 	.word	0x0800d403
 80089cc:	0800d414 	.word	0x0800d414

080089d0 <__ulp>:
 80089d0:	4b0e      	ldr	r3, [pc, #56]	@ (8008a0c <__ulp+0x3c>)
 80089d2:	400b      	ands	r3, r1
 80089d4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80089d8:	2b00      	cmp	r3, #0
 80089da:	dc08      	bgt.n	80089ee <__ulp+0x1e>
 80089dc:	425b      	negs	r3, r3
 80089de:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80089e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80089e6:	da04      	bge.n	80089f2 <__ulp+0x22>
 80089e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80089ec:	4113      	asrs	r3, r2
 80089ee:	2200      	movs	r2, #0
 80089f0:	e008      	b.n	8008a04 <__ulp+0x34>
 80089f2:	f1a2 0314 	sub.w	r3, r2, #20
 80089f6:	2b1e      	cmp	r3, #30
 80089f8:	bfd6      	itet	le
 80089fa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80089fe:	2201      	movgt	r2, #1
 8008a00:	40da      	lsrle	r2, r3
 8008a02:	2300      	movs	r3, #0
 8008a04:	4619      	mov	r1, r3
 8008a06:	4610      	mov	r0, r2
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	7ff00000 	.word	0x7ff00000

08008a10 <__b2d>:
 8008a10:	6902      	ldr	r2, [r0, #16]
 8008a12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a14:	f100 0614 	add.w	r6, r0, #20
 8008a18:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008a1c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008a20:	4f1e      	ldr	r7, [pc, #120]	@ (8008a9c <__b2d+0x8c>)
 8008a22:	4620      	mov	r0, r4
 8008a24:	f7ff fd54 	bl	80084d0 <__hi0bits>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	f1c0 0020 	rsb	r0, r0, #32
 8008a2e:	2b0a      	cmp	r3, #10
 8008a30:	f1a2 0504 	sub.w	r5, r2, #4
 8008a34:	6008      	str	r0, [r1, #0]
 8008a36:	dc12      	bgt.n	8008a5e <__b2d+0x4e>
 8008a38:	42ae      	cmp	r6, r5
 8008a3a:	bf2c      	ite	cs
 8008a3c:	2200      	movcs	r2, #0
 8008a3e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008a42:	f1c3 0c0b 	rsb	ip, r3, #11
 8008a46:	3315      	adds	r3, #21
 8008a48:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008a4c:	fa04 f303 	lsl.w	r3, r4, r3
 8008a50:	fa22 f20c 	lsr.w	r2, r2, ip
 8008a54:	ea4e 0107 	orr.w	r1, lr, r7
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	4610      	mov	r0, r2
 8008a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a5e:	42ae      	cmp	r6, r5
 8008a60:	bf36      	itet	cc
 8008a62:	f1a2 0508 	subcc.w	r5, r2, #8
 8008a66:	2200      	movcs	r2, #0
 8008a68:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008a6c:	3b0b      	subs	r3, #11
 8008a6e:	d012      	beq.n	8008a96 <__b2d+0x86>
 8008a70:	f1c3 0720 	rsb	r7, r3, #32
 8008a74:	fa22 f107 	lsr.w	r1, r2, r7
 8008a78:	409c      	lsls	r4, r3
 8008a7a:	430c      	orrs	r4, r1
 8008a7c:	42b5      	cmp	r5, r6
 8008a7e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8008a82:	bf94      	ite	ls
 8008a84:	2400      	movls	r4, #0
 8008a86:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008a8a:	409a      	lsls	r2, r3
 8008a8c:	40fc      	lsrs	r4, r7
 8008a8e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008a92:	4322      	orrs	r2, r4
 8008a94:	e7e1      	b.n	8008a5a <__b2d+0x4a>
 8008a96:	ea44 0107 	orr.w	r1, r4, r7
 8008a9a:	e7de      	b.n	8008a5a <__b2d+0x4a>
 8008a9c:	3ff00000 	.word	0x3ff00000

08008aa0 <__d2b>:
 8008aa0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008aa4:	2101      	movs	r1, #1
 8008aa6:	4690      	mov	r8, r2
 8008aa8:	4699      	mov	r9, r3
 8008aaa:	9e08      	ldr	r6, [sp, #32]
 8008aac:	f7ff fc1e 	bl	80082ec <_Balloc>
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	b930      	cbnz	r0, 8008ac2 <__d2b+0x22>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	f240 310f 	movw	r1, #783	@ 0x30f
 8008aba:	4b23      	ldr	r3, [pc, #140]	@ (8008b48 <__d2b+0xa8>)
 8008abc:	4823      	ldr	r0, [pc, #140]	@ (8008b4c <__d2b+0xac>)
 8008abe:	f001 f961 	bl	8009d84 <__assert_func>
 8008ac2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ac6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008aca:	b10d      	cbz	r5, 8008ad0 <__d2b+0x30>
 8008acc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ad0:	9301      	str	r3, [sp, #4]
 8008ad2:	f1b8 0300 	subs.w	r3, r8, #0
 8008ad6:	d024      	beq.n	8008b22 <__d2b+0x82>
 8008ad8:	4668      	mov	r0, sp
 8008ada:	9300      	str	r3, [sp, #0]
 8008adc:	f7ff fd17 	bl	800850e <__lo0bits>
 8008ae0:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008ae4:	b1d8      	cbz	r0, 8008b1e <__d2b+0x7e>
 8008ae6:	f1c0 0320 	rsb	r3, r0, #32
 8008aea:	fa02 f303 	lsl.w	r3, r2, r3
 8008aee:	430b      	orrs	r3, r1
 8008af0:	40c2      	lsrs	r2, r0
 8008af2:	6163      	str	r3, [r4, #20]
 8008af4:	9201      	str	r2, [sp, #4]
 8008af6:	9b01      	ldr	r3, [sp, #4]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	bf0c      	ite	eq
 8008afc:	2201      	moveq	r2, #1
 8008afe:	2202      	movne	r2, #2
 8008b00:	61a3      	str	r3, [r4, #24]
 8008b02:	6122      	str	r2, [r4, #16]
 8008b04:	b1ad      	cbz	r5, 8008b32 <__d2b+0x92>
 8008b06:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008b0a:	4405      	add	r5, r0
 8008b0c:	6035      	str	r5, [r6, #0]
 8008b0e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008b12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b14:	6018      	str	r0, [r3, #0]
 8008b16:	4620      	mov	r0, r4
 8008b18:	b002      	add	sp, #8
 8008b1a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008b1e:	6161      	str	r1, [r4, #20]
 8008b20:	e7e9      	b.n	8008af6 <__d2b+0x56>
 8008b22:	a801      	add	r0, sp, #4
 8008b24:	f7ff fcf3 	bl	800850e <__lo0bits>
 8008b28:	9b01      	ldr	r3, [sp, #4]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	6163      	str	r3, [r4, #20]
 8008b2e:	3020      	adds	r0, #32
 8008b30:	e7e7      	b.n	8008b02 <__d2b+0x62>
 8008b32:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008b36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b3a:	6030      	str	r0, [r6, #0]
 8008b3c:	6918      	ldr	r0, [r3, #16]
 8008b3e:	f7ff fcc7 	bl	80084d0 <__hi0bits>
 8008b42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b46:	e7e4      	b.n	8008b12 <__d2b+0x72>
 8008b48:	0800d403 	.word	0x0800d403
 8008b4c:	0800d414 	.word	0x0800d414

08008b50 <__ratio>:
 8008b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b54:	b085      	sub	sp, #20
 8008b56:	e9cd 1000 	strd	r1, r0, [sp]
 8008b5a:	a902      	add	r1, sp, #8
 8008b5c:	f7ff ff58 	bl	8008a10 <__b2d>
 8008b60:	468b      	mov	fp, r1
 8008b62:	4606      	mov	r6, r0
 8008b64:	460f      	mov	r7, r1
 8008b66:	9800      	ldr	r0, [sp, #0]
 8008b68:	a903      	add	r1, sp, #12
 8008b6a:	f7ff ff51 	bl	8008a10 <__b2d>
 8008b6e:	460d      	mov	r5, r1
 8008b70:	9b01      	ldr	r3, [sp, #4]
 8008b72:	4689      	mov	r9, r1
 8008b74:	6919      	ldr	r1, [r3, #16]
 8008b76:	9b00      	ldr	r3, [sp, #0]
 8008b78:	4604      	mov	r4, r0
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	1ac9      	subs	r1, r1, r3
 8008b80:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008b84:	1a9b      	subs	r3, r3, r2
 8008b86:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	bfcd      	iteet	gt
 8008b8e:	463a      	movgt	r2, r7
 8008b90:	462a      	movle	r2, r5
 8008b92:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008b96:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008b9a:	bfd8      	it	le
 8008b9c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008ba0:	464b      	mov	r3, r9
 8008ba2:	4622      	mov	r2, r4
 8008ba4:	4659      	mov	r1, fp
 8008ba6:	f7f7 fdc1 	bl	800072c <__aeabi_ddiv>
 8008baa:	b005      	add	sp, #20
 8008bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008bb0 <__copybits>:
 8008bb0:	3901      	subs	r1, #1
 8008bb2:	b570      	push	{r4, r5, r6, lr}
 8008bb4:	1149      	asrs	r1, r1, #5
 8008bb6:	6914      	ldr	r4, [r2, #16]
 8008bb8:	3101      	adds	r1, #1
 8008bba:	f102 0314 	add.w	r3, r2, #20
 8008bbe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008bc2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008bc6:	1f05      	subs	r5, r0, #4
 8008bc8:	42a3      	cmp	r3, r4
 8008bca:	d30c      	bcc.n	8008be6 <__copybits+0x36>
 8008bcc:	1aa3      	subs	r3, r4, r2
 8008bce:	3b11      	subs	r3, #17
 8008bd0:	f023 0303 	bic.w	r3, r3, #3
 8008bd4:	3211      	adds	r2, #17
 8008bd6:	42a2      	cmp	r2, r4
 8008bd8:	bf88      	it	hi
 8008bda:	2300      	movhi	r3, #0
 8008bdc:	4418      	add	r0, r3
 8008bde:	2300      	movs	r3, #0
 8008be0:	4288      	cmp	r0, r1
 8008be2:	d305      	bcc.n	8008bf0 <__copybits+0x40>
 8008be4:	bd70      	pop	{r4, r5, r6, pc}
 8008be6:	f853 6b04 	ldr.w	r6, [r3], #4
 8008bea:	f845 6f04 	str.w	r6, [r5, #4]!
 8008bee:	e7eb      	b.n	8008bc8 <__copybits+0x18>
 8008bf0:	f840 3b04 	str.w	r3, [r0], #4
 8008bf4:	e7f4      	b.n	8008be0 <__copybits+0x30>

08008bf6 <__any_on>:
 8008bf6:	f100 0214 	add.w	r2, r0, #20
 8008bfa:	6900      	ldr	r0, [r0, #16]
 8008bfc:	114b      	asrs	r3, r1, #5
 8008bfe:	4298      	cmp	r0, r3
 8008c00:	b510      	push	{r4, lr}
 8008c02:	db11      	blt.n	8008c28 <__any_on+0x32>
 8008c04:	dd0a      	ble.n	8008c1c <__any_on+0x26>
 8008c06:	f011 011f 	ands.w	r1, r1, #31
 8008c0a:	d007      	beq.n	8008c1c <__any_on+0x26>
 8008c0c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008c10:	fa24 f001 	lsr.w	r0, r4, r1
 8008c14:	fa00 f101 	lsl.w	r1, r0, r1
 8008c18:	428c      	cmp	r4, r1
 8008c1a:	d10b      	bne.n	8008c34 <__any_on+0x3e>
 8008c1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d803      	bhi.n	8008c2c <__any_on+0x36>
 8008c24:	2000      	movs	r0, #0
 8008c26:	bd10      	pop	{r4, pc}
 8008c28:	4603      	mov	r3, r0
 8008c2a:	e7f7      	b.n	8008c1c <__any_on+0x26>
 8008c2c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c30:	2900      	cmp	r1, #0
 8008c32:	d0f5      	beq.n	8008c20 <__any_on+0x2a>
 8008c34:	2001      	movs	r0, #1
 8008c36:	e7f6      	b.n	8008c26 <__any_on+0x30>

08008c38 <sulp>:
 8008c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c3c:	460f      	mov	r7, r1
 8008c3e:	4690      	mov	r8, r2
 8008c40:	f7ff fec6 	bl	80089d0 <__ulp>
 8008c44:	4604      	mov	r4, r0
 8008c46:	460d      	mov	r5, r1
 8008c48:	f1b8 0f00 	cmp.w	r8, #0
 8008c4c:	d011      	beq.n	8008c72 <sulp+0x3a>
 8008c4e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008c52:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	dd0b      	ble.n	8008c72 <sulp+0x3a>
 8008c5a:	2400      	movs	r4, #0
 8008c5c:	051b      	lsls	r3, r3, #20
 8008c5e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008c62:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008c66:	4622      	mov	r2, r4
 8008c68:	462b      	mov	r3, r5
 8008c6a:	f7f7 fc35 	bl	80004d8 <__aeabi_dmul>
 8008c6e:	4604      	mov	r4, r0
 8008c70:	460d      	mov	r5, r1
 8008c72:	4620      	mov	r0, r4
 8008c74:	4629      	mov	r1, r5
 8008c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c7a:	0000      	movs	r0, r0
 8008c7c:	0000      	movs	r0, r0
	...

08008c80 <_strtod_l>:
 8008c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c84:	b09f      	sub	sp, #124	@ 0x7c
 8008c86:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008c88:	2200      	movs	r2, #0
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008c8e:	f04f 0a00 	mov.w	sl, #0
 8008c92:	f04f 0b00 	mov.w	fp, #0
 8008c96:	460a      	mov	r2, r1
 8008c98:	9005      	str	r0, [sp, #20]
 8008c9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c9c:	7811      	ldrb	r1, [r2, #0]
 8008c9e:	292b      	cmp	r1, #43	@ 0x2b
 8008ca0:	d048      	beq.n	8008d34 <_strtod_l+0xb4>
 8008ca2:	d836      	bhi.n	8008d12 <_strtod_l+0x92>
 8008ca4:	290d      	cmp	r1, #13
 8008ca6:	d830      	bhi.n	8008d0a <_strtod_l+0x8a>
 8008ca8:	2908      	cmp	r1, #8
 8008caa:	d830      	bhi.n	8008d0e <_strtod_l+0x8e>
 8008cac:	2900      	cmp	r1, #0
 8008cae:	d039      	beq.n	8008d24 <_strtod_l+0xa4>
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008cb4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008cb6:	782a      	ldrb	r2, [r5, #0]
 8008cb8:	2a30      	cmp	r2, #48	@ 0x30
 8008cba:	f040 80b1 	bne.w	8008e20 <_strtod_l+0x1a0>
 8008cbe:	786a      	ldrb	r2, [r5, #1]
 8008cc0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008cc4:	2a58      	cmp	r2, #88	@ 0x58
 8008cc6:	d16c      	bne.n	8008da2 <_strtod_l+0x122>
 8008cc8:	9302      	str	r3, [sp, #8]
 8008cca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ccc:	4a8e      	ldr	r2, [pc, #568]	@ (8008f08 <_strtod_l+0x288>)
 8008cce:	9301      	str	r3, [sp, #4]
 8008cd0:	ab1a      	add	r3, sp, #104	@ 0x68
 8008cd2:	9300      	str	r3, [sp, #0]
 8008cd4:	9805      	ldr	r0, [sp, #20]
 8008cd6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008cd8:	a919      	add	r1, sp, #100	@ 0x64
 8008cda:	f001 f8ed 	bl	8009eb8 <__gethex>
 8008cde:	f010 060f 	ands.w	r6, r0, #15
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	d005      	beq.n	8008cf2 <_strtod_l+0x72>
 8008ce6:	2e06      	cmp	r6, #6
 8008ce8:	d126      	bne.n	8008d38 <_strtod_l+0xb8>
 8008cea:	2300      	movs	r3, #0
 8008cec:	3501      	adds	r5, #1
 8008cee:	9519      	str	r5, [sp, #100]	@ 0x64
 8008cf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cf2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f040 8584 	bne.w	8009802 <_strtod_l+0xb82>
 8008cfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cfc:	b1bb      	cbz	r3, 8008d2e <_strtod_l+0xae>
 8008cfe:	4650      	mov	r0, sl
 8008d00:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008d04:	b01f      	add	sp, #124	@ 0x7c
 8008d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d0a:	2920      	cmp	r1, #32
 8008d0c:	d1d0      	bne.n	8008cb0 <_strtod_l+0x30>
 8008d0e:	3201      	adds	r2, #1
 8008d10:	e7c3      	b.n	8008c9a <_strtod_l+0x1a>
 8008d12:	292d      	cmp	r1, #45	@ 0x2d
 8008d14:	d1cc      	bne.n	8008cb0 <_strtod_l+0x30>
 8008d16:	2101      	movs	r1, #1
 8008d18:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008d1a:	1c51      	adds	r1, r2, #1
 8008d1c:	9119      	str	r1, [sp, #100]	@ 0x64
 8008d1e:	7852      	ldrb	r2, [r2, #1]
 8008d20:	2a00      	cmp	r2, #0
 8008d22:	d1c7      	bne.n	8008cb4 <_strtod_l+0x34>
 8008d24:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008d26:	9419      	str	r4, [sp, #100]	@ 0x64
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f040 8568 	bne.w	80097fe <_strtod_l+0xb7e>
 8008d2e:	4650      	mov	r0, sl
 8008d30:	4659      	mov	r1, fp
 8008d32:	e7e7      	b.n	8008d04 <_strtod_l+0x84>
 8008d34:	2100      	movs	r1, #0
 8008d36:	e7ef      	b.n	8008d18 <_strtod_l+0x98>
 8008d38:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008d3a:	b13a      	cbz	r2, 8008d4c <_strtod_l+0xcc>
 8008d3c:	2135      	movs	r1, #53	@ 0x35
 8008d3e:	a81c      	add	r0, sp, #112	@ 0x70
 8008d40:	f7ff ff36 	bl	8008bb0 <__copybits>
 8008d44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d46:	9805      	ldr	r0, [sp, #20]
 8008d48:	f7ff fb10 	bl	800836c <_Bfree>
 8008d4c:	3e01      	subs	r6, #1
 8008d4e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008d50:	2e04      	cmp	r6, #4
 8008d52:	d806      	bhi.n	8008d62 <_strtod_l+0xe2>
 8008d54:	e8df f006 	tbb	[pc, r6]
 8008d58:	201d0314 	.word	0x201d0314
 8008d5c:	14          	.byte	0x14
 8008d5d:	00          	.byte	0x00
 8008d5e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008d62:	05e1      	lsls	r1, r4, #23
 8008d64:	bf48      	it	mi
 8008d66:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008d6a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d6e:	0d1b      	lsrs	r3, r3, #20
 8008d70:	051b      	lsls	r3, r3, #20
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1bd      	bne.n	8008cf2 <_strtod_l+0x72>
 8008d76:	f7fe fb1d 	bl	80073b4 <__errno>
 8008d7a:	2322      	movs	r3, #34	@ 0x22
 8008d7c:	6003      	str	r3, [r0, #0]
 8008d7e:	e7b8      	b.n	8008cf2 <_strtod_l+0x72>
 8008d80:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008d84:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008d88:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008d8c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008d90:	e7e7      	b.n	8008d62 <_strtod_l+0xe2>
 8008d92:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8008f0c <_strtod_l+0x28c>
 8008d96:	e7e4      	b.n	8008d62 <_strtod_l+0xe2>
 8008d98:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008d9c:	f04f 3aff 	mov.w	sl, #4294967295
 8008da0:	e7df      	b.n	8008d62 <_strtod_l+0xe2>
 8008da2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008da4:	1c5a      	adds	r2, r3, #1
 8008da6:	9219      	str	r2, [sp, #100]	@ 0x64
 8008da8:	785b      	ldrb	r3, [r3, #1]
 8008daa:	2b30      	cmp	r3, #48	@ 0x30
 8008dac:	d0f9      	beq.n	8008da2 <_strtod_l+0x122>
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d09f      	beq.n	8008cf2 <_strtod_l+0x72>
 8008db2:	2301      	movs	r3, #1
 8008db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008db6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008db8:	220a      	movs	r2, #10
 8008dba:	930c      	str	r3, [sp, #48]	@ 0x30
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	461f      	mov	r7, r3
 8008dc0:	9308      	str	r3, [sp, #32]
 8008dc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008dc4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008dc6:	7805      	ldrb	r5, [r0, #0]
 8008dc8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008dcc:	b2d9      	uxtb	r1, r3
 8008dce:	2909      	cmp	r1, #9
 8008dd0:	d928      	bls.n	8008e24 <_strtod_l+0x1a4>
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	494e      	ldr	r1, [pc, #312]	@ (8008f10 <_strtod_l+0x290>)
 8008dd6:	f000 ffad 	bl	8009d34 <strncmp>
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	d032      	beq.n	8008e44 <_strtod_l+0x1c4>
 8008dde:	2000      	movs	r0, #0
 8008de0:	462a      	mov	r2, r5
 8008de2:	4681      	mov	r9, r0
 8008de4:	463d      	mov	r5, r7
 8008de6:	4603      	mov	r3, r0
 8008de8:	2a65      	cmp	r2, #101	@ 0x65
 8008dea:	d001      	beq.n	8008df0 <_strtod_l+0x170>
 8008dec:	2a45      	cmp	r2, #69	@ 0x45
 8008dee:	d114      	bne.n	8008e1a <_strtod_l+0x19a>
 8008df0:	b91d      	cbnz	r5, 8008dfa <_strtod_l+0x17a>
 8008df2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008df4:	4302      	orrs	r2, r0
 8008df6:	d095      	beq.n	8008d24 <_strtod_l+0xa4>
 8008df8:	2500      	movs	r5, #0
 8008dfa:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008dfc:	1c62      	adds	r2, r4, #1
 8008dfe:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e00:	7862      	ldrb	r2, [r4, #1]
 8008e02:	2a2b      	cmp	r2, #43	@ 0x2b
 8008e04:	d077      	beq.n	8008ef6 <_strtod_l+0x276>
 8008e06:	2a2d      	cmp	r2, #45	@ 0x2d
 8008e08:	d07b      	beq.n	8008f02 <_strtod_l+0x282>
 8008e0a:	f04f 0c00 	mov.w	ip, #0
 8008e0e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008e12:	2909      	cmp	r1, #9
 8008e14:	f240 8082 	bls.w	8008f1c <_strtod_l+0x29c>
 8008e18:	9419      	str	r4, [sp, #100]	@ 0x64
 8008e1a:	f04f 0800 	mov.w	r8, #0
 8008e1e:	e0a2      	b.n	8008f66 <_strtod_l+0x2e6>
 8008e20:	2300      	movs	r3, #0
 8008e22:	e7c7      	b.n	8008db4 <_strtod_l+0x134>
 8008e24:	2f08      	cmp	r7, #8
 8008e26:	bfd5      	itete	le
 8008e28:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008e2a:	9908      	ldrgt	r1, [sp, #32]
 8008e2c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008e30:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008e34:	f100 0001 	add.w	r0, r0, #1
 8008e38:	bfd4      	ite	le
 8008e3a:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008e3c:	9308      	strgt	r3, [sp, #32]
 8008e3e:	3701      	adds	r7, #1
 8008e40:	9019      	str	r0, [sp, #100]	@ 0x64
 8008e42:	e7bf      	b.n	8008dc4 <_strtod_l+0x144>
 8008e44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e46:	1c5a      	adds	r2, r3, #1
 8008e48:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e4a:	785a      	ldrb	r2, [r3, #1]
 8008e4c:	b37f      	cbz	r7, 8008eae <_strtod_l+0x22e>
 8008e4e:	4681      	mov	r9, r0
 8008e50:	463d      	mov	r5, r7
 8008e52:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008e56:	2b09      	cmp	r3, #9
 8008e58:	d912      	bls.n	8008e80 <_strtod_l+0x200>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e7c4      	b.n	8008de8 <_strtod_l+0x168>
 8008e5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e60:	3001      	adds	r0, #1
 8008e62:	1c5a      	adds	r2, r3, #1
 8008e64:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e66:	785a      	ldrb	r2, [r3, #1]
 8008e68:	2a30      	cmp	r2, #48	@ 0x30
 8008e6a:	d0f8      	beq.n	8008e5e <_strtod_l+0x1de>
 8008e6c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008e70:	2b08      	cmp	r3, #8
 8008e72:	f200 84cb 	bhi.w	800980c <_strtod_l+0xb8c>
 8008e76:	4681      	mov	r9, r0
 8008e78:	2000      	movs	r0, #0
 8008e7a:	4605      	mov	r5, r0
 8008e7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e7e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e80:	3a30      	subs	r2, #48	@ 0x30
 8008e82:	f100 0301 	add.w	r3, r0, #1
 8008e86:	d02a      	beq.n	8008ede <_strtod_l+0x25e>
 8008e88:	4499      	add	r9, r3
 8008e8a:	210a      	movs	r1, #10
 8008e8c:	462b      	mov	r3, r5
 8008e8e:	eb00 0c05 	add.w	ip, r0, r5
 8008e92:	4563      	cmp	r3, ip
 8008e94:	d10d      	bne.n	8008eb2 <_strtod_l+0x232>
 8008e96:	1c69      	adds	r1, r5, #1
 8008e98:	4401      	add	r1, r0
 8008e9a:	4428      	add	r0, r5
 8008e9c:	2808      	cmp	r0, #8
 8008e9e:	dc16      	bgt.n	8008ece <_strtod_l+0x24e>
 8008ea0:	230a      	movs	r3, #10
 8008ea2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008ea4:	fb03 2300 	mla	r3, r3, r0, r2
 8008ea8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008eaa:	2300      	movs	r3, #0
 8008eac:	e018      	b.n	8008ee0 <_strtod_l+0x260>
 8008eae:	4638      	mov	r0, r7
 8008eb0:	e7da      	b.n	8008e68 <_strtod_l+0x1e8>
 8008eb2:	2b08      	cmp	r3, #8
 8008eb4:	f103 0301 	add.w	r3, r3, #1
 8008eb8:	dc03      	bgt.n	8008ec2 <_strtod_l+0x242>
 8008eba:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008ebc:	434e      	muls	r6, r1
 8008ebe:	960a      	str	r6, [sp, #40]	@ 0x28
 8008ec0:	e7e7      	b.n	8008e92 <_strtod_l+0x212>
 8008ec2:	2b10      	cmp	r3, #16
 8008ec4:	bfde      	ittt	le
 8008ec6:	9e08      	ldrle	r6, [sp, #32]
 8008ec8:	434e      	mulle	r6, r1
 8008eca:	9608      	strle	r6, [sp, #32]
 8008ecc:	e7e1      	b.n	8008e92 <_strtod_l+0x212>
 8008ece:	280f      	cmp	r0, #15
 8008ed0:	dceb      	bgt.n	8008eaa <_strtod_l+0x22a>
 8008ed2:	230a      	movs	r3, #10
 8008ed4:	9808      	ldr	r0, [sp, #32]
 8008ed6:	fb03 2300 	mla	r3, r3, r0, r2
 8008eda:	9308      	str	r3, [sp, #32]
 8008edc:	e7e5      	b.n	8008eaa <_strtod_l+0x22a>
 8008ede:	4629      	mov	r1, r5
 8008ee0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ee2:	460d      	mov	r5, r1
 8008ee4:	1c50      	adds	r0, r2, #1
 8008ee6:	9019      	str	r0, [sp, #100]	@ 0x64
 8008ee8:	7852      	ldrb	r2, [r2, #1]
 8008eea:	4618      	mov	r0, r3
 8008eec:	e7b1      	b.n	8008e52 <_strtod_l+0x1d2>
 8008eee:	f04f 0900 	mov.w	r9, #0
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e77d      	b.n	8008df2 <_strtod_l+0x172>
 8008ef6:	f04f 0c00 	mov.w	ip, #0
 8008efa:	1ca2      	adds	r2, r4, #2
 8008efc:	9219      	str	r2, [sp, #100]	@ 0x64
 8008efe:	78a2      	ldrb	r2, [r4, #2]
 8008f00:	e785      	b.n	8008e0e <_strtod_l+0x18e>
 8008f02:	f04f 0c01 	mov.w	ip, #1
 8008f06:	e7f8      	b.n	8008efa <_strtod_l+0x27a>
 8008f08:	0800d588 	.word	0x0800d588
 8008f0c:	7ff00000 	.word	0x7ff00000
 8008f10:	0800d570 	.word	0x0800d570
 8008f14:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008f16:	1c51      	adds	r1, r2, #1
 8008f18:	9119      	str	r1, [sp, #100]	@ 0x64
 8008f1a:	7852      	ldrb	r2, [r2, #1]
 8008f1c:	2a30      	cmp	r2, #48	@ 0x30
 8008f1e:	d0f9      	beq.n	8008f14 <_strtod_l+0x294>
 8008f20:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008f24:	2908      	cmp	r1, #8
 8008f26:	f63f af78 	bhi.w	8008e1a <_strtod_l+0x19a>
 8008f2a:	f04f 080a 	mov.w	r8, #10
 8008f2e:	3a30      	subs	r2, #48	@ 0x30
 8008f30:	920e      	str	r2, [sp, #56]	@ 0x38
 8008f32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008f34:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008f36:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008f38:	1c56      	adds	r6, r2, #1
 8008f3a:	9619      	str	r6, [sp, #100]	@ 0x64
 8008f3c:	7852      	ldrb	r2, [r2, #1]
 8008f3e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008f42:	f1be 0f09 	cmp.w	lr, #9
 8008f46:	d939      	bls.n	8008fbc <_strtod_l+0x33c>
 8008f48:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008f4a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008f4e:	1a76      	subs	r6, r6, r1
 8008f50:	2e08      	cmp	r6, #8
 8008f52:	dc03      	bgt.n	8008f5c <_strtod_l+0x2dc>
 8008f54:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008f56:	4588      	cmp	r8, r1
 8008f58:	bfa8      	it	ge
 8008f5a:	4688      	movge	r8, r1
 8008f5c:	f1bc 0f00 	cmp.w	ip, #0
 8008f60:	d001      	beq.n	8008f66 <_strtod_l+0x2e6>
 8008f62:	f1c8 0800 	rsb	r8, r8, #0
 8008f66:	2d00      	cmp	r5, #0
 8008f68:	d14e      	bne.n	8009008 <_strtod_l+0x388>
 8008f6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f6c:	4308      	orrs	r0, r1
 8008f6e:	f47f aec0 	bne.w	8008cf2 <_strtod_l+0x72>
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f47f aed6 	bne.w	8008d24 <_strtod_l+0xa4>
 8008f78:	2a69      	cmp	r2, #105	@ 0x69
 8008f7a:	d028      	beq.n	8008fce <_strtod_l+0x34e>
 8008f7c:	dc25      	bgt.n	8008fca <_strtod_l+0x34a>
 8008f7e:	2a49      	cmp	r2, #73	@ 0x49
 8008f80:	d025      	beq.n	8008fce <_strtod_l+0x34e>
 8008f82:	2a4e      	cmp	r2, #78	@ 0x4e
 8008f84:	f47f aece 	bne.w	8008d24 <_strtod_l+0xa4>
 8008f88:	499a      	ldr	r1, [pc, #616]	@ (80091f4 <_strtod_l+0x574>)
 8008f8a:	a819      	add	r0, sp, #100	@ 0x64
 8008f8c:	f001 f9b6 	bl	800a2fc <__match>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	f43f aec7 	beq.w	8008d24 <_strtod_l+0xa4>
 8008f96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	2b28      	cmp	r3, #40	@ 0x28
 8008f9c:	d12e      	bne.n	8008ffc <_strtod_l+0x37c>
 8008f9e:	4996      	ldr	r1, [pc, #600]	@ (80091f8 <_strtod_l+0x578>)
 8008fa0:	aa1c      	add	r2, sp, #112	@ 0x70
 8008fa2:	a819      	add	r0, sp, #100	@ 0x64
 8008fa4:	f001 f9be 	bl	800a324 <__hexnan>
 8008fa8:	2805      	cmp	r0, #5
 8008faa:	d127      	bne.n	8008ffc <_strtod_l+0x37c>
 8008fac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008fae:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008fb2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008fb6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008fba:	e69a      	b.n	8008cf2 <_strtod_l+0x72>
 8008fbc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008fbe:	fb08 2101 	mla	r1, r8, r1, r2
 8008fc2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008fc6:	920e      	str	r2, [sp, #56]	@ 0x38
 8008fc8:	e7b5      	b.n	8008f36 <_strtod_l+0x2b6>
 8008fca:	2a6e      	cmp	r2, #110	@ 0x6e
 8008fcc:	e7da      	b.n	8008f84 <_strtod_l+0x304>
 8008fce:	498b      	ldr	r1, [pc, #556]	@ (80091fc <_strtod_l+0x57c>)
 8008fd0:	a819      	add	r0, sp, #100	@ 0x64
 8008fd2:	f001 f993 	bl	800a2fc <__match>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	f43f aea4 	beq.w	8008d24 <_strtod_l+0xa4>
 8008fdc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008fde:	4988      	ldr	r1, [pc, #544]	@ (8009200 <_strtod_l+0x580>)
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	a819      	add	r0, sp, #100	@ 0x64
 8008fe4:	9319      	str	r3, [sp, #100]	@ 0x64
 8008fe6:	f001 f989 	bl	800a2fc <__match>
 8008fea:	b910      	cbnz	r0, 8008ff2 <_strtod_l+0x372>
 8008fec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008fee:	3301      	adds	r3, #1
 8008ff0:	9319      	str	r3, [sp, #100]	@ 0x64
 8008ff2:	f04f 0a00 	mov.w	sl, #0
 8008ff6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8009204 <_strtod_l+0x584>
 8008ffa:	e67a      	b.n	8008cf2 <_strtod_l+0x72>
 8008ffc:	4882      	ldr	r0, [pc, #520]	@ (8009208 <_strtod_l+0x588>)
 8008ffe:	f000 febb 	bl	8009d78 <nan>
 8009002:	4682      	mov	sl, r0
 8009004:	468b      	mov	fp, r1
 8009006:	e674      	b.n	8008cf2 <_strtod_l+0x72>
 8009008:	eba8 0309 	sub.w	r3, r8, r9
 800900c:	2f00      	cmp	r7, #0
 800900e:	bf08      	it	eq
 8009010:	462f      	moveq	r7, r5
 8009012:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009014:	2d10      	cmp	r5, #16
 8009016:	462c      	mov	r4, r5
 8009018:	9309      	str	r3, [sp, #36]	@ 0x24
 800901a:	bfa8      	it	ge
 800901c:	2410      	movge	r4, #16
 800901e:	f7f7 f9e1 	bl	80003e4 <__aeabi_ui2d>
 8009022:	2d09      	cmp	r5, #9
 8009024:	4682      	mov	sl, r0
 8009026:	468b      	mov	fp, r1
 8009028:	dc11      	bgt.n	800904e <_strtod_l+0x3ce>
 800902a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800902c:	2b00      	cmp	r3, #0
 800902e:	f43f ae60 	beq.w	8008cf2 <_strtod_l+0x72>
 8009032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009034:	dd76      	ble.n	8009124 <_strtod_l+0x4a4>
 8009036:	2b16      	cmp	r3, #22
 8009038:	dc5d      	bgt.n	80090f6 <_strtod_l+0x476>
 800903a:	4974      	ldr	r1, [pc, #464]	@ (800920c <_strtod_l+0x58c>)
 800903c:	4652      	mov	r2, sl
 800903e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009042:	465b      	mov	r3, fp
 8009044:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009048:	f7f7 fa46 	bl	80004d8 <__aeabi_dmul>
 800904c:	e7d9      	b.n	8009002 <_strtod_l+0x382>
 800904e:	4b6f      	ldr	r3, [pc, #444]	@ (800920c <_strtod_l+0x58c>)
 8009050:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009054:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009058:	f7f7 fa3e 	bl	80004d8 <__aeabi_dmul>
 800905c:	4682      	mov	sl, r0
 800905e:	9808      	ldr	r0, [sp, #32]
 8009060:	468b      	mov	fp, r1
 8009062:	f7f7 f9bf 	bl	80003e4 <__aeabi_ui2d>
 8009066:	4602      	mov	r2, r0
 8009068:	460b      	mov	r3, r1
 800906a:	4650      	mov	r0, sl
 800906c:	4659      	mov	r1, fp
 800906e:	f7f7 f87d 	bl	800016c <__adddf3>
 8009072:	2d0f      	cmp	r5, #15
 8009074:	4682      	mov	sl, r0
 8009076:	468b      	mov	fp, r1
 8009078:	ddd7      	ble.n	800902a <_strtod_l+0x3aa>
 800907a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800907c:	1b2c      	subs	r4, r5, r4
 800907e:	441c      	add	r4, r3
 8009080:	2c00      	cmp	r4, #0
 8009082:	f340 8096 	ble.w	80091b2 <_strtod_l+0x532>
 8009086:	f014 030f 	ands.w	r3, r4, #15
 800908a:	d00a      	beq.n	80090a2 <_strtod_l+0x422>
 800908c:	495f      	ldr	r1, [pc, #380]	@ (800920c <_strtod_l+0x58c>)
 800908e:	4652      	mov	r2, sl
 8009090:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009094:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009098:	465b      	mov	r3, fp
 800909a:	f7f7 fa1d 	bl	80004d8 <__aeabi_dmul>
 800909e:	4682      	mov	sl, r0
 80090a0:	468b      	mov	fp, r1
 80090a2:	f034 040f 	bics.w	r4, r4, #15
 80090a6:	d073      	beq.n	8009190 <_strtod_l+0x510>
 80090a8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80090ac:	dd48      	ble.n	8009140 <_strtod_l+0x4c0>
 80090ae:	2400      	movs	r4, #0
 80090b0:	46a0      	mov	r8, r4
 80090b2:	46a1      	mov	r9, r4
 80090b4:	940a      	str	r4, [sp, #40]	@ 0x28
 80090b6:	2322      	movs	r3, #34	@ 0x22
 80090b8:	f04f 0a00 	mov.w	sl, #0
 80090bc:	9a05      	ldr	r2, [sp, #20]
 80090be:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8009204 <_strtod_l+0x584>
 80090c2:	6013      	str	r3, [r2, #0]
 80090c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f43f ae13 	beq.w	8008cf2 <_strtod_l+0x72>
 80090cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80090ce:	9805      	ldr	r0, [sp, #20]
 80090d0:	f7ff f94c 	bl	800836c <_Bfree>
 80090d4:	4649      	mov	r1, r9
 80090d6:	9805      	ldr	r0, [sp, #20]
 80090d8:	f7ff f948 	bl	800836c <_Bfree>
 80090dc:	4641      	mov	r1, r8
 80090de:	9805      	ldr	r0, [sp, #20]
 80090e0:	f7ff f944 	bl	800836c <_Bfree>
 80090e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80090e6:	9805      	ldr	r0, [sp, #20]
 80090e8:	f7ff f940 	bl	800836c <_Bfree>
 80090ec:	4621      	mov	r1, r4
 80090ee:	9805      	ldr	r0, [sp, #20]
 80090f0:	f7ff f93c 	bl	800836c <_Bfree>
 80090f4:	e5fd      	b.n	8008cf2 <_strtod_l+0x72>
 80090f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090f8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80090fc:	4293      	cmp	r3, r2
 80090fe:	dbbc      	blt.n	800907a <_strtod_l+0x3fa>
 8009100:	4c42      	ldr	r4, [pc, #264]	@ (800920c <_strtod_l+0x58c>)
 8009102:	f1c5 050f 	rsb	r5, r5, #15
 8009106:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800910a:	4652      	mov	r2, sl
 800910c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009110:	465b      	mov	r3, fp
 8009112:	f7f7 f9e1 	bl	80004d8 <__aeabi_dmul>
 8009116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009118:	1b5d      	subs	r5, r3, r5
 800911a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800911e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009122:	e791      	b.n	8009048 <_strtod_l+0x3c8>
 8009124:	3316      	adds	r3, #22
 8009126:	dba8      	blt.n	800907a <_strtod_l+0x3fa>
 8009128:	4b38      	ldr	r3, [pc, #224]	@ (800920c <_strtod_l+0x58c>)
 800912a:	eba9 0808 	sub.w	r8, r9, r8
 800912e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009132:	4650      	mov	r0, sl
 8009134:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009138:	4659      	mov	r1, fp
 800913a:	f7f7 faf7 	bl	800072c <__aeabi_ddiv>
 800913e:	e760      	b.n	8009002 <_strtod_l+0x382>
 8009140:	4b33      	ldr	r3, [pc, #204]	@ (8009210 <_strtod_l+0x590>)
 8009142:	4650      	mov	r0, sl
 8009144:	9308      	str	r3, [sp, #32]
 8009146:	2300      	movs	r3, #0
 8009148:	4659      	mov	r1, fp
 800914a:	461e      	mov	r6, r3
 800914c:	1124      	asrs	r4, r4, #4
 800914e:	2c01      	cmp	r4, #1
 8009150:	dc21      	bgt.n	8009196 <_strtod_l+0x516>
 8009152:	b10b      	cbz	r3, 8009158 <_strtod_l+0x4d8>
 8009154:	4682      	mov	sl, r0
 8009156:	468b      	mov	fp, r1
 8009158:	492d      	ldr	r1, [pc, #180]	@ (8009210 <_strtod_l+0x590>)
 800915a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800915e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009162:	4652      	mov	r2, sl
 8009164:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009168:	465b      	mov	r3, fp
 800916a:	f7f7 f9b5 	bl	80004d8 <__aeabi_dmul>
 800916e:	4b25      	ldr	r3, [pc, #148]	@ (8009204 <_strtod_l+0x584>)
 8009170:	460a      	mov	r2, r1
 8009172:	400b      	ands	r3, r1
 8009174:	4927      	ldr	r1, [pc, #156]	@ (8009214 <_strtod_l+0x594>)
 8009176:	4682      	mov	sl, r0
 8009178:	428b      	cmp	r3, r1
 800917a:	d898      	bhi.n	80090ae <_strtod_l+0x42e>
 800917c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009180:	428b      	cmp	r3, r1
 8009182:	bf86      	itte	hi
 8009184:	f04f 3aff 	movhi.w	sl, #4294967295
 8009188:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009218 <_strtod_l+0x598>
 800918c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009190:	2300      	movs	r3, #0
 8009192:	9308      	str	r3, [sp, #32]
 8009194:	e07a      	b.n	800928c <_strtod_l+0x60c>
 8009196:	07e2      	lsls	r2, r4, #31
 8009198:	d505      	bpl.n	80091a6 <_strtod_l+0x526>
 800919a:	9b08      	ldr	r3, [sp, #32]
 800919c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a0:	f7f7 f99a 	bl	80004d8 <__aeabi_dmul>
 80091a4:	2301      	movs	r3, #1
 80091a6:	9a08      	ldr	r2, [sp, #32]
 80091a8:	3601      	adds	r6, #1
 80091aa:	3208      	adds	r2, #8
 80091ac:	1064      	asrs	r4, r4, #1
 80091ae:	9208      	str	r2, [sp, #32]
 80091b0:	e7cd      	b.n	800914e <_strtod_l+0x4ce>
 80091b2:	d0ed      	beq.n	8009190 <_strtod_l+0x510>
 80091b4:	4264      	negs	r4, r4
 80091b6:	f014 020f 	ands.w	r2, r4, #15
 80091ba:	d00a      	beq.n	80091d2 <_strtod_l+0x552>
 80091bc:	4b13      	ldr	r3, [pc, #76]	@ (800920c <_strtod_l+0x58c>)
 80091be:	4650      	mov	r0, sl
 80091c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091c4:	4659      	mov	r1, fp
 80091c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ca:	f7f7 faaf 	bl	800072c <__aeabi_ddiv>
 80091ce:	4682      	mov	sl, r0
 80091d0:	468b      	mov	fp, r1
 80091d2:	1124      	asrs	r4, r4, #4
 80091d4:	d0dc      	beq.n	8009190 <_strtod_l+0x510>
 80091d6:	2c1f      	cmp	r4, #31
 80091d8:	dd20      	ble.n	800921c <_strtod_l+0x59c>
 80091da:	2400      	movs	r4, #0
 80091dc:	46a0      	mov	r8, r4
 80091de:	46a1      	mov	r9, r4
 80091e0:	940a      	str	r4, [sp, #40]	@ 0x28
 80091e2:	2322      	movs	r3, #34	@ 0x22
 80091e4:	9a05      	ldr	r2, [sp, #20]
 80091e6:	f04f 0a00 	mov.w	sl, #0
 80091ea:	f04f 0b00 	mov.w	fp, #0
 80091ee:	6013      	str	r3, [r2, #0]
 80091f0:	e768      	b.n	80090c4 <_strtod_l+0x444>
 80091f2:	bf00      	nop
 80091f4:	0800d35b 	.word	0x0800d35b
 80091f8:	0800d574 	.word	0x0800d574
 80091fc:	0800d353 	.word	0x0800d353
 8009200:	0800d38a 	.word	0x0800d38a
 8009204:	7ff00000 	.word	0x7ff00000
 8009208:	0800d71d 	.word	0x0800d71d
 800920c:	0800d4a8 	.word	0x0800d4a8
 8009210:	0800d480 	.word	0x0800d480
 8009214:	7ca00000 	.word	0x7ca00000
 8009218:	7fefffff 	.word	0x7fefffff
 800921c:	f014 0310 	ands.w	r3, r4, #16
 8009220:	bf18      	it	ne
 8009222:	236a      	movne	r3, #106	@ 0x6a
 8009224:	4650      	mov	r0, sl
 8009226:	9308      	str	r3, [sp, #32]
 8009228:	4659      	mov	r1, fp
 800922a:	2300      	movs	r3, #0
 800922c:	4ea9      	ldr	r6, [pc, #676]	@ (80094d4 <_strtod_l+0x854>)
 800922e:	07e2      	lsls	r2, r4, #31
 8009230:	d504      	bpl.n	800923c <_strtod_l+0x5bc>
 8009232:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009236:	f7f7 f94f 	bl	80004d8 <__aeabi_dmul>
 800923a:	2301      	movs	r3, #1
 800923c:	1064      	asrs	r4, r4, #1
 800923e:	f106 0608 	add.w	r6, r6, #8
 8009242:	d1f4      	bne.n	800922e <_strtod_l+0x5ae>
 8009244:	b10b      	cbz	r3, 800924a <_strtod_l+0x5ca>
 8009246:	4682      	mov	sl, r0
 8009248:	468b      	mov	fp, r1
 800924a:	9b08      	ldr	r3, [sp, #32]
 800924c:	b1b3      	cbz	r3, 800927c <_strtod_l+0x5fc>
 800924e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009252:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009256:	2b00      	cmp	r3, #0
 8009258:	4659      	mov	r1, fp
 800925a:	dd0f      	ble.n	800927c <_strtod_l+0x5fc>
 800925c:	2b1f      	cmp	r3, #31
 800925e:	dd57      	ble.n	8009310 <_strtod_l+0x690>
 8009260:	2b34      	cmp	r3, #52	@ 0x34
 8009262:	bfd8      	it	le
 8009264:	f04f 33ff 	movle.w	r3, #4294967295
 8009268:	f04f 0a00 	mov.w	sl, #0
 800926c:	bfcf      	iteee	gt
 800926e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009272:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009276:	4093      	lslle	r3, r2
 8009278:	ea03 0b01 	andle.w	fp, r3, r1
 800927c:	2200      	movs	r2, #0
 800927e:	2300      	movs	r3, #0
 8009280:	4650      	mov	r0, sl
 8009282:	4659      	mov	r1, fp
 8009284:	f7f7 fb90 	bl	80009a8 <__aeabi_dcmpeq>
 8009288:	2800      	cmp	r0, #0
 800928a:	d1a6      	bne.n	80091da <_strtod_l+0x55a>
 800928c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800928e:	463a      	mov	r2, r7
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009294:	462b      	mov	r3, r5
 8009296:	9805      	ldr	r0, [sp, #20]
 8009298:	f7ff f8d0 	bl	800843c <__s2b>
 800929c:	900a      	str	r0, [sp, #40]	@ 0x28
 800929e:	2800      	cmp	r0, #0
 80092a0:	f43f af05 	beq.w	80090ae <_strtod_l+0x42e>
 80092a4:	2400      	movs	r4, #0
 80092a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092a8:	eba9 0308 	sub.w	r3, r9, r8
 80092ac:	2a00      	cmp	r2, #0
 80092ae:	bfa8      	it	ge
 80092b0:	2300      	movge	r3, #0
 80092b2:	46a0      	mov	r8, r4
 80092b4:	9312      	str	r3, [sp, #72]	@ 0x48
 80092b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80092ba:	9316      	str	r3, [sp, #88]	@ 0x58
 80092bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092be:	9805      	ldr	r0, [sp, #20]
 80092c0:	6859      	ldr	r1, [r3, #4]
 80092c2:	f7ff f813 	bl	80082ec <_Balloc>
 80092c6:	4681      	mov	r9, r0
 80092c8:	2800      	cmp	r0, #0
 80092ca:	f43f aef4 	beq.w	80090b6 <_strtod_l+0x436>
 80092ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092d0:	300c      	adds	r0, #12
 80092d2:	691a      	ldr	r2, [r3, #16]
 80092d4:	f103 010c 	add.w	r1, r3, #12
 80092d8:	3202      	adds	r2, #2
 80092da:	0092      	lsls	r2, r2, #2
 80092dc:	f7fe f8a5 	bl	800742a <memcpy>
 80092e0:	ab1c      	add	r3, sp, #112	@ 0x70
 80092e2:	9301      	str	r3, [sp, #4]
 80092e4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	4652      	mov	r2, sl
 80092ea:	465b      	mov	r3, fp
 80092ec:	9805      	ldr	r0, [sp, #20]
 80092ee:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80092f2:	f7ff fbd5 	bl	8008aa0 <__d2b>
 80092f6:	901a      	str	r0, [sp, #104]	@ 0x68
 80092f8:	2800      	cmp	r0, #0
 80092fa:	f43f aedc 	beq.w	80090b6 <_strtod_l+0x436>
 80092fe:	2101      	movs	r1, #1
 8009300:	9805      	ldr	r0, [sp, #20]
 8009302:	f7ff f931 	bl	8008568 <__i2b>
 8009306:	4680      	mov	r8, r0
 8009308:	b948      	cbnz	r0, 800931e <_strtod_l+0x69e>
 800930a:	f04f 0800 	mov.w	r8, #0
 800930e:	e6d2      	b.n	80090b6 <_strtod_l+0x436>
 8009310:	f04f 32ff 	mov.w	r2, #4294967295
 8009314:	fa02 f303 	lsl.w	r3, r2, r3
 8009318:	ea03 0a0a 	and.w	sl, r3, sl
 800931c:	e7ae      	b.n	800927c <_strtod_l+0x5fc>
 800931e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009320:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009322:	2d00      	cmp	r5, #0
 8009324:	bfab      	itete	ge
 8009326:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009328:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800932a:	18ef      	addge	r7, r5, r3
 800932c:	1b5e      	sublt	r6, r3, r5
 800932e:	9b08      	ldr	r3, [sp, #32]
 8009330:	bfa8      	it	ge
 8009332:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009334:	eba5 0503 	sub.w	r5, r5, r3
 8009338:	4415      	add	r5, r2
 800933a:	4b67      	ldr	r3, [pc, #412]	@ (80094d8 <_strtod_l+0x858>)
 800933c:	f105 35ff 	add.w	r5, r5, #4294967295
 8009340:	bfb8      	it	lt
 8009342:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009344:	429d      	cmp	r5, r3
 8009346:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800934a:	da50      	bge.n	80093ee <_strtod_l+0x76e>
 800934c:	1b5b      	subs	r3, r3, r5
 800934e:	2b1f      	cmp	r3, #31
 8009350:	f04f 0101 	mov.w	r1, #1
 8009354:	eba2 0203 	sub.w	r2, r2, r3
 8009358:	dc3d      	bgt.n	80093d6 <_strtod_l+0x756>
 800935a:	fa01 f303 	lsl.w	r3, r1, r3
 800935e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009360:	2300      	movs	r3, #0
 8009362:	9310      	str	r3, [sp, #64]	@ 0x40
 8009364:	18bd      	adds	r5, r7, r2
 8009366:	9b08      	ldr	r3, [sp, #32]
 8009368:	42af      	cmp	r7, r5
 800936a:	4416      	add	r6, r2
 800936c:	441e      	add	r6, r3
 800936e:	463b      	mov	r3, r7
 8009370:	bfa8      	it	ge
 8009372:	462b      	movge	r3, r5
 8009374:	42b3      	cmp	r3, r6
 8009376:	bfa8      	it	ge
 8009378:	4633      	movge	r3, r6
 800937a:	2b00      	cmp	r3, #0
 800937c:	bfc2      	ittt	gt
 800937e:	1aed      	subgt	r5, r5, r3
 8009380:	1af6      	subgt	r6, r6, r3
 8009382:	1aff      	subgt	r7, r7, r3
 8009384:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009386:	2b00      	cmp	r3, #0
 8009388:	dd16      	ble.n	80093b8 <_strtod_l+0x738>
 800938a:	4641      	mov	r1, r8
 800938c:	461a      	mov	r2, r3
 800938e:	9805      	ldr	r0, [sp, #20]
 8009390:	f7ff f9a8 	bl	80086e4 <__pow5mult>
 8009394:	4680      	mov	r8, r0
 8009396:	2800      	cmp	r0, #0
 8009398:	d0b7      	beq.n	800930a <_strtod_l+0x68a>
 800939a:	4601      	mov	r1, r0
 800939c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800939e:	9805      	ldr	r0, [sp, #20]
 80093a0:	f7ff f8f8 	bl	8008594 <__multiply>
 80093a4:	900e      	str	r0, [sp, #56]	@ 0x38
 80093a6:	2800      	cmp	r0, #0
 80093a8:	f43f ae85 	beq.w	80090b6 <_strtod_l+0x436>
 80093ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80093ae:	9805      	ldr	r0, [sp, #20]
 80093b0:	f7fe ffdc 	bl	800836c <_Bfree>
 80093b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80093b8:	2d00      	cmp	r5, #0
 80093ba:	dc1d      	bgt.n	80093f8 <_strtod_l+0x778>
 80093bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093be:	2b00      	cmp	r3, #0
 80093c0:	dd23      	ble.n	800940a <_strtod_l+0x78a>
 80093c2:	4649      	mov	r1, r9
 80093c4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80093c6:	9805      	ldr	r0, [sp, #20]
 80093c8:	f7ff f98c 	bl	80086e4 <__pow5mult>
 80093cc:	4681      	mov	r9, r0
 80093ce:	b9e0      	cbnz	r0, 800940a <_strtod_l+0x78a>
 80093d0:	f04f 0900 	mov.w	r9, #0
 80093d4:	e66f      	b.n	80090b6 <_strtod_l+0x436>
 80093d6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80093da:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80093de:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80093e2:	35e2      	adds	r5, #226	@ 0xe2
 80093e4:	fa01 f305 	lsl.w	r3, r1, r5
 80093e8:	9310      	str	r3, [sp, #64]	@ 0x40
 80093ea:	9113      	str	r1, [sp, #76]	@ 0x4c
 80093ec:	e7ba      	b.n	8009364 <_strtod_l+0x6e4>
 80093ee:	2300      	movs	r3, #0
 80093f0:	9310      	str	r3, [sp, #64]	@ 0x40
 80093f2:	2301      	movs	r3, #1
 80093f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80093f6:	e7b5      	b.n	8009364 <_strtod_l+0x6e4>
 80093f8:	462a      	mov	r2, r5
 80093fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80093fc:	9805      	ldr	r0, [sp, #20]
 80093fe:	f7ff f9cb 	bl	8008798 <__lshift>
 8009402:	901a      	str	r0, [sp, #104]	@ 0x68
 8009404:	2800      	cmp	r0, #0
 8009406:	d1d9      	bne.n	80093bc <_strtod_l+0x73c>
 8009408:	e655      	b.n	80090b6 <_strtod_l+0x436>
 800940a:	2e00      	cmp	r6, #0
 800940c:	dd07      	ble.n	800941e <_strtod_l+0x79e>
 800940e:	4649      	mov	r1, r9
 8009410:	4632      	mov	r2, r6
 8009412:	9805      	ldr	r0, [sp, #20]
 8009414:	f7ff f9c0 	bl	8008798 <__lshift>
 8009418:	4681      	mov	r9, r0
 800941a:	2800      	cmp	r0, #0
 800941c:	d0d8      	beq.n	80093d0 <_strtod_l+0x750>
 800941e:	2f00      	cmp	r7, #0
 8009420:	dd08      	ble.n	8009434 <_strtod_l+0x7b4>
 8009422:	4641      	mov	r1, r8
 8009424:	463a      	mov	r2, r7
 8009426:	9805      	ldr	r0, [sp, #20]
 8009428:	f7ff f9b6 	bl	8008798 <__lshift>
 800942c:	4680      	mov	r8, r0
 800942e:	2800      	cmp	r0, #0
 8009430:	f43f ae41 	beq.w	80090b6 <_strtod_l+0x436>
 8009434:	464a      	mov	r2, r9
 8009436:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009438:	9805      	ldr	r0, [sp, #20]
 800943a:	f7ff fa35 	bl	80088a8 <__mdiff>
 800943e:	4604      	mov	r4, r0
 8009440:	2800      	cmp	r0, #0
 8009442:	f43f ae38 	beq.w	80090b6 <_strtod_l+0x436>
 8009446:	68c3      	ldr	r3, [r0, #12]
 8009448:	4641      	mov	r1, r8
 800944a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800944c:	2300      	movs	r3, #0
 800944e:	60c3      	str	r3, [r0, #12]
 8009450:	f7ff fa0e 	bl	8008870 <__mcmp>
 8009454:	2800      	cmp	r0, #0
 8009456:	da45      	bge.n	80094e4 <_strtod_l+0x864>
 8009458:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800945a:	ea53 030a 	orrs.w	r3, r3, sl
 800945e:	d16b      	bne.n	8009538 <_strtod_l+0x8b8>
 8009460:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009464:	2b00      	cmp	r3, #0
 8009466:	d167      	bne.n	8009538 <_strtod_l+0x8b8>
 8009468:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800946c:	0d1b      	lsrs	r3, r3, #20
 800946e:	051b      	lsls	r3, r3, #20
 8009470:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009474:	d960      	bls.n	8009538 <_strtod_l+0x8b8>
 8009476:	6963      	ldr	r3, [r4, #20]
 8009478:	b913      	cbnz	r3, 8009480 <_strtod_l+0x800>
 800947a:	6923      	ldr	r3, [r4, #16]
 800947c:	2b01      	cmp	r3, #1
 800947e:	dd5b      	ble.n	8009538 <_strtod_l+0x8b8>
 8009480:	4621      	mov	r1, r4
 8009482:	2201      	movs	r2, #1
 8009484:	9805      	ldr	r0, [sp, #20]
 8009486:	f7ff f987 	bl	8008798 <__lshift>
 800948a:	4641      	mov	r1, r8
 800948c:	4604      	mov	r4, r0
 800948e:	f7ff f9ef 	bl	8008870 <__mcmp>
 8009492:	2800      	cmp	r0, #0
 8009494:	dd50      	ble.n	8009538 <_strtod_l+0x8b8>
 8009496:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800949a:	9a08      	ldr	r2, [sp, #32]
 800949c:	0d1b      	lsrs	r3, r3, #20
 800949e:	051b      	lsls	r3, r3, #20
 80094a0:	2a00      	cmp	r2, #0
 80094a2:	d06a      	beq.n	800957a <_strtod_l+0x8fa>
 80094a4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80094a8:	d867      	bhi.n	800957a <_strtod_l+0x8fa>
 80094aa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80094ae:	f67f ae98 	bls.w	80091e2 <_strtod_l+0x562>
 80094b2:	4650      	mov	r0, sl
 80094b4:	4659      	mov	r1, fp
 80094b6:	4b09      	ldr	r3, [pc, #36]	@ (80094dc <_strtod_l+0x85c>)
 80094b8:	2200      	movs	r2, #0
 80094ba:	f7f7 f80d 	bl	80004d8 <__aeabi_dmul>
 80094be:	4b08      	ldr	r3, [pc, #32]	@ (80094e0 <_strtod_l+0x860>)
 80094c0:	4682      	mov	sl, r0
 80094c2:	400b      	ands	r3, r1
 80094c4:	468b      	mov	fp, r1
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	f47f ae00 	bne.w	80090cc <_strtod_l+0x44c>
 80094cc:	2322      	movs	r3, #34	@ 0x22
 80094ce:	9a05      	ldr	r2, [sp, #20]
 80094d0:	6013      	str	r3, [r2, #0]
 80094d2:	e5fb      	b.n	80090cc <_strtod_l+0x44c>
 80094d4:	0800d5a0 	.word	0x0800d5a0
 80094d8:	fffffc02 	.word	0xfffffc02
 80094dc:	39500000 	.word	0x39500000
 80094e0:	7ff00000 	.word	0x7ff00000
 80094e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80094e8:	d165      	bne.n	80095b6 <_strtod_l+0x936>
 80094ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80094ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094f0:	b35a      	cbz	r2, 800954a <_strtod_l+0x8ca>
 80094f2:	4a99      	ldr	r2, [pc, #612]	@ (8009758 <_strtod_l+0xad8>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d12b      	bne.n	8009550 <_strtod_l+0x8d0>
 80094f8:	9b08      	ldr	r3, [sp, #32]
 80094fa:	4651      	mov	r1, sl
 80094fc:	b303      	cbz	r3, 8009540 <_strtod_l+0x8c0>
 80094fe:	465a      	mov	r2, fp
 8009500:	4b96      	ldr	r3, [pc, #600]	@ (800975c <_strtod_l+0xadc>)
 8009502:	4013      	ands	r3, r2
 8009504:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009508:	f04f 32ff 	mov.w	r2, #4294967295
 800950c:	d81b      	bhi.n	8009546 <_strtod_l+0x8c6>
 800950e:	0d1b      	lsrs	r3, r3, #20
 8009510:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009514:	fa02 f303 	lsl.w	r3, r2, r3
 8009518:	4299      	cmp	r1, r3
 800951a:	d119      	bne.n	8009550 <_strtod_l+0x8d0>
 800951c:	4b90      	ldr	r3, [pc, #576]	@ (8009760 <_strtod_l+0xae0>)
 800951e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009520:	429a      	cmp	r2, r3
 8009522:	d102      	bne.n	800952a <_strtod_l+0x8aa>
 8009524:	3101      	adds	r1, #1
 8009526:	f43f adc6 	beq.w	80090b6 <_strtod_l+0x436>
 800952a:	f04f 0a00 	mov.w	sl, #0
 800952e:	4b8b      	ldr	r3, [pc, #556]	@ (800975c <_strtod_l+0xadc>)
 8009530:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009532:	401a      	ands	r2, r3
 8009534:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009538:	9b08      	ldr	r3, [sp, #32]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1b9      	bne.n	80094b2 <_strtod_l+0x832>
 800953e:	e5c5      	b.n	80090cc <_strtod_l+0x44c>
 8009540:	f04f 33ff 	mov.w	r3, #4294967295
 8009544:	e7e8      	b.n	8009518 <_strtod_l+0x898>
 8009546:	4613      	mov	r3, r2
 8009548:	e7e6      	b.n	8009518 <_strtod_l+0x898>
 800954a:	ea53 030a 	orrs.w	r3, r3, sl
 800954e:	d0a2      	beq.n	8009496 <_strtod_l+0x816>
 8009550:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009552:	b1db      	cbz	r3, 800958c <_strtod_l+0x90c>
 8009554:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009556:	4213      	tst	r3, r2
 8009558:	d0ee      	beq.n	8009538 <_strtod_l+0x8b8>
 800955a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800955c:	4650      	mov	r0, sl
 800955e:	4659      	mov	r1, fp
 8009560:	9a08      	ldr	r2, [sp, #32]
 8009562:	b1bb      	cbz	r3, 8009594 <_strtod_l+0x914>
 8009564:	f7ff fb68 	bl	8008c38 <sulp>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009570:	f7f6 fdfc 	bl	800016c <__adddf3>
 8009574:	4682      	mov	sl, r0
 8009576:	468b      	mov	fp, r1
 8009578:	e7de      	b.n	8009538 <_strtod_l+0x8b8>
 800957a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800957e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009582:	f04f 3aff 	mov.w	sl, #4294967295
 8009586:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800958a:	e7d5      	b.n	8009538 <_strtod_l+0x8b8>
 800958c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800958e:	ea13 0f0a 	tst.w	r3, sl
 8009592:	e7e1      	b.n	8009558 <_strtod_l+0x8d8>
 8009594:	f7ff fb50 	bl	8008c38 <sulp>
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095a0:	f7f6 fde2 	bl	8000168 <__aeabi_dsub>
 80095a4:	2200      	movs	r2, #0
 80095a6:	2300      	movs	r3, #0
 80095a8:	4682      	mov	sl, r0
 80095aa:	468b      	mov	fp, r1
 80095ac:	f7f7 f9fc 	bl	80009a8 <__aeabi_dcmpeq>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d0c1      	beq.n	8009538 <_strtod_l+0x8b8>
 80095b4:	e615      	b.n	80091e2 <_strtod_l+0x562>
 80095b6:	4641      	mov	r1, r8
 80095b8:	4620      	mov	r0, r4
 80095ba:	f7ff fac9 	bl	8008b50 <__ratio>
 80095be:	2200      	movs	r2, #0
 80095c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80095c4:	4606      	mov	r6, r0
 80095c6:	460f      	mov	r7, r1
 80095c8:	f7f7 fa02 	bl	80009d0 <__aeabi_dcmple>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	d06d      	beq.n	80096ac <_strtod_l+0xa2c>
 80095d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d178      	bne.n	80096c8 <_strtod_l+0xa48>
 80095d6:	f1ba 0f00 	cmp.w	sl, #0
 80095da:	d156      	bne.n	800968a <_strtod_l+0xa0a>
 80095dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d158      	bne.n	8009698 <_strtod_l+0xa18>
 80095e6:	2200      	movs	r2, #0
 80095e8:	4630      	mov	r0, r6
 80095ea:	4639      	mov	r1, r7
 80095ec:	4b5d      	ldr	r3, [pc, #372]	@ (8009764 <_strtod_l+0xae4>)
 80095ee:	f7f7 f9e5 	bl	80009bc <__aeabi_dcmplt>
 80095f2:	2800      	cmp	r0, #0
 80095f4:	d157      	bne.n	80096a6 <_strtod_l+0xa26>
 80095f6:	4630      	mov	r0, r6
 80095f8:	4639      	mov	r1, r7
 80095fa:	2200      	movs	r2, #0
 80095fc:	4b5a      	ldr	r3, [pc, #360]	@ (8009768 <_strtod_l+0xae8>)
 80095fe:	f7f6 ff6b 	bl	80004d8 <__aeabi_dmul>
 8009602:	4606      	mov	r6, r0
 8009604:	460f      	mov	r7, r1
 8009606:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800960a:	9606      	str	r6, [sp, #24]
 800960c:	9307      	str	r3, [sp, #28]
 800960e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009612:	4d52      	ldr	r5, [pc, #328]	@ (800975c <_strtod_l+0xadc>)
 8009614:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009618:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800961a:	401d      	ands	r5, r3
 800961c:	4b53      	ldr	r3, [pc, #332]	@ (800976c <_strtod_l+0xaec>)
 800961e:	429d      	cmp	r5, r3
 8009620:	f040 80aa 	bne.w	8009778 <_strtod_l+0xaf8>
 8009624:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009626:	4650      	mov	r0, sl
 8009628:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800962c:	4659      	mov	r1, fp
 800962e:	f7ff f9cf 	bl	80089d0 <__ulp>
 8009632:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009636:	f7f6 ff4f 	bl	80004d8 <__aeabi_dmul>
 800963a:	4652      	mov	r2, sl
 800963c:	465b      	mov	r3, fp
 800963e:	f7f6 fd95 	bl	800016c <__adddf3>
 8009642:	460b      	mov	r3, r1
 8009644:	4945      	ldr	r1, [pc, #276]	@ (800975c <_strtod_l+0xadc>)
 8009646:	4a4a      	ldr	r2, [pc, #296]	@ (8009770 <_strtod_l+0xaf0>)
 8009648:	4019      	ands	r1, r3
 800964a:	4291      	cmp	r1, r2
 800964c:	4682      	mov	sl, r0
 800964e:	d942      	bls.n	80096d6 <_strtod_l+0xa56>
 8009650:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009652:	4b43      	ldr	r3, [pc, #268]	@ (8009760 <_strtod_l+0xae0>)
 8009654:	429a      	cmp	r2, r3
 8009656:	d103      	bne.n	8009660 <_strtod_l+0x9e0>
 8009658:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800965a:	3301      	adds	r3, #1
 800965c:	f43f ad2b 	beq.w	80090b6 <_strtod_l+0x436>
 8009660:	f04f 3aff 	mov.w	sl, #4294967295
 8009664:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009760 <_strtod_l+0xae0>
 8009668:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800966a:	9805      	ldr	r0, [sp, #20]
 800966c:	f7fe fe7e 	bl	800836c <_Bfree>
 8009670:	4649      	mov	r1, r9
 8009672:	9805      	ldr	r0, [sp, #20]
 8009674:	f7fe fe7a 	bl	800836c <_Bfree>
 8009678:	4641      	mov	r1, r8
 800967a:	9805      	ldr	r0, [sp, #20]
 800967c:	f7fe fe76 	bl	800836c <_Bfree>
 8009680:	4621      	mov	r1, r4
 8009682:	9805      	ldr	r0, [sp, #20]
 8009684:	f7fe fe72 	bl	800836c <_Bfree>
 8009688:	e618      	b.n	80092bc <_strtod_l+0x63c>
 800968a:	f1ba 0f01 	cmp.w	sl, #1
 800968e:	d103      	bne.n	8009698 <_strtod_l+0xa18>
 8009690:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009692:	2b00      	cmp	r3, #0
 8009694:	f43f ada5 	beq.w	80091e2 <_strtod_l+0x562>
 8009698:	2200      	movs	r2, #0
 800969a:	4b36      	ldr	r3, [pc, #216]	@ (8009774 <_strtod_l+0xaf4>)
 800969c:	2600      	movs	r6, #0
 800969e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80096a2:	4f30      	ldr	r7, [pc, #192]	@ (8009764 <_strtod_l+0xae4>)
 80096a4:	e7b3      	b.n	800960e <_strtod_l+0x98e>
 80096a6:	2600      	movs	r6, #0
 80096a8:	4f2f      	ldr	r7, [pc, #188]	@ (8009768 <_strtod_l+0xae8>)
 80096aa:	e7ac      	b.n	8009606 <_strtod_l+0x986>
 80096ac:	4630      	mov	r0, r6
 80096ae:	4639      	mov	r1, r7
 80096b0:	4b2d      	ldr	r3, [pc, #180]	@ (8009768 <_strtod_l+0xae8>)
 80096b2:	2200      	movs	r2, #0
 80096b4:	f7f6 ff10 	bl	80004d8 <__aeabi_dmul>
 80096b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096ba:	4606      	mov	r6, r0
 80096bc:	460f      	mov	r7, r1
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d0a1      	beq.n	8009606 <_strtod_l+0x986>
 80096c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80096c6:	e7a2      	b.n	800960e <_strtod_l+0x98e>
 80096c8:	2200      	movs	r2, #0
 80096ca:	4b26      	ldr	r3, [pc, #152]	@ (8009764 <_strtod_l+0xae4>)
 80096cc:	4616      	mov	r6, r2
 80096ce:	461f      	mov	r7, r3
 80096d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80096d4:	e79b      	b.n	800960e <_strtod_l+0x98e>
 80096d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80096da:	9b08      	ldr	r3, [sp, #32]
 80096dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d1c1      	bne.n	8009668 <_strtod_l+0x9e8>
 80096e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80096e8:	0d1b      	lsrs	r3, r3, #20
 80096ea:	051b      	lsls	r3, r3, #20
 80096ec:	429d      	cmp	r5, r3
 80096ee:	d1bb      	bne.n	8009668 <_strtod_l+0x9e8>
 80096f0:	4630      	mov	r0, r6
 80096f2:	4639      	mov	r1, r7
 80096f4:	f7f7 fb46 	bl	8000d84 <__aeabi_d2lz>
 80096f8:	f7f6 fec0 	bl	800047c <__aeabi_l2d>
 80096fc:	4602      	mov	r2, r0
 80096fe:	460b      	mov	r3, r1
 8009700:	4630      	mov	r0, r6
 8009702:	4639      	mov	r1, r7
 8009704:	f7f6 fd30 	bl	8000168 <__aeabi_dsub>
 8009708:	460b      	mov	r3, r1
 800970a:	4602      	mov	r2, r0
 800970c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009710:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009714:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009716:	ea46 060a 	orr.w	r6, r6, sl
 800971a:	431e      	orrs	r6, r3
 800971c:	d069      	beq.n	80097f2 <_strtod_l+0xb72>
 800971e:	a30a      	add	r3, pc, #40	@ (adr r3, 8009748 <_strtod_l+0xac8>)
 8009720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009724:	f7f7 f94a 	bl	80009bc <__aeabi_dcmplt>
 8009728:	2800      	cmp	r0, #0
 800972a:	f47f accf 	bne.w	80090cc <_strtod_l+0x44c>
 800972e:	a308      	add	r3, pc, #32	@ (adr r3, 8009750 <_strtod_l+0xad0>)
 8009730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009734:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009738:	f7f7 f95e 	bl	80009f8 <__aeabi_dcmpgt>
 800973c:	2800      	cmp	r0, #0
 800973e:	d093      	beq.n	8009668 <_strtod_l+0x9e8>
 8009740:	e4c4      	b.n	80090cc <_strtod_l+0x44c>
 8009742:	bf00      	nop
 8009744:	f3af 8000 	nop.w
 8009748:	94a03595 	.word	0x94a03595
 800974c:	3fdfffff 	.word	0x3fdfffff
 8009750:	35afe535 	.word	0x35afe535
 8009754:	3fe00000 	.word	0x3fe00000
 8009758:	000fffff 	.word	0x000fffff
 800975c:	7ff00000 	.word	0x7ff00000
 8009760:	7fefffff 	.word	0x7fefffff
 8009764:	3ff00000 	.word	0x3ff00000
 8009768:	3fe00000 	.word	0x3fe00000
 800976c:	7fe00000 	.word	0x7fe00000
 8009770:	7c9fffff 	.word	0x7c9fffff
 8009774:	bff00000 	.word	0xbff00000
 8009778:	9b08      	ldr	r3, [sp, #32]
 800977a:	b323      	cbz	r3, 80097c6 <_strtod_l+0xb46>
 800977c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009780:	d821      	bhi.n	80097c6 <_strtod_l+0xb46>
 8009782:	a327      	add	r3, pc, #156	@ (adr r3, 8009820 <_strtod_l+0xba0>)
 8009784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009788:	4630      	mov	r0, r6
 800978a:	4639      	mov	r1, r7
 800978c:	f7f7 f920 	bl	80009d0 <__aeabi_dcmple>
 8009790:	b1a0      	cbz	r0, 80097bc <_strtod_l+0xb3c>
 8009792:	4639      	mov	r1, r7
 8009794:	4630      	mov	r0, r6
 8009796:	f7f7 f977 	bl	8000a88 <__aeabi_d2uiz>
 800979a:	2801      	cmp	r0, #1
 800979c:	bf38      	it	cc
 800979e:	2001      	movcc	r0, #1
 80097a0:	f7f6 fe20 	bl	80003e4 <__aeabi_ui2d>
 80097a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097a6:	4606      	mov	r6, r0
 80097a8:	460f      	mov	r7, r1
 80097aa:	b9fb      	cbnz	r3, 80097ec <_strtod_l+0xb6c>
 80097ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80097b0:	9014      	str	r0, [sp, #80]	@ 0x50
 80097b2:	9315      	str	r3, [sp, #84]	@ 0x54
 80097b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80097b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80097bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80097be:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80097c2:	1b5b      	subs	r3, r3, r5
 80097c4:	9311      	str	r3, [sp, #68]	@ 0x44
 80097c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097ca:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80097ce:	f7ff f8ff 	bl	80089d0 <__ulp>
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	4650      	mov	r0, sl
 80097d8:	4659      	mov	r1, fp
 80097da:	f7f6 fe7d 	bl	80004d8 <__aeabi_dmul>
 80097de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80097e2:	f7f6 fcc3 	bl	800016c <__adddf3>
 80097e6:	4682      	mov	sl, r0
 80097e8:	468b      	mov	fp, r1
 80097ea:	e776      	b.n	80096da <_strtod_l+0xa5a>
 80097ec:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80097f0:	e7e0      	b.n	80097b4 <_strtod_l+0xb34>
 80097f2:	a30d      	add	r3, pc, #52	@ (adr r3, 8009828 <_strtod_l+0xba8>)
 80097f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f8:	f7f7 f8e0 	bl	80009bc <__aeabi_dcmplt>
 80097fc:	e79e      	b.n	800973c <_strtod_l+0xabc>
 80097fe:	2300      	movs	r3, #0
 8009800:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009802:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009804:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009806:	6013      	str	r3, [r2, #0]
 8009808:	f7ff ba77 	b.w	8008cfa <_strtod_l+0x7a>
 800980c:	2a65      	cmp	r2, #101	@ 0x65
 800980e:	f43f ab6e 	beq.w	8008eee <_strtod_l+0x26e>
 8009812:	2a45      	cmp	r2, #69	@ 0x45
 8009814:	f43f ab6b 	beq.w	8008eee <_strtod_l+0x26e>
 8009818:	2301      	movs	r3, #1
 800981a:	f7ff bba6 	b.w	8008f6a <_strtod_l+0x2ea>
 800981e:	bf00      	nop
 8009820:	ffc00000 	.word	0xffc00000
 8009824:	41dfffff 	.word	0x41dfffff
 8009828:	94a03595 	.word	0x94a03595
 800982c:	3fcfffff 	.word	0x3fcfffff

08009830 <_strtod_r>:
 8009830:	4b01      	ldr	r3, [pc, #4]	@ (8009838 <_strtod_r+0x8>)
 8009832:	f7ff ba25 	b.w	8008c80 <_strtod_l>
 8009836:	bf00      	nop
 8009838:	20000070 	.word	0x20000070

0800983c <_strtol_l.constprop.0>:
 800983c:	2b24      	cmp	r3, #36	@ 0x24
 800983e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009842:	4686      	mov	lr, r0
 8009844:	4690      	mov	r8, r2
 8009846:	d801      	bhi.n	800984c <_strtol_l.constprop.0+0x10>
 8009848:	2b01      	cmp	r3, #1
 800984a:	d106      	bne.n	800985a <_strtol_l.constprop.0+0x1e>
 800984c:	f7fd fdb2 	bl	80073b4 <__errno>
 8009850:	2316      	movs	r3, #22
 8009852:	6003      	str	r3, [r0, #0]
 8009854:	2000      	movs	r0, #0
 8009856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800985a:	460d      	mov	r5, r1
 800985c:	4833      	ldr	r0, [pc, #204]	@ (800992c <_strtol_l.constprop.0+0xf0>)
 800985e:	462a      	mov	r2, r5
 8009860:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009864:	5d06      	ldrb	r6, [r0, r4]
 8009866:	f016 0608 	ands.w	r6, r6, #8
 800986a:	d1f8      	bne.n	800985e <_strtol_l.constprop.0+0x22>
 800986c:	2c2d      	cmp	r4, #45	@ 0x2d
 800986e:	d12d      	bne.n	80098cc <_strtol_l.constprop.0+0x90>
 8009870:	2601      	movs	r6, #1
 8009872:	782c      	ldrb	r4, [r5, #0]
 8009874:	1c95      	adds	r5, r2, #2
 8009876:	f033 0210 	bics.w	r2, r3, #16
 800987a:	d109      	bne.n	8009890 <_strtol_l.constprop.0+0x54>
 800987c:	2c30      	cmp	r4, #48	@ 0x30
 800987e:	d12a      	bne.n	80098d6 <_strtol_l.constprop.0+0x9a>
 8009880:	782a      	ldrb	r2, [r5, #0]
 8009882:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009886:	2a58      	cmp	r2, #88	@ 0x58
 8009888:	d125      	bne.n	80098d6 <_strtol_l.constprop.0+0x9a>
 800988a:	2310      	movs	r3, #16
 800988c:	786c      	ldrb	r4, [r5, #1]
 800988e:	3502      	adds	r5, #2
 8009890:	2200      	movs	r2, #0
 8009892:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009896:	f10c 3cff 	add.w	ip, ip, #4294967295
 800989a:	fbbc f9f3 	udiv	r9, ip, r3
 800989e:	4610      	mov	r0, r2
 80098a0:	fb03 ca19 	mls	sl, r3, r9, ip
 80098a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80098a8:	2f09      	cmp	r7, #9
 80098aa:	d81b      	bhi.n	80098e4 <_strtol_l.constprop.0+0xa8>
 80098ac:	463c      	mov	r4, r7
 80098ae:	42a3      	cmp	r3, r4
 80098b0:	dd27      	ble.n	8009902 <_strtol_l.constprop.0+0xc6>
 80098b2:	1c57      	adds	r7, r2, #1
 80098b4:	d007      	beq.n	80098c6 <_strtol_l.constprop.0+0x8a>
 80098b6:	4581      	cmp	r9, r0
 80098b8:	d320      	bcc.n	80098fc <_strtol_l.constprop.0+0xc0>
 80098ba:	d101      	bne.n	80098c0 <_strtol_l.constprop.0+0x84>
 80098bc:	45a2      	cmp	sl, r4
 80098be:	db1d      	blt.n	80098fc <_strtol_l.constprop.0+0xc0>
 80098c0:	2201      	movs	r2, #1
 80098c2:	fb00 4003 	mla	r0, r0, r3, r4
 80098c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098ca:	e7eb      	b.n	80098a4 <_strtol_l.constprop.0+0x68>
 80098cc:	2c2b      	cmp	r4, #43	@ 0x2b
 80098ce:	bf04      	itt	eq
 80098d0:	782c      	ldrbeq	r4, [r5, #0]
 80098d2:	1c95      	addeq	r5, r2, #2
 80098d4:	e7cf      	b.n	8009876 <_strtol_l.constprop.0+0x3a>
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d1da      	bne.n	8009890 <_strtol_l.constprop.0+0x54>
 80098da:	2c30      	cmp	r4, #48	@ 0x30
 80098dc:	bf0c      	ite	eq
 80098de:	2308      	moveq	r3, #8
 80098e0:	230a      	movne	r3, #10
 80098e2:	e7d5      	b.n	8009890 <_strtol_l.constprop.0+0x54>
 80098e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80098e8:	2f19      	cmp	r7, #25
 80098ea:	d801      	bhi.n	80098f0 <_strtol_l.constprop.0+0xb4>
 80098ec:	3c37      	subs	r4, #55	@ 0x37
 80098ee:	e7de      	b.n	80098ae <_strtol_l.constprop.0+0x72>
 80098f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80098f4:	2f19      	cmp	r7, #25
 80098f6:	d804      	bhi.n	8009902 <_strtol_l.constprop.0+0xc6>
 80098f8:	3c57      	subs	r4, #87	@ 0x57
 80098fa:	e7d8      	b.n	80098ae <_strtol_l.constprop.0+0x72>
 80098fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009900:	e7e1      	b.n	80098c6 <_strtol_l.constprop.0+0x8a>
 8009902:	1c53      	adds	r3, r2, #1
 8009904:	d108      	bne.n	8009918 <_strtol_l.constprop.0+0xdc>
 8009906:	2322      	movs	r3, #34	@ 0x22
 8009908:	4660      	mov	r0, ip
 800990a:	f8ce 3000 	str.w	r3, [lr]
 800990e:	f1b8 0f00 	cmp.w	r8, #0
 8009912:	d0a0      	beq.n	8009856 <_strtol_l.constprop.0+0x1a>
 8009914:	1e69      	subs	r1, r5, #1
 8009916:	e006      	b.n	8009926 <_strtol_l.constprop.0+0xea>
 8009918:	b106      	cbz	r6, 800991c <_strtol_l.constprop.0+0xe0>
 800991a:	4240      	negs	r0, r0
 800991c:	f1b8 0f00 	cmp.w	r8, #0
 8009920:	d099      	beq.n	8009856 <_strtol_l.constprop.0+0x1a>
 8009922:	2a00      	cmp	r2, #0
 8009924:	d1f6      	bne.n	8009914 <_strtol_l.constprop.0+0xd8>
 8009926:	f8c8 1000 	str.w	r1, [r8]
 800992a:	e794      	b.n	8009856 <_strtol_l.constprop.0+0x1a>
 800992c:	0800d5c9 	.word	0x0800d5c9

08009930 <_strtol_r>:
 8009930:	f7ff bf84 	b.w	800983c <_strtol_l.constprop.0>

08009934 <__ssputs_r>:
 8009934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009938:	461f      	mov	r7, r3
 800993a:	688e      	ldr	r6, [r1, #8]
 800993c:	4682      	mov	sl, r0
 800993e:	42be      	cmp	r6, r7
 8009940:	460c      	mov	r4, r1
 8009942:	4690      	mov	r8, r2
 8009944:	680b      	ldr	r3, [r1, #0]
 8009946:	d82d      	bhi.n	80099a4 <__ssputs_r+0x70>
 8009948:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800994c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009950:	d026      	beq.n	80099a0 <__ssputs_r+0x6c>
 8009952:	6965      	ldr	r5, [r4, #20]
 8009954:	6909      	ldr	r1, [r1, #16]
 8009956:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800995a:	eba3 0901 	sub.w	r9, r3, r1
 800995e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009962:	1c7b      	adds	r3, r7, #1
 8009964:	444b      	add	r3, r9
 8009966:	106d      	asrs	r5, r5, #1
 8009968:	429d      	cmp	r5, r3
 800996a:	bf38      	it	cc
 800996c:	461d      	movcc	r5, r3
 800996e:	0553      	lsls	r3, r2, #21
 8009970:	d527      	bpl.n	80099c2 <__ssputs_r+0x8e>
 8009972:	4629      	mov	r1, r5
 8009974:	f7fe fc2e 	bl	80081d4 <_malloc_r>
 8009978:	4606      	mov	r6, r0
 800997a:	b360      	cbz	r0, 80099d6 <__ssputs_r+0xa2>
 800997c:	464a      	mov	r2, r9
 800997e:	6921      	ldr	r1, [r4, #16]
 8009980:	f7fd fd53 	bl	800742a <memcpy>
 8009984:	89a3      	ldrh	r3, [r4, #12]
 8009986:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800998a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800998e:	81a3      	strh	r3, [r4, #12]
 8009990:	6126      	str	r6, [r4, #16]
 8009992:	444e      	add	r6, r9
 8009994:	6026      	str	r6, [r4, #0]
 8009996:	463e      	mov	r6, r7
 8009998:	6165      	str	r5, [r4, #20]
 800999a:	eba5 0509 	sub.w	r5, r5, r9
 800999e:	60a5      	str	r5, [r4, #8]
 80099a0:	42be      	cmp	r6, r7
 80099a2:	d900      	bls.n	80099a6 <__ssputs_r+0x72>
 80099a4:	463e      	mov	r6, r7
 80099a6:	4632      	mov	r2, r6
 80099a8:	4641      	mov	r1, r8
 80099aa:	6820      	ldr	r0, [r4, #0]
 80099ac:	f7fd fc95 	bl	80072da <memmove>
 80099b0:	2000      	movs	r0, #0
 80099b2:	68a3      	ldr	r3, [r4, #8]
 80099b4:	1b9b      	subs	r3, r3, r6
 80099b6:	60a3      	str	r3, [r4, #8]
 80099b8:	6823      	ldr	r3, [r4, #0]
 80099ba:	4433      	add	r3, r6
 80099bc:	6023      	str	r3, [r4, #0]
 80099be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099c2:	462a      	mov	r2, r5
 80099c4:	f000 fd5b 	bl	800a47e <_realloc_r>
 80099c8:	4606      	mov	r6, r0
 80099ca:	2800      	cmp	r0, #0
 80099cc:	d1e0      	bne.n	8009990 <__ssputs_r+0x5c>
 80099ce:	4650      	mov	r0, sl
 80099d0:	6921      	ldr	r1, [r4, #16]
 80099d2:	f7fe fb8d 	bl	80080f0 <_free_r>
 80099d6:	230c      	movs	r3, #12
 80099d8:	f8ca 3000 	str.w	r3, [sl]
 80099dc:	89a3      	ldrh	r3, [r4, #12]
 80099de:	f04f 30ff 	mov.w	r0, #4294967295
 80099e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099e6:	81a3      	strh	r3, [r4, #12]
 80099e8:	e7e9      	b.n	80099be <__ssputs_r+0x8a>
	...

080099ec <_svfiprintf_r>:
 80099ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f0:	4698      	mov	r8, r3
 80099f2:	898b      	ldrh	r3, [r1, #12]
 80099f4:	4607      	mov	r7, r0
 80099f6:	061b      	lsls	r3, r3, #24
 80099f8:	460d      	mov	r5, r1
 80099fa:	4614      	mov	r4, r2
 80099fc:	b09d      	sub	sp, #116	@ 0x74
 80099fe:	d510      	bpl.n	8009a22 <_svfiprintf_r+0x36>
 8009a00:	690b      	ldr	r3, [r1, #16]
 8009a02:	b973      	cbnz	r3, 8009a22 <_svfiprintf_r+0x36>
 8009a04:	2140      	movs	r1, #64	@ 0x40
 8009a06:	f7fe fbe5 	bl	80081d4 <_malloc_r>
 8009a0a:	6028      	str	r0, [r5, #0]
 8009a0c:	6128      	str	r0, [r5, #16]
 8009a0e:	b930      	cbnz	r0, 8009a1e <_svfiprintf_r+0x32>
 8009a10:	230c      	movs	r3, #12
 8009a12:	603b      	str	r3, [r7, #0]
 8009a14:	f04f 30ff 	mov.w	r0, #4294967295
 8009a18:	b01d      	add	sp, #116	@ 0x74
 8009a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a1e:	2340      	movs	r3, #64	@ 0x40
 8009a20:	616b      	str	r3, [r5, #20]
 8009a22:	2300      	movs	r3, #0
 8009a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a26:	2320      	movs	r3, #32
 8009a28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a2c:	2330      	movs	r3, #48	@ 0x30
 8009a2e:	f04f 0901 	mov.w	r9, #1
 8009a32:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a36:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009bd0 <_svfiprintf_r+0x1e4>
 8009a3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a3e:	4623      	mov	r3, r4
 8009a40:	469a      	mov	sl, r3
 8009a42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a46:	b10a      	cbz	r2, 8009a4c <_svfiprintf_r+0x60>
 8009a48:	2a25      	cmp	r2, #37	@ 0x25
 8009a4a:	d1f9      	bne.n	8009a40 <_svfiprintf_r+0x54>
 8009a4c:	ebba 0b04 	subs.w	fp, sl, r4
 8009a50:	d00b      	beq.n	8009a6a <_svfiprintf_r+0x7e>
 8009a52:	465b      	mov	r3, fp
 8009a54:	4622      	mov	r2, r4
 8009a56:	4629      	mov	r1, r5
 8009a58:	4638      	mov	r0, r7
 8009a5a:	f7ff ff6b 	bl	8009934 <__ssputs_r>
 8009a5e:	3001      	adds	r0, #1
 8009a60:	f000 80a7 	beq.w	8009bb2 <_svfiprintf_r+0x1c6>
 8009a64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a66:	445a      	add	r2, fp
 8009a68:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	f000 809f 	beq.w	8009bb2 <_svfiprintf_r+0x1c6>
 8009a74:	2300      	movs	r3, #0
 8009a76:	f04f 32ff 	mov.w	r2, #4294967295
 8009a7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a7e:	f10a 0a01 	add.w	sl, sl, #1
 8009a82:	9304      	str	r3, [sp, #16]
 8009a84:	9307      	str	r3, [sp, #28]
 8009a86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a8c:	4654      	mov	r4, sl
 8009a8e:	2205      	movs	r2, #5
 8009a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a94:	484e      	ldr	r0, [pc, #312]	@ (8009bd0 <_svfiprintf_r+0x1e4>)
 8009a96:	f7fd fcba 	bl	800740e <memchr>
 8009a9a:	9a04      	ldr	r2, [sp, #16]
 8009a9c:	b9d8      	cbnz	r0, 8009ad6 <_svfiprintf_r+0xea>
 8009a9e:	06d0      	lsls	r0, r2, #27
 8009aa0:	bf44      	itt	mi
 8009aa2:	2320      	movmi	r3, #32
 8009aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009aa8:	0711      	lsls	r1, r2, #28
 8009aaa:	bf44      	itt	mi
 8009aac:	232b      	movmi	r3, #43	@ 0x2b
 8009aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ab6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ab8:	d015      	beq.n	8009ae6 <_svfiprintf_r+0xfa>
 8009aba:	4654      	mov	r4, sl
 8009abc:	2000      	movs	r0, #0
 8009abe:	f04f 0c0a 	mov.w	ip, #10
 8009ac2:	9a07      	ldr	r2, [sp, #28]
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009aca:	3b30      	subs	r3, #48	@ 0x30
 8009acc:	2b09      	cmp	r3, #9
 8009ace:	d94b      	bls.n	8009b68 <_svfiprintf_r+0x17c>
 8009ad0:	b1b0      	cbz	r0, 8009b00 <_svfiprintf_r+0x114>
 8009ad2:	9207      	str	r2, [sp, #28]
 8009ad4:	e014      	b.n	8009b00 <_svfiprintf_r+0x114>
 8009ad6:	eba0 0308 	sub.w	r3, r0, r8
 8009ada:	fa09 f303 	lsl.w	r3, r9, r3
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	46a2      	mov	sl, r4
 8009ae2:	9304      	str	r3, [sp, #16]
 8009ae4:	e7d2      	b.n	8009a8c <_svfiprintf_r+0xa0>
 8009ae6:	9b03      	ldr	r3, [sp, #12]
 8009ae8:	1d19      	adds	r1, r3, #4
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	9103      	str	r1, [sp, #12]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	bfbb      	ittet	lt
 8009af2:	425b      	neglt	r3, r3
 8009af4:	f042 0202 	orrlt.w	r2, r2, #2
 8009af8:	9307      	strge	r3, [sp, #28]
 8009afa:	9307      	strlt	r3, [sp, #28]
 8009afc:	bfb8      	it	lt
 8009afe:	9204      	strlt	r2, [sp, #16]
 8009b00:	7823      	ldrb	r3, [r4, #0]
 8009b02:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b04:	d10a      	bne.n	8009b1c <_svfiprintf_r+0x130>
 8009b06:	7863      	ldrb	r3, [r4, #1]
 8009b08:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b0a:	d132      	bne.n	8009b72 <_svfiprintf_r+0x186>
 8009b0c:	9b03      	ldr	r3, [sp, #12]
 8009b0e:	3402      	adds	r4, #2
 8009b10:	1d1a      	adds	r2, r3, #4
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	9203      	str	r2, [sp, #12]
 8009b16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b1a:	9305      	str	r3, [sp, #20]
 8009b1c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009bd4 <_svfiprintf_r+0x1e8>
 8009b20:	2203      	movs	r2, #3
 8009b22:	4650      	mov	r0, sl
 8009b24:	7821      	ldrb	r1, [r4, #0]
 8009b26:	f7fd fc72 	bl	800740e <memchr>
 8009b2a:	b138      	cbz	r0, 8009b3c <_svfiprintf_r+0x150>
 8009b2c:	2240      	movs	r2, #64	@ 0x40
 8009b2e:	9b04      	ldr	r3, [sp, #16]
 8009b30:	eba0 000a 	sub.w	r0, r0, sl
 8009b34:	4082      	lsls	r2, r0
 8009b36:	4313      	orrs	r3, r2
 8009b38:	3401      	adds	r4, #1
 8009b3a:	9304      	str	r3, [sp, #16]
 8009b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b40:	2206      	movs	r2, #6
 8009b42:	4825      	ldr	r0, [pc, #148]	@ (8009bd8 <_svfiprintf_r+0x1ec>)
 8009b44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b48:	f7fd fc61 	bl	800740e <memchr>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d036      	beq.n	8009bbe <_svfiprintf_r+0x1d2>
 8009b50:	4b22      	ldr	r3, [pc, #136]	@ (8009bdc <_svfiprintf_r+0x1f0>)
 8009b52:	bb1b      	cbnz	r3, 8009b9c <_svfiprintf_r+0x1b0>
 8009b54:	9b03      	ldr	r3, [sp, #12]
 8009b56:	3307      	adds	r3, #7
 8009b58:	f023 0307 	bic.w	r3, r3, #7
 8009b5c:	3308      	adds	r3, #8
 8009b5e:	9303      	str	r3, [sp, #12]
 8009b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b62:	4433      	add	r3, r6
 8009b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b66:	e76a      	b.n	8009a3e <_svfiprintf_r+0x52>
 8009b68:	460c      	mov	r4, r1
 8009b6a:	2001      	movs	r0, #1
 8009b6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b70:	e7a8      	b.n	8009ac4 <_svfiprintf_r+0xd8>
 8009b72:	2300      	movs	r3, #0
 8009b74:	f04f 0c0a 	mov.w	ip, #10
 8009b78:	4619      	mov	r1, r3
 8009b7a:	3401      	adds	r4, #1
 8009b7c:	9305      	str	r3, [sp, #20]
 8009b7e:	4620      	mov	r0, r4
 8009b80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b84:	3a30      	subs	r2, #48	@ 0x30
 8009b86:	2a09      	cmp	r2, #9
 8009b88:	d903      	bls.n	8009b92 <_svfiprintf_r+0x1a6>
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d0c6      	beq.n	8009b1c <_svfiprintf_r+0x130>
 8009b8e:	9105      	str	r1, [sp, #20]
 8009b90:	e7c4      	b.n	8009b1c <_svfiprintf_r+0x130>
 8009b92:	4604      	mov	r4, r0
 8009b94:	2301      	movs	r3, #1
 8009b96:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b9a:	e7f0      	b.n	8009b7e <_svfiprintf_r+0x192>
 8009b9c:	ab03      	add	r3, sp, #12
 8009b9e:	9300      	str	r3, [sp, #0]
 8009ba0:	462a      	mov	r2, r5
 8009ba2:	4638      	mov	r0, r7
 8009ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8009be0 <_svfiprintf_r+0x1f4>)
 8009ba6:	a904      	add	r1, sp, #16
 8009ba8:	f7fc fc70 	bl	800648c <_printf_float>
 8009bac:	1c42      	adds	r2, r0, #1
 8009bae:	4606      	mov	r6, r0
 8009bb0:	d1d6      	bne.n	8009b60 <_svfiprintf_r+0x174>
 8009bb2:	89ab      	ldrh	r3, [r5, #12]
 8009bb4:	065b      	lsls	r3, r3, #25
 8009bb6:	f53f af2d 	bmi.w	8009a14 <_svfiprintf_r+0x28>
 8009bba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bbc:	e72c      	b.n	8009a18 <_svfiprintf_r+0x2c>
 8009bbe:	ab03      	add	r3, sp, #12
 8009bc0:	9300      	str	r3, [sp, #0]
 8009bc2:	462a      	mov	r2, r5
 8009bc4:	4638      	mov	r0, r7
 8009bc6:	4b06      	ldr	r3, [pc, #24]	@ (8009be0 <_svfiprintf_r+0x1f4>)
 8009bc8:	a904      	add	r1, sp, #16
 8009bca:	f7fc fefd 	bl	80069c8 <_printf_i>
 8009bce:	e7ed      	b.n	8009bac <_svfiprintf_r+0x1c0>
 8009bd0:	0800d6c9 	.word	0x0800d6c9
 8009bd4:	0800d6cf 	.word	0x0800d6cf
 8009bd8:	0800d6d3 	.word	0x0800d6d3
 8009bdc:	0800648d 	.word	0x0800648d
 8009be0:	08009935 	.word	0x08009935

08009be4 <__sflush_r>:
 8009be4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bea:	0716      	lsls	r6, r2, #28
 8009bec:	4605      	mov	r5, r0
 8009bee:	460c      	mov	r4, r1
 8009bf0:	d454      	bmi.n	8009c9c <__sflush_r+0xb8>
 8009bf2:	684b      	ldr	r3, [r1, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	dc02      	bgt.n	8009bfe <__sflush_r+0x1a>
 8009bf8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	dd48      	ble.n	8009c90 <__sflush_r+0xac>
 8009bfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c00:	2e00      	cmp	r6, #0
 8009c02:	d045      	beq.n	8009c90 <__sflush_r+0xac>
 8009c04:	2300      	movs	r3, #0
 8009c06:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009c0a:	682f      	ldr	r7, [r5, #0]
 8009c0c:	6a21      	ldr	r1, [r4, #32]
 8009c0e:	602b      	str	r3, [r5, #0]
 8009c10:	d030      	beq.n	8009c74 <__sflush_r+0x90>
 8009c12:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009c14:	89a3      	ldrh	r3, [r4, #12]
 8009c16:	0759      	lsls	r1, r3, #29
 8009c18:	d505      	bpl.n	8009c26 <__sflush_r+0x42>
 8009c1a:	6863      	ldr	r3, [r4, #4]
 8009c1c:	1ad2      	subs	r2, r2, r3
 8009c1e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c20:	b10b      	cbz	r3, 8009c26 <__sflush_r+0x42>
 8009c22:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009c24:	1ad2      	subs	r2, r2, r3
 8009c26:	2300      	movs	r3, #0
 8009c28:	4628      	mov	r0, r5
 8009c2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c2c:	6a21      	ldr	r1, [r4, #32]
 8009c2e:	47b0      	blx	r6
 8009c30:	1c43      	adds	r3, r0, #1
 8009c32:	89a3      	ldrh	r3, [r4, #12]
 8009c34:	d106      	bne.n	8009c44 <__sflush_r+0x60>
 8009c36:	6829      	ldr	r1, [r5, #0]
 8009c38:	291d      	cmp	r1, #29
 8009c3a:	d82b      	bhi.n	8009c94 <__sflush_r+0xb0>
 8009c3c:	4a28      	ldr	r2, [pc, #160]	@ (8009ce0 <__sflush_r+0xfc>)
 8009c3e:	410a      	asrs	r2, r1
 8009c40:	07d6      	lsls	r6, r2, #31
 8009c42:	d427      	bmi.n	8009c94 <__sflush_r+0xb0>
 8009c44:	2200      	movs	r2, #0
 8009c46:	6062      	str	r2, [r4, #4]
 8009c48:	6922      	ldr	r2, [r4, #16]
 8009c4a:	04d9      	lsls	r1, r3, #19
 8009c4c:	6022      	str	r2, [r4, #0]
 8009c4e:	d504      	bpl.n	8009c5a <__sflush_r+0x76>
 8009c50:	1c42      	adds	r2, r0, #1
 8009c52:	d101      	bne.n	8009c58 <__sflush_r+0x74>
 8009c54:	682b      	ldr	r3, [r5, #0]
 8009c56:	b903      	cbnz	r3, 8009c5a <__sflush_r+0x76>
 8009c58:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c5a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c5c:	602f      	str	r7, [r5, #0]
 8009c5e:	b1b9      	cbz	r1, 8009c90 <__sflush_r+0xac>
 8009c60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c64:	4299      	cmp	r1, r3
 8009c66:	d002      	beq.n	8009c6e <__sflush_r+0x8a>
 8009c68:	4628      	mov	r0, r5
 8009c6a:	f7fe fa41 	bl	80080f0 <_free_r>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c72:	e00d      	b.n	8009c90 <__sflush_r+0xac>
 8009c74:	2301      	movs	r3, #1
 8009c76:	4628      	mov	r0, r5
 8009c78:	47b0      	blx	r6
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	1c50      	adds	r0, r2, #1
 8009c7e:	d1c9      	bne.n	8009c14 <__sflush_r+0x30>
 8009c80:	682b      	ldr	r3, [r5, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d0c6      	beq.n	8009c14 <__sflush_r+0x30>
 8009c86:	2b1d      	cmp	r3, #29
 8009c88:	d001      	beq.n	8009c8e <__sflush_r+0xaa>
 8009c8a:	2b16      	cmp	r3, #22
 8009c8c:	d11d      	bne.n	8009cca <__sflush_r+0xe6>
 8009c8e:	602f      	str	r7, [r5, #0]
 8009c90:	2000      	movs	r0, #0
 8009c92:	e021      	b.n	8009cd8 <__sflush_r+0xf4>
 8009c94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c98:	b21b      	sxth	r3, r3
 8009c9a:	e01a      	b.n	8009cd2 <__sflush_r+0xee>
 8009c9c:	690f      	ldr	r7, [r1, #16]
 8009c9e:	2f00      	cmp	r7, #0
 8009ca0:	d0f6      	beq.n	8009c90 <__sflush_r+0xac>
 8009ca2:	0793      	lsls	r3, r2, #30
 8009ca4:	bf18      	it	ne
 8009ca6:	2300      	movne	r3, #0
 8009ca8:	680e      	ldr	r6, [r1, #0]
 8009caa:	bf08      	it	eq
 8009cac:	694b      	ldreq	r3, [r1, #20]
 8009cae:	1bf6      	subs	r6, r6, r7
 8009cb0:	600f      	str	r7, [r1, #0]
 8009cb2:	608b      	str	r3, [r1, #8]
 8009cb4:	2e00      	cmp	r6, #0
 8009cb6:	ddeb      	ble.n	8009c90 <__sflush_r+0xac>
 8009cb8:	4633      	mov	r3, r6
 8009cba:	463a      	mov	r2, r7
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	6a21      	ldr	r1, [r4, #32]
 8009cc0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009cc4:	47e0      	blx	ip
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	dc07      	bgt.n	8009cda <__sflush_r+0xf6>
 8009cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd6:	81a3      	strh	r3, [r4, #12]
 8009cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cda:	4407      	add	r7, r0
 8009cdc:	1a36      	subs	r6, r6, r0
 8009cde:	e7e9      	b.n	8009cb4 <__sflush_r+0xd0>
 8009ce0:	dfbffffe 	.word	0xdfbffffe

08009ce4 <_fflush_r>:
 8009ce4:	b538      	push	{r3, r4, r5, lr}
 8009ce6:	690b      	ldr	r3, [r1, #16]
 8009ce8:	4605      	mov	r5, r0
 8009cea:	460c      	mov	r4, r1
 8009cec:	b913      	cbnz	r3, 8009cf4 <_fflush_r+0x10>
 8009cee:	2500      	movs	r5, #0
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	bd38      	pop	{r3, r4, r5, pc}
 8009cf4:	b118      	cbz	r0, 8009cfe <_fflush_r+0x1a>
 8009cf6:	6a03      	ldr	r3, [r0, #32]
 8009cf8:	b90b      	cbnz	r3, 8009cfe <_fflush_r+0x1a>
 8009cfa:	f7fd fa21 	bl	8007140 <__sinit>
 8009cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d0f3      	beq.n	8009cee <_fflush_r+0xa>
 8009d06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009d08:	07d0      	lsls	r0, r2, #31
 8009d0a:	d404      	bmi.n	8009d16 <_fflush_r+0x32>
 8009d0c:	0599      	lsls	r1, r3, #22
 8009d0e:	d402      	bmi.n	8009d16 <_fflush_r+0x32>
 8009d10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d12:	f7fd fb7a 	bl	800740a <__retarget_lock_acquire_recursive>
 8009d16:	4628      	mov	r0, r5
 8009d18:	4621      	mov	r1, r4
 8009d1a:	f7ff ff63 	bl	8009be4 <__sflush_r>
 8009d1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d20:	4605      	mov	r5, r0
 8009d22:	07da      	lsls	r2, r3, #31
 8009d24:	d4e4      	bmi.n	8009cf0 <_fflush_r+0xc>
 8009d26:	89a3      	ldrh	r3, [r4, #12]
 8009d28:	059b      	lsls	r3, r3, #22
 8009d2a:	d4e1      	bmi.n	8009cf0 <_fflush_r+0xc>
 8009d2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d2e:	f7fd fb6d 	bl	800740c <__retarget_lock_release_recursive>
 8009d32:	e7dd      	b.n	8009cf0 <_fflush_r+0xc>

08009d34 <strncmp>:
 8009d34:	b510      	push	{r4, lr}
 8009d36:	b16a      	cbz	r2, 8009d54 <strncmp+0x20>
 8009d38:	3901      	subs	r1, #1
 8009d3a:	1884      	adds	r4, r0, r2
 8009d3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d40:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d103      	bne.n	8009d50 <strncmp+0x1c>
 8009d48:	42a0      	cmp	r0, r4
 8009d4a:	d001      	beq.n	8009d50 <strncmp+0x1c>
 8009d4c:	2a00      	cmp	r2, #0
 8009d4e:	d1f5      	bne.n	8009d3c <strncmp+0x8>
 8009d50:	1ad0      	subs	r0, r2, r3
 8009d52:	bd10      	pop	{r4, pc}
 8009d54:	4610      	mov	r0, r2
 8009d56:	e7fc      	b.n	8009d52 <strncmp+0x1e>

08009d58 <_sbrk_r>:
 8009d58:	b538      	push	{r3, r4, r5, lr}
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	4d05      	ldr	r5, [pc, #20]	@ (8009d74 <_sbrk_r+0x1c>)
 8009d5e:	4604      	mov	r4, r0
 8009d60:	4608      	mov	r0, r1
 8009d62:	602b      	str	r3, [r5, #0]
 8009d64:	f7f9 f87a 	bl	8002e5c <_sbrk>
 8009d68:	1c43      	adds	r3, r0, #1
 8009d6a:	d102      	bne.n	8009d72 <_sbrk_r+0x1a>
 8009d6c:	682b      	ldr	r3, [r5, #0]
 8009d6e:	b103      	cbz	r3, 8009d72 <_sbrk_r+0x1a>
 8009d70:	6023      	str	r3, [r4, #0]
 8009d72:	bd38      	pop	{r3, r4, r5, pc}
 8009d74:	200008b8 	.word	0x200008b8

08009d78 <nan>:
 8009d78:	2000      	movs	r0, #0
 8009d7a:	4901      	ldr	r1, [pc, #4]	@ (8009d80 <nan+0x8>)
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	7ff80000 	.word	0x7ff80000

08009d84 <__assert_func>:
 8009d84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d86:	4614      	mov	r4, r2
 8009d88:	461a      	mov	r2, r3
 8009d8a:	4b09      	ldr	r3, [pc, #36]	@ (8009db0 <__assert_func+0x2c>)
 8009d8c:	4605      	mov	r5, r0
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	68d8      	ldr	r0, [r3, #12]
 8009d92:	b954      	cbnz	r4, 8009daa <__assert_func+0x26>
 8009d94:	4b07      	ldr	r3, [pc, #28]	@ (8009db4 <__assert_func+0x30>)
 8009d96:	461c      	mov	r4, r3
 8009d98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d9c:	9100      	str	r1, [sp, #0]
 8009d9e:	462b      	mov	r3, r5
 8009da0:	4905      	ldr	r1, [pc, #20]	@ (8009db8 <__assert_func+0x34>)
 8009da2:	f000 fba7 	bl	800a4f4 <fiprintf>
 8009da6:	f000 fbb7 	bl	800a518 <abort>
 8009daa:	4b04      	ldr	r3, [pc, #16]	@ (8009dbc <__assert_func+0x38>)
 8009dac:	e7f4      	b.n	8009d98 <__assert_func+0x14>
 8009dae:	bf00      	nop
 8009db0:	20000020 	.word	0x20000020
 8009db4:	0800d71d 	.word	0x0800d71d
 8009db8:	0800d6ef 	.word	0x0800d6ef
 8009dbc:	0800d6e2 	.word	0x0800d6e2

08009dc0 <_calloc_r>:
 8009dc0:	b570      	push	{r4, r5, r6, lr}
 8009dc2:	fba1 5402 	umull	r5, r4, r1, r2
 8009dc6:	b93c      	cbnz	r4, 8009dd8 <_calloc_r+0x18>
 8009dc8:	4629      	mov	r1, r5
 8009dca:	f7fe fa03 	bl	80081d4 <_malloc_r>
 8009dce:	4606      	mov	r6, r0
 8009dd0:	b928      	cbnz	r0, 8009dde <_calloc_r+0x1e>
 8009dd2:	2600      	movs	r6, #0
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	bd70      	pop	{r4, r5, r6, pc}
 8009dd8:	220c      	movs	r2, #12
 8009dda:	6002      	str	r2, [r0, #0]
 8009ddc:	e7f9      	b.n	8009dd2 <_calloc_r+0x12>
 8009dde:	462a      	mov	r2, r5
 8009de0:	4621      	mov	r1, r4
 8009de2:	f7fd fa94 	bl	800730e <memset>
 8009de6:	e7f5      	b.n	8009dd4 <_calloc_r+0x14>

08009de8 <rshift>:
 8009de8:	6903      	ldr	r3, [r0, #16]
 8009dea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009dee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009df2:	f100 0414 	add.w	r4, r0, #20
 8009df6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009dfa:	dd46      	ble.n	8009e8a <rshift+0xa2>
 8009dfc:	f011 011f 	ands.w	r1, r1, #31
 8009e00:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009e04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009e08:	d10c      	bne.n	8009e24 <rshift+0x3c>
 8009e0a:	4629      	mov	r1, r5
 8009e0c:	f100 0710 	add.w	r7, r0, #16
 8009e10:	42b1      	cmp	r1, r6
 8009e12:	d335      	bcc.n	8009e80 <rshift+0x98>
 8009e14:	1a9b      	subs	r3, r3, r2
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	1eea      	subs	r2, r5, #3
 8009e1a:	4296      	cmp	r6, r2
 8009e1c:	bf38      	it	cc
 8009e1e:	2300      	movcc	r3, #0
 8009e20:	4423      	add	r3, r4
 8009e22:	e015      	b.n	8009e50 <rshift+0x68>
 8009e24:	46a1      	mov	r9, r4
 8009e26:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009e2a:	f1c1 0820 	rsb	r8, r1, #32
 8009e2e:	40cf      	lsrs	r7, r1
 8009e30:	f105 0e04 	add.w	lr, r5, #4
 8009e34:	4576      	cmp	r6, lr
 8009e36:	46f4      	mov	ip, lr
 8009e38:	d816      	bhi.n	8009e68 <rshift+0x80>
 8009e3a:	1a9a      	subs	r2, r3, r2
 8009e3c:	0092      	lsls	r2, r2, #2
 8009e3e:	3a04      	subs	r2, #4
 8009e40:	3501      	adds	r5, #1
 8009e42:	42ae      	cmp	r6, r5
 8009e44:	bf38      	it	cc
 8009e46:	2200      	movcc	r2, #0
 8009e48:	18a3      	adds	r3, r4, r2
 8009e4a:	50a7      	str	r7, [r4, r2]
 8009e4c:	b107      	cbz	r7, 8009e50 <rshift+0x68>
 8009e4e:	3304      	adds	r3, #4
 8009e50:	42a3      	cmp	r3, r4
 8009e52:	eba3 0204 	sub.w	r2, r3, r4
 8009e56:	bf08      	it	eq
 8009e58:	2300      	moveq	r3, #0
 8009e5a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009e5e:	6102      	str	r2, [r0, #16]
 8009e60:	bf08      	it	eq
 8009e62:	6143      	streq	r3, [r0, #20]
 8009e64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e68:	f8dc c000 	ldr.w	ip, [ip]
 8009e6c:	fa0c fc08 	lsl.w	ip, ip, r8
 8009e70:	ea4c 0707 	orr.w	r7, ip, r7
 8009e74:	f849 7b04 	str.w	r7, [r9], #4
 8009e78:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009e7c:	40cf      	lsrs	r7, r1
 8009e7e:	e7d9      	b.n	8009e34 <rshift+0x4c>
 8009e80:	f851 cb04 	ldr.w	ip, [r1], #4
 8009e84:	f847 cf04 	str.w	ip, [r7, #4]!
 8009e88:	e7c2      	b.n	8009e10 <rshift+0x28>
 8009e8a:	4623      	mov	r3, r4
 8009e8c:	e7e0      	b.n	8009e50 <rshift+0x68>

08009e8e <__hexdig_fun>:
 8009e8e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009e92:	2b09      	cmp	r3, #9
 8009e94:	d802      	bhi.n	8009e9c <__hexdig_fun+0xe>
 8009e96:	3820      	subs	r0, #32
 8009e98:	b2c0      	uxtb	r0, r0
 8009e9a:	4770      	bx	lr
 8009e9c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009ea0:	2b05      	cmp	r3, #5
 8009ea2:	d801      	bhi.n	8009ea8 <__hexdig_fun+0x1a>
 8009ea4:	3847      	subs	r0, #71	@ 0x47
 8009ea6:	e7f7      	b.n	8009e98 <__hexdig_fun+0xa>
 8009ea8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009eac:	2b05      	cmp	r3, #5
 8009eae:	d801      	bhi.n	8009eb4 <__hexdig_fun+0x26>
 8009eb0:	3827      	subs	r0, #39	@ 0x27
 8009eb2:	e7f1      	b.n	8009e98 <__hexdig_fun+0xa>
 8009eb4:	2000      	movs	r0, #0
 8009eb6:	4770      	bx	lr

08009eb8 <__gethex>:
 8009eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ebc:	468a      	mov	sl, r1
 8009ebe:	4690      	mov	r8, r2
 8009ec0:	b085      	sub	sp, #20
 8009ec2:	9302      	str	r3, [sp, #8]
 8009ec4:	680b      	ldr	r3, [r1, #0]
 8009ec6:	9001      	str	r0, [sp, #4]
 8009ec8:	1c9c      	adds	r4, r3, #2
 8009eca:	46a1      	mov	r9, r4
 8009ecc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009ed0:	2830      	cmp	r0, #48	@ 0x30
 8009ed2:	d0fa      	beq.n	8009eca <__gethex+0x12>
 8009ed4:	eba9 0303 	sub.w	r3, r9, r3
 8009ed8:	f1a3 0b02 	sub.w	fp, r3, #2
 8009edc:	f7ff ffd7 	bl	8009e8e <__hexdig_fun>
 8009ee0:	4605      	mov	r5, r0
 8009ee2:	2800      	cmp	r0, #0
 8009ee4:	d168      	bne.n	8009fb8 <__gethex+0x100>
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	4648      	mov	r0, r9
 8009eea:	499f      	ldr	r1, [pc, #636]	@ (800a168 <__gethex+0x2b0>)
 8009eec:	f7ff ff22 	bl	8009d34 <strncmp>
 8009ef0:	4607      	mov	r7, r0
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	d167      	bne.n	8009fc6 <__gethex+0x10e>
 8009ef6:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009efa:	4626      	mov	r6, r4
 8009efc:	f7ff ffc7 	bl	8009e8e <__hexdig_fun>
 8009f00:	2800      	cmp	r0, #0
 8009f02:	d062      	beq.n	8009fca <__gethex+0x112>
 8009f04:	4623      	mov	r3, r4
 8009f06:	7818      	ldrb	r0, [r3, #0]
 8009f08:	4699      	mov	r9, r3
 8009f0a:	2830      	cmp	r0, #48	@ 0x30
 8009f0c:	f103 0301 	add.w	r3, r3, #1
 8009f10:	d0f9      	beq.n	8009f06 <__gethex+0x4e>
 8009f12:	f7ff ffbc 	bl	8009e8e <__hexdig_fun>
 8009f16:	fab0 f580 	clz	r5, r0
 8009f1a:	f04f 0b01 	mov.w	fp, #1
 8009f1e:	096d      	lsrs	r5, r5, #5
 8009f20:	464a      	mov	r2, r9
 8009f22:	4616      	mov	r6, r2
 8009f24:	7830      	ldrb	r0, [r6, #0]
 8009f26:	3201      	adds	r2, #1
 8009f28:	f7ff ffb1 	bl	8009e8e <__hexdig_fun>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	d1f8      	bne.n	8009f22 <__gethex+0x6a>
 8009f30:	2201      	movs	r2, #1
 8009f32:	4630      	mov	r0, r6
 8009f34:	498c      	ldr	r1, [pc, #560]	@ (800a168 <__gethex+0x2b0>)
 8009f36:	f7ff fefd 	bl	8009d34 <strncmp>
 8009f3a:	2800      	cmp	r0, #0
 8009f3c:	d13f      	bne.n	8009fbe <__gethex+0x106>
 8009f3e:	b944      	cbnz	r4, 8009f52 <__gethex+0x9a>
 8009f40:	1c74      	adds	r4, r6, #1
 8009f42:	4622      	mov	r2, r4
 8009f44:	4616      	mov	r6, r2
 8009f46:	7830      	ldrb	r0, [r6, #0]
 8009f48:	3201      	adds	r2, #1
 8009f4a:	f7ff ffa0 	bl	8009e8e <__hexdig_fun>
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	d1f8      	bne.n	8009f44 <__gethex+0x8c>
 8009f52:	1ba4      	subs	r4, r4, r6
 8009f54:	00a7      	lsls	r7, r4, #2
 8009f56:	7833      	ldrb	r3, [r6, #0]
 8009f58:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009f5c:	2b50      	cmp	r3, #80	@ 0x50
 8009f5e:	d13e      	bne.n	8009fde <__gethex+0x126>
 8009f60:	7873      	ldrb	r3, [r6, #1]
 8009f62:	2b2b      	cmp	r3, #43	@ 0x2b
 8009f64:	d033      	beq.n	8009fce <__gethex+0x116>
 8009f66:	2b2d      	cmp	r3, #45	@ 0x2d
 8009f68:	d034      	beq.n	8009fd4 <__gethex+0x11c>
 8009f6a:	2400      	movs	r4, #0
 8009f6c:	1c71      	adds	r1, r6, #1
 8009f6e:	7808      	ldrb	r0, [r1, #0]
 8009f70:	f7ff ff8d 	bl	8009e8e <__hexdig_fun>
 8009f74:	1e43      	subs	r3, r0, #1
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	2b18      	cmp	r3, #24
 8009f7a:	d830      	bhi.n	8009fde <__gethex+0x126>
 8009f7c:	f1a0 0210 	sub.w	r2, r0, #16
 8009f80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009f84:	f7ff ff83 	bl	8009e8e <__hexdig_fun>
 8009f88:	f100 3cff 	add.w	ip, r0, #4294967295
 8009f8c:	fa5f fc8c 	uxtb.w	ip, ip
 8009f90:	f1bc 0f18 	cmp.w	ip, #24
 8009f94:	f04f 030a 	mov.w	r3, #10
 8009f98:	d91e      	bls.n	8009fd8 <__gethex+0x120>
 8009f9a:	b104      	cbz	r4, 8009f9e <__gethex+0xe6>
 8009f9c:	4252      	negs	r2, r2
 8009f9e:	4417      	add	r7, r2
 8009fa0:	f8ca 1000 	str.w	r1, [sl]
 8009fa4:	b1ed      	cbz	r5, 8009fe2 <__gethex+0x12a>
 8009fa6:	f1bb 0f00 	cmp.w	fp, #0
 8009faa:	bf0c      	ite	eq
 8009fac:	2506      	moveq	r5, #6
 8009fae:	2500      	movne	r5, #0
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	b005      	add	sp, #20
 8009fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb8:	2500      	movs	r5, #0
 8009fba:	462c      	mov	r4, r5
 8009fbc:	e7b0      	b.n	8009f20 <__gethex+0x68>
 8009fbe:	2c00      	cmp	r4, #0
 8009fc0:	d1c7      	bne.n	8009f52 <__gethex+0x9a>
 8009fc2:	4627      	mov	r7, r4
 8009fc4:	e7c7      	b.n	8009f56 <__gethex+0x9e>
 8009fc6:	464e      	mov	r6, r9
 8009fc8:	462f      	mov	r7, r5
 8009fca:	2501      	movs	r5, #1
 8009fcc:	e7c3      	b.n	8009f56 <__gethex+0x9e>
 8009fce:	2400      	movs	r4, #0
 8009fd0:	1cb1      	adds	r1, r6, #2
 8009fd2:	e7cc      	b.n	8009f6e <__gethex+0xb6>
 8009fd4:	2401      	movs	r4, #1
 8009fd6:	e7fb      	b.n	8009fd0 <__gethex+0x118>
 8009fd8:	fb03 0002 	mla	r0, r3, r2, r0
 8009fdc:	e7ce      	b.n	8009f7c <__gethex+0xc4>
 8009fde:	4631      	mov	r1, r6
 8009fe0:	e7de      	b.n	8009fa0 <__gethex+0xe8>
 8009fe2:	4629      	mov	r1, r5
 8009fe4:	eba6 0309 	sub.w	r3, r6, r9
 8009fe8:	3b01      	subs	r3, #1
 8009fea:	2b07      	cmp	r3, #7
 8009fec:	dc0a      	bgt.n	800a004 <__gethex+0x14c>
 8009fee:	9801      	ldr	r0, [sp, #4]
 8009ff0:	f7fe f97c 	bl	80082ec <_Balloc>
 8009ff4:	4604      	mov	r4, r0
 8009ff6:	b940      	cbnz	r0, 800a00a <__gethex+0x152>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	21e4      	movs	r1, #228	@ 0xe4
 8009ffc:	4b5b      	ldr	r3, [pc, #364]	@ (800a16c <__gethex+0x2b4>)
 8009ffe:	485c      	ldr	r0, [pc, #368]	@ (800a170 <__gethex+0x2b8>)
 800a000:	f7ff fec0 	bl	8009d84 <__assert_func>
 800a004:	3101      	adds	r1, #1
 800a006:	105b      	asrs	r3, r3, #1
 800a008:	e7ef      	b.n	8009fea <__gethex+0x132>
 800a00a:	2300      	movs	r3, #0
 800a00c:	f100 0a14 	add.w	sl, r0, #20
 800a010:	4655      	mov	r5, sl
 800a012:	469b      	mov	fp, r3
 800a014:	45b1      	cmp	r9, r6
 800a016:	d337      	bcc.n	800a088 <__gethex+0x1d0>
 800a018:	f845 bb04 	str.w	fp, [r5], #4
 800a01c:	eba5 050a 	sub.w	r5, r5, sl
 800a020:	10ad      	asrs	r5, r5, #2
 800a022:	6125      	str	r5, [r4, #16]
 800a024:	4658      	mov	r0, fp
 800a026:	f7fe fa53 	bl	80084d0 <__hi0bits>
 800a02a:	016d      	lsls	r5, r5, #5
 800a02c:	f8d8 6000 	ldr.w	r6, [r8]
 800a030:	1a2d      	subs	r5, r5, r0
 800a032:	42b5      	cmp	r5, r6
 800a034:	dd54      	ble.n	800a0e0 <__gethex+0x228>
 800a036:	1bad      	subs	r5, r5, r6
 800a038:	4629      	mov	r1, r5
 800a03a:	4620      	mov	r0, r4
 800a03c:	f7fe fddb 	bl	8008bf6 <__any_on>
 800a040:	4681      	mov	r9, r0
 800a042:	b178      	cbz	r0, 800a064 <__gethex+0x1ac>
 800a044:	f04f 0901 	mov.w	r9, #1
 800a048:	1e6b      	subs	r3, r5, #1
 800a04a:	1159      	asrs	r1, r3, #5
 800a04c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a050:	f003 021f 	and.w	r2, r3, #31
 800a054:	fa09 f202 	lsl.w	r2, r9, r2
 800a058:	420a      	tst	r2, r1
 800a05a:	d003      	beq.n	800a064 <__gethex+0x1ac>
 800a05c:	454b      	cmp	r3, r9
 800a05e:	dc36      	bgt.n	800a0ce <__gethex+0x216>
 800a060:	f04f 0902 	mov.w	r9, #2
 800a064:	4629      	mov	r1, r5
 800a066:	4620      	mov	r0, r4
 800a068:	f7ff febe 	bl	8009de8 <rshift>
 800a06c:	442f      	add	r7, r5
 800a06e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a072:	42bb      	cmp	r3, r7
 800a074:	da42      	bge.n	800a0fc <__gethex+0x244>
 800a076:	4621      	mov	r1, r4
 800a078:	9801      	ldr	r0, [sp, #4]
 800a07a:	f7fe f977 	bl	800836c <_Bfree>
 800a07e:	2300      	movs	r3, #0
 800a080:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a082:	25a3      	movs	r5, #163	@ 0xa3
 800a084:	6013      	str	r3, [r2, #0]
 800a086:	e793      	b.n	8009fb0 <__gethex+0xf8>
 800a088:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a08c:	2a2e      	cmp	r2, #46	@ 0x2e
 800a08e:	d012      	beq.n	800a0b6 <__gethex+0x1fe>
 800a090:	2b20      	cmp	r3, #32
 800a092:	d104      	bne.n	800a09e <__gethex+0x1e6>
 800a094:	f845 bb04 	str.w	fp, [r5], #4
 800a098:	f04f 0b00 	mov.w	fp, #0
 800a09c:	465b      	mov	r3, fp
 800a09e:	7830      	ldrb	r0, [r6, #0]
 800a0a0:	9303      	str	r3, [sp, #12]
 800a0a2:	f7ff fef4 	bl	8009e8e <__hexdig_fun>
 800a0a6:	9b03      	ldr	r3, [sp, #12]
 800a0a8:	f000 000f 	and.w	r0, r0, #15
 800a0ac:	4098      	lsls	r0, r3
 800a0ae:	ea4b 0b00 	orr.w	fp, fp, r0
 800a0b2:	3304      	adds	r3, #4
 800a0b4:	e7ae      	b.n	800a014 <__gethex+0x15c>
 800a0b6:	45b1      	cmp	r9, r6
 800a0b8:	d8ea      	bhi.n	800a090 <__gethex+0x1d8>
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	4630      	mov	r0, r6
 800a0be:	492a      	ldr	r1, [pc, #168]	@ (800a168 <__gethex+0x2b0>)
 800a0c0:	9303      	str	r3, [sp, #12]
 800a0c2:	f7ff fe37 	bl	8009d34 <strncmp>
 800a0c6:	9b03      	ldr	r3, [sp, #12]
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	d1e1      	bne.n	800a090 <__gethex+0x1d8>
 800a0cc:	e7a2      	b.n	800a014 <__gethex+0x15c>
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	1ea9      	subs	r1, r5, #2
 800a0d2:	f7fe fd90 	bl	8008bf6 <__any_on>
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	d0c2      	beq.n	800a060 <__gethex+0x1a8>
 800a0da:	f04f 0903 	mov.w	r9, #3
 800a0de:	e7c1      	b.n	800a064 <__gethex+0x1ac>
 800a0e0:	da09      	bge.n	800a0f6 <__gethex+0x23e>
 800a0e2:	1b75      	subs	r5, r6, r5
 800a0e4:	4621      	mov	r1, r4
 800a0e6:	462a      	mov	r2, r5
 800a0e8:	9801      	ldr	r0, [sp, #4]
 800a0ea:	f7fe fb55 	bl	8008798 <__lshift>
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	1b7f      	subs	r7, r7, r5
 800a0f2:	f100 0a14 	add.w	sl, r0, #20
 800a0f6:	f04f 0900 	mov.w	r9, #0
 800a0fa:	e7b8      	b.n	800a06e <__gethex+0x1b6>
 800a0fc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a100:	42bd      	cmp	r5, r7
 800a102:	dd6f      	ble.n	800a1e4 <__gethex+0x32c>
 800a104:	1bed      	subs	r5, r5, r7
 800a106:	42ae      	cmp	r6, r5
 800a108:	dc34      	bgt.n	800a174 <__gethex+0x2bc>
 800a10a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a10e:	2b02      	cmp	r3, #2
 800a110:	d022      	beq.n	800a158 <__gethex+0x2a0>
 800a112:	2b03      	cmp	r3, #3
 800a114:	d024      	beq.n	800a160 <__gethex+0x2a8>
 800a116:	2b01      	cmp	r3, #1
 800a118:	d115      	bne.n	800a146 <__gethex+0x28e>
 800a11a:	42ae      	cmp	r6, r5
 800a11c:	d113      	bne.n	800a146 <__gethex+0x28e>
 800a11e:	2e01      	cmp	r6, #1
 800a120:	d10b      	bne.n	800a13a <__gethex+0x282>
 800a122:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a126:	9a02      	ldr	r2, [sp, #8]
 800a128:	2562      	movs	r5, #98	@ 0x62
 800a12a:	6013      	str	r3, [r2, #0]
 800a12c:	2301      	movs	r3, #1
 800a12e:	6123      	str	r3, [r4, #16]
 800a130:	f8ca 3000 	str.w	r3, [sl]
 800a134:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a136:	601c      	str	r4, [r3, #0]
 800a138:	e73a      	b.n	8009fb0 <__gethex+0xf8>
 800a13a:	4620      	mov	r0, r4
 800a13c:	1e71      	subs	r1, r6, #1
 800a13e:	f7fe fd5a 	bl	8008bf6 <__any_on>
 800a142:	2800      	cmp	r0, #0
 800a144:	d1ed      	bne.n	800a122 <__gethex+0x26a>
 800a146:	4621      	mov	r1, r4
 800a148:	9801      	ldr	r0, [sp, #4]
 800a14a:	f7fe f90f 	bl	800836c <_Bfree>
 800a14e:	2300      	movs	r3, #0
 800a150:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a152:	2550      	movs	r5, #80	@ 0x50
 800a154:	6013      	str	r3, [r2, #0]
 800a156:	e72b      	b.n	8009fb0 <__gethex+0xf8>
 800a158:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d1f3      	bne.n	800a146 <__gethex+0x28e>
 800a15e:	e7e0      	b.n	800a122 <__gethex+0x26a>
 800a160:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1dd      	bne.n	800a122 <__gethex+0x26a>
 800a166:	e7ee      	b.n	800a146 <__gethex+0x28e>
 800a168:	0800d570 	.word	0x0800d570
 800a16c:	0800d403 	.word	0x0800d403
 800a170:	0800d71e 	.word	0x0800d71e
 800a174:	1e6f      	subs	r7, r5, #1
 800a176:	f1b9 0f00 	cmp.w	r9, #0
 800a17a:	d130      	bne.n	800a1de <__gethex+0x326>
 800a17c:	b127      	cbz	r7, 800a188 <__gethex+0x2d0>
 800a17e:	4639      	mov	r1, r7
 800a180:	4620      	mov	r0, r4
 800a182:	f7fe fd38 	bl	8008bf6 <__any_on>
 800a186:	4681      	mov	r9, r0
 800a188:	2301      	movs	r3, #1
 800a18a:	4629      	mov	r1, r5
 800a18c:	1b76      	subs	r6, r6, r5
 800a18e:	2502      	movs	r5, #2
 800a190:	117a      	asrs	r2, r7, #5
 800a192:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a196:	f007 071f 	and.w	r7, r7, #31
 800a19a:	40bb      	lsls	r3, r7
 800a19c:	4213      	tst	r3, r2
 800a19e:	4620      	mov	r0, r4
 800a1a0:	bf18      	it	ne
 800a1a2:	f049 0902 	orrne.w	r9, r9, #2
 800a1a6:	f7ff fe1f 	bl	8009de8 <rshift>
 800a1aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a1ae:	f1b9 0f00 	cmp.w	r9, #0
 800a1b2:	d047      	beq.n	800a244 <__gethex+0x38c>
 800a1b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	d015      	beq.n	800a1e8 <__gethex+0x330>
 800a1bc:	2b03      	cmp	r3, #3
 800a1be:	d017      	beq.n	800a1f0 <__gethex+0x338>
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d109      	bne.n	800a1d8 <__gethex+0x320>
 800a1c4:	f019 0f02 	tst.w	r9, #2
 800a1c8:	d006      	beq.n	800a1d8 <__gethex+0x320>
 800a1ca:	f8da 3000 	ldr.w	r3, [sl]
 800a1ce:	ea49 0903 	orr.w	r9, r9, r3
 800a1d2:	f019 0f01 	tst.w	r9, #1
 800a1d6:	d10e      	bne.n	800a1f6 <__gethex+0x33e>
 800a1d8:	f045 0510 	orr.w	r5, r5, #16
 800a1dc:	e032      	b.n	800a244 <__gethex+0x38c>
 800a1de:	f04f 0901 	mov.w	r9, #1
 800a1e2:	e7d1      	b.n	800a188 <__gethex+0x2d0>
 800a1e4:	2501      	movs	r5, #1
 800a1e6:	e7e2      	b.n	800a1ae <__gethex+0x2f6>
 800a1e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1ea:	f1c3 0301 	rsb	r3, r3, #1
 800a1ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a1f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d0f0      	beq.n	800a1d8 <__gethex+0x320>
 800a1f6:	f04f 0c00 	mov.w	ip, #0
 800a1fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a1fe:	f104 0314 	add.w	r3, r4, #20
 800a202:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a206:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a20a:	4618      	mov	r0, r3
 800a20c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a210:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a214:	d01b      	beq.n	800a24e <__gethex+0x396>
 800a216:	3201      	adds	r2, #1
 800a218:	6002      	str	r2, [r0, #0]
 800a21a:	2d02      	cmp	r5, #2
 800a21c:	f104 0314 	add.w	r3, r4, #20
 800a220:	d13c      	bne.n	800a29c <__gethex+0x3e4>
 800a222:	f8d8 2000 	ldr.w	r2, [r8]
 800a226:	3a01      	subs	r2, #1
 800a228:	42b2      	cmp	r2, r6
 800a22a:	d109      	bne.n	800a240 <__gethex+0x388>
 800a22c:	2201      	movs	r2, #1
 800a22e:	1171      	asrs	r1, r6, #5
 800a230:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a234:	f006 061f 	and.w	r6, r6, #31
 800a238:	fa02 f606 	lsl.w	r6, r2, r6
 800a23c:	421e      	tst	r6, r3
 800a23e:	d13a      	bne.n	800a2b6 <__gethex+0x3fe>
 800a240:	f045 0520 	orr.w	r5, r5, #32
 800a244:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a246:	601c      	str	r4, [r3, #0]
 800a248:	9b02      	ldr	r3, [sp, #8]
 800a24a:	601f      	str	r7, [r3, #0]
 800a24c:	e6b0      	b.n	8009fb0 <__gethex+0xf8>
 800a24e:	4299      	cmp	r1, r3
 800a250:	f843 cc04 	str.w	ip, [r3, #-4]
 800a254:	d8d9      	bhi.n	800a20a <__gethex+0x352>
 800a256:	68a3      	ldr	r3, [r4, #8]
 800a258:	459b      	cmp	fp, r3
 800a25a:	db17      	blt.n	800a28c <__gethex+0x3d4>
 800a25c:	6861      	ldr	r1, [r4, #4]
 800a25e:	9801      	ldr	r0, [sp, #4]
 800a260:	3101      	adds	r1, #1
 800a262:	f7fe f843 	bl	80082ec <_Balloc>
 800a266:	4681      	mov	r9, r0
 800a268:	b918      	cbnz	r0, 800a272 <__gethex+0x3ba>
 800a26a:	4602      	mov	r2, r0
 800a26c:	2184      	movs	r1, #132	@ 0x84
 800a26e:	4b19      	ldr	r3, [pc, #100]	@ (800a2d4 <__gethex+0x41c>)
 800a270:	e6c5      	b.n	8009ffe <__gethex+0x146>
 800a272:	6922      	ldr	r2, [r4, #16]
 800a274:	f104 010c 	add.w	r1, r4, #12
 800a278:	3202      	adds	r2, #2
 800a27a:	0092      	lsls	r2, r2, #2
 800a27c:	300c      	adds	r0, #12
 800a27e:	f7fd f8d4 	bl	800742a <memcpy>
 800a282:	4621      	mov	r1, r4
 800a284:	9801      	ldr	r0, [sp, #4]
 800a286:	f7fe f871 	bl	800836c <_Bfree>
 800a28a:	464c      	mov	r4, r9
 800a28c:	6923      	ldr	r3, [r4, #16]
 800a28e:	1c5a      	adds	r2, r3, #1
 800a290:	6122      	str	r2, [r4, #16]
 800a292:	2201      	movs	r2, #1
 800a294:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a298:	615a      	str	r2, [r3, #20]
 800a29a:	e7be      	b.n	800a21a <__gethex+0x362>
 800a29c:	6922      	ldr	r2, [r4, #16]
 800a29e:	455a      	cmp	r2, fp
 800a2a0:	dd0b      	ble.n	800a2ba <__gethex+0x402>
 800a2a2:	2101      	movs	r1, #1
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	f7ff fd9f 	bl	8009de8 <rshift>
 800a2aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a2ae:	3701      	adds	r7, #1
 800a2b0:	42bb      	cmp	r3, r7
 800a2b2:	f6ff aee0 	blt.w	800a076 <__gethex+0x1be>
 800a2b6:	2501      	movs	r5, #1
 800a2b8:	e7c2      	b.n	800a240 <__gethex+0x388>
 800a2ba:	f016 061f 	ands.w	r6, r6, #31
 800a2be:	d0fa      	beq.n	800a2b6 <__gethex+0x3fe>
 800a2c0:	4453      	add	r3, sl
 800a2c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a2c6:	f7fe f903 	bl	80084d0 <__hi0bits>
 800a2ca:	f1c6 0620 	rsb	r6, r6, #32
 800a2ce:	42b0      	cmp	r0, r6
 800a2d0:	dbe7      	blt.n	800a2a2 <__gethex+0x3ea>
 800a2d2:	e7f0      	b.n	800a2b6 <__gethex+0x3fe>
 800a2d4:	0800d403 	.word	0x0800d403

0800a2d8 <L_shift>:
 800a2d8:	f1c2 0208 	rsb	r2, r2, #8
 800a2dc:	0092      	lsls	r2, r2, #2
 800a2de:	b570      	push	{r4, r5, r6, lr}
 800a2e0:	f1c2 0620 	rsb	r6, r2, #32
 800a2e4:	6843      	ldr	r3, [r0, #4]
 800a2e6:	6804      	ldr	r4, [r0, #0]
 800a2e8:	fa03 f506 	lsl.w	r5, r3, r6
 800a2ec:	432c      	orrs	r4, r5
 800a2ee:	40d3      	lsrs	r3, r2
 800a2f0:	6004      	str	r4, [r0, #0]
 800a2f2:	f840 3f04 	str.w	r3, [r0, #4]!
 800a2f6:	4288      	cmp	r0, r1
 800a2f8:	d3f4      	bcc.n	800a2e4 <L_shift+0xc>
 800a2fa:	bd70      	pop	{r4, r5, r6, pc}

0800a2fc <__match>:
 800a2fc:	b530      	push	{r4, r5, lr}
 800a2fe:	6803      	ldr	r3, [r0, #0]
 800a300:	3301      	adds	r3, #1
 800a302:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a306:	b914      	cbnz	r4, 800a30e <__match+0x12>
 800a308:	6003      	str	r3, [r0, #0]
 800a30a:	2001      	movs	r0, #1
 800a30c:	bd30      	pop	{r4, r5, pc}
 800a30e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a312:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a316:	2d19      	cmp	r5, #25
 800a318:	bf98      	it	ls
 800a31a:	3220      	addls	r2, #32
 800a31c:	42a2      	cmp	r2, r4
 800a31e:	d0f0      	beq.n	800a302 <__match+0x6>
 800a320:	2000      	movs	r0, #0
 800a322:	e7f3      	b.n	800a30c <__match+0x10>

0800a324 <__hexnan>:
 800a324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a328:	2500      	movs	r5, #0
 800a32a:	680b      	ldr	r3, [r1, #0]
 800a32c:	4682      	mov	sl, r0
 800a32e:	115e      	asrs	r6, r3, #5
 800a330:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a334:	f013 031f 	ands.w	r3, r3, #31
 800a338:	bf18      	it	ne
 800a33a:	3604      	addne	r6, #4
 800a33c:	1f37      	subs	r7, r6, #4
 800a33e:	4690      	mov	r8, r2
 800a340:	46b9      	mov	r9, r7
 800a342:	463c      	mov	r4, r7
 800a344:	46ab      	mov	fp, r5
 800a346:	b087      	sub	sp, #28
 800a348:	6801      	ldr	r1, [r0, #0]
 800a34a:	9301      	str	r3, [sp, #4]
 800a34c:	f846 5c04 	str.w	r5, [r6, #-4]
 800a350:	9502      	str	r5, [sp, #8]
 800a352:	784a      	ldrb	r2, [r1, #1]
 800a354:	1c4b      	adds	r3, r1, #1
 800a356:	9303      	str	r3, [sp, #12]
 800a358:	b342      	cbz	r2, 800a3ac <__hexnan+0x88>
 800a35a:	4610      	mov	r0, r2
 800a35c:	9105      	str	r1, [sp, #20]
 800a35e:	9204      	str	r2, [sp, #16]
 800a360:	f7ff fd95 	bl	8009e8e <__hexdig_fun>
 800a364:	2800      	cmp	r0, #0
 800a366:	d151      	bne.n	800a40c <__hexnan+0xe8>
 800a368:	9a04      	ldr	r2, [sp, #16]
 800a36a:	9905      	ldr	r1, [sp, #20]
 800a36c:	2a20      	cmp	r2, #32
 800a36e:	d818      	bhi.n	800a3a2 <__hexnan+0x7e>
 800a370:	9b02      	ldr	r3, [sp, #8]
 800a372:	459b      	cmp	fp, r3
 800a374:	dd13      	ble.n	800a39e <__hexnan+0x7a>
 800a376:	454c      	cmp	r4, r9
 800a378:	d206      	bcs.n	800a388 <__hexnan+0x64>
 800a37a:	2d07      	cmp	r5, #7
 800a37c:	dc04      	bgt.n	800a388 <__hexnan+0x64>
 800a37e:	462a      	mov	r2, r5
 800a380:	4649      	mov	r1, r9
 800a382:	4620      	mov	r0, r4
 800a384:	f7ff ffa8 	bl	800a2d8 <L_shift>
 800a388:	4544      	cmp	r4, r8
 800a38a:	d952      	bls.n	800a432 <__hexnan+0x10e>
 800a38c:	2300      	movs	r3, #0
 800a38e:	f1a4 0904 	sub.w	r9, r4, #4
 800a392:	f844 3c04 	str.w	r3, [r4, #-4]
 800a396:	461d      	mov	r5, r3
 800a398:	464c      	mov	r4, r9
 800a39a:	f8cd b008 	str.w	fp, [sp, #8]
 800a39e:	9903      	ldr	r1, [sp, #12]
 800a3a0:	e7d7      	b.n	800a352 <__hexnan+0x2e>
 800a3a2:	2a29      	cmp	r2, #41	@ 0x29
 800a3a4:	d157      	bne.n	800a456 <__hexnan+0x132>
 800a3a6:	3102      	adds	r1, #2
 800a3a8:	f8ca 1000 	str.w	r1, [sl]
 800a3ac:	f1bb 0f00 	cmp.w	fp, #0
 800a3b0:	d051      	beq.n	800a456 <__hexnan+0x132>
 800a3b2:	454c      	cmp	r4, r9
 800a3b4:	d206      	bcs.n	800a3c4 <__hexnan+0xa0>
 800a3b6:	2d07      	cmp	r5, #7
 800a3b8:	dc04      	bgt.n	800a3c4 <__hexnan+0xa0>
 800a3ba:	462a      	mov	r2, r5
 800a3bc:	4649      	mov	r1, r9
 800a3be:	4620      	mov	r0, r4
 800a3c0:	f7ff ff8a 	bl	800a2d8 <L_shift>
 800a3c4:	4544      	cmp	r4, r8
 800a3c6:	d936      	bls.n	800a436 <__hexnan+0x112>
 800a3c8:	4623      	mov	r3, r4
 800a3ca:	f1a8 0204 	sub.w	r2, r8, #4
 800a3ce:	f853 1b04 	ldr.w	r1, [r3], #4
 800a3d2:	429f      	cmp	r7, r3
 800a3d4:	f842 1f04 	str.w	r1, [r2, #4]!
 800a3d8:	d2f9      	bcs.n	800a3ce <__hexnan+0xaa>
 800a3da:	1b3b      	subs	r3, r7, r4
 800a3dc:	f023 0303 	bic.w	r3, r3, #3
 800a3e0:	3304      	adds	r3, #4
 800a3e2:	3401      	adds	r4, #1
 800a3e4:	3e03      	subs	r6, #3
 800a3e6:	42b4      	cmp	r4, r6
 800a3e8:	bf88      	it	hi
 800a3ea:	2304      	movhi	r3, #4
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	4443      	add	r3, r8
 800a3f0:	f843 2b04 	str.w	r2, [r3], #4
 800a3f4:	429f      	cmp	r7, r3
 800a3f6:	d2fb      	bcs.n	800a3f0 <__hexnan+0xcc>
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	b91b      	cbnz	r3, 800a404 <__hexnan+0xe0>
 800a3fc:	4547      	cmp	r7, r8
 800a3fe:	d128      	bne.n	800a452 <__hexnan+0x12e>
 800a400:	2301      	movs	r3, #1
 800a402:	603b      	str	r3, [r7, #0]
 800a404:	2005      	movs	r0, #5
 800a406:	b007      	add	sp, #28
 800a408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a40c:	3501      	adds	r5, #1
 800a40e:	2d08      	cmp	r5, #8
 800a410:	f10b 0b01 	add.w	fp, fp, #1
 800a414:	dd06      	ble.n	800a424 <__hexnan+0x100>
 800a416:	4544      	cmp	r4, r8
 800a418:	d9c1      	bls.n	800a39e <__hexnan+0x7a>
 800a41a:	2300      	movs	r3, #0
 800a41c:	2501      	movs	r5, #1
 800a41e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a422:	3c04      	subs	r4, #4
 800a424:	6822      	ldr	r2, [r4, #0]
 800a426:	f000 000f 	and.w	r0, r0, #15
 800a42a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a42e:	6020      	str	r0, [r4, #0]
 800a430:	e7b5      	b.n	800a39e <__hexnan+0x7a>
 800a432:	2508      	movs	r5, #8
 800a434:	e7b3      	b.n	800a39e <__hexnan+0x7a>
 800a436:	9b01      	ldr	r3, [sp, #4]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d0dd      	beq.n	800a3f8 <__hexnan+0xd4>
 800a43c:	f04f 32ff 	mov.w	r2, #4294967295
 800a440:	f1c3 0320 	rsb	r3, r3, #32
 800a444:	40da      	lsrs	r2, r3
 800a446:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a44a:	4013      	ands	r3, r2
 800a44c:	f846 3c04 	str.w	r3, [r6, #-4]
 800a450:	e7d2      	b.n	800a3f8 <__hexnan+0xd4>
 800a452:	3f04      	subs	r7, #4
 800a454:	e7d0      	b.n	800a3f8 <__hexnan+0xd4>
 800a456:	2004      	movs	r0, #4
 800a458:	e7d5      	b.n	800a406 <__hexnan+0xe2>

0800a45a <__ascii_mbtowc>:
 800a45a:	b082      	sub	sp, #8
 800a45c:	b901      	cbnz	r1, 800a460 <__ascii_mbtowc+0x6>
 800a45e:	a901      	add	r1, sp, #4
 800a460:	b142      	cbz	r2, 800a474 <__ascii_mbtowc+0x1a>
 800a462:	b14b      	cbz	r3, 800a478 <__ascii_mbtowc+0x1e>
 800a464:	7813      	ldrb	r3, [r2, #0]
 800a466:	600b      	str	r3, [r1, #0]
 800a468:	7812      	ldrb	r2, [r2, #0]
 800a46a:	1e10      	subs	r0, r2, #0
 800a46c:	bf18      	it	ne
 800a46e:	2001      	movne	r0, #1
 800a470:	b002      	add	sp, #8
 800a472:	4770      	bx	lr
 800a474:	4610      	mov	r0, r2
 800a476:	e7fb      	b.n	800a470 <__ascii_mbtowc+0x16>
 800a478:	f06f 0001 	mvn.w	r0, #1
 800a47c:	e7f8      	b.n	800a470 <__ascii_mbtowc+0x16>

0800a47e <_realloc_r>:
 800a47e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a482:	4680      	mov	r8, r0
 800a484:	4615      	mov	r5, r2
 800a486:	460c      	mov	r4, r1
 800a488:	b921      	cbnz	r1, 800a494 <_realloc_r+0x16>
 800a48a:	4611      	mov	r1, r2
 800a48c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a490:	f7fd bea0 	b.w	80081d4 <_malloc_r>
 800a494:	b92a      	cbnz	r2, 800a4a2 <_realloc_r+0x24>
 800a496:	f7fd fe2b 	bl	80080f0 <_free_r>
 800a49a:	2400      	movs	r4, #0
 800a49c:	4620      	mov	r0, r4
 800a49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4a2:	f000 f840 	bl	800a526 <_malloc_usable_size_r>
 800a4a6:	4285      	cmp	r5, r0
 800a4a8:	4606      	mov	r6, r0
 800a4aa:	d802      	bhi.n	800a4b2 <_realloc_r+0x34>
 800a4ac:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a4b0:	d8f4      	bhi.n	800a49c <_realloc_r+0x1e>
 800a4b2:	4629      	mov	r1, r5
 800a4b4:	4640      	mov	r0, r8
 800a4b6:	f7fd fe8d 	bl	80081d4 <_malloc_r>
 800a4ba:	4607      	mov	r7, r0
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	d0ec      	beq.n	800a49a <_realloc_r+0x1c>
 800a4c0:	42b5      	cmp	r5, r6
 800a4c2:	462a      	mov	r2, r5
 800a4c4:	4621      	mov	r1, r4
 800a4c6:	bf28      	it	cs
 800a4c8:	4632      	movcs	r2, r6
 800a4ca:	f7fc ffae 	bl	800742a <memcpy>
 800a4ce:	4621      	mov	r1, r4
 800a4d0:	4640      	mov	r0, r8
 800a4d2:	f7fd fe0d 	bl	80080f0 <_free_r>
 800a4d6:	463c      	mov	r4, r7
 800a4d8:	e7e0      	b.n	800a49c <_realloc_r+0x1e>

0800a4da <__ascii_wctomb>:
 800a4da:	4603      	mov	r3, r0
 800a4dc:	4608      	mov	r0, r1
 800a4de:	b141      	cbz	r1, 800a4f2 <__ascii_wctomb+0x18>
 800a4e0:	2aff      	cmp	r2, #255	@ 0xff
 800a4e2:	d904      	bls.n	800a4ee <__ascii_wctomb+0x14>
 800a4e4:	228a      	movs	r2, #138	@ 0x8a
 800a4e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ea:	601a      	str	r2, [r3, #0]
 800a4ec:	4770      	bx	lr
 800a4ee:	2001      	movs	r0, #1
 800a4f0:	700a      	strb	r2, [r1, #0]
 800a4f2:	4770      	bx	lr

0800a4f4 <fiprintf>:
 800a4f4:	b40e      	push	{r1, r2, r3}
 800a4f6:	b503      	push	{r0, r1, lr}
 800a4f8:	4601      	mov	r1, r0
 800a4fa:	ab03      	add	r3, sp, #12
 800a4fc:	4805      	ldr	r0, [pc, #20]	@ (800a514 <fiprintf+0x20>)
 800a4fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a502:	6800      	ldr	r0, [r0, #0]
 800a504:	9301      	str	r3, [sp, #4]
 800a506:	f000 f83d 	bl	800a584 <_vfiprintf_r>
 800a50a:	b002      	add	sp, #8
 800a50c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a510:	b003      	add	sp, #12
 800a512:	4770      	bx	lr
 800a514:	20000020 	.word	0x20000020

0800a518 <abort>:
 800a518:	2006      	movs	r0, #6
 800a51a:	b508      	push	{r3, lr}
 800a51c:	f000 fa06 	bl	800a92c <raise>
 800a520:	2001      	movs	r0, #1
 800a522:	f7f8 fc26 	bl	8002d72 <_exit>

0800a526 <_malloc_usable_size_r>:
 800a526:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a52a:	1f18      	subs	r0, r3, #4
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	bfbc      	itt	lt
 800a530:	580b      	ldrlt	r3, [r1, r0]
 800a532:	18c0      	addlt	r0, r0, r3
 800a534:	4770      	bx	lr

0800a536 <__sfputc_r>:
 800a536:	6893      	ldr	r3, [r2, #8]
 800a538:	b410      	push	{r4}
 800a53a:	3b01      	subs	r3, #1
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	6093      	str	r3, [r2, #8]
 800a540:	da07      	bge.n	800a552 <__sfputc_r+0x1c>
 800a542:	6994      	ldr	r4, [r2, #24]
 800a544:	42a3      	cmp	r3, r4
 800a546:	db01      	blt.n	800a54c <__sfputc_r+0x16>
 800a548:	290a      	cmp	r1, #10
 800a54a:	d102      	bne.n	800a552 <__sfputc_r+0x1c>
 800a54c:	bc10      	pop	{r4}
 800a54e:	f000 b931 	b.w	800a7b4 <__swbuf_r>
 800a552:	6813      	ldr	r3, [r2, #0]
 800a554:	1c58      	adds	r0, r3, #1
 800a556:	6010      	str	r0, [r2, #0]
 800a558:	7019      	strb	r1, [r3, #0]
 800a55a:	4608      	mov	r0, r1
 800a55c:	bc10      	pop	{r4}
 800a55e:	4770      	bx	lr

0800a560 <__sfputs_r>:
 800a560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a562:	4606      	mov	r6, r0
 800a564:	460f      	mov	r7, r1
 800a566:	4614      	mov	r4, r2
 800a568:	18d5      	adds	r5, r2, r3
 800a56a:	42ac      	cmp	r4, r5
 800a56c:	d101      	bne.n	800a572 <__sfputs_r+0x12>
 800a56e:	2000      	movs	r0, #0
 800a570:	e007      	b.n	800a582 <__sfputs_r+0x22>
 800a572:	463a      	mov	r2, r7
 800a574:	4630      	mov	r0, r6
 800a576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a57a:	f7ff ffdc 	bl	800a536 <__sfputc_r>
 800a57e:	1c43      	adds	r3, r0, #1
 800a580:	d1f3      	bne.n	800a56a <__sfputs_r+0xa>
 800a582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a584 <_vfiprintf_r>:
 800a584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a588:	460d      	mov	r5, r1
 800a58a:	4614      	mov	r4, r2
 800a58c:	4698      	mov	r8, r3
 800a58e:	4606      	mov	r6, r0
 800a590:	b09d      	sub	sp, #116	@ 0x74
 800a592:	b118      	cbz	r0, 800a59c <_vfiprintf_r+0x18>
 800a594:	6a03      	ldr	r3, [r0, #32]
 800a596:	b90b      	cbnz	r3, 800a59c <_vfiprintf_r+0x18>
 800a598:	f7fc fdd2 	bl	8007140 <__sinit>
 800a59c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a59e:	07d9      	lsls	r1, r3, #31
 800a5a0:	d405      	bmi.n	800a5ae <_vfiprintf_r+0x2a>
 800a5a2:	89ab      	ldrh	r3, [r5, #12]
 800a5a4:	059a      	lsls	r2, r3, #22
 800a5a6:	d402      	bmi.n	800a5ae <_vfiprintf_r+0x2a>
 800a5a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5aa:	f7fc ff2e 	bl	800740a <__retarget_lock_acquire_recursive>
 800a5ae:	89ab      	ldrh	r3, [r5, #12]
 800a5b0:	071b      	lsls	r3, r3, #28
 800a5b2:	d501      	bpl.n	800a5b8 <_vfiprintf_r+0x34>
 800a5b4:	692b      	ldr	r3, [r5, #16]
 800a5b6:	b99b      	cbnz	r3, 800a5e0 <_vfiprintf_r+0x5c>
 800a5b8:	4629      	mov	r1, r5
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	f000 f938 	bl	800a830 <__swsetup_r>
 800a5c0:	b170      	cbz	r0, 800a5e0 <_vfiprintf_r+0x5c>
 800a5c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5c4:	07dc      	lsls	r4, r3, #31
 800a5c6:	d504      	bpl.n	800a5d2 <_vfiprintf_r+0x4e>
 800a5c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5cc:	b01d      	add	sp, #116	@ 0x74
 800a5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d2:	89ab      	ldrh	r3, [r5, #12]
 800a5d4:	0598      	lsls	r0, r3, #22
 800a5d6:	d4f7      	bmi.n	800a5c8 <_vfiprintf_r+0x44>
 800a5d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5da:	f7fc ff17 	bl	800740c <__retarget_lock_release_recursive>
 800a5de:	e7f3      	b.n	800a5c8 <_vfiprintf_r+0x44>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5e4:	2320      	movs	r3, #32
 800a5e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a5ea:	2330      	movs	r3, #48	@ 0x30
 800a5ec:	f04f 0901 	mov.w	r9, #1
 800a5f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5f4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a7a0 <_vfiprintf_r+0x21c>
 800a5f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a5fc:	4623      	mov	r3, r4
 800a5fe:	469a      	mov	sl, r3
 800a600:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a604:	b10a      	cbz	r2, 800a60a <_vfiprintf_r+0x86>
 800a606:	2a25      	cmp	r2, #37	@ 0x25
 800a608:	d1f9      	bne.n	800a5fe <_vfiprintf_r+0x7a>
 800a60a:	ebba 0b04 	subs.w	fp, sl, r4
 800a60e:	d00b      	beq.n	800a628 <_vfiprintf_r+0xa4>
 800a610:	465b      	mov	r3, fp
 800a612:	4622      	mov	r2, r4
 800a614:	4629      	mov	r1, r5
 800a616:	4630      	mov	r0, r6
 800a618:	f7ff ffa2 	bl	800a560 <__sfputs_r>
 800a61c:	3001      	adds	r0, #1
 800a61e:	f000 80a7 	beq.w	800a770 <_vfiprintf_r+0x1ec>
 800a622:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a624:	445a      	add	r2, fp
 800a626:	9209      	str	r2, [sp, #36]	@ 0x24
 800a628:	f89a 3000 	ldrb.w	r3, [sl]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f000 809f 	beq.w	800a770 <_vfiprintf_r+0x1ec>
 800a632:	2300      	movs	r3, #0
 800a634:	f04f 32ff 	mov.w	r2, #4294967295
 800a638:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a63c:	f10a 0a01 	add.w	sl, sl, #1
 800a640:	9304      	str	r3, [sp, #16]
 800a642:	9307      	str	r3, [sp, #28]
 800a644:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a648:	931a      	str	r3, [sp, #104]	@ 0x68
 800a64a:	4654      	mov	r4, sl
 800a64c:	2205      	movs	r2, #5
 800a64e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a652:	4853      	ldr	r0, [pc, #332]	@ (800a7a0 <_vfiprintf_r+0x21c>)
 800a654:	f7fc fedb 	bl	800740e <memchr>
 800a658:	9a04      	ldr	r2, [sp, #16]
 800a65a:	b9d8      	cbnz	r0, 800a694 <_vfiprintf_r+0x110>
 800a65c:	06d1      	lsls	r1, r2, #27
 800a65e:	bf44      	itt	mi
 800a660:	2320      	movmi	r3, #32
 800a662:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a666:	0713      	lsls	r3, r2, #28
 800a668:	bf44      	itt	mi
 800a66a:	232b      	movmi	r3, #43	@ 0x2b
 800a66c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a670:	f89a 3000 	ldrb.w	r3, [sl]
 800a674:	2b2a      	cmp	r3, #42	@ 0x2a
 800a676:	d015      	beq.n	800a6a4 <_vfiprintf_r+0x120>
 800a678:	4654      	mov	r4, sl
 800a67a:	2000      	movs	r0, #0
 800a67c:	f04f 0c0a 	mov.w	ip, #10
 800a680:	9a07      	ldr	r2, [sp, #28]
 800a682:	4621      	mov	r1, r4
 800a684:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a688:	3b30      	subs	r3, #48	@ 0x30
 800a68a:	2b09      	cmp	r3, #9
 800a68c:	d94b      	bls.n	800a726 <_vfiprintf_r+0x1a2>
 800a68e:	b1b0      	cbz	r0, 800a6be <_vfiprintf_r+0x13a>
 800a690:	9207      	str	r2, [sp, #28]
 800a692:	e014      	b.n	800a6be <_vfiprintf_r+0x13a>
 800a694:	eba0 0308 	sub.w	r3, r0, r8
 800a698:	fa09 f303 	lsl.w	r3, r9, r3
 800a69c:	4313      	orrs	r3, r2
 800a69e:	46a2      	mov	sl, r4
 800a6a0:	9304      	str	r3, [sp, #16]
 800a6a2:	e7d2      	b.n	800a64a <_vfiprintf_r+0xc6>
 800a6a4:	9b03      	ldr	r3, [sp, #12]
 800a6a6:	1d19      	adds	r1, r3, #4
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	9103      	str	r1, [sp, #12]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	bfbb      	ittet	lt
 800a6b0:	425b      	neglt	r3, r3
 800a6b2:	f042 0202 	orrlt.w	r2, r2, #2
 800a6b6:	9307      	strge	r3, [sp, #28]
 800a6b8:	9307      	strlt	r3, [sp, #28]
 800a6ba:	bfb8      	it	lt
 800a6bc:	9204      	strlt	r2, [sp, #16]
 800a6be:	7823      	ldrb	r3, [r4, #0]
 800a6c0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a6c2:	d10a      	bne.n	800a6da <_vfiprintf_r+0x156>
 800a6c4:	7863      	ldrb	r3, [r4, #1]
 800a6c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6c8:	d132      	bne.n	800a730 <_vfiprintf_r+0x1ac>
 800a6ca:	9b03      	ldr	r3, [sp, #12]
 800a6cc:	3402      	adds	r4, #2
 800a6ce:	1d1a      	adds	r2, r3, #4
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	9203      	str	r2, [sp, #12]
 800a6d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a6d8:	9305      	str	r3, [sp, #20]
 800a6da:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a7a4 <_vfiprintf_r+0x220>
 800a6de:	2203      	movs	r2, #3
 800a6e0:	4650      	mov	r0, sl
 800a6e2:	7821      	ldrb	r1, [r4, #0]
 800a6e4:	f7fc fe93 	bl	800740e <memchr>
 800a6e8:	b138      	cbz	r0, 800a6fa <_vfiprintf_r+0x176>
 800a6ea:	2240      	movs	r2, #64	@ 0x40
 800a6ec:	9b04      	ldr	r3, [sp, #16]
 800a6ee:	eba0 000a 	sub.w	r0, r0, sl
 800a6f2:	4082      	lsls	r2, r0
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	3401      	adds	r4, #1
 800a6f8:	9304      	str	r3, [sp, #16]
 800a6fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6fe:	2206      	movs	r2, #6
 800a700:	4829      	ldr	r0, [pc, #164]	@ (800a7a8 <_vfiprintf_r+0x224>)
 800a702:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a706:	f7fc fe82 	bl	800740e <memchr>
 800a70a:	2800      	cmp	r0, #0
 800a70c:	d03f      	beq.n	800a78e <_vfiprintf_r+0x20a>
 800a70e:	4b27      	ldr	r3, [pc, #156]	@ (800a7ac <_vfiprintf_r+0x228>)
 800a710:	bb1b      	cbnz	r3, 800a75a <_vfiprintf_r+0x1d6>
 800a712:	9b03      	ldr	r3, [sp, #12]
 800a714:	3307      	adds	r3, #7
 800a716:	f023 0307 	bic.w	r3, r3, #7
 800a71a:	3308      	adds	r3, #8
 800a71c:	9303      	str	r3, [sp, #12]
 800a71e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a720:	443b      	add	r3, r7
 800a722:	9309      	str	r3, [sp, #36]	@ 0x24
 800a724:	e76a      	b.n	800a5fc <_vfiprintf_r+0x78>
 800a726:	460c      	mov	r4, r1
 800a728:	2001      	movs	r0, #1
 800a72a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a72e:	e7a8      	b.n	800a682 <_vfiprintf_r+0xfe>
 800a730:	2300      	movs	r3, #0
 800a732:	f04f 0c0a 	mov.w	ip, #10
 800a736:	4619      	mov	r1, r3
 800a738:	3401      	adds	r4, #1
 800a73a:	9305      	str	r3, [sp, #20]
 800a73c:	4620      	mov	r0, r4
 800a73e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a742:	3a30      	subs	r2, #48	@ 0x30
 800a744:	2a09      	cmp	r2, #9
 800a746:	d903      	bls.n	800a750 <_vfiprintf_r+0x1cc>
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d0c6      	beq.n	800a6da <_vfiprintf_r+0x156>
 800a74c:	9105      	str	r1, [sp, #20]
 800a74e:	e7c4      	b.n	800a6da <_vfiprintf_r+0x156>
 800a750:	4604      	mov	r4, r0
 800a752:	2301      	movs	r3, #1
 800a754:	fb0c 2101 	mla	r1, ip, r1, r2
 800a758:	e7f0      	b.n	800a73c <_vfiprintf_r+0x1b8>
 800a75a:	ab03      	add	r3, sp, #12
 800a75c:	9300      	str	r3, [sp, #0]
 800a75e:	462a      	mov	r2, r5
 800a760:	4630      	mov	r0, r6
 800a762:	4b13      	ldr	r3, [pc, #76]	@ (800a7b0 <_vfiprintf_r+0x22c>)
 800a764:	a904      	add	r1, sp, #16
 800a766:	f7fb fe91 	bl	800648c <_printf_float>
 800a76a:	4607      	mov	r7, r0
 800a76c:	1c78      	adds	r0, r7, #1
 800a76e:	d1d6      	bne.n	800a71e <_vfiprintf_r+0x19a>
 800a770:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a772:	07d9      	lsls	r1, r3, #31
 800a774:	d405      	bmi.n	800a782 <_vfiprintf_r+0x1fe>
 800a776:	89ab      	ldrh	r3, [r5, #12]
 800a778:	059a      	lsls	r2, r3, #22
 800a77a:	d402      	bmi.n	800a782 <_vfiprintf_r+0x1fe>
 800a77c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a77e:	f7fc fe45 	bl	800740c <__retarget_lock_release_recursive>
 800a782:	89ab      	ldrh	r3, [r5, #12]
 800a784:	065b      	lsls	r3, r3, #25
 800a786:	f53f af1f 	bmi.w	800a5c8 <_vfiprintf_r+0x44>
 800a78a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a78c:	e71e      	b.n	800a5cc <_vfiprintf_r+0x48>
 800a78e:	ab03      	add	r3, sp, #12
 800a790:	9300      	str	r3, [sp, #0]
 800a792:	462a      	mov	r2, r5
 800a794:	4630      	mov	r0, r6
 800a796:	4b06      	ldr	r3, [pc, #24]	@ (800a7b0 <_vfiprintf_r+0x22c>)
 800a798:	a904      	add	r1, sp, #16
 800a79a:	f7fc f915 	bl	80069c8 <_printf_i>
 800a79e:	e7e4      	b.n	800a76a <_vfiprintf_r+0x1e6>
 800a7a0:	0800d6c9 	.word	0x0800d6c9
 800a7a4:	0800d6cf 	.word	0x0800d6cf
 800a7a8:	0800d6d3 	.word	0x0800d6d3
 800a7ac:	0800648d 	.word	0x0800648d
 800a7b0:	0800a561 	.word	0x0800a561

0800a7b4 <__swbuf_r>:
 800a7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b6:	460e      	mov	r6, r1
 800a7b8:	4614      	mov	r4, r2
 800a7ba:	4605      	mov	r5, r0
 800a7bc:	b118      	cbz	r0, 800a7c6 <__swbuf_r+0x12>
 800a7be:	6a03      	ldr	r3, [r0, #32]
 800a7c0:	b90b      	cbnz	r3, 800a7c6 <__swbuf_r+0x12>
 800a7c2:	f7fc fcbd 	bl	8007140 <__sinit>
 800a7c6:	69a3      	ldr	r3, [r4, #24]
 800a7c8:	60a3      	str	r3, [r4, #8]
 800a7ca:	89a3      	ldrh	r3, [r4, #12]
 800a7cc:	071a      	lsls	r2, r3, #28
 800a7ce:	d501      	bpl.n	800a7d4 <__swbuf_r+0x20>
 800a7d0:	6923      	ldr	r3, [r4, #16]
 800a7d2:	b943      	cbnz	r3, 800a7e6 <__swbuf_r+0x32>
 800a7d4:	4621      	mov	r1, r4
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	f000 f82a 	bl	800a830 <__swsetup_r>
 800a7dc:	b118      	cbz	r0, 800a7e6 <__swbuf_r+0x32>
 800a7de:	f04f 37ff 	mov.w	r7, #4294967295
 800a7e2:	4638      	mov	r0, r7
 800a7e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7e6:	6823      	ldr	r3, [r4, #0]
 800a7e8:	6922      	ldr	r2, [r4, #16]
 800a7ea:	b2f6      	uxtb	r6, r6
 800a7ec:	1a98      	subs	r0, r3, r2
 800a7ee:	6963      	ldr	r3, [r4, #20]
 800a7f0:	4637      	mov	r7, r6
 800a7f2:	4283      	cmp	r3, r0
 800a7f4:	dc05      	bgt.n	800a802 <__swbuf_r+0x4e>
 800a7f6:	4621      	mov	r1, r4
 800a7f8:	4628      	mov	r0, r5
 800a7fa:	f7ff fa73 	bl	8009ce4 <_fflush_r>
 800a7fe:	2800      	cmp	r0, #0
 800a800:	d1ed      	bne.n	800a7de <__swbuf_r+0x2a>
 800a802:	68a3      	ldr	r3, [r4, #8]
 800a804:	3b01      	subs	r3, #1
 800a806:	60a3      	str	r3, [r4, #8]
 800a808:	6823      	ldr	r3, [r4, #0]
 800a80a:	1c5a      	adds	r2, r3, #1
 800a80c:	6022      	str	r2, [r4, #0]
 800a80e:	701e      	strb	r6, [r3, #0]
 800a810:	6962      	ldr	r2, [r4, #20]
 800a812:	1c43      	adds	r3, r0, #1
 800a814:	429a      	cmp	r2, r3
 800a816:	d004      	beq.n	800a822 <__swbuf_r+0x6e>
 800a818:	89a3      	ldrh	r3, [r4, #12]
 800a81a:	07db      	lsls	r3, r3, #31
 800a81c:	d5e1      	bpl.n	800a7e2 <__swbuf_r+0x2e>
 800a81e:	2e0a      	cmp	r6, #10
 800a820:	d1df      	bne.n	800a7e2 <__swbuf_r+0x2e>
 800a822:	4621      	mov	r1, r4
 800a824:	4628      	mov	r0, r5
 800a826:	f7ff fa5d 	bl	8009ce4 <_fflush_r>
 800a82a:	2800      	cmp	r0, #0
 800a82c:	d0d9      	beq.n	800a7e2 <__swbuf_r+0x2e>
 800a82e:	e7d6      	b.n	800a7de <__swbuf_r+0x2a>

0800a830 <__swsetup_r>:
 800a830:	b538      	push	{r3, r4, r5, lr}
 800a832:	4b29      	ldr	r3, [pc, #164]	@ (800a8d8 <__swsetup_r+0xa8>)
 800a834:	4605      	mov	r5, r0
 800a836:	6818      	ldr	r0, [r3, #0]
 800a838:	460c      	mov	r4, r1
 800a83a:	b118      	cbz	r0, 800a844 <__swsetup_r+0x14>
 800a83c:	6a03      	ldr	r3, [r0, #32]
 800a83e:	b90b      	cbnz	r3, 800a844 <__swsetup_r+0x14>
 800a840:	f7fc fc7e 	bl	8007140 <__sinit>
 800a844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a848:	0719      	lsls	r1, r3, #28
 800a84a:	d422      	bmi.n	800a892 <__swsetup_r+0x62>
 800a84c:	06da      	lsls	r2, r3, #27
 800a84e:	d407      	bmi.n	800a860 <__swsetup_r+0x30>
 800a850:	2209      	movs	r2, #9
 800a852:	602a      	str	r2, [r5, #0]
 800a854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a858:	f04f 30ff 	mov.w	r0, #4294967295
 800a85c:	81a3      	strh	r3, [r4, #12]
 800a85e:	e033      	b.n	800a8c8 <__swsetup_r+0x98>
 800a860:	0758      	lsls	r0, r3, #29
 800a862:	d512      	bpl.n	800a88a <__swsetup_r+0x5a>
 800a864:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a866:	b141      	cbz	r1, 800a87a <__swsetup_r+0x4a>
 800a868:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a86c:	4299      	cmp	r1, r3
 800a86e:	d002      	beq.n	800a876 <__swsetup_r+0x46>
 800a870:	4628      	mov	r0, r5
 800a872:	f7fd fc3d 	bl	80080f0 <_free_r>
 800a876:	2300      	movs	r3, #0
 800a878:	6363      	str	r3, [r4, #52]	@ 0x34
 800a87a:	89a3      	ldrh	r3, [r4, #12]
 800a87c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a880:	81a3      	strh	r3, [r4, #12]
 800a882:	2300      	movs	r3, #0
 800a884:	6063      	str	r3, [r4, #4]
 800a886:	6923      	ldr	r3, [r4, #16]
 800a888:	6023      	str	r3, [r4, #0]
 800a88a:	89a3      	ldrh	r3, [r4, #12]
 800a88c:	f043 0308 	orr.w	r3, r3, #8
 800a890:	81a3      	strh	r3, [r4, #12]
 800a892:	6923      	ldr	r3, [r4, #16]
 800a894:	b94b      	cbnz	r3, 800a8aa <__swsetup_r+0x7a>
 800a896:	89a3      	ldrh	r3, [r4, #12]
 800a898:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a89c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8a0:	d003      	beq.n	800a8aa <__swsetup_r+0x7a>
 800a8a2:	4621      	mov	r1, r4
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	f000 f882 	bl	800a9ae <__smakebuf_r>
 800a8aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8ae:	f013 0201 	ands.w	r2, r3, #1
 800a8b2:	d00a      	beq.n	800a8ca <__swsetup_r+0x9a>
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	60a2      	str	r2, [r4, #8]
 800a8b8:	6962      	ldr	r2, [r4, #20]
 800a8ba:	4252      	negs	r2, r2
 800a8bc:	61a2      	str	r2, [r4, #24]
 800a8be:	6922      	ldr	r2, [r4, #16]
 800a8c0:	b942      	cbnz	r2, 800a8d4 <__swsetup_r+0xa4>
 800a8c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a8c6:	d1c5      	bne.n	800a854 <__swsetup_r+0x24>
 800a8c8:	bd38      	pop	{r3, r4, r5, pc}
 800a8ca:	0799      	lsls	r1, r3, #30
 800a8cc:	bf58      	it	pl
 800a8ce:	6962      	ldrpl	r2, [r4, #20]
 800a8d0:	60a2      	str	r2, [r4, #8]
 800a8d2:	e7f4      	b.n	800a8be <__swsetup_r+0x8e>
 800a8d4:	2000      	movs	r0, #0
 800a8d6:	e7f7      	b.n	800a8c8 <__swsetup_r+0x98>
 800a8d8:	20000020 	.word	0x20000020

0800a8dc <_raise_r>:
 800a8dc:	291f      	cmp	r1, #31
 800a8de:	b538      	push	{r3, r4, r5, lr}
 800a8e0:	4605      	mov	r5, r0
 800a8e2:	460c      	mov	r4, r1
 800a8e4:	d904      	bls.n	800a8f0 <_raise_r+0x14>
 800a8e6:	2316      	movs	r3, #22
 800a8e8:	6003      	str	r3, [r0, #0]
 800a8ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ee:	bd38      	pop	{r3, r4, r5, pc}
 800a8f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a8f2:	b112      	cbz	r2, 800a8fa <_raise_r+0x1e>
 800a8f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8f8:	b94b      	cbnz	r3, 800a90e <_raise_r+0x32>
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	f000 f830 	bl	800a960 <_getpid_r>
 800a900:	4622      	mov	r2, r4
 800a902:	4601      	mov	r1, r0
 800a904:	4628      	mov	r0, r5
 800a906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a90a:	f000 b817 	b.w	800a93c <_kill_r>
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d00a      	beq.n	800a928 <_raise_r+0x4c>
 800a912:	1c59      	adds	r1, r3, #1
 800a914:	d103      	bne.n	800a91e <_raise_r+0x42>
 800a916:	2316      	movs	r3, #22
 800a918:	6003      	str	r3, [r0, #0]
 800a91a:	2001      	movs	r0, #1
 800a91c:	e7e7      	b.n	800a8ee <_raise_r+0x12>
 800a91e:	2100      	movs	r1, #0
 800a920:	4620      	mov	r0, r4
 800a922:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a926:	4798      	blx	r3
 800a928:	2000      	movs	r0, #0
 800a92a:	e7e0      	b.n	800a8ee <_raise_r+0x12>

0800a92c <raise>:
 800a92c:	4b02      	ldr	r3, [pc, #8]	@ (800a938 <raise+0xc>)
 800a92e:	4601      	mov	r1, r0
 800a930:	6818      	ldr	r0, [r3, #0]
 800a932:	f7ff bfd3 	b.w	800a8dc <_raise_r>
 800a936:	bf00      	nop
 800a938:	20000020 	.word	0x20000020

0800a93c <_kill_r>:
 800a93c:	b538      	push	{r3, r4, r5, lr}
 800a93e:	2300      	movs	r3, #0
 800a940:	4d06      	ldr	r5, [pc, #24]	@ (800a95c <_kill_r+0x20>)
 800a942:	4604      	mov	r4, r0
 800a944:	4608      	mov	r0, r1
 800a946:	4611      	mov	r1, r2
 800a948:	602b      	str	r3, [r5, #0]
 800a94a:	f7f8 fa02 	bl	8002d52 <_kill>
 800a94e:	1c43      	adds	r3, r0, #1
 800a950:	d102      	bne.n	800a958 <_kill_r+0x1c>
 800a952:	682b      	ldr	r3, [r5, #0]
 800a954:	b103      	cbz	r3, 800a958 <_kill_r+0x1c>
 800a956:	6023      	str	r3, [r4, #0]
 800a958:	bd38      	pop	{r3, r4, r5, pc}
 800a95a:	bf00      	nop
 800a95c:	200008b8 	.word	0x200008b8

0800a960 <_getpid_r>:
 800a960:	f7f8 b9f0 	b.w	8002d44 <_getpid>

0800a964 <__swhatbuf_r>:
 800a964:	b570      	push	{r4, r5, r6, lr}
 800a966:	460c      	mov	r4, r1
 800a968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a96c:	4615      	mov	r5, r2
 800a96e:	2900      	cmp	r1, #0
 800a970:	461e      	mov	r6, r3
 800a972:	b096      	sub	sp, #88	@ 0x58
 800a974:	da0c      	bge.n	800a990 <__swhatbuf_r+0x2c>
 800a976:	89a3      	ldrh	r3, [r4, #12]
 800a978:	2100      	movs	r1, #0
 800a97a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a97e:	bf14      	ite	ne
 800a980:	2340      	movne	r3, #64	@ 0x40
 800a982:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a986:	2000      	movs	r0, #0
 800a988:	6031      	str	r1, [r6, #0]
 800a98a:	602b      	str	r3, [r5, #0]
 800a98c:	b016      	add	sp, #88	@ 0x58
 800a98e:	bd70      	pop	{r4, r5, r6, pc}
 800a990:	466a      	mov	r2, sp
 800a992:	f000 f849 	bl	800aa28 <_fstat_r>
 800a996:	2800      	cmp	r0, #0
 800a998:	dbed      	blt.n	800a976 <__swhatbuf_r+0x12>
 800a99a:	9901      	ldr	r1, [sp, #4]
 800a99c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a9a0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a9a4:	4259      	negs	r1, r3
 800a9a6:	4159      	adcs	r1, r3
 800a9a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9ac:	e7eb      	b.n	800a986 <__swhatbuf_r+0x22>

0800a9ae <__smakebuf_r>:
 800a9ae:	898b      	ldrh	r3, [r1, #12]
 800a9b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9b2:	079d      	lsls	r5, r3, #30
 800a9b4:	4606      	mov	r6, r0
 800a9b6:	460c      	mov	r4, r1
 800a9b8:	d507      	bpl.n	800a9ca <__smakebuf_r+0x1c>
 800a9ba:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a9be:	6023      	str	r3, [r4, #0]
 800a9c0:	6123      	str	r3, [r4, #16]
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	6163      	str	r3, [r4, #20]
 800a9c6:	b003      	add	sp, #12
 800a9c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9ca:	466a      	mov	r2, sp
 800a9cc:	ab01      	add	r3, sp, #4
 800a9ce:	f7ff ffc9 	bl	800a964 <__swhatbuf_r>
 800a9d2:	9f00      	ldr	r7, [sp, #0]
 800a9d4:	4605      	mov	r5, r0
 800a9d6:	4639      	mov	r1, r7
 800a9d8:	4630      	mov	r0, r6
 800a9da:	f7fd fbfb 	bl	80081d4 <_malloc_r>
 800a9de:	b948      	cbnz	r0, 800a9f4 <__smakebuf_r+0x46>
 800a9e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9e4:	059a      	lsls	r2, r3, #22
 800a9e6:	d4ee      	bmi.n	800a9c6 <__smakebuf_r+0x18>
 800a9e8:	f023 0303 	bic.w	r3, r3, #3
 800a9ec:	f043 0302 	orr.w	r3, r3, #2
 800a9f0:	81a3      	strh	r3, [r4, #12]
 800a9f2:	e7e2      	b.n	800a9ba <__smakebuf_r+0xc>
 800a9f4:	89a3      	ldrh	r3, [r4, #12]
 800a9f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a9fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9fe:	81a3      	strh	r3, [r4, #12]
 800aa00:	9b01      	ldr	r3, [sp, #4]
 800aa02:	6020      	str	r0, [r4, #0]
 800aa04:	b15b      	cbz	r3, 800aa1e <__smakebuf_r+0x70>
 800aa06:	4630      	mov	r0, r6
 800aa08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa0c:	f000 f81e 	bl	800aa4c <_isatty_r>
 800aa10:	b128      	cbz	r0, 800aa1e <__smakebuf_r+0x70>
 800aa12:	89a3      	ldrh	r3, [r4, #12]
 800aa14:	f023 0303 	bic.w	r3, r3, #3
 800aa18:	f043 0301 	orr.w	r3, r3, #1
 800aa1c:	81a3      	strh	r3, [r4, #12]
 800aa1e:	89a3      	ldrh	r3, [r4, #12]
 800aa20:	431d      	orrs	r5, r3
 800aa22:	81a5      	strh	r5, [r4, #12]
 800aa24:	e7cf      	b.n	800a9c6 <__smakebuf_r+0x18>
	...

0800aa28 <_fstat_r>:
 800aa28:	b538      	push	{r3, r4, r5, lr}
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	4d06      	ldr	r5, [pc, #24]	@ (800aa48 <_fstat_r+0x20>)
 800aa2e:	4604      	mov	r4, r0
 800aa30:	4608      	mov	r0, r1
 800aa32:	4611      	mov	r1, r2
 800aa34:	602b      	str	r3, [r5, #0]
 800aa36:	f7f8 f9eb 	bl	8002e10 <_fstat>
 800aa3a:	1c43      	adds	r3, r0, #1
 800aa3c:	d102      	bne.n	800aa44 <_fstat_r+0x1c>
 800aa3e:	682b      	ldr	r3, [r5, #0]
 800aa40:	b103      	cbz	r3, 800aa44 <_fstat_r+0x1c>
 800aa42:	6023      	str	r3, [r4, #0]
 800aa44:	bd38      	pop	{r3, r4, r5, pc}
 800aa46:	bf00      	nop
 800aa48:	200008b8 	.word	0x200008b8

0800aa4c <_isatty_r>:
 800aa4c:	b538      	push	{r3, r4, r5, lr}
 800aa4e:	2300      	movs	r3, #0
 800aa50:	4d05      	ldr	r5, [pc, #20]	@ (800aa68 <_isatty_r+0x1c>)
 800aa52:	4604      	mov	r4, r0
 800aa54:	4608      	mov	r0, r1
 800aa56:	602b      	str	r3, [r5, #0]
 800aa58:	f7f8 f9e9 	bl	8002e2e <_isatty>
 800aa5c:	1c43      	adds	r3, r0, #1
 800aa5e:	d102      	bne.n	800aa66 <_isatty_r+0x1a>
 800aa60:	682b      	ldr	r3, [r5, #0]
 800aa62:	b103      	cbz	r3, 800aa66 <_isatty_r+0x1a>
 800aa64:	6023      	str	r3, [r4, #0]
 800aa66:	bd38      	pop	{r3, r4, r5, pc}
 800aa68:	200008b8 	.word	0x200008b8

0800aa6c <_init>:
 800aa6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa6e:	bf00      	nop
 800aa70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa72:	bc08      	pop	{r3}
 800aa74:	469e      	mov	lr, r3
 800aa76:	4770      	bx	lr

0800aa78 <_fini>:
 800aa78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa7a:	bf00      	nop
 800aa7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa7e:	bc08      	pop	{r3}
 800aa80:	469e      	mov	lr, r3
 800aa82:	4770      	bx	lr
